{
	"title": "Simd in std::simd - Rust",
	"url": "https://doc.rust-lang.org/stable/std/simd/struct.Simd.html",
	"markdown": "# Simd in std::simd - Rust\n\n```\n#[repr(simd)]pub struct Simd<T, const N: usize>(/* private fields */)\nwhere\n    LaneCount<N>: SupportedLaneCount,\n    T: SimdElement;\n```\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExpand description\n\nA SIMD vector with the shape of `[T; N]` but the operations of `T`.\n\n`Simd<T, N>` supports the operators (+, \\*, etc.) that `T` does in ‚Äúelementwise‚Äù fashion. These take the element at each index from the left-hand side and right-hand side, perform the operation, then return the result in the same index in a vector of equal size. However, `Simd` differs from normal iteration and normal arrays:\n\n-   `Simd<T, N>` executes `N` operations in a single step with no `break`s\n-   `Simd<T, N>` can have an alignment greater than `T`, for better mechanical sympathy\n\nBy always imposing these constraints on `Simd`, it is easier to compile elementwise operations into machine instructions that can themselves be executed in parallel.\n\n```\nlet a: [i32; 4] = [-2, 0, 2, 4];\nlet b = [10, 9, 8, 7];\nlet sum = array::from_fn(|i| a[i] + b[i]);\nlet prod = array::from_fn(|i| a[i] * b[i]);\n\n// `Simd<T, N>` implements `From<[T; N]>`\nlet (v, w) = (Simd::from(a), Simd::from(b));\n// Which means arrays implement `Into<Simd<T, N>>`.\nassert_eq!(v + w, sum.into());\nassert_eq!(v * w, prod.into());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd%7D;%0A++++use+core::array;%0A++++let+a:+%5Bi32;+4%5D+=+%5B-2,+0,+2,+4%5D;%0A++++let+b+=+%5B10,+9,+8,+7%5D;%0A++++let+sum+=+array::from_fn(%7Ci%7C+a%5Bi%5D+%2B+b%5Bi%5D);%0A++++let+prod+=+array::from_fn(%7Ci%7C+a%5Bi%5D+*+b%5Bi%5D);%0A++++%0A++++//+%60Simd%3CT,+N%3E%60+implements+%60From%3C%5BT;+N%5D%3E%60%0A++++let+(v,+w)+=+(Simd::from(a),+Simd::from(b));%0A++++//+Which+means+arrays+implement+%60Into%3CSimd%3CT,+N%3E%3E%60.%0A++++assert_eq!(v+%2B+w,+sum.into());%0A++++assert_eq!(v+*+w,+prod.into());%0A%7D&version=nightly&edition=2021)\n\n`Simd` with integer elements treats operators as wrapping, as if `T` was [`Wrapping<T>`](../num/struct.Wrapping.html \"struct std::num::Wrapping\"). Thus, `Simd` does not implement `wrapping_add`, because that is the default behavior. This means there is no warning on overflows, even in ‚Äúdebug‚Äù builds. For most applications where `Simd` is appropriate, it is ‚Äúnot a bug‚Äù to wrap, and even ‚Äúdebug builds‚Äù are unlikely to tolerate the loss of performance. You may want to consider using explicitly checked arithmetic if such is required. Division by zero on integers still causes a panic, so you may want to consider using `f32` or `f64` if that is unacceptable.\n\n## [¬ß](#layout-1)Layout\n\n`Simd<T, N>` has a layout similar to `[T; N]` (identical ‚Äúshapes‚Äù), with a greater alignment. `[T; N]` is aligned to `T`, but `Simd<T, N>` will have an alignment based on both `T` and `N`. Thus it is sound to [`transmute`](../mem/fn.transmute.html \"fn std::mem::transmute\") `Simd<T, N>` to `[T; N]` and should optimize to ‚Äúzero cost‚Äù, but the reverse transmutation may require a copy the compiler cannot simply elide.\n\n## [¬ß](#abi-features)ABI ‚ÄúFeatures‚Äù\n\nDue to Rust‚Äôs safety guarantees, `Simd<T, N>` is currently passed and returned via memory, not SIMD registers, except as an optimization. Using `#[inline]` on functions that accept `Simd<T, N>` or return it is recommended, at the cost of code generation time, as inlining SIMD-using functions can omit a large function prolog or epilog and thus improve both speed and code size. The need for this may be corrected in the future.\n\nUsing `#[inline(always)]` still requires additional care.\n\n## [¬ß](#safe-simd-with-unsafe-rust)Safe SIMD with Unsafe Rust\n\nOperations with `Simd` are typically safe, but there are many reasons to want to combine SIMD with `unsafe` code. Care must be taken to respect differences between `Simd` and other types it may be transformed into or derived from. In particular, the layout of `Simd<T, N>` may be similar to `[T; N]`, and may allow some transmutations, but references to `[T; N]` are not interchangeable with those to `Simd<T, N>`. Thus, when using `unsafe` Rust to read and write `Simd<T, N>` through [raw pointers](../primitive.pointer.html \"primitive pointer\"), it is a good idea to first try with [`read_unaligned`](about:blank/primitive.pointer.html#method.read_unaligned \"method pointer::read_unaligned\") and [`write_unaligned`](about:blank/primitive.pointer.html#method.write_unaligned \"method pointer::write_unaligned\"). This is because:\n\n-   [`read`](about:blank/primitive.pointer.html#method.read \"method pointer::read\") and [`write`](about:blank/primitive.pointer.html#method.write \"method pointer::write\") require full alignment (in this case, `Simd<T, N>`‚Äôs alignment)\n-   `Simd<T, N>` is often read from or written to [`[T]`](../primitive.slice.html \"primitive slice\") and other types aligned to `T`\n-   combining these actions violates the `unsafe` contract and explodes the program into a puff of **undefined behavior**\n-   the compiler can implicitly adjust layouts to make unaligned reads or writes fully aligned if it sees the optimization\n-   most contemporary processors with ‚Äúaligned‚Äù and ‚Äúunaligned‚Äù read and write instructions exhibit no performance difference if the ‚Äúunaligned‚Äù variant is aligned at runtime\n\nLess obligations mean unaligned reads and writes are less likely to make the program unsound, and may be just as fast as stricter alternatives. When trying to guarantee alignment, [`[T]::as_simd`](about:blank/primitive.slice.html#method.as_simd \"method slice::as_simd\") is an option for converting `[T]` to `[Simd<T, N>]`, and allows soundly operating on an aligned SIMD body, but it may cost more time when handling the scalar head and tail. If these are not enough, it is most ideal to design data structures to be already aligned to `mem::align_of::<Simd<T, N>>()` before using `unsafe` Rust to read or write. Other ways to compensate for these facts, like materializing `Simd` to or from an array first, are handled by safe methods like [`Simd::from_array`](about:blank/prelude/struct.Simd.html#method.from_array \"associated function std::simd::prelude::Simd::from_array\") and [`Simd::from_slice`](about:blank/prelude/struct.Simd.html#method.from_slice \"associated function std::simd::prelude::Simd::from_slice\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#181-184)[¬ß](#impl-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#189)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverse the order of the elements in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#212)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRotates the vector such that the first `OFFSET` elements of the slice move to the end while the last `self.len() - OFFSET` elements move to the front. After calling `rotate_elements_left`, the element previously at index `OFFSET` will become the first element in the slice.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#236)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRotates the vector such that the first `self.len() - OFFSET` elements of the vector move to the end while the last `OFFSET` elements move to the front. After calling `rotate_elements_right`, the element previously at index `self.len() - OFFSET` will become the first element in the slice.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#273)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nInterleave two vectors.\n\nThe resulting vectors contain elements taken alternatively from `self` and `other`, first filling the first result, and then the second.\n\nThe reverse of this operation is [`Simd::deinterleave`](about:blank/prelude/struct.Simd.html#method.deinterleave \"method std::simd::prelude::Simd::deinterleave\").\n\n```\nlet a = Simd::from_array([0, 1, 2, 3]);\nlet b = Simd::from_array([4, 5, 6, 7]);\nlet (x, y) = a.interleave(b);\nassert_eq!(x.to_array(), [0, 4, 1, 5]);\nassert_eq!(y.to_array(), [2, 6, 3, 7]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+a+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++let+b+=+Simd::from_array(%5B4,+5,+6,+7%5D);%0A++++let+(x,+y)+=+a.interleave(b);%0A++++assert_eq!(x.to_array(),+%5B0,+4,+1,+5%5D);%0A++++assert_eq!(y.to_array(),+%5B2,+6,+3,+7%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#324)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nDeinterleave two vectors.\n\nThe first result takes every other element of `self` and then `other`, starting with the first element.\n\nThe second result takes every other element of `self` and then `other`, starting with the second element.\n\nThe reverse of this operation is [`Simd::interleave`](about:blank/prelude/struct.Simd.html#method.interleave \"method std::simd::prelude::Simd::interleave\").\n\n```\nlet a = Simd::from_array([0, 4, 1, 5]);\nlet b = Simd::from_array([2, 6, 3, 7]);\nlet (x, y) = a.deinterleave(b);\nassert_eq!(x.to_array(), [0, 1, 2, 3]);\nassert_eq!(y.to_array(), [4, 5, 6, 7]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+a+=+Simd::from_array(%5B0,+4,+1,+5%5D);%0A++++let+b+=+Simd::from_array(%5B2,+6,+3,+7%5D);%0A++++let+(x,+y)+=+a.deinterleave(b);%0A++++assert_eq!(x.to_array(),+%5B0,+1,+2,+3%5D);%0A++++assert_eq!(y.to_array(),+%5B4,+5,+6,+7%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#368-370)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nResize a vector.\n\nIf `M` > `N`, extends the length of a vector, setting the new elements to `value`. If `M` < `N`, truncates the vector to the first `M` elements.\n\n```\nlet x = u32x4::from_array([0, 1, 2, 3]);\nassert_eq!(x.resize::<8>(9).to_array(), [0, 1, 2, 3, 9, 9, 9, 9]);\nassert_eq!(x.resize::<2>(9).to_array(), [0, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+x+=+u32x4::from_array(%5B0,+1,+2,+3%5D);%0A++++assert_eq!(x.resize::%3C8%3E(9).to_array(),+%5B0,+1,+2,+3,+9,+9,+9,+9%5D);%0A++++assert_eq!(x.resize::%3C2%3E(9).to_array(),+%5B0,+1%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html#4-6)[¬ß](#impl-Simd%3Cu8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html#17)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nSwizzle a vector of bytes according to the index vector. Indices within range select the appropriate byte. Indices ‚Äúout of bounds‚Äù instead select 0.\n\nNote that the current implementation is selected during build-time of the standard library, so `cargo build -Zbuild-std` may be necessary to unlock better performance, especially for larger vectors. A planned compiler improvement will enable using `#[target_feature]` instead.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#108-111)[¬ß](#impl-Simd%3CT,+N%3E-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#114)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nNumber of elements in this vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#130)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of elements in this SIMD vector.\n\n##### [¬ß](#examples)Examples\n\n```\nlet v = u32x4::splat(0);\nassert_eq!(v.len(), 4);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+v+=+u32x4::splat(0);%0A++++assert_eq!(v.len(),+4);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#147)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConstructs a new SIMD vector with all elements set to the given value.\n\n##### [¬ß](#examples-1)Examples\n\n```\nlet v = u32x4::splat(8);\nassert_eq!(v.as_array(), &[8, 8, 8, 8]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+v+=+u32x4::splat(8);%0A++++assert_eq!(v.as_array(),+%26%5B8,+8,+8,+8%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#168)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns an array reference containing the entire SIMD vector.\n\n##### [¬ß](#examples-2)Examples\n\n```\nlet v: u64x4 = Simd::from_array([0, 1, 2, 3]);\nassert_eq!(v.as_array(), &[0, 1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+u64x4%7D;%0A++++let+v:+u64x4+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++assert_eq!(v.as_array(),+%26%5B0,+1,+2,+3%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#180)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns a mutable array reference containing the entire SIMD vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#232)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts an array to a SIMD vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#245)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts a SIMD vector to an array.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#279)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts a slice to a SIMD vector containing `slice[..N]`.\n\n##### [¬ß](#panics)Panics\n\nPanics if the slice‚Äôs length is less than the vector‚Äôs `Simd::N`. Use `load_or_default` for an alternative that does not panic.\n\n##### [¬ß](#example)Example\n\n```\nlet source = vec![1, 2, 3, 4, 5, 6];\nlet v = u32x4::from_slice(&source);\nassert_eq!(v.as_array(), &[1, 2, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::u32x4;%0A++++let+source+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++let+v+=+u32x4::from_slice(%26source);%0A++++assert_eq!(v.as_array(),+%26%5B1,+2,+3,+4%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#309)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrites a SIMD vector to the first `N` elements of a slice.\n\n##### [¬ß](#panics-1)Panics\n\nPanics if the slice‚Äôs length is less than the vector‚Äôs `Simd::N`.\n\n##### [¬ß](#example-1)Example\n\n```\nlet mut dest = vec![0; 6];\nlet v = u32x4::from_array([1, 2, 3, 4]);\nv.copy_to_slice(&mut dest);\nassert_eq!(&dest, &[1, 2, 3, 4, 0, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+mut+dest+=+vec!%5B0;+6%5D;%0A++++let+v+=+u32x4::from_array(%5B1,+2,+3,+4%5D);%0A++++v.copy_to_slice(%26mut+dest);%0A++++assert_eq!(%26dest,+%26%5B1,+2,+3,+4,+0,+0%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#335-337)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Elements are read so long as they‚Äôre in-bounds for the `slice`. Otherwise, the default value for the element type is returned.\n\n##### [¬ß](#examples-3)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11];\n\nlet result = Simd::<i32, 4>::load_or_default(&vec);\nassert_eq!(result, Simd::from_array([10, 11, 0, 0]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11%5D;%0A++++%0A++++let+result+=+Simd::%3Ci32,+4%3E::load_or_default(%26vec);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+0,+0%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#359)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Elements are read so long as they‚Äôre in-bounds for the `slice`. Otherwise, the corresponding value from `or` is passed through.\n\n##### [¬ß](#examples-4)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11];\nlet or = Simd::from_array([-5, -4, -3, -2]);\n\nlet result = Simd::load_or(&vec, or);\nassert_eq!(result, Simd::from_array([10, 11, -3, -2]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11%5D;%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_or(%26vec,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+-2%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#384-386)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Each element is read from memory if its corresponding element in `enable` is `true`.\n\nWhen the element is disabled or out of bounds for the slice, that memory location is not accessed and the corresponding value from `or` is passed through.\n\n##### [¬ß](#examples-5)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet enable = Mask::from_array([true, true, false, true]);\nlet or = Simd::from_array([-5, -4, -3, -2]);\n\nlet result = Simd::load_select(&vec, enable, or);\nassert_eq!(result, Simd::from_array([10, 11, -3, 13]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_select(%26vec,+enable,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+13%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#412-416)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Each element is read from memory if its corresponding element in `enable` is `true`.\n\nWhen the element is disabled or out of bounds for the slice, that memory location is not accessed and the corresponding value from `or` is passed through.\n\n##### [¬ß](#examples-6)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet enable = Mask::from_array([true, true, false, true]);\nlet or = Simd::from_array([-5, -4, -3, -2]);\n\nlet result = Simd::load_select(&vec, enable, or);\nassert_eq!(result, Simd::from_array([10, 11, -3, 13]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_select(%26vec,+enable,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+13%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#430-434)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Each element is read from memory if its corresponding element in `enable` is `true`.\n\nWhen the element is disabled, that memory location is not accessed and the corresponding value from `or` is passed through.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#447-451)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements starting at `ptr`. Each element is read from memory if its corresponding element in `enable` is `true`.\n\nWhen the element is disabled, that memory location is not accessed and the corresponding value from `or` is passed through.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#472)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads from potentially discontiguous indices in `slice` to construct a SIMD vector. If an index is out-of-bounds, the element is instead selected from the `or` vector.\n\n##### [¬ß](#examples-7)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 5]);  // Note the index that is out-of-bounds\nlet alt = Simd::from_array([-5, -4, -3, -2]);\n\nlet result = Simd::gather_or(&vec, idxs, alt);\nassert_eq!(result, Simd::from_array([-5, 13, 10, 15]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);++//+Note+the+index+that+is+out-of-bounds%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::gather_or(%26vec,+idxs,+alt);%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+15%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#491-493)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads from indices in `slice` to construct a SIMD vector. If an index is out-of-bounds, the element is set to the default given by `T: Default`.\n\n##### [¬ß](#examples-8)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 5]);  // Note the index that is out-of-bounds\n\nlet result = Simd::gather_or_default(&vec, idxs);\nassert_eq!(result, Simd::from_array([0, 13, 10, 15]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);++//+Note+the+index+that+is+out-of-bounds%0A++++%0A++++let+result+=+Simd::gather_or_default(%26vec,+idxs);%0A++++assert_eq!(result,+Simd::from_array(%5B0,+13,+10,+15%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#516-521)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads from indices in `slice` to construct a SIMD vector. The mask `enable`s all `true` indices and disables all `false` indices. If an index is disabled or is out-of-bounds, the element is selected from the `or` vector.\n\n##### [¬ß](#examples-9)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 5]); // Includes an out-of-bounds index\nlet alt = Simd::from_array([-5, -4, -3, -2]);\nlet enable = Mask::from_array([true, true, true, false]); // Includes a masked element\n\nlet result = Simd::gather_select(&vec, enable, idxs, alt);\nassert_eq!(result, Simd::from_array([-5, 13, 10, -2]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);+//+Includes+an+out-of-bounds+index%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++%0A++++let+result+=+Simd::gather_select(%26vec,+enable,+idxs,+alt);%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+-2%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#557-562)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads from indices in `slice` to construct a SIMD vector. The mask `enable`s all `true` indices and disables all `false` indices. If an index is disabled, the element is selected from the `or` vector.\n\n##### [¬ß](#safety)Safety\n\nCalling this function with an `enable`d out-of-bounds index is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting value is not used.\n\n##### [¬ß](#examples-10)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 5]); // Includes an out-of-bounds index\nlet alt = Simd::from_array([-5, -4, -3, -2]);\nlet enable = Mask::from_array([true, true, true, false]); // Includes a masked element\n// If this mask was used to gather, it would be unsound. Let's fix that.\nlet enable = enable & idxs.simd_lt(Simd::splat(vec.len()));\n\n// The out-of-bounds index has been masked, so it's safe to gather now.\nlet result = unsafe { Simd::gather_select_unchecked(&vec, enable, idxs, alt) };\nassert_eq!(result, Simd::from_array([-5, 13, 10, -2]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+cmp::SimdPartialOrd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);+//+Includes+an+out-of-bounds+index%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++//+If+this+mask+was+used+to+gather,+it+would+be+unsound.+Let%27s+fix+that.%0A++++let+enable+=+enable+%26+idxs.simd_lt(Simd::splat(vec.len()));%0A++++%0A++++//+The+out-of-bounds+index+has+been+masked,+so+it%27s+safe+to+gather+now.%0A++++let+result+=+unsafe+%7B+Simd::gather_select_unchecked(%26vec,+enable,+idxs,+alt)+%7D;%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+-2%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#591-593)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRead elementwise from pointers into a SIMD vector.\n\n##### [¬ß](#safety-1)Safety\n\nEach read must satisfy the same conditions as [`core::ptr::read`](../ptr/fn.read.html \"fn std::ptr::read\").\n\n##### [¬ß](#example-2)Example\n\n```\nlet values = [6, 2, 4, 9];\nlet offsets = Simd::from_array([1, 0, 0, 3]);\nlet source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\nlet gathered = unsafe { Simd::gather_ptr(source) };\nassert_eq!(gathered, Simd::from_array([2, 6, 6, 9]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+values+=+%5B6,+2,+4,+9%5D;%0A++++let+offsets+=+Simd::from_array(%5B1,+0,+0,+3%5D);%0A++++let+source+=+Simd::splat(values.as_ptr()).wrapping_add(offsets);%0A++++let+gathered+=+unsafe+%7B+Simd::gather_ptr(source)+%7D;%0A++++assert_eq!(gathered,+Simd::from_array(%5B2,+6,+6,+9%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#625-629)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally read elementwise from pointers into a SIMD vector. The mask `enable`s all `true` pointers and disables all `false` pointers. If a pointer is disabled, the element is selected from the `or` vector, and no read is performed.\n\n##### [¬ß](#safety-2)Safety\n\nEnabled elements must satisfy the same conditions as [`core::ptr::read`](../ptr/fn.read.html \"fn std::ptr::read\").\n\n##### [¬ß](#example-3)Example\n\n```\nlet values = [6, 2, 4, 9];\nlet enable = Mask::from_array([true, true, false, true]);\nlet offsets = Simd::from_array([1, 0, 0, 3]);\nlet source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\nlet gathered = unsafe { Simd::gather_select_ptr(source, enable, Simd::splat(0)) };\nassert_eq!(gathered, Simd::from_array([2, 6, 0, 9]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+values+=+%5B6,+2,+4,+9%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+offsets+=+Simd::from_array(%5B1,+0,+0,+3%5D);%0A++++let+source+=+Simd::splat(values.as_ptr()).wrapping_add(offsets);%0A++++let+gathered+=+unsafe+%7B+Simd::gather_select_ptr(source,+enable,+Simd::splat(0))+%7D;%0A++++assert_eq!(gathered,+Simd::from_array(%5B2,+6,+0,+9%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#653)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally write contiguous elements to `slice`. The `enable` mask controls which elements are written, as long as they‚Äôre in-bounds of the `slice`. If the element is disabled or out of bounds, no memory access to that location is made.\n\n##### [¬ß](#examples-11)Examples\n\n```\nlet mut arr = [0i32; 4];\nlet write = Simd::from_array([-5, -4, -3, -2]);\nlet enable = Mask::from_array([false, true, true, true]);\n\nwrite.store_select(&mut arr[..3], enable);\nassert_eq!(arr, [0, -4, -3, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+arr+=+%5B0i32;+4%5D;%0A++++let+write+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Bfalse,+true,+true,+true%5D);%0A++++%0A++++write.store_select(%26mut+arr%5B..3%5D,+enable);%0A++++assert_eq!(arr,+%5B0,+-4,+-3,+0%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#681-685)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally write contiguous elements to `slice`. The `enable` mask controls which elements are written.\n\n##### [¬ß](#safety-3)Safety\n\nEvery enabled element must be in bounds for the `slice`.\n\n##### [¬ß](#examples-12)Examples\n\n```\nlet mut arr = [0i32; 4];\nlet write = Simd::from_array([-5, -4, -3, -2]);\nlet enable = Mask::from_array([false, true, true, true]);\n\nunsafe { write.store_select_unchecked(&mut arr, enable) };\nassert_eq!(arr, [0, -4, -3, -2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+arr+=+%5B0i32;+4%5D;%0A++++let+write+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Bfalse,+true,+true,+true%5D);%0A++++%0A++++unsafe+%7B+write.store_select_unchecked(%26mut+arr,+enable)+%7D;%0A++++assert_eq!(arr,+%5B0,+-4,+-3,+-2%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#700)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally write contiguous elements starting from `ptr`. The `enable` mask controls which elements are written. When disabled, the memory location corresponding to that element is not accessed.\n\n##### [¬ß](#safety-4)Safety\n\nMemory addresses for element are calculated [`pointer::wrapping_offset`](about:blank/primitive.pointer.html#method.wrapping_offset \"method pointer::wrapping_offset\") and each enabled element must satisfy the same conditions as [`core::ptr::write`](../ptr/fn.write.html \"fn std::ptr::write\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#722)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrites the values in a SIMD vector to potentially discontiguous indices in `slice`. If an index is out-of-bounds, the write is suppressed without panicking. If two elements in the scattered vector would write to the same index only the last element is guaranteed to actually be written.\n\n##### [¬ß](#examples-13)Examples\n\n```\nlet mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 0]); // Note the duplicate index.\nlet vals = Simd::from_array([-27, 82, -41, 124]);\n\nvals.scatter(&mut vec, idxs); // two logical writes means the last wins.\nassert_eq!(vec, vec![124, 11, 12, 82, 14, 15, 16, 17, 18]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);+//+Note+the+duplicate+index.%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++%0A++++vals.scatter(%26mut+vec,+idxs);+//+two+logical+writes+means+the+last+wins.%0A++++assert_eq!(vec,+vec!%5B124,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#747)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrites values from a SIMD vector to multiple potentially discontiguous indices in `slice`. The mask `enable`s all `true` indices and disables all `false` indices. If an enabled index is out-of-bounds, the write is suppressed without panicking. If two enabled elements in the scattered vector would write to the same index, only the last element is guaranteed to actually be written.\n\n##### [¬ß](#examples-14)Examples\n\n```\nlet mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 0]); // Includes an out-of-bounds index\nlet vals = Simd::from_array([-27, 82, -41, 124]);\nlet enable = Mask::from_array([true, true, true, false]); // Includes a masked element\n\nvals.scatter_select(&mut vec, enable, idxs); // The last write is masked, thus omitted.\nassert_eq!(vec, vec![-41, 11, 12, 82, 14, 15, 16, 17, 18]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);+//+Includes+an+out-of-bounds+index%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++%0A++++vals.scatter_select(%26mut+vec,+enable,+idxs);+//+The+last+write+is+masked,+thus+omitted.%0A++++assert_eq!(vec,+vec!%5B-41,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#784-789)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrites values from a SIMD vector to multiple potentially discontiguous indices in `slice`. The mask `enable`s all `true` indices and disables all `false` indices. If two enabled elements in the scattered vector would write to the same index, only the last element is guaranteed to actually be written.\n\n##### [¬ß](#safety-5)Safety\n\nCalling this function with an enabled out-of-bounds index is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_, and may lead to memory corruption.\n\n##### [¬ß](#examples-15)Examples\n\n```\nlet mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 0]);\nlet vals = Simd::from_array([-27, 82, -41, 124]);\nlet enable = Mask::from_array([true, true, true, false]); // Masks the final index\n// If this mask was used to scatter, it would be unsound. Let's fix that.\nlet enable = enable & idxs.simd_lt(Simd::splat(vec.len()));\n\n// We have masked the OOB index, so it's safe to scatter now.\nunsafe { vals.scatter_select_unchecked(&mut vec, enable, idxs); }\n// The second write to index 0 was masked, thus omitted.\nassert_eq!(vec, vec![-41, 11, 12, 82, 14, 15, 16, 17, 18]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+cmp::SimdPartialOrd,+Mask%7D;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Masks+the+final+index%0A++++//+If+this+mask+was+used+to+scatter,+it+would+be+unsound.+Let%27s+fix+that.%0A++++let+enable+=+enable+%26+idxs.simd_lt(Simd::splat(vec.len()));%0A++++%0A++++//+We+have+masked+the+OOB+index,+so+it%27s+safe+to+scatter+now.%0A++++unsafe+%7B+vals.scatter_select_unchecked(%26mut+vec,+enable,+idxs);+%7D%0A++++//+The+second+write+to+index+0+was+masked,+thus+omitted.%0A++++assert_eq!(vec,+vec!%5B-41,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#831)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrite pointers elementwise into a SIMD vector.\n\n##### [¬ß](#safety-6)Safety\n\nEach write must satisfy the same conditions as [`core::ptr::write`](../ptr/fn.write.html \"fn std::ptr::write\").\n\n##### [¬ß](#example-4)Example\n\n```\nlet mut values = [0; 4];\nlet offset = Simd::from_array([3, 2, 1, 0]);\nlet ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\nunsafe { Simd::from_array([6, 3, 5, 7]).scatter_ptr(ptrs); }\nassert_eq!(values, [7, 5, 3, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+ptr::SimdMutPtr%7D;%0A++++let+mut+values+=+%5B0;+4%5D;%0A++++let+offset+=+Simd::from_array(%5B3,+2,+1,+0%5D);%0A++++let+ptrs+=+Simd::splat(values.as_mut_ptr()).wrapping_add(offset);%0A++++unsafe+%7B+Simd::from_array(%5B6,+3,+5,+7%5D).scatter_ptr(ptrs);+%7D%0A++++assert_eq!(values,+%5B7,+5,+3,+6%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#859)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally write pointers elementwise into a SIMD vector. The mask `enable`s all `true` pointers and disables all `false` pointers. If a pointer is disabled, the write to its pointee is skipped.\n\n##### [¬ß](#safety-7)Safety\n\nEnabled pointers must satisfy the same conditions as [`core::ptr::write`](../ptr/fn.write.html \"fn std::ptr::write\").\n\n##### [¬ß](#example-5)Example\n\n```\nlet mut values = [0; 4];\nlet offset = Simd::from_array([3, 2, 1, 0]);\nlet ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\nlet enable = Mask::from_array([true, true, false, false]);\nunsafe { Simd::from_array([6, 3, 5, 7]).scatter_select_ptr(ptrs, enable); }\nassert_eq!(values, [0, 0, 3, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BMask,+Simd,+ptr::SimdMutPtr%7D;%0A++++let+mut+values+=+%5B0;+4%5D;%0A++++let+offset+=+Simd::from_array(%5B3,+2,+1,+0%5D);%0A++++let+ptrs+=+Simd::splat(values.as_mut_ptr()).wrapping_add(offset);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+false%5D);%0A++++unsafe+%7B+Simd::from_array(%5B6,+3,+5,+7%5D).scatter_select_ptr(ptrs,+enable);+%7D%0A++++assert_eq!(values,+%5B0,+0,+3,+6%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Add%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-64)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.add-14)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Add%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-59)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.add-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Add%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-63)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.add-13)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Add-for-Simd%3Cf32,+N%3E)\n\n[¬ß](#associatedtype.Output-57)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.add-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Add-for-Simd%3Cf64,+N%3E)\n\n[¬ß](#associatedtype.Output-55)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.add-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-51)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-62)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-52)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-56)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-53)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-54)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-61)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-60)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-50)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Add-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-58)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.add-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-AddAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1007-1010)[¬ß](#impl-AsMut%3C%5BT%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1013)[¬ß](#method.as_mut)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#984-987)[¬ß](#impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#990)[¬ß](#method.as_mut-1)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#996-999)[¬ß](#impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1002)[¬ß](#method.as_ref-1)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#973-976)[¬ß](#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#979)[¬ß](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-80)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.bitand)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-87)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.bitand-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-BitAnd%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-82)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.bitand-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-91)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-89)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-92)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-83)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-88)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-90)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-85)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-84)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-86)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitAnd-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-81)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitand-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-BitAndAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-24)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.bitor-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-26)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.bitor-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-BitOr%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-34)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.bitor-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-31)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-30)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-27)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-29)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-23)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-25)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-32)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-33)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-28)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitOr-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-22)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitor)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-BitOrAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-234)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.bitxor-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-236)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.bitxor-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-BitXor%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-228)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.bitxor-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-224)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-229)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-232)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-225)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-227)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-226)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-231)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-230)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-235)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-BitXor-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-233)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.bitxor-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-BitXorAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#872-875)[¬ß](#impl-Clone-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/fmt.rs.html#4-7)[¬ß](#impl-Debug-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/fmt.rs.html#18)[¬ß](#method.fmt)\n\nA `Simd<T, N>` has a debug format like the one for `[T]`:\n\n```\nlet floats = Simd::<f32, 4>::splat(-1.0);\nassert_eq!(format!(\"{:?}\", [-1.0; 4]), format!(\"{:?}\", floats));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd::Simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd::Simd;%0A++++let+floats+=+Simd::%3Cf32,+4%3E::splat(-1.0);%0A++++assert_eq!(format!(%22%7B:?%7D%22,+%5B-1.0;+4%5D),+format!(%22%7B:?%7D%22,+floats));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#883-886)[¬ß](#impl-Default-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Div%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-70)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.div-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Div%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-78)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.div-13)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Div%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-65)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.div)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Div-for-Simd%3Cf32,+N%3E)\n\n[¬ß](#associatedtype.Output-66)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.div-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Div-for-Simd%3Cf64,+N%3E)\n\n[¬ß](#associatedtype.Output-74)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.div-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-76)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-68)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-77)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-67)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-75)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-73)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-79)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-14)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-69)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-71)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Div-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-72)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.div-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-DivAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1019-1022)[¬ß](#impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1025)[¬ß](#method.from-17)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html#293-296)[¬ß](#impl-From%3CMask%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html#299)[¬ß](#method.from-36)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1030-1033)[¬ß](#impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1036)[¬ß](#method.from-41)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#31)[¬ß](#impl-From%3CSimd%3Cf32,+16%3E%3E-for-__m512)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#31)[¬ß](#method.from-13)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#29)[¬ß](#impl-From%3CSimd%3Cf32,+4%3E%3E-for-__m128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#29)[¬ß](#method.from-33)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#30)[¬ß](#impl-From%3CSimd%3Cf32,+8%3E%3E-for-__m256)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#30)[¬ß](#method.from-72)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#39)[¬ß](#impl-From%3CSimd%3Cf64,+2%3E%3E-for-__m128d)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#39)[¬ß](#method.from-6)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#40)[¬ß](#impl-From%3CSimd%3Cf64,+4%3E%3E-for-__m256d)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#40)[¬ß](#method.from-63)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41)[¬ß](#impl-From%3CSimd%3Cf64,+8%3E%3E-for-__m512d)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41)[¬ß](#method.from-39)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#20)[¬ß](#impl-From%3CSimd%3Ci16,+16%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#20)[¬ß](#method.from-31)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#21)[¬ß](#impl-From%3CSimd%3Ci16,+32%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#21)[¬ß](#method.from-4)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#19)[¬ß](#impl-From%3CSimd%3Ci16,+8%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#19)[¬ß](#method.from-59)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#28)[¬ß](#impl-From%3CSimd%3Ci32,+16%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#28)[¬ß](#method.from-67)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#26)[¬ß](#impl-From%3CSimd%3Ci32,+4%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#26)[¬ß](#method.from-34)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#27)[¬ß](#impl-From%3CSimd%3Ci32,+8%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#27)[¬ß](#method.from-51)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#36)[¬ß](#impl-From%3CSimd%3Ci64,+2%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#36)[¬ß](#method.from-74)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#37)[¬ß](#impl-From%3CSimd%3Ci64,+4%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#37)[¬ß](#method.from-52)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#38)[¬ß](#impl-From%3CSimd%3Ci64,+8%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#38)[¬ß](#method.from-27)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#12)[¬ß](#impl-From%3CSimd%3Ci8,+16%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#12)[¬ß](#method.from-46)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#13)[¬ß](#impl-From%3CSimd%3Ci8,+32%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#13)[¬ß](#method.from-19)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#14)[¬ß](#impl-From%3CSimd%3Ci8,+64%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#14)[¬ß](#method.from-43)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#60)[¬ß](#impl-From%3CSimd%3Cisize,+2%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#60)[¬ß](#method.from-53)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#61)[¬ß](#impl-From%3CSimd%3Cisize,+4%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#61)[¬ß](#method.from-37)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#62)[¬ß](#impl-From%3CSimd%3Cisize,+8%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#62)[¬ß](#method.from-42)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#17)[¬ß](#impl-From%3CSimd%3Cu16,+16%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#17)[¬ß](#method.from-66)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#18)[¬ß](#impl-From%3CSimd%3Cu16,+32%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#18)[¬ß](#method.from-44)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#16)[¬ß](#impl-From%3CSimd%3Cu16,+8%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#16)[¬ß](#method.from-58)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#25)[¬ß](#impl-From%3CSimd%3Cu32,+16%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#25)[¬ß](#method.from-14)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#23)[¬ß](#impl-From%3CSimd%3Cu32,+4%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#23)[¬ß](#method.from-49)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#24)[¬ß](#impl-From%3CSimd%3Cu32,+8%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#24)[¬ß](#method.from-69)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#33)[¬ß](#impl-From%3CSimd%3Cu64,+2%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#33)[¬ß](#method.from-60)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#34)[¬ß](#impl-From%3CSimd%3Cu64,+4%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#34)[¬ß](#method.from-57)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#35)[¬ß](#impl-From%3CSimd%3Cu64,+8%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#35)[¬ß](#method.from-3)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#9)[¬ß](#impl-From%3CSimd%3Cu8,+16%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#9)[¬ß](#method.from-11)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#10)[¬ß](#impl-From%3CSimd%3Cu8,+32%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#10)[¬ß](#method.from-54)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#11)[¬ß](#impl-From%3CSimd%3Cu8,+64%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#11)[¬ß](#method.from-18)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#57)[¬ß](#impl-From%3CSimd%3Cusize,+2%3E%3E-for-__m128i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#57)[¬ß](#method.from-70)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#58)[¬ß](#impl-From%3CSimd%3Cusize,+4%3E%3E-for-__m256i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#58)[¬ß](#method.from-56)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#59)[¬ß](#impl-From%3CSimd%3Cusize,+8%3E%3E-for-__m512i)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#59)[¬ß](#method.from-25)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#29)[¬ß](#impl-From%3C__m128%3E-for-Simd%3Cf32,+4%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#29)[¬ß](#method.from-30)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#39)[¬ß](#impl-From%3C__m128d%3E-for-Simd%3Cf64,+2%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#39)[¬ß](#method.from-64)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#19)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Ci16,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#19)[¬ß](#method.from-8)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#26)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Ci32,+4%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#26)[¬ß](#method.from-73)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#36)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Ci64,+2%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#36)[¬ß](#method.from-55)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#12)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Ci8,+16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#12)[¬ß](#method.from-29)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#60)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Cisize,+2%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#60)[¬ß](#method.from-26)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#16)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Cu16,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#16)[¬ß](#method.from-35)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#23)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Cu32,+4%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#23)[¬ß](#method.from-21)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#33)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Cu64,+2%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#33)[¬ß](#method.from-50)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#9)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Cu8,+16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#9)[¬ß](#method.from-24)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#57)[¬ß](#impl-From%3C__m128i%3E-for-Simd%3Cusize,+2%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#57)[¬ß](#method.from-9)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#30)[¬ß](#impl-From%3C__m256%3E-for-Simd%3Cf32,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#30)[¬ß](#method.from-5)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#40)[¬ß](#impl-From%3C__m256d%3E-for-Simd%3Cf64,+4%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#40)[¬ß](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#20)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Ci16,+16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#20)[¬ß](#method.from-15)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#27)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Ci32,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#27)[¬ß](#method.from-68)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#37)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Ci64,+4%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#37)[¬ß](#method.from-62)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#13)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Ci8,+32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#13)[¬ß](#method.from-7)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#61)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Cisize,+4%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#61)[¬ß](#method.from-10)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#17)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Cu16,+16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#17)[¬ß](#method.from-2)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#24)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Cu32,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#24)[¬ß](#method.from-28)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#34)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Cu64,+4%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#34)[¬ß](#method.from-48)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#10)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Cu8,+32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#10)[¬ß](#method.from-22)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#58)[¬ß](#impl-From%3C__m256i%3E-for-Simd%3Cusize,+4%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#58)[¬ß](#method.from-38)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#31)[¬ß](#impl-From%3C__m512%3E-for-Simd%3Cf32,+16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#31)[¬ß](#method.from-71)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41)[¬ß](#impl-From%3C__m512d%3E-for-Simd%3Cf64,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41)[¬ß](#method.from-23)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#21)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Ci16,+32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#21)[¬ß](#method.from-16)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#28)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Ci32,+16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#28)[¬ß](#method.from-40)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#38)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Ci64,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#38)[¬ß](#method.from-61)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#14)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Ci8,+64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#14)[¬ß](#method.from-32)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#62)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Cisize,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#62)[¬ß](#method.from-45)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#18)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Cu16,+32%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#18)[¬ß](#method.from)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#25)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Cu32,+16%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#25)[¬ß](#method.from-12)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#35)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Cu64,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#35)[¬ß](#method.from-47)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#11)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Cu8,+64%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#11)[¬ß](#method.from-65)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#59)[¬ß](#impl-From%3C__m512i%3E-for-Simd%3Cusize,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#59)[¬ß](#method.from-20)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#958-961)[¬ß](#impl-Hash-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#12-16)[¬ß](#impl-Index%3CI%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-237)\n\nThe returned type after indexing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#20)[¬ß](#method.index)\n\nPerforms the indexing (`container[index]`) operation. [Read more](about:blank/ops/trait.Index.html#tymethod.index)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#25-29)[¬ß](#impl-IndexMut%3CI%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-10)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.mul-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-9)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.mul-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Mul%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-6)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.mul-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Mul-for-Simd%3Cf32,+N%3E)\n\n[¬ß](#associatedtype.Output-4)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.mul-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Mul-for-Simd%3Cf64,+N%3E)\n\n[¬ß](#associatedtype.Output-13)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.mul-13)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-5)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-14)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul-14)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-1)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-8)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-2)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-3)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-7)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-11)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Mul-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-12)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.mul-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-MulAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#impl-Neg-for-Simd%3Cf32,+N%3E)\n\n[¬ß](#associatedtype.Output-16)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#method.neg-1)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#impl-Neg-for-Simd%3Cf64,+N%3E)\n\n[¬ß](#associatedtype.Output-15)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#method.neg)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#impl-Neg-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-18)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#method.neg-3)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#impl-Neg-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-17)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#method.neg-2)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#impl-Neg-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-20)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#method.neg-5)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#impl-Neg-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-19)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#method.neg-4)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#impl-Neg-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-21)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[¬ß](#method.neg-6)\n\nPerforms the unary `-` operation. [Read more](about:blank/ops/trait.Neg.html#tymethod.neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-220)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not-6)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-217)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not-3)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-216)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not-2)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-219)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not-5)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-223)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not-9)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-215)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not-1)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-214)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-218)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not-4)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-221)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not-7)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#impl-Not-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-222)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77)[¬ß](#method.not-8)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#946-949)[¬ß](#impl-Ord-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#894-897)[¬ß](#impl-PartialEq-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#900)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#914)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#927-930)[¬ß](#impl-PartialOrd-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#933)[¬ß](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[¬ß](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[¬ß](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[¬ß](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[¬ß](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51)[¬ß](#impl-Product%3C%26Simd%3Cf32,+N%3E%3E-for-Simd%3Cf32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51)[¬ß](#method.product-3)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[¬ß](#impl-Product%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[¬ß](#method.product-21)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59)[¬ß](#impl-Product%3C%26Simd%3Ci16,+N%3E%3E-for-Simd%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59)[¬ß](#method.product-17)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60)[¬ß](#impl-Product%3C%26Simd%3Ci32,+N%3E%3E-for-Simd%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60)[¬ß](#method.product-4)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61)[¬ß](#impl-Product%3C%26Simd%3Ci64,+N%3E%3E-for-Simd%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61)[¬ß](#method.product-1)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58)[¬ß](#impl-Product%3C%26Simd%3Ci8,+N%3E%3E-for-Simd%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58)[¬ß](#method.product-12)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62)[¬ß](#impl-Product%3C%26Simd%3Cisize,+N%3E%3E-for-Simd%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62)[¬ß](#method.product-23)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54)[¬ß](#impl-Product%3C%26Simd%3Cu16,+N%3E%3E-for-Simd%3Cu16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54)[¬ß](#method.product-16)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55)[¬ß](#impl-Product%3C%26Simd%3Cu32,+N%3E%3E-for-Simd%3Cu32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55)[¬ß](#method.product-13)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56)[¬ß](#impl-Product%3C%26Simd%3Cu64,+N%3E%3E-for-Simd%3Cu64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56)[¬ß](#method.product-5)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53)[¬ß](#impl-Product%3C%26Simd%3Cu8,+N%3E%3E-for-Simd%3Cu8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53)[¬ß](#method.product-6)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57)[¬ß](#impl-Product%3C%26Simd%3Cusize,+N%3E%3E-for-Simd%3Cusize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57)[¬ß](#method.product)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51)[¬ß](#impl-Product-for-Simd%3Cf32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51)[¬ß](#method.product-15)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[¬ß](#impl-Product-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[¬ß](#method.product-22)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59)[¬ß](#impl-Product-for-Simd%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59)[¬ß](#method.product-20)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60)[¬ß](#impl-Product-for-Simd%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60)[¬ß](#method.product-19)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61)[¬ß](#impl-Product-for-Simd%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61)[¬ß](#method.product-11)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58)[¬ß](#impl-Product-for-Simd%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58)[¬ß](#method.product-10)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62)[¬ß](#impl-Product-for-Simd%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62)[¬ß](#method.product-14)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54)[¬ß](#impl-Product-for-Simd%3Cu16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54)[¬ß](#method.product-18)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55)[¬ß](#impl-Product-for-Simd%3Cu32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55)[¬ß](#method.product-8)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56)[¬ß](#impl-Product-for-Simd%3Cu64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56)[¬ß](#method.product-2)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53)[¬ß](#impl-Product-for-Simd%3Cu8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53)[¬ß](#method.product-7)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57)[¬ß](#impl-Product-for-Simd%3Cusize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57)[¬ß](#method.product-9)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-208)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.rem-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-213)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.rem-14)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Rem%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-201)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.rem-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Rem-for-Simd%3Cf32,+N%3E)\n\n[¬ß](#associatedtype.Output-207)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.rem-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Rem-for-Simd%3Cf64,+N%3E)\n\n[¬ß](#associatedtype.Output-200)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.rem-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-204)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-212)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem-13)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-211)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-209)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-203)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-202)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-199)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-210)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-205)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Rem-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-206)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.rem-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-RemAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-173)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.shl-27)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-155)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.shl-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26i16%3E-for-%26Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-195)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-49)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26i16%3E-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-164)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-18)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26i32%3E-for-%26Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-175)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-29)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26i32%3E-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-170)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-24)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26i64%3E-for-%26Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-193)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-47)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26i64%3E-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-166)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-20)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26i8%3E-for-%26Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-180)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-34)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26i8%3E-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-176)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-30)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26isize%3E-for-%26Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-187)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-41)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26isize%3E-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-191)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-45)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26u16%3E-for-%26Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-194)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-48)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26u16%3E-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-192)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-46)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26u32%3E-for-%26Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-186)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-40)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26u32%3E-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-149)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26u64%3E-for-%26Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-150)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26u64%3E-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-147)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26u8%3E-for-%26Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-190)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-44)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26u8%3E-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-159)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-13)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26usize%3E-for-%26Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-146)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3C%26usize%3E-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-160)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-14)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Shl%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-167)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.shl-21)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Ci16%3E-for-%26Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-165)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-19)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Ci16%3E-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-148)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Ci32%3E-for-%26Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-182)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-36)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Ci32%3E-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-153)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Ci64%3E-for-%26Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-184)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-38)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Ci64%3E-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-151)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Ci8%3E-for-%26Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-188)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-42)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Ci8%3E-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-171)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-25)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cisize%3E-for-%26Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-158)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cisize%3E-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-157)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cu16%3E-for-%26Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-161)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-15)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cu16%3E-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-152)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cu32%3E-for-%26Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-179)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-33)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cu32%3E-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-178)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cu64%3E-for-%26Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-156)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cu64%3E-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-197)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-51)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cu8%3E-for-%26Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-185)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-39)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cu8%3E-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-183)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-37)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cusize%3E-for-%26Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-163)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-17)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shl%3Cusize%3E-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-177)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shl-31)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-198)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-52)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-181)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-35)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-168)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-22)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-169)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-23)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-174)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-28)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-172)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-26)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-189)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-43)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-196)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-50)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-154)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shl-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-162)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shl-16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-ShlAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-123)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.shr-30)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-118)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.shr-25)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26i16%3E-for-%26Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-136)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-43)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26i16%3E-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-114)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-21)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26i32%3E-for-%26Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-134)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-41)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26i32%3E-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-111)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-18)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26i64%3E-for-%26Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-126)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-33)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26i64%3E-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-135)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-42)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26i8%3E-for-%26Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-106)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-13)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26i8%3E-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-120)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-27)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26isize%3E-for-%26Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-127)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-34)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26isize%3E-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-96)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26u16%3E-for-%26Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-112)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-19)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26u16%3E-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-137)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-44)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26u32%3E-for-%26Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-122)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-29)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26u32%3E-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-133)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-40)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26u64%3E-for-%26Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-142)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-49)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26u64%3E-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-107)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-14)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26u8%3E-for-%26Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-139)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-46)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26u8%3E-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-101)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26usize%3E-for-%26Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-110)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-17)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3C%26usize%3E-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-140)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-47)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Shr%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-95)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.shr-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Ci16%3E-for-%26Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-105)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Ci16%3E-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-116)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-23)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Ci32%3E-for-%26Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-131)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-38)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Ci32%3E-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-121)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-28)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Ci64%3E-for-%26Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-125)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Ci64%3E-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-103)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Ci8%3E-for-%26Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-102)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Ci8%3E-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-119)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-26)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cisize%3E-for-%26Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-109)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cisize%3E-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-132)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-39)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cu16%3E-for-%26Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-130)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-37)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cu16%3E-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-143)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-50)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cu32%3E-for-%26Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-128)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-35)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cu32%3E-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-99)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cu64%3E-for-%26Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-97)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cu64%3E-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-144)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-51)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cu8%3E-for-%26Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-145)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-52)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cu8%3E-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-104)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cusize%3E-for-%26Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-113)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr-20)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#impl-Shr%3Cusize%3E-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-93)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62)[¬ß](#method.shr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-141)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-48)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-100)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-98)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-108)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-15)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-124)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-31)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-115)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-22)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-129)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-36)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-94)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-138)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-45)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Shr-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-117)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.shr-24)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-ShrAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#80-82)[¬ß](#impl-SimdConstPtr-for-Simd%3C*const+T,+N%3E)\n\n[¬ß](#associatedtype.Usize-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of `usize` with the same number of elements.\n\n[¬ß](#associatedtype.Isize-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of `isize` with the same number of elements.\n\n[¬ß](#associatedtype.CastPtr-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of const pointers with the same number of elements.\n\n[¬ß](#associatedtype.MutPtr)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of mutable pointers to the same type.\n\n[¬ß](#associatedtype.Mask-20)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#91)[¬ß](#method.is_null-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns `true` for each element that is null.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#96)[¬ß](#method.cast-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCasts to a pointer of another type. [Read more](about:blank/prelude/trait.SimdConstPtr.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#108)[¬ß](#method.cast_mut)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nChanges constness without changing the type. [Read more](about:blank/prelude/trait.SimdConstPtr.html#tymethod.cast_mut)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#114)[¬ß](#method.addr-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nGets the ‚Äúaddress‚Äù portion of the pointer. [Read more](about:blank/prelude/trait.SimdConstPtr.html#tymethod.addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#122)[¬ß](#method.with_addr-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreates a new pointer with the given address. [Read more](about:blank/prelude/trait.SimdConstPtr.html#tymethod.with_addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#134)[¬ß](#method.expose_provenance-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExposes the ‚Äúprovenance‚Äù part of the pointer for future use in [`Self::with_exposed_provenance`](about:blank/prelude/trait.SimdConstPtr.html#tymethod.with_exposed_provenance \"associated function core::core_simd::simd::ptr::const_ptr::SimdConstPtr::with_exposed_provenance::with_exposed_provenance\") and returns the ‚Äúaddress‚Äù portion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#140)[¬ß](#method.with_exposed_provenance-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConvert an address back to a pointer, picking up a previously ‚Äúexposed‚Äù provenance. [Read more](about:blank/prelude/trait.SimdConstPtr.html#tymethod.with_exposed_provenance)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#146)[¬ß](#method.wrapping_offset-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCalculates the offset from a pointer using wrapping arithmetic. [Read more](about:blank/prelude/trait.SimdConstPtr.html#tymethod.wrapping_offset)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#152)[¬ß](#method.wrapping_add-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCalculates the offset from a pointer using wrapping arithmetic. [Read more](about:blank/prelude/trait.SimdConstPtr.html#tymethod.wrapping_add)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#157)[¬ß](#method.wrapping_sub-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCalculates the offset from a pointer using wrapping arithmetic. [Read more](about:blank/prelude/trait.SimdConstPtr.html#tymethod.wrapping_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#impl-SimdFloat-for-Simd%3Cf32,+N%3E)\n\n[¬ß](#associatedtype.Mask-22)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[¬ß](#associatedtype.Scalar-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Bits-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nBit representation of this SIMD vector type.\n\n[¬ß](#associatedtype.Cast-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.cast-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.to_int_unchecked-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRounds toward zero and converts to the same-width integer type, assuming that the value is finite and fits in that type. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.to_int_unchecked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.to_bits-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRaw transmutation to an unsigned integer vector type with the same size and number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.from_bits-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRaw transmutation from an unsigned integer vector type with the same size and number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.abs-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the absolute value of the equivalently-indexed element in `self`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.recip-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTakes the reciprocal (inverse) of each element, `1/x`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.to_degrees-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts each element from radians to degrees.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.to_radians-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts each element from degrees to radians.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_sign_positive-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if it has a positive sign, including `+0.0`, `NaN`s with positive sign bit and positive infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_sign_negative-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if it has a negative sign, including `-0.0`, `NaN`s with negative sign bit and negative infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_nan-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_infinite-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is positive infinity or negative infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_finite-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is neither infinite nor `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_subnormal-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is subnormal.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_normal-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is neither zero, infinite, subnormal, nor `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.signum-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReplaces each element with a number that represents its sign. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.signum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.copysign-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns each element with the magnitude of `self` and the sign of `sign`. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.copysign)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.simd_min-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum of each element. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.simd_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.simd_max-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum of each element. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.simd_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.simd_clamp-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval unless it is NaN. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.reduce_sum-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.reduce_sum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.reduce_product-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReducing multiply. Returns the product of the elements of the vector. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.reduce_product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.reduce_max-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.reduce_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.reduce_min-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.reduce_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#impl-SimdFloat-for-Simd%3Cf64,+N%3E)\n\n[¬ß](#associatedtype.Mask-21)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[¬ß](#associatedtype.Scalar-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Bits)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nBit representation of this SIMD vector type.\n\n[¬ß](#associatedtype.Cast-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.cast-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.to_int_unchecked)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRounds toward zero and converts to the same-width integer type, assuming that the value is finite and fits in that type. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.to_int_unchecked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.to_bits)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRaw transmutation to an unsigned integer vector type with the same size and number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.from_bits)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRaw transmutation from an unsigned integer vector type with the same size and number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.abs-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the absolute value of the equivalently-indexed element in `self`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.recip)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTakes the reciprocal (inverse) of each element, `1/x`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.to_degrees)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts each element from radians to degrees.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.to_radians)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts each element from degrees to radians.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_sign_positive)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if it has a positive sign, including `+0.0`, `NaN`s with positive sign bit and positive infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_sign_negative)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if it has a negative sign, including `-0.0`, `NaN`s with negative sign bit and negative infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_nan)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_infinite)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is positive infinity or negative infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_finite)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is neither infinite nor `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_subnormal)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is subnormal.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.is_normal)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is neither zero, infinite, subnormal, nor `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.signum-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReplaces each element with a number that represents its sign. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.signum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.copysign)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns each element with the magnitude of `self` and the sign of `sign`. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.copysign)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.simd_min-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum of each element. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.simd_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.simd_max-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum of each element. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.simd_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.simd_clamp-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval unless it is NaN. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.reduce_sum-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.reduce_sum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.reduce_product-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReducing multiply. Returns the product of the elements of the vector. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.reduce_product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.reduce_max-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.reduce_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[¬ß](#method.reduce_min-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector. [Read more](about:blank/prelude/trait.SimdFloat.html#tymethod.reduce_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#impl-SimdInt-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Mask-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[¬ß](#associatedtype.Scalar-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Unsigned-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector of unsigned integers with the same element size.\n\n[¬ß](#associatedtype.Cast-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.cast-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_add-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_sub-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.abs-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise absolute value, implemented in Rust. Every element becomes its absolute value. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_abs-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating absolute value, implemented in Rust. As abs(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_neg-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating negation, implemented in Rust. As neg(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_positive-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each positive element and false if it is zero or negative.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_negative-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each negative element and false if it is zero or positive.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.signum-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns numbers representing the sign of each element. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.signum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_sum-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_sum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_product-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_max-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_min-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_and-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_or-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_xor-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.swap_bytes-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reverse_bits-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_zeros-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_zeros-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_ones-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_ones-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#impl-SimdInt-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Mask-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[¬ß](#associatedtype.Scalar-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Unsigned-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector of unsigned integers with the same element size.\n\n[¬ß](#associatedtype.Cast-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.cast-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_add-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_sub-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.abs-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise absolute value, implemented in Rust. Every element becomes its absolute value. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_abs-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating absolute value, implemented in Rust. As abs(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_neg-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating negation, implemented in Rust. As neg(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_positive-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each positive element and false if it is zero or negative.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_negative-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each negative element and false if it is zero or positive.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.signum-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns numbers representing the sign of each element. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.signum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_sum-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_sum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_product-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_max-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_min-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_and-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_or-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_xor-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.swap_bytes-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reverse_bits-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_zeros-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_zeros-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_ones-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_ones-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#impl-SimdInt-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Mask-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[¬ß](#associatedtype.Scalar-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Unsigned-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector of unsigned integers with the same element size.\n\n[¬ß](#associatedtype.Cast-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.cast-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_add-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_sub-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.abs-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise absolute value, implemented in Rust. Every element becomes its absolute value. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_abs-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating absolute value, implemented in Rust. As abs(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_neg-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating negation, implemented in Rust. As neg(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_positive-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each positive element and false if it is zero or negative.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_negative-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each negative element and false if it is zero or positive.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.signum-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns numbers representing the sign of each element. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.signum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_sum-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_sum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_product-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_max-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_min-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_and-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_or-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_xor-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.swap_bytes-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reverse_bits-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_zeros-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_zeros-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_ones-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_ones-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#impl-SimdInt-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Mask-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[¬ß](#associatedtype.Scalar)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Unsigned)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector of unsigned integers with the same element size.\n\n[¬ß](#associatedtype.Cast)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.cast-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_add)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_sub)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.abs)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise absolute value, implemented in Rust. Every element becomes its absolute value. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_abs)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating absolute value, implemented in Rust. As abs(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_neg)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating negation, implemented in Rust. As neg(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_positive)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each positive element and false if it is zero or negative.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_negative)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each negative element and false if it is zero or positive.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.signum)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns numbers representing the sign of each element. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.signum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_sum)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_sum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_product)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_max)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_min)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_and)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_or)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_xor)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.swap_bytes)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reverse_bits)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_zeros)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_zeros)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_ones)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_ones)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#impl-SimdInt-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Mask-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[¬ß](#associatedtype.Scalar-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Unsigned-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector of unsigned integers with the same element size.\n\n[¬ß](#associatedtype.Cast-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.cast-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_add-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_sub-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.abs-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise absolute value, implemented in Rust. Every element becomes its absolute value. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_abs-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating absolute value, implemented in Rust. As abs(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_abs)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.saturating_neg-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating negation, implemented in Rust. As neg(), except the MIN value becomes MAX instead of itself. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.saturating_neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_positive-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each positive element and false if it is zero or negative.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.is_negative-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each negative element and false if it is zero or positive.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.signum-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns numbers representing the sign of each element. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.signum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_sum-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_sum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_product-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_max-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_min-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector. [Read more](about:blank/prelude/trait.SimdInt.html#tymethod.reduce_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_and-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_or-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reduce_xor-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.swap_bytes-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.reverse_bits-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_zeros-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_zeros-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.leading_ones-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371)[¬ß](#method.trailing_ones-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#77-79)[¬ß](#impl-SimdMutPtr-for-Simd%3C*mut+T,+N%3E)\n\n[¬ß](#associatedtype.Usize)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of `usize` with the same number of elements.\n\n[¬ß](#associatedtype.Isize)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of `isize` with the same number of elements.\n\n[¬ß](#associatedtype.CastPtr)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of const pointers with the same number of elements.\n\n[¬ß](#associatedtype.ConstPtr)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of constant pointers to the same type.\n\n[¬ß](#associatedtype.Mask)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#88)[¬ß](#method.is_null)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns `true` for each element that is null.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#93)[¬ß](#method.cast)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCasts to a pointer of another type. [Read more](about:blank/prelude/trait.SimdMutPtr.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#105)[¬ß](#method.cast_const)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nChanges constness without changing the type. [Read more](about:blank/prelude/trait.SimdMutPtr.html#tymethod.cast_const)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#111)[¬ß](#method.addr)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nGets the ‚Äúaddress‚Äù portion of the pointer. [Read more](about:blank/prelude/trait.SimdMutPtr.html#tymethod.addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#119)[¬ß](#method.with_addr)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreates a new pointer with the given address. [Read more](about:blank/prelude/trait.SimdMutPtr.html#tymethod.with_addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#131)[¬ß](#method.expose_provenance)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExposes the ‚Äúprovenance‚Äù part of the pointer for future use in [`Self::with_exposed_provenance`](about:blank/prelude/trait.SimdMutPtr.html#tymethod.with_exposed_provenance \"associated function core::core_simd::simd::ptr::mut_ptr::SimdMutPtr::with_exposed_provenance::with_exposed_provenance\") and returns the ‚Äúaddress‚Äù portion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#137)[¬ß](#method.with_exposed_provenance)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConvert an address back to a pointer, picking up a previously ‚Äúexposed‚Äù provenance. [Read more](about:blank/prelude/trait.SimdMutPtr.html#tymethod.with_exposed_provenance)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#143)[¬ß](#method.wrapping_offset)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCalculates the offset from a pointer using wrapping arithmetic. [Read more](about:blank/prelude/trait.SimdMutPtr.html#tymethod.wrapping_offset)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#149)[¬ß](#method.wrapping_add)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCalculates the offset from a pointer using wrapping arithmetic. [Read more](about:blank/prelude/trait.SimdMutPtr.html#tymethod.wrapping_add)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#154)[¬ß](#method.wrapping_sub)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCalculates the offset from a pointer using wrapping arithmetic. [Read more](about:blank/prelude/trait.SimdMutPtr.html#tymethod.wrapping_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#246-248)[¬ß](#impl-SimdOrd-for-Simd%3C*const+T,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#251)[¬ß](#method.simd_max)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#256)[¬ß](#method.simd_min)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#262)[¬ß](#method.simd_clamp)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#296-298)[¬ß](#impl-SimdOrd-for-Simd%3C*mut+T,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#301)[¬ß](#method.simd_max-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#306)[¬ß](#method.simd_min-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#312)[¬ß](#method.simd_clamp-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Cu16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Cu32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Cu64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Cu8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdOrd-for-Simd%3Cusize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_max-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_min-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_clamp-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/prelude/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#78-80)[¬ß](#impl-SimdPartialEq-for-Simd%3C*const+T,+N%3E)\n\n[¬ß](#associatedtype.Mask-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#85)[¬ß](#method.simd_eq-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#90)[¬ß](#method.simd_ne-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#95-97)[¬ß](#impl-SimdPartialEq-for-Simd%3C*mut+T,+N%3E)\n\n[¬ß](#associatedtype.Mask-14)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#102)[¬ß](#method.simd_eq-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#107)[¬ß](#method.simd_ne-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Cf32,+N%3E)\n\n[¬ß](#associatedtype.Mask-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Cf64,+N%3E)\n\n[¬ß](#associatedtype.Mask-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Mask-16)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Mask-17)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Mask-19)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Mask-15)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Mask-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Mask-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Mask-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Mask-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Mask-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#impl-SimdPartialEq-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Mask-18)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_eq-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[¬ß](#method.simd_ne-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#221-223)[¬ß](#impl-SimdPartialOrd-for-Simd%3C*const+T,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#226)[¬ß](#method.simd_lt-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#231)[¬ß](#method.simd_le-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#236)[¬ß](#method.simd_gt-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#241)[¬ß](#method.simd_ge-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#271-273)[¬ß](#impl-SimdPartialOrd-for-Simd%3C*mut+T,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#276)[¬ß](#method.simd_lt-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#281)[¬ß](#method.simd_le-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#286)[¬ß](#method.simd_gt-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#291)[¬ß](#method.simd_ge-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#impl-SimdPartialOrd-for-Simd%3Cf32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#method.simd_lt-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#method.simd_le-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#method.simd_gt-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#method.simd_ge-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#impl-SimdPartialOrd-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#method.simd_lt-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#method.simd_le-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#method.simd_gt-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[¬ß](#method.simd_ge-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Cu16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Cu32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Cu64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Cu8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#impl-SimdPartialOrd-for-Simd%3Cusize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_lt-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_le-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_gt-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112)[¬ß](#method.simd_ge-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#impl-SimdUint-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Scalar-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Cast-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.cast-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.wrapping_neg)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_add-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_sub-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_sum-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_product-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_max-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_min-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_and-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_or-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_xor-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.swap_bytes-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reverse_bits-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_zeros-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_zeros-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_ones-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_ones-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#impl-SimdUint-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Scalar-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Cast-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.cast-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.wrapping_neg-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_add-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_sub-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_sum-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_product-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_max-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_min-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_and-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_or-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_xor-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.swap_bytes-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reverse_bits-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_zeros-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_zeros-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_ones-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_ones-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#impl-SimdUint-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Scalar-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Cast-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.cast-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.wrapping_neg-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_add-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_sub-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_sum-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_product-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_max-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_min-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_and-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_or-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_xor-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.swap_bytes-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reverse_bits-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_zeros-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_zeros-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_ones-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_ones-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#impl-SimdUint-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Scalar-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Cast-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.cast-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.wrapping_neg-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_add-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_sub-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_sum-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_product-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_max-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_min-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_and-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_or-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_xor-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.swap_bytes-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reverse_bits-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_zeros-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_zeros-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_ones-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_ones-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#impl-SimdUint-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Scalar-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[¬ß](#associatedtype.Cast-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.cast-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.wrapping_neg-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_add-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.saturating_sub-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nLanewise saturating subtract. [Read more](about:blank/prelude/trait.SimdUint.html#tymethod.saturating_sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_sum-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector, with wrapping addition.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_product-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the product of the elements of the vector, with wrapping multiplication.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_max-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_min-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_and-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_or-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reduce_xor-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.swap_bytes-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the byte order of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.reverse_bits-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverses the order of bits in each elemnent. The least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_zeros-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_zeros-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing zeros in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.leading_ones-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of leading ones in the binary representation of each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221)[¬ß](#method.trailing_ones-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of trailing ones in the binary representation of each element.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#impl-StdFloat-for-Simd%3Cf32,+N%3E)\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.fract)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the floating point‚Äôs fractional value, with its integer part removed.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.sin)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the sine of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.cos)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the cosine of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.exp)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the exponential (base e) of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.exp2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the exponential (base 2) of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.ln)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the natural logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.log2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the base-2 logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.log10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the base-10 logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#55-57)[¬ß](#method.mul_add)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nElementwise fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add. [Read more](about:blank/trait.StdFloat.html#method.mul_add)\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#63-65)[¬ß](#method.sqrt)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the square root value of the equivalently-indexed element in `self`\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#96-98)[¬ß](#method.log)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the logarithm with respect to an arbitrary in the equivalently-indexed elements in `self` and `base`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#113-115)[¬ß](#method.ceil)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the smallest integer greater than or equal to each element.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#120-122)[¬ß](#method.floor)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the largest integer value less than or equal to each element.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#127-129)[¬ß](#method.round)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRounds to the nearest integer value. Ties round toward zero.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#134-136)[¬ß](#method.trunc)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the floating point‚Äôs integer value, with its fractional part removed.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#impl-StdFloat-for-Simd%3Cf64,+N%3E)\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.fract-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the floating point‚Äôs fractional value, with its integer part removed.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.sin-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the sine of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.cos-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the cosine of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.exp-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the exponential (base e) of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.exp2-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the exponential (base 2) of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.ln-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the natural logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.log2-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the base-2 logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[¬ß](#method.log10-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the base-10 logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#55-57)[¬ß](#method.mul_add-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nElementwise fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add. [Read more](about:blank/trait.StdFloat.html#method.mul_add)\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#63-65)[¬ß](#method.sqrt-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the square root value of the equivalently-indexed element in `self`\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#96-98)[¬ß](#method.log-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the logarithm with respect to an arbitrary in the equivalently-indexed elements in `self` and `base`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#113-115)[¬ß](#method.ceil-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the smallest integer greater than or equal to each element.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#120-122)[¬ß](#method.floor-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the largest integer value less than or equal to each element.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#127-129)[¬ß](#method.round-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRounds to the nearest integer value. Ties round toward zero.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#134-136)[¬ß](#method.trunc-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the floating point‚Äôs integer value, with its fractional part removed.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-45)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.sub-10)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-48)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.sub-13)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#impl-Sub%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Output-41)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[¬ß](#method.sub-6)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Sub-for-Simd%3Cf32,+N%3E)\n\n[¬ß](#associatedtype.Output-38)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.sub-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#impl-Sub-for-Simd%3Cf64,+N%3E)\n\n[¬ß](#associatedtype.Output-49)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[¬ß](#method.sub-14)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Ci16,+N%3E)\n\n[¬ß](#associatedtype.Output-42)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub-7)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Ci32,+N%3E)\n\n[¬ß](#associatedtype.Output-47)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub-12)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Ci64,+N%3E)\n\n[¬ß](#associatedtype.Output-46)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub-11)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Ci8,+N%3E)\n\n[¬ß](#associatedtype.Output-40)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub-5)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Cisize,+N%3E)\n\n[¬ß](#associatedtype.Output-43)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub-8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Cu16,+N%3E)\n\n[¬ß](#associatedtype.Output-44)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub-9)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Cu32,+N%3E)\n\n[¬ß](#associatedtype.Output-36)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Cu64,+N%3E)\n\n[¬ß](#associatedtype.Output-39)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Cu8,+N%3E)\n\n[¬ß](#associatedtype.Output-35)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#impl-Sub-for-Simd%3Cusize,+N%3E)\n\n[¬ß](#associatedtype.Output-37)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232)[¬ß](#method.sub-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[¬ß](#impl-SubAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51)[¬ß](#impl-Sum%3C%26Simd%3Cf32,+N%3E%3E-for-Simd%3Cf32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51)[¬ß](#method.sum-1)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[¬ß](#impl-Sum%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[¬ß](#method.sum-11)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59)[¬ß](#impl-Sum%3C%26Simd%3Ci16,+N%3E%3E-for-Simd%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59)[¬ß](#method.sum-23)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60)[¬ß](#impl-Sum%3C%26Simd%3Ci32,+N%3E%3E-for-Simd%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60)[¬ß](#method.sum-19)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61)[¬ß](#impl-Sum%3C%26Simd%3Ci64,+N%3E%3E-for-Simd%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61)[¬ß](#method.sum-20)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58)[¬ß](#impl-Sum%3C%26Simd%3Ci8,+N%3E%3E-for-Simd%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58)[¬ß](#method.sum-5)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62)[¬ß](#impl-Sum%3C%26Simd%3Cisize,+N%3E%3E-for-Simd%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62)[¬ß](#method.sum-21)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54)[¬ß](#impl-Sum%3C%26Simd%3Cu16,+N%3E%3E-for-Simd%3Cu16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54)[¬ß](#method.sum-4)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55)[¬ß](#impl-Sum%3C%26Simd%3Cu32,+N%3E%3E-for-Simd%3Cu32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55)[¬ß](#method.sum-18)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56)[¬ß](#impl-Sum%3C%26Simd%3Cu64,+N%3E%3E-for-Simd%3Cu64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56)[¬ß](#method.sum-15)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53)[¬ß](#impl-Sum%3C%26Simd%3Cu8,+N%3E%3E-for-Simd%3Cu8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53)[¬ß](#method.sum-22)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57)[¬ß](#impl-Sum%3C%26Simd%3Cusize,+N%3E%3E-for-Simd%3Cusize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57)[¬ß](#method.sum-6)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51)[¬ß](#impl-Sum-for-Simd%3Cf32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51)[¬ß](#method.sum)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[¬ß](#impl-Sum-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[¬ß](#method.sum-13)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59)[¬ß](#impl-Sum-for-Simd%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59)[¬ß](#method.sum-17)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60)[¬ß](#impl-Sum-for-Simd%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60)[¬ß](#method.sum-8)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61)[¬ß](#impl-Sum-for-Simd%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61)[¬ß](#method.sum-16)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58)[¬ß](#impl-Sum-for-Simd%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58)[¬ß](#method.sum-9)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62)[¬ß](#impl-Sum-for-Simd%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62)[¬ß](#method.sum-14)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54)[¬ß](#impl-Sum-for-Simd%3Cu16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54)[¬ß](#method.sum-7)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55)[¬ß](#impl-Sum-for-Simd%3Cu32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55)[¬ß](#method.sum-12)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56)[¬ß](#impl-Sum-for-Simd%3Cu64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56)[¬ß](#method.sum-3)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53)[¬ß](#impl-Sum-for-Simd%3Cu8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53)[¬ß](#method.sum-10)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57)[¬ß](#impl-Sum-for-Simd%3Cusize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57)[¬ß](#method.sum-2)\n\nMethod which takes an iterator and generates `Self` from the elements by ‚Äúsumming up‚Äù the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#impl-ToBytes-for-Simd%3Cf32,+1%3E)\n\n[¬ß](#associatedtype.Bytes-59)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_ne_bytes-59)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_be_bytes-59)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_le_bytes-59)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_ne_bytes-59)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_be_bytes-59)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_le_bytes-59)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#impl-ToBytes-for-Simd%3Cf32,+16%3E)\n\n[¬ß](#associatedtype.Bytes-23)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_ne_bytes-23)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_be_bytes-23)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_le_bytes-23)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_ne_bytes-23)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_be_bytes-23)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_le_bytes-23)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#impl-ToBytes-for-Simd%3Cf32,+2%3E)\n\n[¬ß](#associatedtype.Bytes-29)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_ne_bytes-29)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_be_bytes-29)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_le_bytes-29)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_ne_bytes-29)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_be_bytes-29)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_le_bytes-29)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#impl-ToBytes-for-Simd%3Cf32,+4%3E)\n\n[¬ß](#associatedtype.Bytes-54)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_ne_bytes-54)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_be_bytes-54)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_le_bytes-54)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_ne_bytes-54)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_be_bytes-54)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_le_bytes-54)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#impl-ToBytes-for-Simd%3Cf32,+8%3E)\n\n[¬ß](#associatedtype.Bytes-60)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_ne_bytes-60)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_be_bytes-60)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.to_le_bytes-60)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_ne_bytes-60)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_be_bytes-60)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144)[¬ß](#method.from_le_bytes-60)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#impl-ToBytes-for-Simd%3Cf64,+1%3E)\n\n[¬ß](#associatedtype.Bytes-44)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_ne_bytes-44)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_be_bytes-44)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_le_bytes-44)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_ne_bytes-44)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_be_bytes-44)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_le_bytes-44)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#impl-ToBytes-for-Simd%3Cf64,+2%3E)\n\n[¬ß](#associatedtype.Bytes-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_ne_bytes-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_be_bytes-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_le_bytes-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_ne_bytes-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_be_bytes-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_le_bytes-11)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#impl-ToBytes-for-Simd%3Cf64,+4%3E)\n\n[¬ß](#associatedtype.Bytes-17)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_ne_bytes-17)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_be_bytes-17)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_le_bytes-17)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_ne_bytes-17)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_be_bytes-17)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_le_bytes-17)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#impl-ToBytes-for-Simd%3Cf64,+8%3E)\n\n[¬ß](#associatedtype.Bytes-35)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_ne_bytes-35)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_be_bytes-35)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.to_le_bytes-35)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_ne_bytes-35)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_be_bytes-35)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[¬ß](#method.from_le_bytes-35)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#impl-ToBytes-for-Simd%3Ci16,+1%3E)\n\n[¬ß](#associatedtype.Bytes-47)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_ne_bytes-47)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_be_bytes-47)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_le_bytes-47)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_ne_bytes-47)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_be_bytes-47)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_le_bytes-47)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#impl-ToBytes-for-Simd%3Ci16,+16%3E)\n\n[¬ß](#associatedtype.Bytes-31)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_ne_bytes-31)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_be_bytes-31)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_le_bytes-31)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_ne_bytes-31)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_be_bytes-31)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_le_bytes-31)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#impl-ToBytes-for-Simd%3Ci16,+2%3E)\n\n[¬ß](#associatedtype.Bytes-36)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_ne_bytes-36)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_be_bytes-36)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_le_bytes-36)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_ne_bytes-36)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_be_bytes-36)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_le_bytes-36)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#impl-ToBytes-for-Simd%3Ci16,+32%3E)\n\n[¬ß](#associatedtype.Bytes-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_ne_bytes-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_be_bytes-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_le_bytes-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_ne_bytes-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_be_bytes-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_le_bytes-13)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#impl-ToBytes-for-Simd%3Ci16,+4%3E)\n\n[¬ß](#associatedtype.Bytes-55)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_ne_bytes-55)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_be_bytes-55)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_le_bytes-55)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_ne_bytes-55)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_be_bytes-55)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_le_bytes-55)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#impl-ToBytes-for-Simd%3Ci16,+8%3E)\n\n[¬ß](#associatedtype.Bytes-28)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_ne_bytes-28)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_be_bytes-28)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.to_le_bytes-28)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_ne_bytes-28)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_be_bytes-28)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136)[¬ß](#method.from_le_bytes-28)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#impl-ToBytes-for-Simd%3Ci32,+1%3E)\n\n[¬ß](#associatedtype.Bytes-39)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_ne_bytes-39)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_be_bytes-39)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_le_bytes-39)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_ne_bytes-39)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_be_bytes-39)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_le_bytes-39)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#impl-ToBytes-for-Simd%3Ci32,+16%3E)\n\n[¬ß](#associatedtype.Bytes-20)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_ne_bytes-20)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_be_bytes-20)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_le_bytes-20)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_ne_bytes-20)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_be_bytes-20)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_le_bytes-20)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#impl-ToBytes-for-Simd%3Ci32,+2%3E)\n\n[¬ß](#associatedtype.Bytes-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_ne_bytes-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_be_bytes-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_le_bytes-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_ne_bytes-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_be_bytes-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_le_bytes-9)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#impl-ToBytes-for-Simd%3Ci32,+4%3E)\n\n[¬ß](#associatedtype.Bytes-37)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_ne_bytes-37)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_be_bytes-37)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_le_bytes-37)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_ne_bytes-37)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_be_bytes-37)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_le_bytes-37)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#impl-ToBytes-for-Simd%3Ci32,+8%3E)\n\n[¬ß](#associatedtype.Bytes-56)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_ne_bytes-56)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_be_bytes-56)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.to_le_bytes-56)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_ne_bytes-56)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_be_bytes-56)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137)[¬ß](#method.from_le_bytes-56)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#impl-ToBytes-for-Simd%3Ci64,+1%3E)\n\n[¬ß](#associatedtype.Bytes-49)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_ne_bytes-49)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_be_bytes-49)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_le_bytes-49)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_ne_bytes-49)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_be_bytes-49)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_le_bytes-49)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#impl-ToBytes-for-Simd%3Ci64,+2%3E)\n\n[¬ß](#associatedtype.Bytes-50)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_ne_bytes-50)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_be_bytes-50)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_le_bytes-50)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_ne_bytes-50)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_be_bytes-50)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_le_bytes-50)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#impl-ToBytes-for-Simd%3Ci64,+4%3E)\n\n[¬ß](#associatedtype.Bytes-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_ne_bytes-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_be_bytes-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_le_bytes-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_ne_bytes-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_be_bytes-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_le_bytes-4)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#impl-ToBytes-for-Simd%3Ci64,+8%3E)\n\n[¬ß](#associatedtype.Bytes-58)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_ne_bytes-58)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_be_bytes-58)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.to_le_bytes-58)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_ne_bytes-58)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_be_bytes-58)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138)[¬ß](#method.from_le_bytes-58)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#impl-ToBytes-for-Simd%3Ci8,+1%3E)\n\n[¬ß](#associatedtype.Bytes-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_ne_bytes-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_be_bytes-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_le_bytes-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_ne_bytes-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_be_bytes-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_le_bytes-5)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#impl-ToBytes-for-Simd%3Ci8,+16%3E)\n\n[¬ß](#associatedtype.Bytes-15)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_ne_bytes-15)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_be_bytes-15)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_le_bytes-15)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_ne_bytes-15)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_be_bytes-15)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_le_bytes-15)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#impl-ToBytes-for-Simd%3Ci8,+2%3E)\n\n[¬ß](#associatedtype.Bytes-21)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_ne_bytes-21)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_be_bytes-21)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_le_bytes-21)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_ne_bytes-21)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_be_bytes-21)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_le_bytes-21)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#impl-ToBytes-for-Simd%3Ci8,+32%3E)\n\n[¬ß](#associatedtype.Bytes-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_ne_bytes-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_be_bytes-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_le_bytes-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_ne_bytes-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_be_bytes-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_le_bytes-10)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#impl-ToBytes-for-Simd%3Ci8,+4%3E)\n\n[¬ß](#associatedtype.Bytes-57)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_ne_bytes-57)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_be_bytes-57)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_le_bytes-57)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_ne_bytes-57)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_be_bytes-57)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_le_bytes-57)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#impl-ToBytes-for-Simd%3Ci8,+64%3E)\n\n[¬ß](#associatedtype.Bytes-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_ne_bytes-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_be_bytes-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_le_bytes-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_ne_bytes-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_be_bytes-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_le_bytes-8)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#impl-ToBytes-for-Simd%3Ci8,+8%3E)\n\n[¬ß](#associatedtype.Bytes-51)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_ne_bytes-51)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_be_bytes-51)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.to_le_bytes-51)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_ne_bytes-51)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_be_bytes-51)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135)[¬ß](#method.from_le_bytes-51)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#impl-ToBytes-for-Simd%3Cisize,+1%3E)\n\n[¬ß](#associatedtype.Bytes-52)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_ne_bytes-52)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_be_bytes-52)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_le_bytes-52)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_ne_bytes-52)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_be_bytes-52)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_le_bytes-52)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#impl-ToBytes-for-Simd%3Cisize,+2%3E)\n\n[¬ß](#associatedtype.Bytes-53)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_ne_bytes-53)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_be_bytes-53)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_le_bytes-53)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_ne_bytes-53)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_be_bytes-53)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_le_bytes-53)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#impl-ToBytes-for-Simd%3Cisize,+4%3E)\n\n[¬ß](#associatedtype.Bytes-34)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_ne_bytes-34)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_be_bytes-34)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_le_bytes-34)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_ne_bytes-34)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_be_bytes-34)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_le_bytes-34)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#impl-ToBytes-for-Simd%3Cisize,+8%3E)\n\n[¬ß](#associatedtype.Bytes-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_ne_bytes-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_be_bytes-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.to_le_bytes-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_ne_bytes-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_be_bytes-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142)[¬ß](#method.from_le_bytes-7)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#impl-ToBytes-for-Simd%3Cu16,+1%3E)\n\n[¬ß](#associatedtype.Bytes-16)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_ne_bytes-16)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_be_bytes-16)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_le_bytes-16)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_ne_bytes-16)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_be_bytes-16)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_le_bytes-16)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#impl-ToBytes-for-Simd%3Cu16,+16%3E)\n\n[¬ß](#associatedtype.Bytes-30)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_ne_bytes-30)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_be_bytes-30)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_le_bytes-30)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_ne_bytes-30)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_be_bytes-30)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_le_bytes-30)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#impl-ToBytes-for-Simd%3Cu16,+2%3E)\n\n[¬ß](#associatedtype.Bytes-19)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_ne_bytes-19)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_be_bytes-19)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_le_bytes-19)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_ne_bytes-19)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_be_bytes-19)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_le_bytes-19)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#impl-ToBytes-for-Simd%3Cu16,+32%3E)\n\n[¬ß](#associatedtype.Bytes)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_ne_bytes)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_be_bytes)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_le_bytes)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_ne_bytes)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_be_bytes)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_le_bytes)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#impl-ToBytes-for-Simd%3Cu16,+4%3E)\n\n[¬ß](#associatedtype.Bytes-22)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_ne_bytes-22)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_be_bytes-22)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_le_bytes-22)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_ne_bytes-22)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_be_bytes-22)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_le_bytes-22)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#impl-ToBytes-for-Simd%3Cu16,+8%3E)\n\n[¬ß](#associatedtype.Bytes-48)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_ne_bytes-48)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_be_bytes-48)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.to_le_bytes-48)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_ne_bytes-48)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_be_bytes-48)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127)[¬ß](#method.from_le_bytes-48)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#impl-ToBytes-for-Simd%3Cu32,+1%3E)\n\n[¬ß](#associatedtype.Bytes-40)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_ne_bytes-40)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_be_bytes-40)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_le_bytes-40)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_ne_bytes-40)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_be_bytes-40)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_le_bytes-40)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#impl-ToBytes-for-Simd%3Cu32,+16%3E)\n\n[¬ß](#associatedtype.Bytes-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_ne_bytes-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_be_bytes-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_le_bytes-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_ne_bytes-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_be_bytes-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_le_bytes-1)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#impl-ToBytes-for-Simd%3Cu32,+2%3E)\n\n[¬ß](#associatedtype.Bytes-46)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_ne_bytes-46)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_be_bytes-46)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_le_bytes-46)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_ne_bytes-46)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_be_bytes-46)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_le_bytes-46)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#impl-ToBytes-for-Simd%3Cu32,+4%3E)\n\n[¬ß](#associatedtype.Bytes-42)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_ne_bytes-42)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_be_bytes-42)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_le_bytes-42)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_ne_bytes-42)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_be_bytes-42)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_le_bytes-42)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#impl-ToBytes-for-Simd%3Cu32,+8%3E)\n\n[¬ß](#associatedtype.Bytes-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_ne_bytes-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_be_bytes-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.to_le_bytes-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_ne_bytes-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_be_bytes-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128)[¬ß](#method.from_le_bytes-3)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#impl-ToBytes-for-Simd%3Cu64,+1%3E)\n\n[¬ß](#associatedtype.Bytes-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_ne_bytes-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_be_bytes-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_le_bytes-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_ne_bytes-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_be_bytes-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_le_bytes-6)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#impl-ToBytes-for-Simd%3Cu64,+2%3E)\n\n[¬ß](#associatedtype.Bytes-43)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_ne_bytes-43)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_be_bytes-43)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_le_bytes-43)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_ne_bytes-43)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_be_bytes-43)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_le_bytes-43)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#impl-ToBytes-for-Simd%3Cu64,+4%3E)\n\n[¬ß](#associatedtype.Bytes-33)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_ne_bytes-33)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_be_bytes-33)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_le_bytes-33)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_ne_bytes-33)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_be_bytes-33)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_le_bytes-33)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#impl-ToBytes-for-Simd%3Cu64,+8%3E)\n\n[¬ß](#associatedtype.Bytes-27)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_ne_bytes-27)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_be_bytes-27)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.to_le_bytes-27)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_ne_bytes-27)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_be_bytes-27)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129)[¬ß](#method.from_le_bytes-27)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#impl-ToBytes-for-Simd%3Cu8,+1%3E)\n\n[¬ß](#associatedtype.Bytes-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_ne_bytes-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_be_bytes-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_le_bytes-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_ne_bytes-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_be_bytes-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_le_bytes-2)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#impl-ToBytes-for-Simd%3Cu8,+16%3E)\n\n[¬ß](#associatedtype.Bytes-14)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_ne_bytes-14)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_be_bytes-14)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_le_bytes-14)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_ne_bytes-14)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_be_bytes-14)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_le_bytes-14)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#impl-ToBytes-for-Simd%3Cu8,+2%3E)\n\n[¬ß](#associatedtype.Bytes-41)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_ne_bytes-41)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_be_bytes-41)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_le_bytes-41)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_ne_bytes-41)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_be_bytes-41)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_le_bytes-41)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#impl-ToBytes-for-Simd%3Cu8,+32%3E)\n\n[¬ß](#associatedtype.Bytes-24)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_ne_bytes-24)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_be_bytes-24)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_le_bytes-24)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_ne_bytes-24)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_be_bytes-24)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_le_bytes-24)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#impl-ToBytes-for-Simd%3Cu8,+4%3E)\n\n[¬ß](#associatedtype.Bytes-38)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_ne_bytes-38)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_be_bytes-38)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_le_bytes-38)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_ne_bytes-38)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_be_bytes-38)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_le_bytes-38)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#impl-ToBytes-for-Simd%3Cu8,+64%3E)\n\n[¬ß](#associatedtype.Bytes-18)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_ne_bytes-18)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_be_bytes-18)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_le_bytes-18)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_ne_bytes-18)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_be_bytes-18)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_le_bytes-18)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#impl-ToBytes-for-Simd%3Cu8,+8%3E)\n\n[¬ß](#associatedtype.Bytes-26)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_ne_bytes-26)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_be_bytes-26)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.to_le_bytes-26)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_ne_bytes-26)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_be_bytes-26)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126)[¬ß](#method.from_le_bytes-26)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#impl-ToBytes-for-Simd%3Cusize,+1%3E)\n\n[¬ß](#associatedtype.Bytes-32)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_ne_bytes-32)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_be_bytes-32)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_le_bytes-32)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_ne_bytes-32)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_be_bytes-32)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_le_bytes-32)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#impl-ToBytes-for-Simd%3Cusize,+2%3E)\n\n[¬ß](#associatedtype.Bytes-25)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_ne_bytes-25)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_be_bytes-25)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_le_bytes-25)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_ne_bytes-25)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_be_bytes-25)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_le_bytes-25)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#impl-ToBytes-for-Simd%3Cusize,+4%3E)\n\n[¬ß](#associatedtype.Bytes-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_ne_bytes-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_be_bytes-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_le_bytes-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_ne_bytes-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_be_bytes-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_le_bytes-12)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#impl-ToBytes-for-Simd%3Cusize,+8%3E)\n\n[¬ß](#associatedtype.Bytes-45)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_ne_bytes-45)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_be_bytes-45)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.to_le_bytes-45)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_ne_bytes-45)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_be_bytes-45)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133)[¬ß](#method.from_le_bytes-45)\n\nüî¨This is a nightly-only experimental API. (`portable_simd`¬†[#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1041-1044)[¬ß](#impl-TryFrom%3C%26%5BT%5D%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1049)[¬ß](#method.try_from-1)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1054-1057)[¬ß](#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-Simd%3CT,+N%3E)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1062)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#865-868)[¬ß](#impl-Copy-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#939-942)[¬ß](#impl-Eq-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[¬ß](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[¬ß](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[¬ß](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[¬ß](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[¬ß](#method.from-75)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[¬ß](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[¬ß](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[¬ß](#impl-ToOwned-for-T)\n\n[¬ß](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[¬ß](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[¬ß](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[¬ß](#impl-TryFrom%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-3)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[¬ß](#method.try_from-2)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[¬ß](#impl-TryInto%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-2)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[¬ß](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A SIMD vector with the shape of `[T; N]` but the operations of `T`.\"><title>Simd in std::simd - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Simd</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Simd</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Associated Constants</a></h3><ul class=\"block associatedconstant\"><li><a href=\"#associatedconstant.LEN\">LEN</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_array\">as_array</a></li><li><a href=\"#method.as_mut_array\">as_mut_array</a></li><li><a href=\"#method.copy_to_slice\">copy_to_slice</a></li><li><a href=\"#method.deinterleave\">deinterleave</a></li><li><a href=\"#method.from_array\">from_array</a></li><li><a href=\"#method.from_slice\">from_slice</a></li><li><a href=\"#method.gather_or\">gather_or</a></li><li><a href=\"#method.gather_or_default\">gather_or_default</a></li><li><a href=\"#method.gather_ptr\">gather_ptr</a></li><li><a href=\"#method.gather_select\">gather_select</a></li><li><a href=\"#method.gather_select_ptr\">gather_select_ptr</a></li><li><a href=\"#method.gather_select_unchecked\">gather_select_unchecked</a></li><li><a href=\"#method.interleave\">interleave</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.load_or\">load_or</a></li><li><a href=\"#method.load_or_default\">load_or_default</a></li><li><a href=\"#method.load_select\">load_select</a></li><li><a href=\"#method.load_select_or_default\">load_select_or_default</a></li><li><a href=\"#method.load_select_ptr\">load_select_ptr</a></li><li><a href=\"#method.load_select_unchecked\">load_select_unchecked</a></li><li><a href=\"#method.resize\">resize</a></li><li><a href=\"#method.reverse\">reverse</a></li><li><a href=\"#method.rotate_elements_left\">rotate_elements_left</a></li><li><a href=\"#method.rotate_elements_right\">rotate_elements_right</a></li><li><a href=\"#method.scatter\">scatter</a></li><li><a href=\"#method.scatter_ptr\">scatter_ptr</a></li><li><a href=\"#method.scatter_select\">scatter_select</a></li><li><a href=\"#method.scatter_select_ptr\">scatter_select_ptr</a></li><li><a href=\"#method.scatter_select_unchecked\">scatter_select_unchecked</a></li><li><a href=\"#method.splat\">splat</a></li><li><a href=\"#method.store_select\">store_select</a></li><li><a href=\"#method.store_select_ptr\">store_select_ptr</a></li><li><a href=\"#method.store_select_unchecked\">store_select_unchecked</a></li><li><a href=\"#method.swizzle_dyn\">swizzle_dyn</a></li><li><a href=\"#method.to_array\">to_array</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Add-for-Simd%3Cf32,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Cf64,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Ci16,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Ci32,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Ci64,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Ci8,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Cisize,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Cu16,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Cu32,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Cu64,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Cu8,+N%3E\">Add</a></li><li><a href=\"#impl-Add-for-Simd%3Cusize,+N%3E\">Add</a></li><li><a href=\"#impl-Add%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Add&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Add%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Add&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Add%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Add&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-AddAssign%3CU%3E-for-Simd%3CT,+N%3E\">AddAssign&lt;U&gt;</a></li><li><a href=\"#impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\">AsMut&lt;[T; N]&gt;</a></li><li><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\">AsMut&lt;[T]&gt;</a></li><li><a href=\"#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\">AsRef&lt;[T; N]&gt;</a></li><li><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\">AsRef&lt;[T]&gt;</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Ci16,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Ci32,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Ci64,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Ci8,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Cisize,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Cu16,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Cu32,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Cu64,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Cu8,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd-for-Simd%3Cusize,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">BitAnd&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">BitAnd&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitAnd%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">BitAnd&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitAndAssign%3CU%3E-for-Simd%3CT,+N%3E\">BitAndAssign&lt;U&gt;</a></li><li><a href=\"#impl-BitOr-for-Simd%3Ci16,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr-for-Simd%3Ci32,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr-for-Simd%3Ci64,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr-for-Simd%3Ci8,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr-for-Simd%3Cisize,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr-for-Simd%3Cu16,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr-for-Simd%3Cu32,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr-for-Simd%3Cu64,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr-for-Simd%3Cu8,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr-for-Simd%3Cusize,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">BitOr&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">BitOr&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitOr%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">BitOr&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitOrAssign%3CU%3E-for-Simd%3CT,+N%3E\">BitOrAssign&lt;U&gt;</a></li><li><a href=\"#impl-BitXor-for-Simd%3Ci16,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor-for-Simd%3Ci32,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor-for-Simd%3Ci64,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor-for-Simd%3Ci8,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor-for-Simd%3Cisize,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor-for-Simd%3Cu16,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor-for-Simd%3Cu32,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor-for-Simd%3Cu64,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor-for-Simd%3Cu8,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor-for-Simd%3Cusize,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">BitXor&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">BitXor&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitXor%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">BitXor&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitXorAssign%3CU%3E-for-Simd%3CT,+N%3E\">BitXorAssign&lt;U&gt;</a></li><li><a href=\"#impl-Clone-for-Simd%3CT,+N%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-Simd%3CT,+N%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-Simd%3CT,+N%3E\">Debug</a></li><li><a href=\"#impl-Default-for-Simd%3CT,+N%3E\">Default</a></li><li><a href=\"#impl-Div-for-Simd%3Cf32,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Cf64,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Ci16,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Ci32,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Ci64,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Ci8,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Cisize,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Cu16,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Cu32,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Cu64,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Cu8,+N%3E\">Div</a></li><li><a href=\"#impl-Div-for-Simd%3Cusize,+N%3E\">Div</a></li><li><a href=\"#impl-Div%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Div&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Div%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Div&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Div%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Div&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-DivAssign%3CU%3E-for-Simd%3CT,+N%3E\">DivAssign&lt;U&gt;</a></li><li><a href=\"#impl-Eq-for-Simd%3CT,+N%3E\">Eq</a></li><li><a href=\"#impl-From%3CMask%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">From&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D\">From&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cf32,+16%3E%3E-for-__m512\">From&lt;Simd&lt;f32, 16&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cf32,+4%3E%3E-for-__m128\">From&lt;Simd&lt;f32, 4&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cf32,+8%3E%3E-for-__m256\">From&lt;Simd&lt;f32, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cf64,+2%3E%3E-for-__m128d\">From&lt;Simd&lt;f64, 2&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cf64,+4%3E%3E-for-__m256d\">From&lt;Simd&lt;f64, 4&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cf64,+8%3E%3E-for-__m512d\">From&lt;Simd&lt;f64, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci16,+16%3E%3E-for-__m256i\">From&lt;Simd&lt;i16, 16&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci16,+32%3E%3E-for-__m512i\">From&lt;Simd&lt;i16, 32&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci16,+8%3E%3E-for-__m128i\">From&lt;Simd&lt;i16, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci32,+16%3E%3E-for-__m512i\">From&lt;Simd&lt;i32, 16&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci32,+4%3E%3E-for-__m128i\">From&lt;Simd&lt;i32, 4&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci32,+8%3E%3E-for-__m256i\">From&lt;Simd&lt;i32, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci64,+2%3E%3E-for-__m128i\">From&lt;Simd&lt;i64, 2&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci64,+4%3E%3E-for-__m256i\">From&lt;Simd&lt;i64, 4&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci64,+8%3E%3E-for-__m512i\">From&lt;Simd&lt;i64, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci8,+16%3E%3E-for-__m128i\">From&lt;Simd&lt;i8, 16&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci8,+32%3E%3E-for-__m256i\">From&lt;Simd&lt;i8, 32&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Ci8,+64%3E%3E-for-__m512i\">From&lt;Simd&lt;i8, 64&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cisize,+2%3E%3E-for-__m128i\">From&lt;Simd&lt;isize, 2&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cisize,+4%3E%3E-for-__m256i\">From&lt;Simd&lt;isize, 4&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cisize,+8%3E%3E-for-__m512i\">From&lt;Simd&lt;isize, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu16,+16%3E%3E-for-__m256i\">From&lt;Simd&lt;u16, 16&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu16,+32%3E%3E-for-__m512i\">From&lt;Simd&lt;u16, 32&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu16,+8%3E%3E-for-__m128i\">From&lt;Simd&lt;u16, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu32,+16%3E%3E-for-__m512i\">From&lt;Simd&lt;u32, 16&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu32,+4%3E%3E-for-__m128i\">From&lt;Simd&lt;u32, 4&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu32,+8%3E%3E-for-__m256i\">From&lt;Simd&lt;u32, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu64,+2%3E%3E-for-__m128i\">From&lt;Simd&lt;u64, 2&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu64,+4%3E%3E-for-__m256i\">From&lt;Simd&lt;u64, 4&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu64,+8%3E%3E-for-__m512i\">From&lt;Simd&lt;u64, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu8,+16%3E%3E-for-__m128i\">From&lt;Simd&lt;u8, 16&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu8,+32%3E%3E-for-__m256i\">From&lt;Simd&lt;u8, 32&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cu8,+64%3E%3E-for-__m512i\">From&lt;Simd&lt;u8, 64&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cusize,+2%3E%3E-for-__m128i\">From&lt;Simd&lt;usize, 2&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cusize,+4%3E%3E-for-__m256i\">From&lt;Simd&lt;usize, 4&gt;&gt;</a></li><li><a href=\"#impl-From%3CSimd%3Cusize,+8%3E%3E-for-__m512i\">From&lt;Simd&lt;usize, 8&gt;&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C__m128%3E-for-Simd%3Cf32,+4%3E\">From&lt;__m128&gt;</a></li><li><a href=\"#impl-From%3C__m128d%3E-for-Simd%3Cf64,+2%3E\">From&lt;__m128d&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Ci16,+8%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Ci32,+4%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Ci64,+2%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Ci8,+16%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cisize,+2%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cu16,+8%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cu32,+4%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cu64,+2%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cu8,+16%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cusize,+2%3E\">From&lt;__m128i&gt;</a></li><li><a href=\"#impl-From%3C__m256%3E-for-Simd%3Cf32,+8%3E\">From&lt;__m256&gt;</a></li><li><a href=\"#impl-From%3C__m256d%3E-for-Simd%3Cf64,+4%3E\">From&lt;__m256d&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Ci16,+16%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Ci32,+8%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Ci64,+4%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Ci8,+32%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cisize,+4%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cu16,+16%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cu32,+8%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cu64,+4%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cu8,+32%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cusize,+4%3E\">From&lt;__m256i&gt;</a></li><li><a href=\"#impl-From%3C__m512%3E-for-Simd%3Cf32,+16%3E\">From&lt;__m512&gt;</a></li><li><a href=\"#impl-From%3C__m512d%3E-for-Simd%3Cf64,+8%3E\">From&lt;__m512d&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Ci16,+32%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Ci32,+16%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Ci64,+8%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Ci8,+64%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cisize,+8%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cu16,+32%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cu32,+16%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cu64,+8%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cu8,+64%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cusize,+8%3E\">From&lt;__m512i&gt;</a></li><li><a href=\"#impl-Hash-for-Simd%3CT,+N%3E\">Hash</a></li><li><a href=\"#impl-Index%3CI%3E-for-Simd%3CT,+N%3E\">Index&lt;I&gt;</a></li><li><a href=\"#impl-IndexMut%3CI%3E-for-Simd%3CT,+N%3E\">IndexMut&lt;I&gt;</a></li><li><a href=\"#impl-Mul-for-Simd%3Cf32,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Cf64,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Ci16,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Ci32,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Ci64,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Ci8,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Cisize,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Cu16,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Cu32,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Cu64,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Cu8,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul-for-Simd%3Cusize,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Mul&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Mul&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Mul%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Mul&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-MulAssign%3CU%3E-for-Simd%3CT,+N%3E\">MulAssign&lt;U&gt;</a></li><li><a href=\"#impl-Neg-for-Simd%3Cf32,+N%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-Simd%3Cf64,+N%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-Simd%3Ci16,+N%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-Simd%3Ci32,+N%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-Simd%3Ci64,+N%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-Simd%3Ci8,+N%3E\">Neg</a></li><li><a href=\"#impl-Neg-for-Simd%3Cisize,+N%3E\">Neg</a></li><li><a href=\"#impl-Not-for-Simd%3Ci16,+N%3E\">Not</a></li><li><a href=\"#impl-Not-for-Simd%3Ci32,+N%3E\">Not</a></li><li><a href=\"#impl-Not-for-Simd%3Ci64,+N%3E\">Not</a></li><li><a href=\"#impl-Not-for-Simd%3Ci8,+N%3E\">Not</a></li><li><a href=\"#impl-Not-for-Simd%3Cisize,+N%3E\">Not</a></li><li><a href=\"#impl-Not-for-Simd%3Cu16,+N%3E\">Not</a></li><li><a href=\"#impl-Not-for-Simd%3Cu32,+N%3E\">Not</a></li><li><a href=\"#impl-Not-for-Simd%3Cu64,+N%3E\">Not</a></li><li><a href=\"#impl-Not-for-Simd%3Cu8,+N%3E\">Not</a></li><li><a href=\"#impl-Not-for-Simd%3Cusize,+N%3E\">Not</a></li><li><a href=\"#impl-Ord-for-Simd%3CT,+N%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Simd%3CT,+N%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Simd%3CT,+N%3E\">PartialOrd</a></li><li><a href=\"#impl-Product-for-Simd%3Cf32,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Cf64,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Ci16,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Ci32,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Ci64,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Ci8,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Cisize,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Cu16,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Cu32,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Cu64,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Cu8,+N%3E\">Product</a></li><li><a href=\"#impl-Product-for-Simd%3Cusize,+N%3E\">Product</a></li><li><a href=\"#impl-Product%3C%26Simd%3Cf32,+N%3E%3E-for-Simd%3Cf32,+N%3E\">Product&lt;&amp;'a Simd&lt;f32, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\">Product&lt;&amp;'a Simd&lt;f64, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Ci16,+N%3E%3E-for-Simd%3Ci16,+N%3E\">Product&lt;&amp;'a Simd&lt;i16, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Ci32,+N%3E%3E-for-Simd%3Ci32,+N%3E\">Product&lt;&amp;'a Simd&lt;i32, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Ci64,+N%3E%3E-for-Simd%3Ci64,+N%3E\">Product&lt;&amp;'a Simd&lt;i64, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Ci8,+N%3E%3E-for-Simd%3Ci8,+N%3E\">Product&lt;&amp;'a Simd&lt;i8, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Cisize,+N%3E%3E-for-Simd%3Cisize,+N%3E\">Product&lt;&amp;'a Simd&lt;isize, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Cu16,+N%3E%3E-for-Simd%3Cu16,+N%3E\">Product&lt;&amp;'a Simd&lt;u16, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Cu32,+N%3E%3E-for-Simd%3Cu32,+N%3E\">Product&lt;&amp;'a Simd&lt;u32, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Cu64,+N%3E%3E-for-Simd%3Cu64,+N%3E\">Product&lt;&amp;'a Simd&lt;u64, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Cu8,+N%3E%3E-for-Simd%3Cu8,+N%3E\">Product&lt;&amp;'a Simd&lt;u8, N&gt;&gt;</a></li><li><a href=\"#impl-Product%3C%26Simd%3Cusize,+N%3E%3E-for-Simd%3Cusize,+N%3E\">Product&lt;&amp;'a Simd&lt;usize, N&gt;&gt;</a></li><li><a href=\"#impl-Rem-for-Simd%3Cf32,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Cf64,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Ci16,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Ci32,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Ci64,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Ci8,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Cisize,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Cu16,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Cu32,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Cu64,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Cu8,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem-for-Simd%3Cusize,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Rem&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Rem&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Rem%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Rem&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-RemAssign%3CU%3E-for-Simd%3CT,+N%3E\">RemAssign&lt;U&gt;</a></li><li><a href=\"#impl-Shl-for-Simd%3Ci16,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl-for-Simd%3Ci32,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl-for-Simd%3Ci64,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl-for-Simd%3Ci8,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl-for-Simd%3Cisize,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl-for-Simd%3Cu16,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl-for-Simd%3Cu32,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl-for-Simd%3Cu64,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl-for-Simd%3Cu8,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl-for-Simd%3Cusize,+N%3E\">Shl</a></li><li><a href=\"#impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Shl&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Shl&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Shl%3C%26i16%3E-for-%26Simd%3Ci16,+N%3E\">Shl&lt;&amp;i16&gt;</a></li><li><a href=\"#impl-Shl%3C%26i16%3E-for-Simd%3Ci16,+N%3E\">Shl&lt;&amp;i16&gt;</a></li><li><a href=\"#impl-Shl%3C%26i32%3E-for-%26Simd%3Ci32,+N%3E\">Shl&lt;&amp;i32&gt;</a></li><li><a href=\"#impl-Shl%3C%26i32%3E-for-Simd%3Ci32,+N%3E\">Shl&lt;&amp;i32&gt;</a></li><li><a href=\"#impl-Shl%3C%26i64%3E-for-%26Simd%3Ci64,+N%3E\">Shl&lt;&amp;i64&gt;</a></li><li><a href=\"#impl-Shl%3C%26i64%3E-for-Simd%3Ci64,+N%3E\">Shl&lt;&amp;i64&gt;</a></li><li><a href=\"#impl-Shl%3C%26i8%3E-for-%26Simd%3Ci8,+N%3E\">Shl&lt;&amp;i8&gt;</a></li><li><a href=\"#impl-Shl%3C%26i8%3E-for-Simd%3Ci8,+N%3E\">Shl&lt;&amp;i8&gt;</a></li><li><a href=\"#impl-Shl%3C%26isize%3E-for-%26Simd%3Cisize,+N%3E\">Shl&lt;&amp;isize&gt;</a></li><li><a href=\"#impl-Shl%3C%26isize%3E-for-Simd%3Cisize,+N%3E\">Shl&lt;&amp;isize&gt;</a></li><li><a href=\"#impl-Shl%3C%26u16%3E-for-%26Simd%3Cu16,+N%3E\">Shl&lt;&amp;u16&gt;</a></li><li><a href=\"#impl-Shl%3C%26u16%3E-for-Simd%3Cu16,+N%3E\">Shl&lt;&amp;u16&gt;</a></li><li><a href=\"#impl-Shl%3C%26u32%3E-for-%26Simd%3Cu32,+N%3E\">Shl&lt;&amp;u32&gt;</a></li><li><a href=\"#impl-Shl%3C%26u32%3E-for-Simd%3Cu32,+N%3E\">Shl&lt;&amp;u32&gt;</a></li><li><a href=\"#impl-Shl%3C%26u64%3E-for-%26Simd%3Cu64,+N%3E\">Shl&lt;&amp;u64&gt;</a></li><li><a href=\"#impl-Shl%3C%26u64%3E-for-Simd%3Cu64,+N%3E\">Shl&lt;&amp;u64&gt;</a></li><li><a href=\"#impl-Shl%3C%26u8%3E-for-%26Simd%3Cu8,+N%3E\">Shl&lt;&amp;u8&gt;</a></li><li><a href=\"#impl-Shl%3C%26u8%3E-for-Simd%3Cu8,+N%3E\">Shl&lt;&amp;u8&gt;</a></li><li><a href=\"#impl-Shl%3C%26usize%3E-for-%26Simd%3Cusize,+N%3E\">Shl&lt;&amp;usize&gt;</a></li><li><a href=\"#impl-Shl%3C%26usize%3E-for-Simd%3Cusize,+N%3E\">Shl&lt;&amp;usize&gt;</a></li><li><a href=\"#impl-Shl%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Shl&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Shl%3Ci16%3E-for-%26Simd%3Ci16,+N%3E\">Shl&lt;i16&gt;</a></li><li><a href=\"#impl-Shl%3Ci16%3E-for-Simd%3Ci16,+N%3E\">Shl&lt;i16&gt;</a></li><li><a href=\"#impl-Shl%3Ci32%3E-for-%26Simd%3Ci32,+N%3E\">Shl&lt;i32&gt;</a></li><li><a href=\"#impl-Shl%3Ci32%3E-for-Simd%3Ci32,+N%3E\">Shl&lt;i32&gt;</a></li><li><a href=\"#impl-Shl%3Ci64%3E-for-%26Simd%3Ci64,+N%3E\">Shl&lt;i64&gt;</a></li><li><a href=\"#impl-Shl%3Ci64%3E-for-Simd%3Ci64,+N%3E\">Shl&lt;i64&gt;</a></li><li><a href=\"#impl-Shl%3Ci8%3E-for-%26Simd%3Ci8,+N%3E\">Shl&lt;i8&gt;</a></li><li><a href=\"#impl-Shl%3Ci8%3E-for-Simd%3Ci8,+N%3E\">Shl&lt;i8&gt;</a></li><li><a href=\"#impl-Shl%3Cisize%3E-for-%26Simd%3Cisize,+N%3E\">Shl&lt;isize&gt;</a></li><li><a href=\"#impl-Shl%3Cisize%3E-for-Simd%3Cisize,+N%3E\">Shl&lt;isize&gt;</a></li><li><a href=\"#impl-Shl%3Cu16%3E-for-%26Simd%3Cu16,+N%3E\">Shl&lt;u16&gt;</a></li><li><a href=\"#impl-Shl%3Cu16%3E-for-Simd%3Cu16,+N%3E\">Shl&lt;u16&gt;</a></li><li><a href=\"#impl-Shl%3Cu32%3E-for-%26Simd%3Cu32,+N%3E\">Shl&lt;u32&gt;</a></li><li><a href=\"#impl-Shl%3Cu32%3E-for-Simd%3Cu32,+N%3E\">Shl&lt;u32&gt;</a></li><li><a href=\"#impl-Shl%3Cu64%3E-for-%26Simd%3Cu64,+N%3E\">Shl&lt;u64&gt;</a></li><li><a href=\"#impl-Shl%3Cu64%3E-for-Simd%3Cu64,+N%3E\">Shl&lt;u64&gt;</a></li><li><a href=\"#impl-Shl%3Cu8%3E-for-%26Simd%3Cu8,+N%3E\">Shl&lt;u8&gt;</a></li><li><a href=\"#impl-Shl%3Cu8%3E-for-Simd%3Cu8,+N%3E\">Shl&lt;u8&gt;</a></li><li><a href=\"#impl-Shl%3Cusize%3E-for-%26Simd%3Cusize,+N%3E\">Shl&lt;usize&gt;</a></li><li><a href=\"#impl-Shl%3Cusize%3E-for-Simd%3Cusize,+N%3E\">Shl&lt;usize&gt;</a></li><li><a href=\"#impl-ShlAssign%3CU%3E-for-Simd%3CT,+N%3E\">ShlAssign&lt;U&gt;</a></li><li><a href=\"#impl-Shr-for-Simd%3Ci16,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr-for-Simd%3Ci32,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr-for-Simd%3Ci64,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr-for-Simd%3Ci8,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr-for-Simd%3Cisize,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr-for-Simd%3Cu16,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr-for-Simd%3Cu32,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr-for-Simd%3Cu64,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr-for-Simd%3Cu8,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr-for-Simd%3Cusize,+N%3E\">Shr</a></li><li><a href=\"#impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Shr&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Shr&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Shr%3C%26i16%3E-for-%26Simd%3Ci16,+N%3E\">Shr&lt;&amp;i16&gt;</a></li><li><a href=\"#impl-Shr%3C%26i16%3E-for-Simd%3Ci16,+N%3E\">Shr&lt;&amp;i16&gt;</a></li><li><a href=\"#impl-Shr%3C%26i32%3E-for-%26Simd%3Ci32,+N%3E\">Shr&lt;&amp;i32&gt;</a></li><li><a href=\"#impl-Shr%3C%26i32%3E-for-Simd%3Ci32,+N%3E\">Shr&lt;&amp;i32&gt;</a></li><li><a href=\"#impl-Shr%3C%26i64%3E-for-%26Simd%3Ci64,+N%3E\">Shr&lt;&amp;i64&gt;</a></li><li><a href=\"#impl-Shr%3C%26i64%3E-for-Simd%3Ci64,+N%3E\">Shr&lt;&amp;i64&gt;</a></li><li><a href=\"#impl-Shr%3C%26i8%3E-for-%26Simd%3Ci8,+N%3E\">Shr&lt;&amp;i8&gt;</a></li><li><a href=\"#impl-Shr%3C%26i8%3E-for-Simd%3Ci8,+N%3E\">Shr&lt;&amp;i8&gt;</a></li><li><a href=\"#impl-Shr%3C%26isize%3E-for-%26Simd%3Cisize,+N%3E\">Shr&lt;&amp;isize&gt;</a></li><li><a href=\"#impl-Shr%3C%26isize%3E-for-Simd%3Cisize,+N%3E\">Shr&lt;&amp;isize&gt;</a></li><li><a href=\"#impl-Shr%3C%26u16%3E-for-%26Simd%3Cu16,+N%3E\">Shr&lt;&amp;u16&gt;</a></li><li><a href=\"#impl-Shr%3C%26u16%3E-for-Simd%3Cu16,+N%3E\">Shr&lt;&amp;u16&gt;</a></li><li><a href=\"#impl-Shr%3C%26u32%3E-for-%26Simd%3Cu32,+N%3E\">Shr&lt;&amp;u32&gt;</a></li><li><a href=\"#impl-Shr%3C%26u32%3E-for-Simd%3Cu32,+N%3E\">Shr&lt;&amp;u32&gt;</a></li><li><a href=\"#impl-Shr%3C%26u64%3E-for-%26Simd%3Cu64,+N%3E\">Shr&lt;&amp;u64&gt;</a></li><li><a href=\"#impl-Shr%3C%26u64%3E-for-Simd%3Cu64,+N%3E\">Shr&lt;&amp;u64&gt;</a></li><li><a href=\"#impl-Shr%3C%26u8%3E-for-%26Simd%3Cu8,+N%3E\">Shr&lt;&amp;u8&gt;</a></li><li><a href=\"#impl-Shr%3C%26u8%3E-for-Simd%3Cu8,+N%3E\">Shr&lt;&amp;u8&gt;</a></li><li><a href=\"#impl-Shr%3C%26usize%3E-for-%26Simd%3Cusize,+N%3E\">Shr&lt;&amp;usize&gt;</a></li><li><a href=\"#impl-Shr%3C%26usize%3E-for-Simd%3Cusize,+N%3E\">Shr&lt;&amp;usize&gt;</a></li><li><a href=\"#impl-Shr%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Shr&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Shr%3Ci16%3E-for-%26Simd%3Ci16,+N%3E\">Shr&lt;i16&gt;</a></li><li><a href=\"#impl-Shr%3Ci16%3E-for-Simd%3Ci16,+N%3E\">Shr&lt;i16&gt;</a></li><li><a href=\"#impl-Shr%3Ci32%3E-for-%26Simd%3Ci32,+N%3E\">Shr&lt;i32&gt;</a></li><li><a href=\"#impl-Shr%3Ci32%3E-for-Simd%3Ci32,+N%3E\">Shr&lt;i32&gt;</a></li><li><a href=\"#impl-Shr%3Ci64%3E-for-%26Simd%3Ci64,+N%3E\">Shr&lt;i64&gt;</a></li><li><a href=\"#impl-Shr%3Ci64%3E-for-Simd%3Ci64,+N%3E\">Shr&lt;i64&gt;</a></li><li><a href=\"#impl-Shr%3Ci8%3E-for-%26Simd%3Ci8,+N%3E\">Shr&lt;i8&gt;</a></li><li><a href=\"#impl-Shr%3Ci8%3E-for-Simd%3Ci8,+N%3E\">Shr&lt;i8&gt;</a></li><li><a href=\"#impl-Shr%3Cisize%3E-for-%26Simd%3Cisize,+N%3E\">Shr&lt;isize&gt;</a></li><li><a href=\"#impl-Shr%3Cisize%3E-for-Simd%3Cisize,+N%3E\">Shr&lt;isize&gt;</a></li><li><a href=\"#impl-Shr%3Cu16%3E-for-%26Simd%3Cu16,+N%3E\">Shr&lt;u16&gt;</a></li><li><a href=\"#impl-Shr%3Cu16%3E-for-Simd%3Cu16,+N%3E\">Shr&lt;u16&gt;</a></li><li><a href=\"#impl-Shr%3Cu32%3E-for-%26Simd%3Cu32,+N%3E\">Shr&lt;u32&gt;</a></li><li><a href=\"#impl-Shr%3Cu32%3E-for-Simd%3Cu32,+N%3E\">Shr&lt;u32&gt;</a></li><li><a href=\"#impl-Shr%3Cu64%3E-for-%26Simd%3Cu64,+N%3E\">Shr&lt;u64&gt;</a></li><li><a href=\"#impl-Shr%3Cu64%3E-for-Simd%3Cu64,+N%3E\">Shr&lt;u64&gt;</a></li><li><a href=\"#impl-Shr%3Cu8%3E-for-%26Simd%3Cu8,+N%3E\">Shr&lt;u8&gt;</a></li><li><a href=\"#impl-Shr%3Cu8%3E-for-Simd%3Cu8,+N%3E\">Shr&lt;u8&gt;</a></li><li><a href=\"#impl-Shr%3Cusize%3E-for-%26Simd%3Cusize,+N%3E\">Shr&lt;usize&gt;</a></li><li><a href=\"#impl-Shr%3Cusize%3E-for-Simd%3Cusize,+N%3E\">Shr&lt;usize&gt;</a></li><li><a href=\"#impl-ShrAssign%3CU%3E-for-Simd%3CT,+N%3E\">ShrAssign&lt;U&gt;</a></li><li><a href=\"#impl-SimdConstPtr-for-Simd%3C*const+T,+N%3E\">SimdConstPtr</a></li><li><a href=\"#impl-SimdFloat-for-Simd%3Cf32,+N%3E\">SimdFloat</a></li><li><a href=\"#impl-SimdFloat-for-Simd%3Cf64,+N%3E\">SimdFloat</a></li><li><a href=\"#impl-SimdInt-for-Simd%3Ci16,+N%3E\">SimdInt</a></li><li><a href=\"#impl-SimdInt-for-Simd%3Ci32,+N%3E\">SimdInt</a></li><li><a href=\"#impl-SimdInt-for-Simd%3Ci64,+N%3E\">SimdInt</a></li><li><a href=\"#impl-SimdInt-for-Simd%3Ci8,+N%3E\">SimdInt</a></li><li><a href=\"#impl-SimdInt-for-Simd%3Cisize,+N%3E\">SimdInt</a></li><li><a href=\"#impl-SimdMutPtr-for-Simd%3C*mut+T,+N%3E\">SimdMutPtr</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3C*const+T,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3C*mut+T,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Ci16,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Ci32,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Ci64,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Ci8,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Cisize,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Cu16,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Cu32,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Cu64,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Cu8,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Simd%3Cusize,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3C*const+T,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3C*mut+T,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Cf32,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Cf64,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Ci16,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Ci32,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Ci64,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Ci8,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Cisize,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Cu16,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Cu32,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Cu64,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Cu8,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Cusize,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3C*const+T,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3C*mut+T,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Cf32,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Cf64,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Ci16,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Ci32,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Ci64,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Ci8,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Cisize,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Cu16,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Cu32,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Cu64,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Cu8,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Cusize,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdUint-for-Simd%3Cu16,+N%3E\">SimdUint</a></li><li><a href=\"#impl-SimdUint-for-Simd%3Cu32,+N%3E\">SimdUint</a></li><li><a href=\"#impl-SimdUint-for-Simd%3Cu64,+N%3E\">SimdUint</a></li><li><a href=\"#impl-SimdUint-for-Simd%3Cu8,+N%3E\">SimdUint</a></li><li><a href=\"#impl-SimdUint-for-Simd%3Cusize,+N%3E\">SimdUint</a></li><li><a href=\"#impl-StdFloat-for-Simd%3Cf32,+N%3E\">StdFloat</a></li><li><a href=\"#impl-StdFloat-for-Simd%3Cf64,+N%3E\">StdFloat</a></li><li><a href=\"#impl-Sub-for-Simd%3Cf32,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Cf64,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Ci16,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Ci32,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Ci64,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Ci8,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Cisize,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Cu16,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Cu32,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Cu64,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Cu8,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub-for-Simd%3Cusize,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Sub&lt;&amp;'rhs Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Sub&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-Sub%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\">Sub&lt;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-SubAssign%3CU%3E-for-Simd%3CT,+N%3E\">SubAssign&lt;U&gt;</a></li><li><a href=\"#impl-Sum-for-Simd%3Cf32,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Cf64,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Ci16,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Ci32,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Ci64,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Ci8,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Cisize,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Cu16,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Cu32,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Cu64,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Cu8,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum-for-Simd%3Cusize,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Cf32,+N%3E%3E-for-Simd%3Cf32,+N%3E\">Sum&lt;&amp;'a Simd&lt;f32, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\">Sum&lt;&amp;'a Simd&lt;f64, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Ci16,+N%3E%3E-for-Simd%3Ci16,+N%3E\">Sum&lt;&amp;'a Simd&lt;i16, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Ci32,+N%3E%3E-for-Simd%3Ci32,+N%3E\">Sum&lt;&amp;'a Simd&lt;i32, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Ci64,+N%3E%3E-for-Simd%3Ci64,+N%3E\">Sum&lt;&amp;'a Simd&lt;i64, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Ci8,+N%3E%3E-for-Simd%3Ci8,+N%3E\">Sum&lt;&amp;'a Simd&lt;i8, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Cisize,+N%3E%3E-for-Simd%3Cisize,+N%3E\">Sum&lt;&amp;'a Simd&lt;isize, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Cu16,+N%3E%3E-for-Simd%3Cu16,+N%3E\">Sum&lt;&amp;'a Simd&lt;u16, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Cu32,+N%3E%3E-for-Simd%3Cu32,+N%3E\">Sum&lt;&amp;'a Simd&lt;u32, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Cu64,+N%3E%3E-for-Simd%3Cu64,+N%3E\">Sum&lt;&amp;'a Simd&lt;u64, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Cu8,+N%3E%3E-for-Simd%3Cu8,+N%3E\">Sum&lt;&amp;'a Simd&lt;u8, N&gt;&gt;</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Cusize,+N%3E%3E-for-Simd%3Cusize,+N%3E\">Sum&lt;&amp;'a Simd&lt;usize, N&gt;&gt;</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf32,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf32,+16%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf32,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf32,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf32,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf64,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf64,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf64,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf64,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci16,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci16,+16%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci16,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci16,+32%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci16,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci16,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci32,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci32,+16%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci32,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci32,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci32,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci64,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci64,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci64,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci64,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci8,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci8,+16%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci8,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci8,+32%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci8,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci8,+64%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Ci8,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cisize,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cisize,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cisize,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cisize,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu16,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu16,+16%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu16,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu16,+32%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu16,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu16,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu32,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu32,+16%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu32,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu32,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu32,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu64,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu64,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu64,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu64,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu8,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu8,+16%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu8,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu8,+32%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu8,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu8,+64%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cu8,+8%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cusize,+1%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cusize,+2%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cusize,+4%3E\">ToBytes</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cusize,+8%3E\">ToBytes</a></li><li><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-Simd%3CT,+N%3E\">TryFrom&lt;&amp;[T]&gt;</a></li><li><a href=\"#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-Simd%3CT,+N%3E\">TryFrom&lt;&amp;mut [T]&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Simd%3CT,+N%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Simd%3CT,+N%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Simd%3CT,+N%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Simd%3CT,+N%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-Simd%3CT,+N%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Simd%3CT,+N%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::simd</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"ptr/index.html\">ptr</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.simd_swizzle.html\">simd_swizzle</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.LaneCount.html\">LaneCount</a></li><li><a href=\"struct.Mask.html\">Mask</a></li><li><a href=\"struct.Simd.html\">Simd</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.MaskElement.html\">MaskElement</a></li><li><a href=\"trait.SimdCast.html\">SimdCast</a></li><li><a href=\"trait.SimdElement.html\">SimdElement</a></li><li><a href=\"trait.StdFloat.html\">StdFloat</a></li><li><a href=\"trait.SupportedLaneCount.html\">SupportedLaneCount</a></li><li><a href=\"trait.Swizzle.html\">Swizzle</a></li><li><a href=\"trait.ToBytes.html\">ToBytes</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.f32x1.html\">f32x1</a></li><li><a href=\"type.f32x16.html\">f32x16</a></li><li><a href=\"type.f32x2.html\">f32x2</a></li><li><a href=\"type.f32x32.html\">f32x32</a></li><li><a href=\"type.f32x4.html\">f32x4</a></li><li><a href=\"type.f32x64.html\">f32x64</a></li><li><a href=\"type.f32x8.html\">f32x8</a></li><li><a href=\"type.f64x1.html\">f64x1</a></li><li><a href=\"type.f64x16.html\">f64x16</a></li><li><a href=\"type.f64x2.html\">f64x2</a></li><li><a href=\"type.f64x32.html\">f64x32</a></li><li><a href=\"type.f64x4.html\">f64x4</a></li><li><a href=\"type.f64x64.html\">f64x64</a></li><li><a href=\"type.f64x8.html\">f64x8</a></li><li><a href=\"type.i16x1.html\">i16x1</a></li><li><a href=\"type.i16x16.html\">i16x16</a></li><li><a href=\"type.i16x2.html\">i16x2</a></li><li><a href=\"type.i16x32.html\">i16x32</a></li><li><a href=\"type.i16x4.html\">i16x4</a></li><li><a href=\"type.i16x64.html\">i16x64</a></li><li><a href=\"type.i16x8.html\">i16x8</a></li><li><a href=\"type.i32x1.html\">i32x1</a></li><li><a href=\"type.i32x16.html\">i32x16</a></li><li><a href=\"type.i32x2.html\">i32x2</a></li><li><a href=\"type.i32x32.html\">i32x32</a></li><li><a href=\"type.i32x4.html\">i32x4</a></li><li><a href=\"type.i32x64.html\">i32x64</a></li><li><a href=\"type.i32x8.html\">i32x8</a></li><li><a href=\"type.i64x1.html\">i64x1</a></li><li><a href=\"type.i64x16.html\">i64x16</a></li><li><a href=\"type.i64x2.html\">i64x2</a></li><li><a href=\"type.i64x32.html\">i64x32</a></li><li><a href=\"type.i64x4.html\">i64x4</a></li><li><a href=\"type.i64x64.html\">i64x64</a></li><li><a href=\"type.i64x8.html\">i64x8</a></li><li><a href=\"type.i8x1.html\">i8x1</a></li><li><a href=\"type.i8x16.html\">i8x16</a></li><li><a href=\"type.i8x2.html\">i8x2</a></li><li><a href=\"type.i8x32.html\">i8x32</a></li><li><a href=\"type.i8x4.html\">i8x4</a></li><li><a href=\"type.i8x64.html\">i8x64</a></li><li><a href=\"type.i8x8.html\">i8x8</a></li><li><a href=\"type.isizex1.html\">isizex1</a></li><li><a href=\"type.isizex16.html\">isizex16</a></li><li><a href=\"type.isizex2.html\">isizex2</a></li><li><a href=\"type.isizex32.html\">isizex32</a></li><li><a href=\"type.isizex4.html\">isizex4</a></li><li><a href=\"type.isizex64.html\">isizex64</a></li><li><a href=\"type.isizex8.html\">isizex8</a></li><li><a href=\"type.mask16x1.html\">mask16x1</a></li><li><a href=\"type.mask16x16.html\">mask16x16</a></li><li><a href=\"type.mask16x2.html\">mask16x2</a></li><li><a href=\"type.mask16x32.html\">mask16x32</a></li><li><a href=\"type.mask16x4.html\">mask16x4</a></li><li><a href=\"type.mask16x64.html\">mask16x64</a></li><li><a href=\"type.mask16x8.html\">mask16x8</a></li><li><a href=\"type.mask32x1.html\">mask32x1</a></li><li><a href=\"type.mask32x16.html\">mask32x16</a></li><li><a href=\"type.mask32x2.html\">mask32x2</a></li><li><a href=\"type.mask32x32.html\">mask32x32</a></li><li><a href=\"type.mask32x4.html\">mask32x4</a></li><li><a href=\"type.mask32x64.html\">mask32x64</a></li><li><a href=\"type.mask32x8.html\">mask32x8</a></li><li><a href=\"type.mask64x1.html\">mask64x1</a></li><li><a href=\"type.mask64x16.html\">mask64x16</a></li><li><a href=\"type.mask64x2.html\">mask64x2</a></li><li><a href=\"type.mask64x32.html\">mask64x32</a></li><li><a href=\"type.mask64x4.html\">mask64x4</a></li><li><a href=\"type.mask64x64.html\">mask64x64</a></li><li><a href=\"type.mask64x8.html\">mask64x8</a></li><li><a href=\"type.mask8x1.html\">mask8x1</a></li><li><a href=\"type.mask8x16.html\">mask8x16</a></li><li><a href=\"type.mask8x2.html\">mask8x2</a></li><li><a href=\"type.mask8x32.html\">mask8x32</a></li><li><a href=\"type.mask8x4.html\">mask8x4</a></li><li><a href=\"type.mask8x64.html\">mask8x64</a></li><li><a href=\"type.mask8x8.html\">mask8x8</a></li><li><a href=\"type.masksizex1.html\">masksizex1</a></li><li><a href=\"type.masksizex16.html\">masksizex16</a></li><li><a href=\"type.masksizex2.html\">masksizex2</a></li><li><a href=\"type.masksizex32.html\">masksizex32</a></li><li><a href=\"type.masksizex4.html\">masksizex4</a></li><li><a href=\"type.masksizex64.html\">masksizex64</a></li><li><a href=\"type.masksizex8.html\">masksizex8</a></li><li><a href=\"type.u16x1.html\">u16x1</a></li><li><a href=\"type.u16x16.html\">u16x16</a></li><li><a href=\"type.u16x2.html\">u16x2</a></li><li><a href=\"type.u16x32.html\">u16x32</a></li><li><a href=\"type.u16x4.html\">u16x4</a></li><li><a href=\"type.u16x64.html\">u16x64</a></li><li><a href=\"type.u16x8.html\">u16x8</a></li><li><a href=\"type.u32x1.html\">u32x1</a></li><li><a href=\"type.u32x16.html\">u32x16</a></li><li><a href=\"type.u32x2.html\">u32x2</a></li><li><a href=\"type.u32x32.html\">u32x32</a></li><li><a href=\"type.u32x4.html\">u32x4</a></li><li><a href=\"type.u32x64.html\">u32x64</a></li><li><a href=\"type.u32x8.html\">u32x8</a></li><li><a href=\"type.u64x1.html\">u64x1</a></li><li><a href=\"type.u64x16.html\">u64x16</a></li><li><a href=\"type.u64x2.html\">u64x2</a></li><li><a href=\"type.u64x32.html\">u64x32</a></li><li><a href=\"type.u64x4.html\">u64x4</a></li><li><a href=\"type.u64x64.html\">u64x64</a></li><li><a href=\"type.u64x8.html\">u64x8</a></li><li><a href=\"type.u8x1.html\">u8x1</a></li><li><a href=\"type.u8x16.html\">u8x16</a></li><li><a href=\"type.u8x2.html\">u8x2</a></li><li><a href=\"type.u8x32.html\">u8x32</a></li><li><a href=\"type.u8x4.html\">u8x4</a></li><li><a href=\"type.u8x64.html\">u8x64</a></li><li><a href=\"type.u8x8.html\">u8x8</a></li><li><a href=\"type.usizex1.html\">usizex1</a></li><li><a href=\"type.usizex16.html\">usizex16</a></li><li><a href=\"type.usizex2.html\">usizex2</a></li><li><a href=\"type.usizex32.html\">usizex32</a></li><li><a href=\"type.usizex4.html\">usizex4</a></li><li><a href=\"type.usizex64.html\">usizex64</a></li><li><a href=\"type.usizex8.html\">usizex8</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">simd</a>::<wbr><a class=\"struct\" href=\"#\">Simd</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#103\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code><div class=\"code-attribute\">#[repr(simd)]</div>pub struct Simd&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(<span class=\"comment\">/* private fields */</span>)\n<span class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a></span>;</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A SIMD vector with the shape of <code>[T; N]</code> but the operations of <code>T</code>.</p>\n<p><code>Simd&lt;T, N&gt;</code> supports the operators (+, *, etc.) that <code>T</code> does in ‚Äúelementwise‚Äù fashion.\nThese take the element at each index from the left-hand side and right-hand side,\nperform the operation, then return the result in the same index in a vector of equal size.\nHowever, <code>Simd</code> differs from normal iteration and normal arrays:</p>\n<ul>\n<li><code>Simd&lt;T, N&gt;</code> executes <code>N</code> operations in a single step with no <code>break</code>s</li>\n<li><code>Simd&lt;T, N&gt;</code> can have an alignment greater than <code>T</code>, for better mechanical sympathy</li>\n</ul>\n<p>By always imposing these constraints on <code>Simd</code>, it is easier to compile elementwise operations\ninto machine instructions that can themselves be executed in parallel.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: [i32; <span class=\"number\">4</span>] = [-<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>b = [<span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span>sum = array::from_fn(|i| a[i] + b[i]);\n<span class=\"kw\">let </span>prod = array::from_fn(|i| a[i] * b[i]);\n\n<span class=\"comment\">// `Simd&lt;T, N&gt;` implements `From&lt;[T; N]&gt;`\n</span><span class=\"kw\">let </span>(v, w) = (Simd::from(a), Simd::from(b));\n<span class=\"comment\">// Which means arrays implement `Into&lt;Simd&lt;T, N&gt;&gt;`.\n</span><span class=\"macro\">assert_eq!</span>(v + w, sum.into());\n<span class=\"macro\">assert_eq!</span>(v * w, prod.into());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd%7D;%0A++++use+core::array;%0A++++let+a:+%5Bi32;+4%5D+=+%5B-2,+0,+2,+4%5D;%0A++++let+b+=+%5B10,+9,+8,+7%5D;%0A++++let+sum+=+array::from_fn(%7Ci%7C+a%5Bi%5D+%2B+b%5Bi%5D);%0A++++let+prod+=+array::from_fn(%7Ci%7C+a%5Bi%5D+*+b%5Bi%5D);%0A++++%0A++++//+%60Simd%3CT,+N%3E%60+implements+%60From%3C%5BT;+N%5D%3E%60%0A++++let+(v,+w)+=+(Simd::from(a),+Simd::from(b));%0A++++//+Which+means+arrays+implement+%60Into%3CSimd%3CT,+N%3E%3E%60.%0A++++assert_eq!(v+%2B+w,+sum.into());%0A++++assert_eq!(v+*+w,+prod.into());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p><code>Simd</code> with integer elements treats operators as wrapping, as if <code>T</code> was <a href=\"../num/struct.Wrapping.html\" title=\"struct std::num::Wrapping\"><code>Wrapping&lt;T&gt;</code></a>.\nThus, <code>Simd</code> does not implement <code>wrapping_add</code>, because that is the default behavior.\nThis means there is no warning on overflows, even in ‚Äúdebug‚Äù builds.\nFor most applications where <code>Simd</code> is appropriate, it is ‚Äúnot a bug‚Äù to wrap,\nand even ‚Äúdebug builds‚Äù are unlikely to tolerate the loss of performance.\nYou may want to consider using explicitly checked arithmetic if such is required.\nDivision by zero on integers still causes a panic, so\nyou may want to consider using <code>f32</code> or <code>f64</code> if that is unacceptable.</p>\n<h2 id=\"layout-1\"><a class=\"doc-anchor\" href=\"#layout-1\">¬ß</a>Layout</h2>\n<p><code>Simd&lt;T, N&gt;</code> has a layout similar to <code>[T; N]</code> (identical ‚Äúshapes‚Äù), with a greater alignment.\n<code>[T; N]</code> is aligned to <code>T</code>, but <code>Simd&lt;T, N&gt;</code> will have an alignment based on both <code>T</code> and <code>N</code>.\nThus it is sound to <a href=\"../mem/fn.transmute.html\" title=\"fn std::mem::transmute\"><code>transmute</code></a> <code>Simd&lt;T, N&gt;</code> to <code>[T; N]</code> and should optimize to ‚Äúzero cost‚Äù,\nbut the reverse transmutation may require a copy the compiler cannot simply elide.</p>\n<h2 id=\"abi-features\"><a class=\"doc-anchor\" href=\"#abi-features\">¬ß</a>ABI ‚ÄúFeatures‚Äù</h2>\n<p>Due to Rust‚Äôs safety guarantees, <code>Simd&lt;T, N&gt;</code> is currently passed and returned via memory,\nnot SIMD registers, except as an optimization. Using <code>#[inline]</code> on functions that accept\n<code>Simd&lt;T, N&gt;</code> or return it is recommended, at the cost of code generation time, as\ninlining SIMD-using functions can omit a large function prolog or epilog and thus\nimprove both speed and code size. The need for this may be corrected in the future.</p>\n<p>Using <code>#[inline(always)]</code> still requires additional care.</p>\n<h2 id=\"safe-simd-with-unsafe-rust\"><a class=\"doc-anchor\" href=\"#safe-simd-with-unsafe-rust\">¬ß</a>Safe SIMD with Unsafe Rust</h2>\n<p>Operations with <code>Simd</code> are typically safe, but there are many reasons to want to combine SIMD with <code>unsafe</code> code.\nCare must be taken to respect differences between <code>Simd</code> and other types it may be transformed into or derived from.\nIn particular, the layout of <code>Simd&lt;T, N&gt;</code> may be similar to <code>[T; N]</code>, and may allow some transmutations,\nbut references to <code>[T; N]</code> are not interchangeable with those to <code>Simd&lt;T, N&gt;</code>.\nThus, when using <code>unsafe</code> Rust to read and write <code>Simd&lt;T, N&gt;</code> through <a href=\"../primitive.pointer.html\" title=\"primitive pointer\">raw pointers</a>, it is a good idea to first try with\n<a href=\"../primitive.pointer.html#method.read_unaligned\" title=\"method pointer::read_unaligned\"><code>read_unaligned</code></a> and <a href=\"../primitive.pointer.html#method.write_unaligned\" title=\"method pointer::write_unaligned\"><code>write_unaligned</code></a>. This is because:</p>\n<ul>\n<li><a href=\"../primitive.pointer.html#method.read\" title=\"method pointer::read\"><code>read</code></a> and <a href=\"../primitive.pointer.html#method.write\" title=\"method pointer::write\"><code>write</code></a> require full alignment (in this case, <code>Simd&lt;T, N&gt;</code>‚Äôs alignment)</li>\n<li><code>Simd&lt;T, N&gt;</code> is often read from or written to <a href=\"../primitive.slice.html\" title=\"primitive slice\"><code>[T]</code></a> and other types aligned to <code>T</code></li>\n<li>combining these actions violates the <code>unsafe</code> contract and explodes the program into\na puff of <strong>undefined behavior</strong></li>\n<li>the compiler can implicitly adjust layouts to make unaligned reads or writes fully aligned\nif it sees the optimization</li>\n<li>most contemporary processors with ‚Äúaligned‚Äù and ‚Äúunaligned‚Äù read and write instructions\nexhibit no performance difference if the ‚Äúunaligned‚Äù variant is aligned at runtime</li>\n</ul>\n<p>Less obligations mean unaligned reads and writes are less likely to make the program unsound,\nand may be just as fast as stricter alternatives.\nWhen trying to guarantee alignment, <a href=\"../primitive.slice.html#method.as_simd\" title=\"method slice::as_simd\"><code>[T]::as_simd</code></a> is an option for\nconverting <code>[T]</code> to <code>[Simd&lt;T, N&gt;]</code>, and allows soundly operating on an aligned SIMD body,\nbut it may cost more time when handling the scalar head and tail.\nIf these are not enough, it is most ideal to design data structures to be already aligned\nto <code>mem::align_of::&lt;Simd&lt;T, N&gt;&gt;()</code> before using <code>unsafe</code> Rust to read or write.\nOther ways to compensate for these facts, like materializing <code>Simd</code> to or from an array first,\nare handled by safe methods like <a href=\"prelude/struct.Simd.html#method.from_array\" title=\"associated function std::simd::prelude::Simd::from_array\"><code>Simd::from_array</code></a> and <a href=\"prelude/struct.Simd.html#method.from_slice\" title=\"associated function std::simd::prelude::Simd::from_slice\"><code>Simd::from_slice</code></a>.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#181-184\">source</a><a href=\"#impl-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#189\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.reverse\" class=\"fn\">reverse</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reverse the order of the elements in the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rotate_elements_left\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#212\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.rotate_elements_left\" class=\"fn\">rotate_elements_left</a>&lt;const OFFSET: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Rotates the vector such that the first <code>OFFSET</code> elements of the slice move to the end\nwhile the last <code>self.len() - OFFSET</code> elements move to the front. After calling <code>rotate_elements_left</code>,\nthe element previously at index <code>OFFSET</code> will become the first element in the slice.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rotate_elements_right\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#236\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.rotate_elements_right\" class=\"fn\">rotate_elements_right</a>&lt;const OFFSET: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Rotates the vector such that the first <code>self.len() - OFFSET</code> elements of the vector move to\nthe end while the last <code>OFFSET</code> elements move to the front. After calling <code>rotate_elements_right</code>,\nthe element previously at index <code>self.len() - OFFSET</code> will become the first element in the slice.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.interleave\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#273\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.interleave\" class=\"fn\">interleave</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; (<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;, <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Interleave two vectors.</p>\n<p>The resulting vectors contain elements taken alternatively from <code>self</code> and <code>other</code>, first\nfilling the first result, and then the second.</p>\n<p>The reverse of this operation is <a href=\"prelude/struct.Simd.html#method.deinterleave\" title=\"method std::simd::prelude::Simd::deinterleave\"><code>Simd::deinterleave</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Simd::from_array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = Simd::from_array([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);\n<span class=\"kw\">let </span>(x, y) = a.interleave(b);\n<span class=\"macro\">assert_eq!</span>(x.to_array(), [<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>(y.to_array(), [<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+a+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++let+b+=+Simd::from_array(%5B4,+5,+6,+7%5D);%0A++++let+(x,+y)+=+a.interleave(b);%0A++++assert_eq!(x.to_array(),+%5B0,+4,+1,+5%5D);%0A++++assert_eq!(y.to_array(),+%5B2,+6,+3,+7%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deinterleave\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#324\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.deinterleave\" class=\"fn\">deinterleave</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; (<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;, <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Deinterleave two vectors.</p>\n<p>The first result takes every other element of <code>self</code> and then <code>other</code>, starting with\nthe first element.</p>\n<p>The second result takes every other element of <code>self</code> and then <code>other</code>, starting with\nthe second element.</p>\n<p>The reverse of this operation is <a href=\"prelude/struct.Simd.html#method.interleave\" title=\"method std::simd::prelude::Simd::interleave\"><code>Simd::interleave</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Simd::from_array([<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>]);\n<span class=\"kw\">let </span>b = Simd::from_array([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>]);\n<span class=\"kw\">let </span>(x, y) = a.deinterleave(b);\n<span class=\"macro\">assert_eq!</span>(x.to_array(), [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(y.to_array(), [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+a+=+Simd::from_array(%5B0,+4,+1,+5%5D);%0A++++let+b+=+Simd::from_array(%5B2,+6,+3,+7%5D);%0A++++let+(x,+y)+=+a.deinterleave(b);%0A++++assert_eq!(x.to_array(),+%5B0,+1,+2,+3%5D);%0A++++assert_eq!(y.to_array(),+%5B4,+5,+6,+7%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resize\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#368-370\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.resize\" class=\"fn\">resize</a>&lt;const M: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self, value: T) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, M&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Resize a vector.</p>\n<p>If <code>M</code> &gt; <code>N</code>, extends the length of a vector, setting the new elements to <code>value</code>.\nIf <code>M</code> &lt; <code>N</code>, truncates the vector to the first <code>M</code> elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = u32x4::from_array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(x.resize::&lt;<span class=\"number\">8</span>&gt;(<span class=\"number\">9</span>).to_array(), [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>]);\n<span class=\"macro\">assert_eq!</span>(x.resize::&lt;<span class=\"number\">2</span>&gt;(<span class=\"number\">9</span>).to_array(), [<span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+x+=+u32x4::from_array(%5B0,+1,+2,+3%5D);%0A++++assert_eq!(x.resize::%3C8%3E(9).to_array(),+%5B0,+1,+2,+3,+9,+9,+9,+9%5D);%0A++++assert_eq!(x.resize::%3C2%3E(9).to_array(),+%5B0,+1%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html#4-6\">source</a><a href=\"#impl-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swizzle_dyn\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html#17\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.swizzle_dyn\" class=\"fn\">swizzle_dyn</a>(self, idxs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Swizzle a vector of bytes according to the index vector.\nIndices within range select the appropriate byte.\nIndices ‚Äúout of bounds‚Äù instead select 0.</p>\n<p>Note that the current implementation is selected during build-time\nof the standard library, so <code>cargo build -Zbuild-std</code> may be necessary\nto unlock better performance, especially for larger vectors.\nA planned compiler improvement will enable using <code>#[target_feature]</code> instead.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Simd%3CT,+N%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#108-111\">source</a><a href=\"#impl-Simd%3CT,+N%3E-1\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.LEN\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#114\">source</a><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.LEN\" class=\"constant\">LEN</a>: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a> = N</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Number of elements in this vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#130\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of elements in this SIMD vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = u32x4::splat(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+v+=+u32x4::splat(0);%0A++++assert_eq!(v.len(),+4);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.splat\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#147\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.splat\" class=\"fn\">splat</a>(value: T) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new SIMD vector with all elements set to the given value.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = u32x4::splat(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(v.as_array(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+v+=+u32x4::splat(8);%0A++++assert_eq!(v.as_array(),+%26%5B8,+8,+8,+8%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#168\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_array\" class=\"fn\">as_array</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns an array reference containing the entire SIMD vector.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64x4 = Simd::from_array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(v.as_array(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+u64x4%7D;%0A++++let+v:+u64x4+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++assert_eq!(v.as_array(),+%26%5B0,+1,+2,+3%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#180\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_array\" class=\"fn\">as_mut_array</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable array reference containing the entire SIMD vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#232\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_array\" class=\"fn\">from_array</a>(array: <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts an array to a SIMD vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#245\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.to_array\" class=\"fn\">to_array</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a SIMD vector to an array.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#279\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_slice\" class=\"fn\">from_slice</a>(slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a slice to a SIMD vector containing <code>slice[..N]</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">¬ß</a>Panics</h5>\n<p>Panics if the slice‚Äôs length is less than the vector‚Äôs <code>Simd::N</code>.\nUse <code>load_or_default</code> for an alternative that does not panic.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>source = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>v = u32x4::from_slice(<span class=\"kw-2\">&amp;</span>source);\n<span class=\"macro\">assert_eq!</span>(v.as_array(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::u32x4;%0A++++let+source+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++let+v+=+u32x4::from_slice(%26source);%0A++++assert_eq!(v.as_array(),+%26%5B1,+2,+3,+4%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_to_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#309\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.copy_to_slice\" class=\"fn\">copy_to_slice</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes a SIMD vector to the first <code>N</code> elements of a slice.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">¬ß</a>Panics</h5>\n<p>Panics if the slice‚Äôs length is less than the vector‚Äôs <code>Simd::N</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dest = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>v = u32x4::from_array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nv.copy_to_slice(<span class=\"kw-2\">&amp;mut </span>dest);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>dest, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+mut+dest+=+vec!%5B0;+6%5D;%0A++++let+v+=+u32x4::from_array(%5B1,+2,+3,+4%5D);%0A++++v.copy_to_slice(%26mut+dest);%0A++++assert_eq!(%26dest,+%26%5B1,+2,+3,+4,+0,+0%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_or_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#335-337\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.load_or_default\" class=\"fn\">load_or_default</a>(slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Elements are read so long as they‚Äôre in-bounds for\nthe <code>slice</code>. Otherwise, the default value for the element type is returned.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>];\n\n<span class=\"kw\">let </span>result = Simd::&lt;i32, <span class=\"number\">4</span>&gt;::load_or_default(<span class=\"kw-2\">&amp;</span>vec);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11%5D;%0A++++%0A++++let+result+=+Simd::%3Ci32,+4%3E::load_or_default(%26vec);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+0,+0%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_or\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#359\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.load_or\" class=\"fn\">load_or</a>(slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, or: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Elements are read so long as they‚Äôre in-bounds for\nthe <code>slice</code>. Otherwise, the corresponding value from <code>or</code> is passed through.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>];\n<span class=\"kw\">let </span>or = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>result = Simd::load_or(<span class=\"kw-2\">&amp;</span>vec, or);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">10</span>, <span class=\"number\">11</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11%5D;%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_or(%26vec,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+-2%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_select_or_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#384-386\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.load_select_or_default\" class=\"fn\">load_select_or_default</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Each element is read from memory if its\ncorresponding element in <code>enable</code> is <code>true</code>.</p>\n<p>When the element is disabled or out of bounds for the slice, that memory location\nis not accessed and the corresponding value from <code>or</code> is passed through.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"kw\">let </span>or = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>result = Simd::load_select(<span class=\"kw-2\">&amp;</span>vec, enable, or);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">10</span>, <span class=\"number\">11</span>, -<span class=\"number\">3</span>, <span class=\"number\">13</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_select(%26vec,+enable,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+13%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_select\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#412-416\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.load_select\" class=\"fn\">load_select</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n    or: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Each element is read from memory if its\ncorresponding element in <code>enable</code> is <code>true</code>.</p>\n<p>When the element is disabled or out of bounds for the slice, that memory location\nis not accessed and the corresponding value from <code>or</code> is passed through.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"kw\">let </span>or = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>result = Simd::load_select(<span class=\"kw-2\">&amp;</span>vec, enable, or);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">10</span>, <span class=\"number\">11</span>, -<span class=\"number\">3</span>, <span class=\"number\">13</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_select(%26vec,+enable,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+13%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_select_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#430-434\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.load_select_unchecked\" class=\"fn\">load_select_unchecked</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n    or: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Each element is read from memory if its\ncorresponding element in <code>enable</code> is <code>true</code>.</p>\n<p>When the element is disabled, that memory location is not accessed and the corresponding\nvalue from <code>or</code> is passed through.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_select_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#447-451\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.load_select_ptr\" class=\"fn\">load_select_ptr</a>(\n    ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n    or: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements starting at <code>ptr</code>. Each element is read from memory if its\ncorresponding element in <code>enable</code> is <code>true</code>.</p>\n<p>When the element is disabled, that memory location is not accessed and the corresponding\nvalue from <code>or</code> is passed through.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_or\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#472\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.gather_or\" class=\"fn\">gather_or</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    idxs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n    or: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads from potentially discontiguous indices in <code>slice</code> to construct a SIMD vector.\nIf an index is out-of-bounds, the element is instead selected from the <code>or</code> vector.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);  <span class=\"comment\">// Note the index that is out-of-bounds\n</span><span class=\"kw\">let </span>alt = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>result = Simd::gather_or(<span class=\"kw-2\">&amp;</span>vec, idxs, alt);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([-<span class=\"number\">5</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);++//+Note+the+index+that+is+out-of-bounds%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::gather_or(%26vec,+idxs,+alt);%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+15%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_or_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#491-493\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.gather_or_default\" class=\"fn\">gather_or_default</a>(slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, idxs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads from indices in <code>slice</code> to construct a SIMD vector.\nIf an index is out-of-bounds, the element is set to the default given by <code>T: Default</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);  <span class=\"comment\">// Note the index that is out-of-bounds\n\n</span><span class=\"kw\">let </span>result = Simd::gather_or_default(<span class=\"kw-2\">&amp;</span>vec, idxs);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">0</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);++//+Note+the+index+that+is+out-of-bounds%0A++++%0A++++let+result+=+Simd::gather_or_default(%26vec,+idxs);%0A++++assert_eq!(result,+Simd::from_array(%5B0,+13,+10,+15%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_select\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#516-521\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.gather_select\" class=\"fn\">gather_select</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n    idxs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n    or: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads from indices in <code>slice</code> to construct a SIMD vector.\nThe mask <code>enable</code>s all <code>true</code> indices and disables all <code>false</code> indices.\nIf an index is disabled or is out-of-bounds, the element is selected from the <code>or</code> vector.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// Includes an out-of-bounds index\n</span><span class=\"kw\">let </span>alt = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]); <span class=\"comment\">// Includes a masked element\n\n</span><span class=\"kw\">let </span>result = Simd::gather_select(<span class=\"kw-2\">&amp;</span>vec, enable, idxs, alt);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([-<span class=\"number\">5</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>, -<span class=\"number\">2</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);+//+Includes+an+out-of-bounds+index%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++%0A++++let+result+=+Simd::gather_select(%26vec,+enable,+idxs,+alt);%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+-2%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_select_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#557-562\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.gather_select_unchecked\" class=\"fn\">gather_select_unchecked</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n    idxs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n    or: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads from indices in <code>slice</code> to construct a SIMD vector.\nThe mask <code>enable</code>s all <code>true</code> indices and disables all <code>false</code> indices.\nIf an index is disabled, the element is selected from the <code>or</code> vector.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">¬ß</a>Safety</h5>\n<p>Calling this function with an <code>enable</code>d out-of-bounds index is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>\neven if the resulting value is not used.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// Includes an out-of-bounds index\n</span><span class=\"kw\">let </span>alt = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]); <span class=\"comment\">// Includes a masked element\n// If this mask was used to gather, it would be unsound. Let's fix that.\n</span><span class=\"kw\">let </span>enable = enable &amp; idxs.simd_lt(Simd::splat(vec.len()));\n\n<span class=\"comment\">// The out-of-bounds index has been masked, so it's safe to gather now.\n</span><span class=\"kw\">let </span>result = <span class=\"kw\">unsafe </span>{ Simd::gather_select_unchecked(<span class=\"kw-2\">&amp;</span>vec, enable, idxs, alt) };\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([-<span class=\"number\">5</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>, -<span class=\"number\">2</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+cmp::SimdPartialOrd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);+//+Includes+an+out-of-bounds+index%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++//+If+this+mask+was+used+to+gather,+it+would+be+unsound.+Let's+fix+that.%0A++++let+enable+=+enable+%26+idxs.simd_lt(Simd::splat(vec.len()));%0A++++%0A++++//+The+out-of-bounds+index+has+been+masked,+so+it's+safe+to+gather+now.%0A++++let+result+=+unsafe+%7B+Simd::gather_select_unchecked(%26vec,+enable,+idxs,+alt)+%7D;%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+-2%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#591-593\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.gather_ptr\" class=\"fn\">gather_ptr</a>(source: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Read elementwise from pointers into a SIMD vector.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">¬ß</a>Safety</h5>\n<p>Each read must satisfy the same conditions as <a href=\"../ptr/fn.read.html\" title=\"fn std::ptr::read\"><code>core::ptr::read</code></a>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>values = [<span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>offsets = Simd::from_array([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\n<span class=\"kw\">let </span>gathered = <span class=\"kw\">unsafe </span>{ Simd::gather_ptr(source) };\n<span class=\"macro\">assert_eq!</span>(gathered, Simd::from_array([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+values+=+%5B6,+2,+4,+9%5D;%0A++++let+offsets+=+Simd::from_array(%5B1,+0,+0,+3%5D);%0A++++let+source+=+Simd::splat(values.as_ptr()).wrapping_add(offsets);%0A++++let+gathered+=+unsafe+%7B+Simd::gather_ptr(source)+%7D;%0A++++assert_eq!(gathered,+Simd::from_array(%5B2,+6,+6,+9%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_select_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#625-629\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.gather_select_ptr\" class=\"fn\">gather_select_ptr</a>(\n    source: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n    or: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally read elementwise from pointers into a SIMD vector.\nThe mask <code>enable</code>s all <code>true</code> pointers and disables all <code>false</code> pointers.\nIf a pointer is disabled, the element is selected from the <code>or</code> vector,\nand no read is performed.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">¬ß</a>Safety</h5>\n<p>Enabled elements must satisfy the same conditions as <a href=\"../ptr/fn.read.html\" title=\"fn std::ptr::read\"><code>core::ptr::read</code></a>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>values = [<span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"kw\">let </span>offsets = Simd::from_array([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\n<span class=\"kw\">let </span>gathered = <span class=\"kw\">unsafe </span>{ Simd::gather_select_ptr(source, enable, Simd::splat(<span class=\"number\">0</span>)) };\n<span class=\"macro\">assert_eq!</span>(gathered, Simd::from_array([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+values+=+%5B6,+2,+4,+9%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+offsets+=+Simd::from_array(%5B1,+0,+0,+3%5D);%0A++++let+source+=+Simd::splat(values.as_ptr()).wrapping_add(offsets);%0A++++let+gathered+=+unsafe+%7B+Simd::gather_select_ptr(source,+enable,+Simd::splat(0))+%7D;%0A++++assert_eq!(gathered,+Simd::from_array(%5B2,+6,+0,+9%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.store_select\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#653\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.store_select\" class=\"fn\">store_select</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally write contiguous elements to <code>slice</code>. The <code>enable</code> mask controls\nwhich elements are written, as long as they‚Äôre in-bounds of the <code>slice</code>.\nIf the element is disabled or out of bounds, no memory access to that location\nis made.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arr = [<span class=\"number\">0i32</span>; <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>write = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>]);\n\nwrite.store_select(<span class=\"kw-2\">&amp;mut </span>arr[..<span class=\"number\">3</span>], enable);\n<span class=\"macro\">assert_eq!</span>(arr, [<span class=\"number\">0</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+arr+=+%5B0i32;+4%5D;%0A++++let+write+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Bfalse,+true,+true,+true%5D);%0A++++%0A++++write.store_select(%26mut+arr%5B..3%5D,+enable);%0A++++assert_eq!(arr,+%5B0,+-4,+-3,+0%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.store_select_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#681-685\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.store_select_unchecked\" class=\"fn\">store_select_unchecked</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally write contiguous elements to <code>slice</code>. The <code>enable</code> mask controls\nwhich elements are written.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">¬ß</a>Safety</h5>\n<p>Every enabled element must be in bounds for the <code>slice</code>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arr = [<span class=\"number\">0i32</span>; <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>write = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>]);\n\n<span class=\"kw\">unsafe </span>{ write.store_select_unchecked(<span class=\"kw-2\">&amp;mut </span>arr, enable) };\n<span class=\"macro\">assert_eq!</span>(arr, [<span class=\"number\">0</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+arr+=+%5B0i32;+4%5D;%0A++++let+write+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Bfalse,+true,+true,+true%5D);%0A++++%0A++++unsafe+%7B+write.store_select_unchecked(%26mut+arr,+enable)+%7D;%0A++++assert_eq!(arr,+%5B0,+-4,+-3,+-2%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.store_select_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#700\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.store_select_ptr\" class=\"fn\">store_select_ptr</a>(\n    self,\n    ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally write contiguous elements starting from <code>ptr</code>.\nThe <code>enable</code> mask controls which elements are written.\nWhen disabled, the memory location corresponding to that element is not accessed.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">¬ß</a>Safety</h5>\n<p>Memory addresses for element are calculated <a href=\"../primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\"><code>pointer::wrapping_offset</code></a> and\neach enabled element must satisfy the same conditions as <a href=\"../ptr/fn.write.html\" title=\"fn std::ptr::write\"><code>core::ptr::write</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#722\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.scatter\" class=\"fn\">scatter</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, idxs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes the values in a SIMD vector to potentially discontiguous indices in <code>slice</code>.\nIf an index is out-of-bounds, the write is suppressed without panicking.\nIf two elements in the scattered vector would write to the same index\nonly the last element is guaranteed to actually be written.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]); <span class=\"comment\">// Note the duplicate index.\n</span><span class=\"kw\">let </span>vals = Simd::from_array([-<span class=\"number\">27</span>, <span class=\"number\">82</span>, -<span class=\"number\">41</span>, <span class=\"number\">124</span>]);\n\nvals.scatter(<span class=\"kw-2\">&amp;mut </span>vec, idxs); <span class=\"comment\">// two logical writes means the last wins.\n</span><span class=\"macro\">assert_eq!</span>(vec, <span class=\"macro\">vec!</span>[<span class=\"number\">124</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">82</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);+//+Note+the+duplicate+index.%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++%0A++++vals.scatter(%26mut+vec,+idxs);+//+two+logical+writes+means+the+last+wins.%0A++++assert_eq!(vec,+vec!%5B124,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter_select\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#747\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.scatter_select\" class=\"fn\">scatter_select</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n    idxs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes values from a SIMD vector to multiple potentially discontiguous indices in <code>slice</code>.\nThe mask <code>enable</code>s all <code>true</code> indices and disables all <code>false</code> indices.\nIf an enabled index is out-of-bounds, the write is suppressed without panicking.\nIf two enabled elements in the scattered vector would write to the same index,\nonly the last element is guaranteed to actually be written.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]); <span class=\"comment\">// Includes an out-of-bounds index\n</span><span class=\"kw\">let </span>vals = Simd::from_array([-<span class=\"number\">27</span>, <span class=\"number\">82</span>, -<span class=\"number\">41</span>, <span class=\"number\">124</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]); <span class=\"comment\">// Includes a masked element\n\n</span>vals.scatter_select(<span class=\"kw-2\">&amp;mut </span>vec, enable, idxs); <span class=\"comment\">// The last write is masked, thus omitted.\n</span><span class=\"macro\">assert_eq!</span>(vec, <span class=\"macro\">vec!</span>[-<span class=\"number\">41</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">82</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);+//+Includes+an+out-of-bounds+index%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++%0A++++vals.scatter_select(%26mut+vec,+enable,+idxs);+//+The+last+write+is+masked,+thus+omitted.%0A++++assert_eq!(vec,+vec!%5B-41,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter_select_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#784-789\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.scatter_select_unchecked\" class=\"fn\">scatter_select_unchecked</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n    idxs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes values from a SIMD vector to multiple potentially discontiguous indices in <code>slice</code>.\nThe mask <code>enable</code>s all <code>true</code> indices and disables all <code>false</code> indices.\nIf two enabled elements in the scattered vector would write to the same index,\nonly the last element is guaranteed to actually be written.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">¬ß</a>Safety</h5>\n<p>Calling this function with an enabled out-of-bounds index is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>,\nand may lead to memory corruption.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n<span class=\"kw\">let </span>vals = Simd::from_array([-<span class=\"number\">27</span>, <span class=\"number\">82</span>, -<span class=\"number\">41</span>, <span class=\"number\">124</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]); <span class=\"comment\">// Masks the final index\n// If this mask was used to scatter, it would be unsound. Let's fix that.\n</span><span class=\"kw\">let </span>enable = enable &amp; idxs.simd_lt(Simd::splat(vec.len()));\n\n<span class=\"comment\">// We have masked the OOB index, so it's safe to scatter now.\n</span><span class=\"kw\">unsafe </span>{ vals.scatter_select_unchecked(<span class=\"kw-2\">&amp;mut </span>vec, enable, idxs); }\n<span class=\"comment\">// The second write to index 0 was masked, thus omitted.\n</span><span class=\"macro\">assert_eq!</span>(vec, <span class=\"macro\">vec!</span>[-<span class=\"number\">41</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">82</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+cmp::SimdPartialOrd,+Mask%7D;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Masks+the+final+index%0A++++//+If+this+mask+was+used+to+scatter,+it+would+be+unsound.+Let's+fix+that.%0A++++let+enable+=+enable+%26+idxs.simd_lt(Simd::splat(vec.len()));%0A++++%0A++++//+We+have+masked+the+OOB+index,+so+it's+safe+to+scatter+now.%0A++++unsafe+%7B+vals.scatter_select_unchecked(%26mut+vec,+enable,+idxs);+%7D%0A++++//+The+second+write+to+index+0+was+masked,+thus+omitted.%0A++++assert_eq!(vec,+vec!%5B-41,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#831\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.scatter_ptr\" class=\"fn\">scatter_ptr</a>(self, dest: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Write pointers elementwise into a SIMD vector.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">¬ß</a>Safety</h5>\n<p>Each write must satisfy the same conditions as <a href=\"../ptr/fn.write.html\" title=\"fn std::ptr::write\"><code>core::ptr::write</code></a>.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = [<span class=\"number\">0</span>; <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>offset = Simd::from_array([<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n<span class=\"kw\">let </span>ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\n<span class=\"kw\">unsafe </span>{ Simd::from_array([<span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]).scatter_ptr(ptrs); }\n<span class=\"macro\">assert_eq!</span>(values, [<span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+ptr::SimdMutPtr%7D;%0A++++let+mut+values+=+%5B0;+4%5D;%0A++++let+offset+=+Simd::from_array(%5B3,+2,+1,+0%5D);%0A++++let+ptrs+=+Simd::splat(values.as_mut_ptr()).wrapping_add(offset);%0A++++unsafe+%7B+Simd::from_array(%5B6,+3,+5,+7%5D).scatter_ptr(ptrs);+%7D%0A++++assert_eq!(values,+%5B7,+5,+3,+6%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter_select_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#859\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.scatter_select_ptr\" class=\"fn\">scatter_select_ptr</a>(\n    self,\n    dest: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;,\n    enable: <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally write pointers elementwise into a SIMD vector.\nThe mask <code>enable</code>s all <code>true</code> pointers and disables all <code>false</code> pointers.\nIf a pointer is disabled, the write to its pointee is skipped.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">¬ß</a>Safety</h5>\n<p>Enabled pointers must satisfy the same conditions as <a href=\"../ptr/fn.write.html\" title=\"fn std::ptr::write\"><code>core::ptr::write</code></a>.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = [<span class=\"number\">0</span>; <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>offset = Simd::from_array([<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n<span class=\"kw\">let </span>ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>]);\n<span class=\"kw\">unsafe </span>{ Simd::from_array([<span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]).scatter_select_ptr(ptrs, enable); }\n<span class=\"macro\">assert_eq!</span>(values, [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BMask,+Simd,+ptr::SimdMutPtr%7D;%0A++++let+mut+values+=+%5B0;+4%5D;%0A++++let+offset+=+Simd::from_array(%5B3,+2,+1,+0%5D);%0A++++let+ptrs+=+Simd::splat(values.as_mut_ptr()).wrapping_add(offset);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+false%5D);%0A++++unsafe+%7B+Simd::from_array(%5B6,+3,+5,+7%5D).scatter_select_ptr(ptrs,+enable);+%7D%0A++++assert_eq!(values,+%5B0,+0,+3,+6%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Add%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-64\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-64\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.add-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Add%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-59\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-59\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.add-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Add%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-63\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-63\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.add-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Add-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-57\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-57\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.add-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Add-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-55\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-55\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.add-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-51\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-62\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-62\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-52\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-56\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-56\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-53\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-53\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-54\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-54\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-61\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-61\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-60\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-60\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-50\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Add-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-58\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-58\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.add-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AddAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-AddAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.add_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>+=</code> operation. <a href=\"../ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1007-1010\">source</a><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1013\">source</a><a href=\"#method.as_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#984-987\">source</a><a href=\"#impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#990\">source</a><a href=\"#method.as_mut-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#996-999\">source</a><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1002\">source</a><a href=\"#method.as_ref-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#973-976\">source</a><a href=\"#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#979\">source</a><a href=\"#method.as_ref\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-80\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-80\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitand\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-87\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-87\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitand-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitAnd%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-82\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-82\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitand-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-91\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-91\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-89\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-89\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-92\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-92\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-83\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-83\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-88\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-88\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-90\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-90\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-85\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-85\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-84\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-84\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-86\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-86\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitAnd-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-81\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-81\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitand-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAndAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-BitAndAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;=</code> operation. <a href=\"../ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-24\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitor-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-26\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitor-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitOr%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-34\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitor-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-31\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-30\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-27\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-29\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-23\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-25\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-32\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-33\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-28\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitOr-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-22\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitor\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-BitOrAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-234\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-234\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitxor-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-236\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-236\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitxor-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitXor%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-228\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-228\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitxor-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-224\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-224\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-229\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-229\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-232\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-232\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-225\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-225\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-227\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-227\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-226\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-226\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-231\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-231\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-230\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-230\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-235\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-235\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-BitXor-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-233\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-233\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.bitxor-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXorAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-BitXorAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>^=</code> operation. <a href=\"../ops/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#872-875\">source</a><a href=\"#impl-Clone-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#878\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/fmt.rs.html#4-7\">source</a><a href=\"#impl-Debug-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/fmt.rs.html#18\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>A <code>Simd&lt;T, N&gt;</code> has a debug format like the one for <code>[T]</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>floats = Simd::&lt;f32, <span class=\"number\">4</span>&gt;::splat(-<span class=\"number\">1.0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, [-<span class=\"number\">1.0</span>; <span class=\"number\">4</span>]), <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, floats));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd::Simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd::Simd;%0A++++let+floats+=+Simd::%3Cf32,+4%3E::splat(-1.0);%0A++++assert_eq!(format!(%22%7B:?%7D%22,+%5B-1.0;+4%5D),+format!(%22%7B:?%7D%22,+floats));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#883-886\">source</a><a href=\"#impl-Default-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#889\">source</a><a href=\"#method.default\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Returns the ‚Äúdefault value‚Äù for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Div%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-70\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-70\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.div-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Div%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-78\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-78\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.div-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Div%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-65\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-65\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.div\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Div-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-66\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-66\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.div-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Div-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-74\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-74\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.div-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-76\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-76\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-68\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-68\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-77\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-77\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-67\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-67\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-75\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-75\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-73\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-73\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-79\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-79\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-69\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-69\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-71\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-71\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Div-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-72\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-72\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.div-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DivAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-DivAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.div_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>/=</code> operation. <a href=\"../ops/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1019-1022\">source</a><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1025\">source</a><a href=\"#method.from-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html#293-296\">source</a><a href=\"#impl-From%3CMask%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;Mask&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html#299\">source</a><a href=\"#method.from-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Mask&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1030-1033\">source</a><a href=\"#impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a><div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1036\">source</a><a href=\"#method.from-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vector: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cf32,+16%3E%3E-for-__m512\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#31\">source</a><a href=\"#impl-From%3CSimd%3Cf32,+16%3E%3E-for-__m512\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512.html\" title=\"struct core::core_arch::x86::__m512\">__m512</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#31\">source</a><a href=\"#method.from-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512.html\" title=\"struct core::core_arch::x86::__m512\">__m512</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cf32,+4%3E%3E-for-__m128\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#29\">source</a><a href=\"#impl-From%3CSimd%3Cf32,+4%3E%3E-for-__m128\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128.html\" title=\"struct core::core_arch::x86::__m128\">__m128</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#29\">source</a><a href=\"#method.from-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128.html\" title=\"struct core::core_arch::x86::__m128\">__m128</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cf32,+8%3E%3E-for-__m256\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#30\">source</a><a href=\"#impl-From%3CSimd%3Cf32,+8%3E%3E-for-__m256\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256.html\" title=\"struct core::core_arch::x86::__m256\">__m256</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-72\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#30\">source</a><a href=\"#method.from-72\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256.html\" title=\"struct core::core_arch::x86::__m256\">__m256</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cf64,+2%3E%3E-for-__m128d\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#39\">source</a><a href=\"#impl-From%3CSimd%3Cf64,+2%3E%3E-for-__m128d\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128d.html\" title=\"struct core::core_arch::x86::__m128d\">__m128d</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#39\">source</a><a href=\"#method.from-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128d.html\" title=\"struct core::core_arch::x86::__m128d\">__m128d</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cf64,+4%3E%3E-for-__m256d\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#40\">source</a><a href=\"#impl-From%3CSimd%3Cf64,+4%3E%3E-for-__m256d\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256d.html\" title=\"struct core::core_arch::x86::__m256d\">__m256d</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-63\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#40\">source</a><a href=\"#method.from-63\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256d.html\" title=\"struct core::core_arch::x86::__m256d\">__m256d</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cf64,+8%3E%3E-for-__m512d\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41\">source</a><a href=\"#impl-From%3CSimd%3Cf64,+8%3E%3E-for-__m512d\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512d.html\" title=\"struct core::core_arch::x86::__m512d\">__m512d</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41\">source</a><a href=\"#method.from-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512d.html\" title=\"struct core::core_arch::x86::__m512d\">__m512d</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci16,+16%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#20\">source</a><a href=\"#impl-From%3CSimd%3Ci16,+16%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#20\">source</a><a href=\"#method.from-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci16,+32%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#21\">source</a><a href=\"#impl-From%3CSimd%3Ci16,+32%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#21\">source</a><a href=\"#method.from-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci16,+8%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#19\">source</a><a href=\"#impl-From%3CSimd%3Ci16,+8%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#19\">source</a><a href=\"#method.from-59\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci32,+16%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#28\">source</a><a href=\"#impl-From%3CSimd%3Ci32,+16%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-67\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#28\">source</a><a href=\"#method.from-67\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci32,+4%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#26\">source</a><a href=\"#impl-From%3CSimd%3Ci32,+4%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#26\">source</a><a href=\"#method.from-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci32,+8%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#27\">source</a><a href=\"#impl-From%3CSimd%3Ci32,+8%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#27\">source</a><a href=\"#method.from-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci64,+2%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#36\">source</a><a href=\"#impl-From%3CSimd%3Ci64,+2%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-74\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#36\">source</a><a href=\"#method.from-74\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci64,+4%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#37\">source</a><a href=\"#impl-From%3CSimd%3Ci64,+4%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#37\">source</a><a href=\"#method.from-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci64,+8%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#38\">source</a><a href=\"#impl-From%3CSimd%3Ci64,+8%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#38\">source</a><a href=\"#method.from-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci8,+16%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#12\">source</a><a href=\"#impl-From%3CSimd%3Ci8,+16%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#12\">source</a><a href=\"#method.from-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci8,+32%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#13\">source</a><a href=\"#impl-From%3CSimd%3Ci8,+32%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#13\">source</a><a href=\"#method.from-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Ci8,+64%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#14\">source</a><a href=\"#impl-From%3CSimd%3Ci8,+64%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#14\">source</a><a href=\"#method.from-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cisize,+2%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#60\">source</a><a href=\"#impl-From%3CSimd%3Cisize,+2%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#60\">source</a><a href=\"#method.from-53\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cisize,+4%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#61\">source</a><a href=\"#impl-From%3CSimd%3Cisize,+4%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#61\">source</a><a href=\"#method.from-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cisize,+8%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#62\">source</a><a href=\"#impl-From%3CSimd%3Cisize,+8%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#62\">source</a><a href=\"#method.from-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu16,+16%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#17\">source</a><a href=\"#impl-From%3CSimd%3Cu16,+16%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-66\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#17\">source</a><a href=\"#method.from-66\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu16,+32%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#18\">source</a><a href=\"#impl-From%3CSimd%3Cu16,+32%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#18\">source</a><a href=\"#method.from-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu16,+8%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#16\">source</a><a href=\"#impl-From%3CSimd%3Cu16,+8%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#16\">source</a><a href=\"#method.from-58\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu32,+16%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#25\">source</a><a href=\"#impl-From%3CSimd%3Cu32,+16%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#25\">source</a><a href=\"#method.from-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu32,+4%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#23\">source</a><a href=\"#impl-From%3CSimd%3Cu32,+4%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#23\">source</a><a href=\"#method.from-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu32,+8%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#24\">source</a><a href=\"#impl-From%3CSimd%3Cu32,+8%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-69\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#24\">source</a><a href=\"#method.from-69\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu64,+2%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#33\">source</a><a href=\"#impl-From%3CSimd%3Cu64,+2%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#33\">source</a><a href=\"#method.from-60\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu64,+4%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#34\">source</a><a href=\"#impl-From%3CSimd%3Cu64,+4%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#34\">source</a><a href=\"#method.from-57\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu64,+8%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#35\">source</a><a href=\"#impl-From%3CSimd%3Cu64,+8%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#35\">source</a><a href=\"#method.from-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu8,+16%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#9\">source</a><a href=\"#impl-From%3CSimd%3Cu8,+16%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#9\">source</a><a href=\"#method.from-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu8,+32%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#10\">source</a><a href=\"#impl-From%3CSimd%3Cu8,+32%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#10\">source</a><a href=\"#method.from-54\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cu8,+64%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#11\">source</a><a href=\"#impl-From%3CSimd%3Cu8,+64%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#11\">source</a><a href=\"#method.from-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cusize,+2%3E%3E-for-__m128i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#57\">source</a><a href=\"#impl-From%3CSimd%3Cusize,+2%3E%3E-for-__m128i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-70\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#57\">source</a><a href=\"#method.from-70\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cusize,+4%3E%3E-for-__m256i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#58\">source</a><a href=\"#impl-From%3CSimd%3Cusize,+4%3E%3E-for-__m256i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#58\">source</a><a href=\"#method.from-56\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CSimd%3Cusize,+8%3E%3E-for-__m512i\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#59\">source</a><a href=\"#impl-From%3CSimd%3Cusize,+8%3E%3E-for-__m512i\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#59\">source</a><a href=\"#method.from-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128%3E-for-Simd%3Cf32,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#29\">source</a><a href=\"#impl-From%3C__m128%3E-for-Simd%3Cf32,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128.html\" title=\"struct core::core_arch::x86::__m128\">__m128</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#29\">source</a><a href=\"#method.from-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128.html\" title=\"struct core::core_arch::x86::__m128\">__m128</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128d%3E-for-Simd%3Cf64,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#39\">source</a><a href=\"#impl-From%3C__m128d%3E-for-Simd%3Cf64,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128d.html\" title=\"struct core::core_arch::x86::__m128d\">__m128d</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#39\">source</a><a href=\"#method.from-64\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128d.html\" title=\"struct core::core_arch::x86::__m128d\">__m128d</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Ci16,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#19\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Ci16,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#19\">source</a><a href=\"#method.from-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Ci32,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#26\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Ci32,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-73\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#26\">source</a><a href=\"#method.from-73\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Ci64,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#36\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Ci64,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#36\">source</a><a href=\"#method.from-55\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Ci8,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#12\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Ci8,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#12\">source</a><a href=\"#method.from-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Cisize,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#60\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cisize,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#60\">source</a><a href=\"#method.from-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Cu16,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#16\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cu16,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#16\">source</a><a href=\"#method.from-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Cu32,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#23\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cu32,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#23\">source</a><a href=\"#method.from-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Cu64,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#33\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cu64,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#33\">source</a><a href=\"#method.from-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Cu8,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#9\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cu8,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#9\">source</a><a href=\"#method.from-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m128i%3E-for-Simd%3Cusize,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#57\">source</a><a href=\"#impl-From%3C__m128i%3E-for-Simd%3Cusize,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#57\">source</a><a href=\"#method.from-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m128i.html\" title=\"struct core::core_arch::x86::__m128i\">__m128i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256%3E-for-Simd%3Cf32,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#30\">source</a><a href=\"#impl-From%3C__m256%3E-for-Simd%3Cf32,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256.html\" title=\"struct core::core_arch::x86::__m256\">__m256</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#30\">source</a><a href=\"#method.from-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256.html\" title=\"struct core::core_arch::x86::__m256\">__m256</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256d%3E-for-Simd%3Cf64,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#40\">source</a><a href=\"#impl-From%3C__m256d%3E-for-Simd%3Cf64,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256d.html\" title=\"struct core::core_arch::x86::__m256d\">__m256d</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#40\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256d.html\" title=\"struct core::core_arch::x86::__m256d\">__m256d</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Ci16,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#20\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Ci16,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#20\">source</a><a href=\"#method.from-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Ci32,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#27\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Ci32,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-68\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#27\">source</a><a href=\"#method.from-68\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Ci64,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#37\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Ci64,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-62\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#37\">source</a><a href=\"#method.from-62\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Ci8,+32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#13\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Ci8,+32%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#13\">source</a><a href=\"#method.from-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Cisize,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#61\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cisize,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#61\">source</a><a href=\"#method.from-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Cu16,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#17\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cu16,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#17\">source</a><a href=\"#method.from-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Cu32,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#24\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cu32,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#24\">source</a><a href=\"#method.from-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Cu64,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#34\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cu64,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#34\">source</a><a href=\"#method.from-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Cu8,+32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#10\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cu8,+32%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#10\">source</a><a href=\"#method.from-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m256i%3E-for-Simd%3Cusize,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#58\">source</a><a href=\"#impl-From%3C__m256i%3E-for-Simd%3Cusize,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#58\">source</a><a href=\"#method.from-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m256i.html\" title=\"struct core::core_arch::x86::__m256i\">__m256i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512%3E-for-Simd%3Cf32,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#31\">source</a><a href=\"#impl-From%3C__m512%3E-for-Simd%3Cf32,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512.html\" title=\"struct core::core_arch::x86::__m512\">__m512</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-71\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#31\">source</a><a href=\"#method.from-71\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512.html\" title=\"struct core::core_arch::x86::__m512\">__m512</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512d%3E-for-Simd%3Cf64,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41\">source</a><a href=\"#impl-From%3C__m512d%3E-for-Simd%3Cf64,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512d.html\" title=\"struct core::core_arch::x86::__m512d\">__m512d</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41\">source</a><a href=\"#method.from-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512d.html\" title=\"struct core::core_arch::x86::__m512d\">__m512d</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Ci16,+32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#21\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Ci16,+32%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#21\">source</a><a href=\"#method.from-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Ci32,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#28\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Ci32,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#28\">source</a><a href=\"#method.from-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Ci64,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#38\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Ci64,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-61\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#38\">source</a><a href=\"#method.from-61\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Ci8,+64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#14\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Ci8,+64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#14\">source</a><a href=\"#method.from-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Cisize,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#62\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cisize,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#62\">source</a><a href=\"#method.from-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Cu16,+32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#18\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cu16,+32%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#18\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Cu32,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#25\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cu32,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#25\">source</a><a href=\"#method.from-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Cu64,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#35\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cu64,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#35\">source</a><a href=\"#method.from-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Cu8,+64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#11\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cu8,+64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-65\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#11\">source</a><a href=\"#method.from-65\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512i%3E-for-Simd%3Cusize,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#59\">source</a><a href=\"#impl-From%3C__m512i%3E-for-Simd%3Cusize,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#59\">source</a><a href=\"#method.from-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512i.html\" title=\"struct core::core_arch::x86::__m512i\">__m512i</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#958-961\">source</a><a href=\"#impl-Hash-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#964-966\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Index%3CI%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#12-16\">source</a><a href=\"#impl-Index%3CI%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;I, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-237\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-237\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><div class=\"docblock\">The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#20\">source</a><a href=\"#method.index\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the indexing (<code>container[index]</code>) operation. <a href=\"../ops/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IndexMut%3CI%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#25-29\">source</a><a href=\"#impl-IndexMut%3CI%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;I, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.IndexMut.html\" title=\"trait std::ops::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#32\">source</a><a href=\"#method.index_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"../ops/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.mul-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.mul-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Mul%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.mul-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Mul-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.mul-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Mul-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.mul-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Mul-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.mul-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-MulAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-MulAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>*=</code> operation. <a href=\"../ops/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#impl-Neg-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#method.neg-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#impl-Neg-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#method.neg\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#impl-Neg-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#method.neg-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#impl-Neg-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#method.neg-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#impl-Neg-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#method.neg-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#impl-Neg-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#method.neg-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#impl-Neg-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-21\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#method.neg-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-220\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-220\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-217\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-217\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-216\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-216\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-219\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-219\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-223\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-223\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-215\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-215\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-214\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-214\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-218\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-218\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-221\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-221\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#impl-Not-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-222\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-222\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#57-77\">source</a><a href=\"#method.not-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#946-949\">source</a><a href=\"#impl-Ord-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#952\">source</a><a href=\"#method.cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#894-897\">source</a><a href=\"#impl-PartialEq-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#900\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#914\">source</a><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#927-930\">source</a><a href=\"#impl-PartialOrd-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#933\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Cf32,+N%3E%3E-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51\">source</a><a href=\"#impl-Product%3C%26Simd%3Cf32,+N%3E%3E-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51\">source</a><a href=\"#method.product-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#impl-Product%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#method.product-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Ci16,+N%3E%3E-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59\">source</a><a href=\"#impl-Product%3C%26Simd%3Ci16,+N%3E%3E-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59\">source</a><a href=\"#method.product-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Ci32,+N%3E%3E-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60\">source</a><a href=\"#impl-Product%3C%26Simd%3Ci32,+N%3E%3E-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60\">source</a><a href=\"#method.product-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Ci64,+N%3E%3E-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61\">source</a><a href=\"#impl-Product%3C%26Simd%3Ci64,+N%3E%3E-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61\">source</a><a href=\"#method.product-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Ci8,+N%3E%3E-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58\">source</a><a href=\"#impl-Product%3C%26Simd%3Ci8,+N%3E%3E-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58\">source</a><a href=\"#method.product-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Cisize,+N%3E%3E-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62\">source</a><a href=\"#impl-Product%3C%26Simd%3Cisize,+N%3E%3E-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62\">source</a><a href=\"#method.product-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Cu16,+N%3E%3E-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54\">source</a><a href=\"#impl-Product%3C%26Simd%3Cu16,+N%3E%3E-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54\">source</a><a href=\"#method.product-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Cu32,+N%3E%3E-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55\">source</a><a href=\"#impl-Product%3C%26Simd%3Cu32,+N%3E%3E-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55\">source</a><a href=\"#method.product-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Cu64,+N%3E%3E-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56\">source</a><a href=\"#impl-Product%3C%26Simd%3Cu64,+N%3E%3E-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56\">source</a><a href=\"#method.product-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Cu8,+N%3E%3E-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53\">source</a><a href=\"#impl-Product%3C%26Simd%3Cu8,+N%3E%3E-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53\">source</a><a href=\"#method.product-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Cusize,+N%3E%3E-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57\">source</a><a href=\"#impl-Product%3C%26Simd%3Cusize,+N%3E%3E-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57\">source</a><a href=\"#method.product\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51\">source</a><a href=\"#impl-Product-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51\">source</a><a href=\"#method.product-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#impl-Product-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#method.product-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59\">source</a><a href=\"#impl-Product-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59\">source</a><a href=\"#method.product-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60\">source</a><a href=\"#impl-Product-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60\">source</a><a href=\"#method.product-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61\">source</a><a href=\"#impl-Product-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61\">source</a><a href=\"#method.product-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58\">source</a><a href=\"#impl-Product-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58\">source</a><a href=\"#method.product-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62\">source</a><a href=\"#impl-Product-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62\">source</a><a href=\"#method.product-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54\">source</a><a href=\"#impl-Product-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54\">source</a><a href=\"#method.product-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55\">source</a><a href=\"#impl-Product-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55\">source</a><a href=\"#method.product-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56\">source</a><a href=\"#impl-Product-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56\">source</a><a href=\"#method.product-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53\">source</a><a href=\"#impl-Product-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53\">source</a><a href=\"#method.product-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57\">source</a><a href=\"#impl-Product-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57\">source</a><a href=\"#method.product-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-208\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-208\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.rem-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-213\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-213\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.rem-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Rem%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-201\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-201\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.rem-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Rem-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-207\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-207\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.rem-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Rem-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-200\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-200\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.rem-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-204\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-204\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-212\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-212\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-211\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-211\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-209\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-209\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-203\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-203\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-202\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-202\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-199\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-199\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-210\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-210\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-205\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-205\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Rem-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-206\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-206\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.rem-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RemAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-RemAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>%=</code> operation. <a href=\"../ops/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-173\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-173\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.shl-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-155\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-155\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.shl-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26i16%3E-for-%26Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26i16%3E-for-%26Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-195\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-195\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26i16%3E-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26i16%3E-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-164\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-164\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26i32%3E-for-%26Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26i32%3E-for-%26Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-175\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-175\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26i32%3E-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26i32%3E-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-170\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-170\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26i64%3E-for-%26Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26i64%3E-for-%26Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-193\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-193\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26i64%3E-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26i64%3E-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-166\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-166\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26i8%3E-for-%26Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26i8%3E-for-%26Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-180\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-180\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26i8%3E-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26i8%3E-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-176\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-176\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26isize%3E-for-%26Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26isize%3E-for-%26Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-187\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-187\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26isize%3E-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26isize%3E-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-191\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-191\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26u16%3E-for-%26Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26u16%3E-for-%26Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-194\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-194\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26u16%3E-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26u16%3E-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-192\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-192\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26u32%3E-for-%26Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26u32%3E-for-%26Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-186\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-186\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26u32%3E-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26u32%3E-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-149\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-149\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26u64%3E-for-%26Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26u64%3E-for-%26Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-150\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-150\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26u64%3E-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26u64%3E-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-147\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-147\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26u8%3E-for-%26Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26u8%3E-for-%26Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-190\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-190\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26u8%3E-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26u8%3E-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-159\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-159\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26usize%3E-for-%26Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26usize%3E-for-%26Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-146\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-146\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26usize%3E-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3C%26usize%3E-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-160\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-160\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Shl%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-167\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-167\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.shl-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Ci16%3E-for-%26Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Ci16%3E-for-%26Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-165\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-165\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Ci16%3E-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Ci16%3E-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-148\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-148\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Ci32%3E-for-%26Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Ci32%3E-for-%26Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-182\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-182\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Ci32%3E-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Ci32%3E-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-153\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-153\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Ci64%3E-for-%26Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Ci64%3E-for-%26Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-184\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-184\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Ci64%3E-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Ci64%3E-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-151\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-151\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Ci8%3E-for-%26Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Ci8%3E-for-%26Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-188\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-188\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Ci8%3E-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Ci8%3E-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-171\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-171\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cisize%3E-for-%26Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cisize%3E-for-%26Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-158\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-158\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cisize%3E-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cisize%3E-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-157\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-157\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cu16%3E-for-%26Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cu16%3E-for-%26Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-161\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-161\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cu16%3E-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cu16%3E-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-152\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-152\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cu32%3E-for-%26Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cu32%3E-for-%26Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-179\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-179\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cu32%3E-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cu32%3E-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-178\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-178\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cu64%3E-for-%26Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cu64%3E-for-%26Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-156\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-156\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cu64%3E-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cu64%3E-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-197\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-197\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cu8%3E-for-%26Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cu8%3E-for-%26Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-185\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-185\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cu8%3E-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cu8%3E-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-183\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-183\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cusize%3E-for-%26Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cusize%3E-for-%26Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-163\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-163\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3Cusize%3E-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shl%3Cusize%3E-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-177\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-177\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shl-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-198\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-198\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-181\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-181\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-168\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-168\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-169\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-169\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-174\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-174\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-172\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-172\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-189\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-189\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-196\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-196\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-154\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-154\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shl-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-162\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-162\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shl-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ShlAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-ShlAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;=</code> operation. <a href=\"../ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-123\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-123\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.shr-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-118\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-118\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.shr-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26i16%3E-for-%26Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26i16%3E-for-%26Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-136\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-136\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26i16%3E-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26i16%3E-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-114\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-114\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26i32%3E-for-%26Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26i32%3E-for-%26Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-134\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-134\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26i32%3E-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26i32%3E-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-111\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-111\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26i64%3E-for-%26Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26i64%3E-for-%26Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-126\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-126\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26i64%3E-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26i64%3E-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-135\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-135\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26i8%3E-for-%26Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26i8%3E-for-%26Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-106\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-106\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26i8%3E-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26i8%3E-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-120\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-120\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26isize%3E-for-%26Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26isize%3E-for-%26Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-127\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-127\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26isize%3E-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26isize%3E-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-96\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-96\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26u16%3E-for-%26Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26u16%3E-for-%26Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-112\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-112\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26u16%3E-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26u16%3E-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-137\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-137\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26u32%3E-for-%26Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26u32%3E-for-%26Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-122\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-122\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26u32%3E-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26u32%3E-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-133\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-133\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26u64%3E-for-%26Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26u64%3E-for-%26Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-142\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-142\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26u64%3E-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26u64%3E-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-107\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-107\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26u8%3E-for-%26Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26u8%3E-for-%26Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-139\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-139\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26u8%3E-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26u8%3E-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-101\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-101\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26usize%3E-for-%26Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26usize%3E-for-%26Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-110\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-110\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26usize%3E-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3C%26usize%3E-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-140\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-140\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Shr%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-95\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-95\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.shr-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Ci16%3E-for-%26Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Ci16%3E-for-%26Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-105\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-105\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Ci16%3E-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Ci16%3E-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-116\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-116\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Ci32%3E-for-%26Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Ci32%3E-for-%26Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-131\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-131\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Ci32%3E-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Ci32%3E-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-121\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-121\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Ci64%3E-for-%26Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Ci64%3E-for-%26Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-125\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-125\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Ci64%3E-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Ci64%3E-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-103\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-103\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Ci8%3E-for-%26Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Ci8%3E-for-%26Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-102\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-102\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Ci8%3E-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Ci8%3E-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-119\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-119\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cisize%3E-for-%26Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cisize%3E-for-%26Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-109\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-109\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cisize%3E-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cisize%3E-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-132\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-132\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cu16%3E-for-%26Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cu16%3E-for-%26Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-130\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-130\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cu16%3E-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cu16%3E-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-143\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-143\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cu32%3E-for-%26Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cu32%3E-for-%26Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-128\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-128\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cu32%3E-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cu32%3E-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-99\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-99\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cu64%3E-for-%26Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cu64%3E-for-%26Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-97\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-97\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cu64%3E-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cu64%3E-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-144\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-144\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cu8%3E-for-%26Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cu8%3E-for-%26Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-145\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-145\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cu8%3E-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cu8%3E-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-104\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-104\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cusize%3E-for-%26Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cusize%3E-for-%26Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-113\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-113\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3Cusize%3E-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#impl-Shr%3Cusize%3E-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-93\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-93\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html#62\">source</a><a href=\"#method.shr\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-141\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-141\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-100\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-100\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-98\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-98\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-108\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-108\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-124\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-124\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-115\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-115\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-129\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-129\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-94\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-94\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-138\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-138\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Shr-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-117\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-117\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.shr-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ShrAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-ShrAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;=</code> operation. <a href=\"../ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdConstPtr-for-Simd%3C*const+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#80-82\">source</a><a href=\"#impl-SimdConstPtr-for-Simd%3C*const+T,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Usize-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Usize-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdConstPtr.html#associatedtype.Usize\" class=\"associatedtype\">Usize</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Vector of <code>usize</code> with the same number of elements.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Isize-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Isize-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdConstPtr.html#associatedtype.Isize\" class=\"associatedtype\">Isize</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Vector of <code>isize</code> with the same number of elements.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.CastPtr-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CastPtr-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdConstPtr.html#associatedtype.CastPtr\" class=\"associatedtype\">CastPtr</a>&lt;U&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const U</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Vector of const pointers with the same number of elements.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.MutPtr\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.MutPtr\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdConstPtr.html#associatedtype.MutPtr\" class=\"associatedtype\">MutPtr</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Vector of mutable pointers to the same type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdConstPtr.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_null-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#91\">source</a><a href=\"#method.is_null-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.is_null\" class=\"fn\">is_null</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdConstPtr::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns <code>true</code> for each element that is null.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#96\">source</a><a href=\"#method.cast-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.CastPtr\" title=\"type std::simd::prelude::SimdConstPtr::CastPtr\">CastPtr</a>&lt;U&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Casts to a pointer of another type. <a href=\"prelude/trait.SimdConstPtr.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#108\">source</a><a href=\"#method.cast_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.cast_mut\" class=\"fn\">cast_mut</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.MutPtr\" title=\"type std::simd::prelude::SimdConstPtr::MutPtr\">MutPtr</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Changes constness without changing the type. <a href=\"prelude/trait.SimdConstPtr.html#tymethod.cast_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.addr-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#114\">source</a><a href=\"#method.addr-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.addr\" class=\"fn\">addr</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Gets the ‚Äúaddress‚Äù portion of the pointer. <a href=\"prelude/trait.SimdConstPtr.html#tymethod.addr\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_addr-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#122\">source</a><a href=\"#method.with_addr-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.with_addr\" class=\"fn\">with_addr</a>(\n    self,\n    addr: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Creates a new pointer with the given address. <a href=\"prelude/trait.SimdConstPtr.html#tymethod.with_addr\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.expose_provenance-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#134\">source</a><a href=\"#method.expose_provenance-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.expose_provenance\" class=\"fn\">expose_provenance</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Exposes the ‚Äúprovenance‚Äù part of the pointer for future use in\n<a href=\"prelude/trait.SimdConstPtr.html#tymethod.with_exposed_provenance\" title=\"associated function core::core_simd::simd::ptr::const_ptr::SimdConstPtr::with_exposed_provenance::with_exposed_provenance\"><code>Self::with_exposed_provenance</code></a> and returns the ‚Äúaddress‚Äù portion.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_exposed_provenance-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#140\">source</a><a href=\"#method.with_exposed_provenance-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.with_exposed_provenance\" class=\"fn\">with_exposed_provenance</a>(\n    addr: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Convert an address back to a pointer, picking up a previously ‚Äúexposed‚Äù provenance. <a href=\"prelude/trait.SimdConstPtr.html#tymethod.with_exposed_provenance\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_offset-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#146\">source</a><a href=\"#method.wrapping_offset-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.wrapping_offset\" class=\"fn\">wrapping_offset</a>(\n    self,\n    count: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.Isize\" title=\"type std::simd::prelude::SimdConstPtr::Isize\">Isize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Calculates the offset from a pointer using wrapping arithmetic. <a href=\"prelude/trait.SimdConstPtr.html#tymethod.wrapping_offset\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_add-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#152\">source</a><a href=\"#method.wrapping_add-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(\n    self,\n    count: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Calculates the offset from a pointer using wrapping arithmetic. <a href=\"prelude/trait.SimdConstPtr.html#tymethod.wrapping_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_sub-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#157\">source</a><a href=\"#method.wrapping_sub-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdConstPtr.html#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(\n    self,\n    count: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Calculates the offset from a pointer using wrapping arithmetic. <a href=\"prelude/trait.SimdConstPtr.html#tymethod.wrapping_sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdFloat-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#impl-SimdFloat-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-22\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bits-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bits-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdFloat.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Bit representation of this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdFloat.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.cast-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdFloat.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_int_unchecked-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_int_unchecked-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">unsafe fn <a href=\"prelude/trait.SimdFloat.html#tymethod.to_int_unchecked\" class=\"fn\">to_int_unchecked</a>&lt;I&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,\n    &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a>: <a class=\"trait\" href=\"../convert/trait.FloatToInt.html\" title=\"trait std::convert::FloatToInt\">FloatToInt</a>&lt;I&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Rounds toward zero and converts to the same-width integer type, assuming that\nthe value is finite and fits in that type. <a href=\"prelude/trait.SimdFloat.html#tymethod.to_int_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bits-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_bits-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.to_bits\" class=\"fn\">to_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Raw transmutation to an unsigned integer vector type with the\nsame size and number of elements.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bits-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.from_bits-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.from_bits\" class=\"fn\">from_bits</a>(bits: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Raw transmutation from an unsigned integer vector type with the\nsame size and number of elements.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.abs-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the absolute value of the\nequivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.recip-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.recip-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.recip\" class=\"fn\">recip</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Takes the reciprocal (inverse) of each element, <code>1/x</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_degrees-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_degrees-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.to_degrees\" class=\"fn\">to_degrees</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Converts each element from radians to degrees.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_radians-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_radians-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.to_radians\" class=\"fn\">to_radians</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Converts each element from degrees to radians.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sign_positive-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_sign_positive-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_sign_positive\" class=\"fn\">is_sign_positive</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if it has a positive sign, including\n<code>+0.0</code>, <code>NaN</code>s with positive sign bit and positive infinity.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sign_negative-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_sign_negative-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_sign_negative\" class=\"fn\">is_sign_negative</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if it has a negative sign, including\n<code>-0.0</code>, <code>NaN</code>s with negative sign bit and negative infinity.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_nan-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_nan-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_nan\" class=\"fn\">is_nan</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is <code>NaN</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_infinite-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_infinite-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_infinite\" class=\"fn\">is_infinite</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is positive infinity or negative infinity.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_finite-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_finite-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_finite\" class=\"fn\">is_finite</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is neither infinite nor <code>NaN</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_subnormal-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_subnormal-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_subnormal\" class=\"fn\">is_subnormal</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is subnormal.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_normal-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_normal-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_normal\" class=\"fn\">is_normal</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is neither zero, infinite,\nsubnormal, nor <code>NaN</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.signum-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.signum-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Replaces each element with a number that represents its sign. <a href=\"prelude/trait.SimdFloat.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copysign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.copysign-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.copysign\" class=\"fn\">copysign</a>(self, sign: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns each element with the magnitude of <code>self</code> and the sign of <code>sign</code>. <a href=\"prelude/trait.SimdFloat.html#tymethod.copysign\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.simd_min-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum of each element. <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.simd_max-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum of each element. <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.simd_clamp-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval unless it is NaN. <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_clamp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_sum-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector. <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_product-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reducing multiply.  Returns the product of the elements of the vector. <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_max-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector. <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_min-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector. <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_min\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdFloat-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#impl-SimdFloat-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-21\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bits\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdFloat.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Bit representation of this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdFloat.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.cast-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdFloat.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_int_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_int_unchecked\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">unsafe fn <a href=\"prelude/trait.SimdFloat.html#tymethod.to_int_unchecked\" class=\"fn\">to_int_unchecked</a>&lt;I&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,\n    &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a>: <a class=\"trait\" href=\"../convert/trait.FloatToInt.html\" title=\"trait std::convert::FloatToInt\">FloatToInt</a>&lt;I&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Rounds toward zero and converts to the same-width integer type, assuming that\nthe value is finite and fits in that type. <a href=\"prelude/trait.SimdFloat.html#tymethod.to_int_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_bits\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.to_bits\" class=\"fn\">to_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Raw transmutation to an unsigned integer vector type with the\nsame size and number of elements.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.from_bits\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.from_bits\" class=\"fn\">from_bits</a>(bits: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Raw transmutation from an unsigned integer vector type with the\nsame size and number of elements.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.abs-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the absolute value of the\nequivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.recip\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.recip\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.recip\" class=\"fn\">recip</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Takes the reciprocal (inverse) of each element, <code>1/x</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_degrees\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_degrees\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.to_degrees\" class=\"fn\">to_degrees</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Converts each element from radians to degrees.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_radians\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_radians\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.to_radians\" class=\"fn\">to_radians</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Converts each element from degrees to radians.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sign_positive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_sign_positive\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_sign_positive\" class=\"fn\">is_sign_positive</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if it has a positive sign, including\n<code>+0.0</code>, <code>NaN</code>s with positive sign bit and positive infinity.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sign_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_sign_negative\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_sign_negative\" class=\"fn\">is_sign_negative</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if it has a negative sign, including\n<code>-0.0</code>, <code>NaN</code>s with negative sign bit and negative infinity.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_nan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_nan\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_nan\" class=\"fn\">is_nan</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is <code>NaN</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_infinite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_infinite\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_infinite\" class=\"fn\">is_infinite</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is positive infinity or negative infinity.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_finite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_finite\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_finite\" class=\"fn\">is_finite</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is neither infinite nor <code>NaN</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_subnormal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_subnormal\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_subnormal\" class=\"fn\">is_subnormal</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is subnormal.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_normal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_normal\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.is_normal\" class=\"fn\">is_normal</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is neither zero, infinite,\nsubnormal, nor <code>NaN</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.signum-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.signum-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Replaces each element with a number that represents its sign. <a href=\"prelude/trait.SimdFloat.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copysign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.copysign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.copysign\" class=\"fn\">copysign</a>(self, sign: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns each element with the magnitude of <code>self</code> and the sign of <code>sign</code>. <a href=\"prelude/trait.SimdFloat.html#tymethod.copysign\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.simd_min-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum of each element. <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.simd_max-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum of each element. <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.simd_clamp-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval unless it is NaN. <a href=\"prelude/trait.SimdFloat.html#tymethod.simd_clamp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_sum-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector. <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_product-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reducing multiply.  Returns the product of the elements of the vector. <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_max-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector. <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_min-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector. <a href=\"prelude/trait.SimdFloat.html#tymethod.reduce_min\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdInt-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#impl-SimdInt-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Unsigned-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Unsigned-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" class=\"associatedtype\">Unsigned</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector of unsigned integers with the same element size.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.cast-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdInt::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdInt.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_add-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_sub-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.abs-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise absolute value, implemented in Rust.\nEvery element becomes its absolute value. <a href=\"prelude/trait.SimdInt.html#tymethod.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_abs-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating absolute value, implemented in Rust.\nAs abs(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_neg-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating negation, implemented in Rust.\nAs neg(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_positive-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each positive element and false if it is zero or negative.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_negative-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each negative element and false if it is zero or positive.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.signum-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.signum-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns numbers representing the sign of each element. <a href=\"prelude/trait.SimdInt.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_sum-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_product-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_max-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_min-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_and-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_or-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_xor-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.swap_bytes-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reverse_bits-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_zeros-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_zeros-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_ones-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_ones-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdInt-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#impl-SimdInt-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Unsigned-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Unsigned-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" class=\"associatedtype\">Unsigned</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector of unsigned integers with the same element size.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.cast-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdInt::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdInt.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_add-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_sub-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.abs-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise absolute value, implemented in Rust.\nEvery element becomes its absolute value. <a href=\"prelude/trait.SimdInt.html#tymethod.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_abs-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating absolute value, implemented in Rust.\nAs abs(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_neg-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating negation, implemented in Rust.\nAs neg(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_positive-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each positive element and false if it is zero or negative.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_negative-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each negative element and false if it is zero or positive.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.signum-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.signum-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns numbers representing the sign of each element. <a href=\"prelude/trait.SimdInt.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_sum-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_product-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_max-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_min-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_and-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_or-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_xor-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.swap_bytes-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reverse_bits-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_zeros-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_zeros-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_ones-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_ones-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdInt-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#impl-SimdInt-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Unsigned-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Unsigned-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" class=\"associatedtype\">Unsigned</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector of unsigned integers with the same element size.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.cast-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdInt::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdInt.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_add-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_sub-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.abs-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise absolute value, implemented in Rust.\nEvery element becomes its absolute value. <a href=\"prelude/trait.SimdInt.html#tymethod.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_abs-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating absolute value, implemented in Rust.\nAs abs(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_neg-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating negation, implemented in Rust.\nAs neg(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_positive-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each positive element and false if it is zero or negative.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_negative-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each negative element and false if it is zero or positive.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.signum-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.signum-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns numbers representing the sign of each element. <a href=\"prelude/trait.SimdInt.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_sum-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_product-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_max-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_min-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_and-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_or-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_xor-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.swap_bytes-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reverse_bits-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_zeros-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_zeros-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_ones-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_ones-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdInt-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#impl-SimdInt-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Unsigned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Unsigned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" class=\"associatedtype\">Unsigned</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector of unsigned integers with the same element size.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.cast-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdInt::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdInt.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_add\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_sub\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.abs\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise absolute value, implemented in Rust.\nEvery element becomes its absolute value. <a href=\"prelude/trait.SimdInt.html#tymethod.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_abs\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating absolute value, implemented in Rust.\nAs abs(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_neg\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating negation, implemented in Rust.\nAs neg(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_positive\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each positive element and false if it is zero or negative.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_negative\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each negative element and false if it is zero or positive.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.signum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.signum\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns numbers representing the sign of each element. <a href=\"prelude/trait.SimdInt.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_sum\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_product\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_and\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_or\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_xor\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.swap_bytes\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reverse_bits\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_zeros\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_zeros\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_ones\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_ones\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdInt-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#impl-SimdInt-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Unsigned-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Unsigned-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" class=\"associatedtype\">Unsigned</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector of unsigned integers with the same element size.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.cast-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdInt::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdInt.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_add-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_sub-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.abs-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise absolute value, implemented in Rust.\nEvery element becomes its absolute value. <a href=\"prelude/trait.SimdInt.html#tymethod.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_abs-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating absolute value, implemented in Rust.\nAs abs(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.saturating_neg-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating negation, implemented in Rust.\nAs neg(), except the MIN value becomes MAX instead of itself. <a href=\"prelude/trait.SimdInt.html#tymethod.saturating_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_positive-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each positive element and false if it is zero or negative.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.is_negative-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdInt::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each negative element and false if it is zero or positive.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.signum-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.signum-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns numbers representing the sign of each element. <a href=\"prelude/trait.SimdInt.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_sum-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_product-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_max-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_min-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector. <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_and-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_or-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reduce_xor-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdInt::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.swap_bytes-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.reverse_bits-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_zeros-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_zeros-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.leading_ones-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html#371\">source</a><a href=\"#method.trailing_ones-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdInt.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdInt.html\" title=\"trait std::simd::prelude::SimdInt\">SimdInt</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdInt.html#associatedtype.Unsigned\" title=\"type std::simd::prelude::SimdInt::Unsigned\">Unsigned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdMutPtr-for-Simd%3C*mut+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#77-79\">source</a><a href=\"#impl-SimdMutPtr-for-Simd%3C*mut+T,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Usize\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Usize\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdMutPtr.html#associatedtype.Usize\" class=\"associatedtype\">Usize</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Vector of <code>usize</code> with the same number of elements.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Isize\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Isize\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdMutPtr.html#associatedtype.Isize\" class=\"associatedtype\">Isize</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Vector of <code>isize</code> with the same number of elements.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.CastPtr\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CastPtr\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdMutPtr.html#associatedtype.CastPtr\" class=\"associatedtype\">CastPtr</a>&lt;U&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut U</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Vector of const pointers with the same number of elements.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.ConstPtr\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ConstPtr\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdMutPtr.html#associatedtype.ConstPtr\" class=\"associatedtype\">ConstPtr</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Vector of constant pointers to the same type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdMutPtr.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_null\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#88\">source</a><a href=\"#method.is_null\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.is_null\" class=\"fn\">is_null</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdMutPtr::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns <code>true</code> for each element that is null.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#93\">source</a><a href=\"#method.cast\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.CastPtr\" title=\"type std::simd::prelude::SimdMutPtr::CastPtr\">CastPtr</a>&lt;U&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Casts to a pointer of another type. <a href=\"prelude/trait.SimdMutPtr.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast_const\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#105\">source</a><a href=\"#method.cast_const\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.cast_const\" class=\"fn\">cast_const</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.ConstPtr\" title=\"type std::simd::prelude::SimdMutPtr::ConstPtr\">ConstPtr</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Changes constness without changing the type. <a href=\"prelude/trait.SimdMutPtr.html#tymethod.cast_const\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.addr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#111\">source</a><a href=\"#method.addr\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.addr\" class=\"fn\">addr</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdMutPtr::Usize\">Usize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Gets the ‚Äúaddress‚Äù portion of the pointer. <a href=\"prelude/trait.SimdMutPtr.html#tymethod.addr\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_addr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#119\">source</a><a href=\"#method.with_addr\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.with_addr\" class=\"fn\">with_addr</a>(\n    self,\n    addr: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdMutPtr::Usize\">Usize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Creates a new pointer with the given address. <a href=\"prelude/trait.SimdMutPtr.html#tymethod.with_addr\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.expose_provenance\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#131\">source</a><a href=\"#method.expose_provenance\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.expose_provenance\" class=\"fn\">expose_provenance</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdMutPtr::Usize\">Usize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Exposes the ‚Äúprovenance‚Äù part of the pointer for future use in\n<a href=\"prelude/trait.SimdMutPtr.html#tymethod.with_exposed_provenance\" title=\"associated function core::core_simd::simd::ptr::mut_ptr::SimdMutPtr::with_exposed_provenance::with_exposed_provenance\"><code>Self::with_exposed_provenance</code></a> and returns the ‚Äúaddress‚Äù portion.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_exposed_provenance\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#137\">source</a><a href=\"#method.with_exposed_provenance\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.with_exposed_provenance\" class=\"fn\">with_exposed_provenance</a>(\n    addr: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdMutPtr::Usize\">Usize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Convert an address back to a pointer, picking up a previously ‚Äúexposed‚Äù provenance. <a href=\"prelude/trait.SimdMutPtr.html#tymethod.with_exposed_provenance\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_offset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#143\">source</a><a href=\"#method.wrapping_offset\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.wrapping_offset\" class=\"fn\">wrapping_offset</a>(\n    self,\n    count: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.Isize\" title=\"type std::simd::prelude::SimdMutPtr::Isize\">Isize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Calculates the offset from a pointer using wrapping arithmetic. <a href=\"prelude/trait.SimdMutPtr.html#tymethod.wrapping_offset\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#149\">source</a><a href=\"#method.wrapping_add\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(\n    self,\n    count: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdMutPtr::Usize\">Usize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Calculates the offset from a pointer using wrapping arithmetic. <a href=\"prelude/trait.SimdMutPtr.html#tymethod.wrapping_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html#154\">source</a><a href=\"#method.wrapping_sub\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdMutPtr.html#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(\n    self,\n    count: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdMutPtr.html\" title=\"trait std::simd::prelude::SimdMutPtr\">SimdMutPtr</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdMutPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdMutPtr::Usize\">Usize</a>,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Calculates the offset from a pointer using wrapping arithmetic. <a href=\"prelude/trait.SimdMutPtr.html#tymethod.wrapping_sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3C*const+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#246-248\">source</a><a href=\"#impl-SimdOrd-for-Simd%3C*const+T,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#251\">source</a><a href=\"#method.simd_max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#256\">source</a><a href=\"#method.simd_min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#262\">source</a><a href=\"#method.simd_clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(\n    self,\n    min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;,\n    max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3C*mut+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#296-298\">source</a><a href=\"#impl-SimdOrd-for-Simd%3C*mut+T,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#301\">source</a><a href=\"#method.simd_max-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#306\">source</a><a href=\"#method.simd_min-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#312\">source</a><a href=\"#method.simd_clamp-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(\n    self,\n    min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;,\n    max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;,\n) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdOrd-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_max-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_min-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_clamp-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;, max: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"prelude/trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3C*const+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#78-80\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3C*const+T,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#85\">source</a><a href=\"#method.simd_eq-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#90\">source</a><a href=\"#method.simd_ne-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3C*mut+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#95-97\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3C*mut+T,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#102\">source</a><a href=\"#method.simd_eq-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#107\">source</a><a href=\"#method.simd_ne-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a> as <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3C*const+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#221-223\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3C*const+T,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#226\">source</a><a href=\"#method.simd_lt-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#231\">source</a><a href=\"#method.simd_le-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#236\">source</a><a href=\"#method.simd_gt-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#241\">source</a><a href=\"#method.simd_ge-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3C*mut+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#271-273\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3C*mut+T,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#276\">source</a><a href=\"#method.simd_lt-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#281\">source</a><a href=\"#method.simd_le-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#286\">source</a><a href=\"#method.simd_gt-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#291\">source</a><a href=\"#method.simd_ge-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_lt-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_le-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_gt-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_ge-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_lt-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_le-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_gt-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_ge-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_lt-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_le-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_gt-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#112\">source</a><a href=\"#method.simd_ge-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(\n    self,\n    other: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdUint-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.cast-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdUint::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdUint.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.wrapping_neg\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Wrapping negation. <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_add-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_sub-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_sum-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_product-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_max-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_min-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_and-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_or-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_xor-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.swap_bytes-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reverse_bits-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_zeros-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_zeros-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_ones-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_ones-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdUint-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.cast-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdUint::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdUint.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.wrapping_neg-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Wrapping negation. <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_add-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_sub-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_sum-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_product-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_max-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_min-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_and-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_or-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_xor-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.swap_bytes-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reverse_bits-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_zeros-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_zeros-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_ones-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_ones-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdUint-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.cast-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdUint::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdUint.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.wrapping_neg-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Wrapping negation. <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_add-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_sub-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_sum-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_product-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_max-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_min-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_and-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_or-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_xor-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.swap_bytes-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reverse_bits-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_zeros-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_zeros-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_ones-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_ones-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdUint-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.cast-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdUint::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdUint.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.wrapping_neg-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Wrapping negation. <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_add-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_sub-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_sum-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_product-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_max-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_min-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_and-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_or-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_xor-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.swap_bytes-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reverse_bits-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_zeros-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_zeros-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_ones-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_ones-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdUint-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#impl-SimdUint-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.cast-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdUint::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector‚Äôs elements to another SIMD-valid type. <a href=\"prelude/trait.SimdUint.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.wrapping_neg-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Wrapping negation. <a href=\"prelude/trait.SimdUint.html#tymethod.wrapping_neg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_add-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_add-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating add. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_sub-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.saturating_sub-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, second: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Lanewise saturating subtract. <a href=\"prelude/trait.SimdUint.html#tymethod.saturating_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_sum-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector, with wrapping addition.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_product-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the product of the elements of the vector, with wrapping multiplication.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_max-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_min-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_and-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_and-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_and\" class=\"fn\">reduce_and</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúand‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_or-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_or-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_or\" class=\"fn\">reduce_or</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_xor-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reduce_xor-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reduce_xor\" class=\"fn\">reduce_xor</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"prelude/trait.SimdUint.html\" title=\"trait std::simd::prelude::SimdUint\">SimdUint</a>&gt;::<a class=\"associatedtype\" href=\"prelude/trait.SimdUint.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdUint::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the cumulative bitwise ‚Äúxor‚Äù across the elements of the vector.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_bytes-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.swap_bytes-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the byte order of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse_bits-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.reverse_bits-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reverses the order of bits in each elemnent.\nThe least significant bit becomes the most significant bit, second least-significant bit becomes second most-significant bit, etc.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_zeros-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_zeros-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing zeros in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_ones-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.leading_ones-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of leading ones in the binary representation of each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_ones-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html#221\">source</a><a href=\"#method.trailing_ones-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"prelude/trait.SimdUint.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the number of trailing ones in the binary representation of each element.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-StdFloat-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#impl-StdFloat-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.StdFloat.html\" title=\"trait std::simd::StdFloat\">StdFloat</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fract\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.fract\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.fract\" class=\"fn\">fract</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the floating point‚Äôs fractional value, with its integer part removed.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sin\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.sin\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the sine of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cos\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.cos\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the cosine of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.exp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.exp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.exp\" class=\"fn\">exp</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the exponential (base e) of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.exp2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.exp2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.exp2\" class=\"fn\">exp2</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the exponential (base 2) of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ln\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.ln\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.ln\" class=\"fn\">ln</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the natural logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.log2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.log2\" class=\"fn\">log2</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the base-2 logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.log10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.log10\" class=\"fn\">log10</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the base-10 logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#55-57\">source</a><a href=\"#method.mul_add\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.mul_add\" class=\"fn\">mul_add</a>(self, a: Self, b: Self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Elementwise fused multiply-add. Computes <code>(self * a) + b</code> with only one rounding error,\nyielding a more accurate result than an unfused multiply-add. <a href=\"trait.StdFloat.html#method.mul_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sqrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#63-65\">source</a><a href=\"#method.sqrt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the square root value\nof the equivalently-indexed element in <code>self</code></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#96-98\">source</a><a href=\"#method.log\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.log\" class=\"fn\">log</a>(self, base: Self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the logarithm with respect to an arbitrary\nin the equivalently-indexed elements in <code>self</code> and <code>base</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#113-115\">source</a><a href=\"#method.ceil\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.ceil\" class=\"fn\">ceil</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the smallest integer greater than or equal to each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#120-122\">source</a><a href=\"#method.floor\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.floor\" class=\"fn\">floor</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the largest integer value less than or equal to each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.round\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#127-129\">source</a><a href=\"#method.round\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.round\" class=\"fn\">round</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Rounds to the nearest integer value. Ties round toward zero.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trunc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#134-136\">source</a><a href=\"#method.trunc\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.trunc\" class=\"fn\">trunc</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the floating point‚Äôs integer value, with its fractional part removed.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-StdFloat-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#impl-StdFloat-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.StdFloat.html\" title=\"trait std::simd::StdFloat\">StdFloat</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fract-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.fract-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.fract\" class=\"fn\">fract</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the floating point‚Äôs fractional value, with its integer part removed.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sin-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.sin-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the sine of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cos-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.cos-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the cosine of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.exp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.exp-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.exp\" class=\"fn\">exp</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the exponential (base e) of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.exp2-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.exp2-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.exp2\" class=\"fn\">exp2</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the exponential (base 2) of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ln-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.ln-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.ln\" class=\"fn\">ln</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the natural logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log2-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.log2-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.log2\" class=\"fn\">log2</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the base-2 logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log10-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.log10-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#tymethod.log10\" class=\"fn\">log10</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the base-10 logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul_add-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#55-57\">source</a><a href=\"#method.mul_add-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.mul_add\" class=\"fn\">mul_add</a>(self, a: Self, b: Self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Elementwise fused multiply-add. Computes <code>(self * a) + b</code> with only one rounding error,\nyielding a more accurate result than an unfused multiply-add. <a href=\"trait.StdFloat.html#method.mul_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sqrt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#63-65\">source</a><a href=\"#method.sqrt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the square root value\nof the equivalently-indexed element in <code>self</code></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#96-98\">source</a><a href=\"#method.log-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.log\" class=\"fn\">log</a>(self, base: Self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the logarithm with respect to an arbitrary\nin the equivalently-indexed elements in <code>self</code> and <code>base</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ceil-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#113-115\">source</a><a href=\"#method.ceil-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.ceil\" class=\"fn\">ceil</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the smallest integer greater than or equal to each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.floor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#120-122\">source</a><a href=\"#method.floor-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.floor\" class=\"fn\">floor</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the largest integer value less than or equal to each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.round-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#127-129\">source</a><a href=\"#method.round-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.round\" class=\"fn\">round</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Rounds to the nearest integer value. Ties round toward zero.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trunc-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#134-136\">source</a><a href=\"#method.trunc-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.StdFloat.html#method.trunc\" class=\"fn\">trunc</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the floating point‚Äôs integer value, with its fractional part removed.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'lhs, 'rhs, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-45\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.sub-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(\n    self,\n    rhs: &amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; &lt;&amp;'lhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;'rhs <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-48\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.sub-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Sub%3CSimd%3CT,+N%3E%3E-for-%26Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for &amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-41\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.sub-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;&amp;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Sub-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-38\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.sub-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Sub-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-49\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.sub-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-42\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-47\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-46\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-40\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-43\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-44\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-36\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-39\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-35\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#impl-Sub-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-37\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#175-232\">source</a><a href=\"#method.sub-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt; as <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SubAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-SubAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;U, Output = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>-=</code> operation. <a href=\"../ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Cf32,+N%3E%3E-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51\">source</a><a href=\"#impl-Sum%3C%26Simd%3Cf32,+N%3E%3E-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51\">source</a><a href=\"#method.sum-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#impl-Sum%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#method.sum-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Ci16,+N%3E%3E-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59\">source</a><a href=\"#impl-Sum%3C%26Simd%3Ci16,+N%3E%3E-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59\">source</a><a href=\"#method.sum-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Ci32,+N%3E%3E-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60\">source</a><a href=\"#impl-Sum%3C%26Simd%3Ci32,+N%3E%3E-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60\">source</a><a href=\"#method.sum-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Ci64,+N%3E%3E-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61\">source</a><a href=\"#impl-Sum%3C%26Simd%3Ci64,+N%3E%3E-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61\">source</a><a href=\"#method.sum-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Ci8,+N%3E%3E-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58\">source</a><a href=\"#impl-Sum%3C%26Simd%3Ci8,+N%3E%3E-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58\">source</a><a href=\"#method.sum-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Cisize,+N%3E%3E-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62\">source</a><a href=\"#impl-Sum%3C%26Simd%3Cisize,+N%3E%3E-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62\">source</a><a href=\"#method.sum-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Cu16,+N%3E%3E-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54\">source</a><a href=\"#impl-Sum%3C%26Simd%3Cu16,+N%3E%3E-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54\">source</a><a href=\"#method.sum-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Cu32,+N%3E%3E-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55\">source</a><a href=\"#impl-Sum%3C%26Simd%3Cu32,+N%3E%3E-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55\">source</a><a href=\"#method.sum-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Cu64,+N%3E%3E-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56\">source</a><a href=\"#impl-Sum%3C%26Simd%3Cu64,+N%3E%3E-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56\">source</a><a href=\"#method.sum-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Cu8,+N%3E%3E-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53\">source</a><a href=\"#impl-Sum%3C%26Simd%3Cu8,+N%3E%3E-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53\">source</a><a href=\"#method.sum-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Cusize,+N%3E%3E-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57\">source</a><a href=\"#impl-Sum%3C%26Simd%3Cusize,+N%3E%3E-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57\">source</a><a href=\"#method.sum-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51\">source</a><a href=\"#impl-Sum-for-Simd%3Cf32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#51\">source</a><a href=\"#method.sum\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#impl-Sum-for-Simd%3Cf64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#method.sum-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59\">source</a><a href=\"#impl-Sum-for-Simd%3Ci16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#59\">source</a><a href=\"#method.sum-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60\">source</a><a href=\"#impl-Sum-for-Simd%3Ci32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#60\">source</a><a href=\"#method.sum-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61\">source</a><a href=\"#impl-Sum-for-Simd%3Ci64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#61\">source</a><a href=\"#method.sum-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58\">source</a><a href=\"#impl-Sum-for-Simd%3Ci8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#58\">source</a><a href=\"#method.sum-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62\">source</a><a href=\"#impl-Sum-for-Simd%3Cisize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#62\">source</a><a href=\"#method.sum-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Cu16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54\">source</a><a href=\"#impl-Sum-for-Simd%3Cu16,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#54\">source</a><a href=\"#method.sum-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Cu32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55\">source</a><a href=\"#impl-Sum-for-Simd%3Cu32,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#55\">source</a><a href=\"#method.sum-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Cu64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56\">source</a><a href=\"#impl-Sum-for-Simd%3Cu64,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#56\">source</a><a href=\"#method.sum-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Cu8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53\">source</a><a href=\"#impl-Sum-for-Simd%3Cu8,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#53\">source</a><a href=\"#method.sum-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Cusize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57\">source</a><a href=\"#impl-Sum-for-Simd%3Cusize,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#57\">source</a><a href=\"#method.sum-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n‚Äúsumming up‚Äù the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf32,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf32,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-59\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-59\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#52}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_ne_bytes-59\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_be_bytes-59\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_le_bytes-59\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_ne_bytes-59\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_be_bytes-59\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_le_bytes-59\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf32,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf32,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-23\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#56}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_ne_bytes-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_be_bytes-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_le_bytes-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_ne_bytes-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_be_bytes-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_le_bytes-23\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf32,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf32,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-29\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#53}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_ne_bytes-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_be_bytes-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_le_bytes-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_ne_bytes-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_be_bytes-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_le_bytes-29\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf32,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf32,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-54\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-54\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#54}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_ne_bytes-54\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_be_bytes-54\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_le_bytes-54\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_ne_bytes-54\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_be_bytes-54\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_le_bytes-54\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf32,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf32,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-60\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-60\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#55}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_ne_bytes-60\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_be_bytes-60\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.to_le_bytes-60\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_ne_bytes-60\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_be_bytes-60\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#144\">source</a><a href=\"#method.from_le_bytes-60\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf64,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf64,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-44\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#57}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_ne_bytes-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_be_bytes-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_le_bytes-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_ne_bytes-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_be_bytes-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_le_bytes-44\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf64,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf64,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#58}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_ne_bytes-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_be_bytes-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_le_bytes-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_ne_bytes-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_be_bytes-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_le_bytes-11\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf64,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf64,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#59}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_ne_bytes-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_be_bytes-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_le_bytes-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_ne_bytes-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_be_bytes-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_le_bytes-17\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf64,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf64,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-35\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#60}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_ne_bytes-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_be_bytes-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_le_bytes-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_ne_bytes-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_be_bytes-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_le_bytes-35\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci16,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci16,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-47\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#33}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_ne_bytes-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_be_bytes-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_le_bytes-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_ne_bytes-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_be_bytes-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_le_bytes-47\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci16,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci16,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-31\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#37}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_ne_bytes-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_be_bytes-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_le_bytes-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_ne_bytes-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_be_bytes-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_le_bytes-31\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci16,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci16,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-36\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#34}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_ne_bytes-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_be_bytes-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_le_bytes-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_ne_bytes-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_be_bytes-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_le_bytes-36\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci16,+32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci16,+32%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#38}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_ne_bytes-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_be_bytes-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_le_bytes-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_ne_bytes-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_be_bytes-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_le_bytes-13\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci16,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci16,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-55\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-55\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#35}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_ne_bytes-55\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_be_bytes-55\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_le_bytes-55\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_ne_bytes-55\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_be_bytes-55\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_le_bytes-55\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci16,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci16,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-28\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#36}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_ne_bytes-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_be_bytes-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.to_le_bytes-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_ne_bytes-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_be_bytes-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#136\">source</a><a href=\"#method.from_le_bytes-28\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci32,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci32,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-39\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#39}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_ne_bytes-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_be_bytes-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_le_bytes-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_ne_bytes-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_be_bytes-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_le_bytes-39\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci32,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci32,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#43}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_ne_bytes-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_be_bytes-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_le_bytes-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_ne_bytes-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_be_bytes-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_le_bytes-20\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci32,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci32,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#40}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_ne_bytes-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_be_bytes-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_le_bytes-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_ne_bytes-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_be_bytes-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_le_bytes-9\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci32,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci32,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-37\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#41}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_ne_bytes-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_be_bytes-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_le_bytes-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_ne_bytes-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_be_bytes-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_le_bytes-37\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci32,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci32,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-56\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-56\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#42}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_ne_bytes-56\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_be_bytes-56\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.to_le_bytes-56\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_ne_bytes-56\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_be_bytes-56\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#137\">source</a><a href=\"#method.from_le_bytes-56\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci64,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci64,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-49\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#44}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_ne_bytes-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_be_bytes-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_le_bytes-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_ne_bytes-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_be_bytes-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_le_bytes-49\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci64,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci64,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-50\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#45}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_ne_bytes-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_be_bytes-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_le_bytes-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_ne_bytes-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_be_bytes-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_le_bytes-50\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci64,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci64,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#46}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_ne_bytes-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_be_bytes-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_le_bytes-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_ne_bytes-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_be_bytes-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_le_bytes-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci64,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci64,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-58\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-58\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#47}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_ne_bytes-58\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_be_bytes-58\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.to_le_bytes-58\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_ne_bytes-58\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_be_bytes-58\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#138\">source</a><a href=\"#method.from_le_bytes-58\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci8,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci8,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#26}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_ne_bytes-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_be_bytes-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_le_bytes-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_ne_bytes-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_be_bytes-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_le_bytes-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci8,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci8,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#30}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_ne_bytes-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_be_bytes-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_le_bytes-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_ne_bytes-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_be_bytes-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_le_bytes-15\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci8,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci8,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-21\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#27}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_ne_bytes-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_be_bytes-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_le_bytes-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_ne_bytes-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_be_bytes-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_le_bytes-21\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci8,+32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci8,+32%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#31}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_ne_bytes-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_be_bytes-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_le_bytes-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_ne_bytes-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_be_bytes-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_le_bytes-10\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci8,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci8,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-57\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-57\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#28}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_ne_bytes-57\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_be_bytes-57\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_le_bytes-57\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_ne_bytes-57\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_be_bytes-57\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_le_bytes-57\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci8,+64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci8,+64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#32}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_ne_bytes-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_be_bytes-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_le_bytes-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_ne_bytes-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_be_bytes-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_le_bytes-8\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 64&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Ci8,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#impl-ToBytes-for-Simd%3Ci8,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-51\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#29}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_ne_bytes-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_be_bytes-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.to_le_bytes-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_ne_bytes-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_be_bytes-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#135\">source</a><a href=\"#method.from_le_bytes-51\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cisize,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cisize,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-52\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#48}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_ne_bytes-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_be_bytes-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_le_bytes-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_ne_bytes-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_be_bytes-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_le_bytes-52\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cisize,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cisize,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-53\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-53\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#49}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_ne_bytes-53\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_be_bytes-53\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_le_bytes-53\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_ne_bytes-53\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_be_bytes-53\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_le_bytes-53\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cisize,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cisize,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-34\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#50}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_ne_bytes-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_be_bytes-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_le_bytes-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_ne_bytes-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_be_bytes-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_le_bytes-34\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cisize,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cisize,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#51}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_ne_bytes-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_be_bytes-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.to_le_bytes-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_ne_bytes-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_be_bytes-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#142\">source</a><a href=\"#method.from_le_bytes-7\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu16,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu16,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#7}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_ne_bytes-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_be_bytes-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_le_bytes-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_ne_bytes-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_be_bytes-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_le_bytes-16\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu16,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu16,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-30\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#11}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_ne_bytes-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_be_bytes-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_le_bytes-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_ne_bytes-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_be_bytes-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_le_bytes-30\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu16,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu16,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#8}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_ne_bytes-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_be_bytes-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_le_bytes-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_ne_bytes-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_be_bytes-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_le_bytes-19\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu16,+32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu16,+32%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#12}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_ne_bytes\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_be_bytes\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_le_bytes\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_ne_bytes\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_be_bytes\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_le_bytes\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu16,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu16,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-22\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#9}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_ne_bytes-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_be_bytes-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_le_bytes-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_ne_bytes-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_be_bytes-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_le_bytes-22\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu16,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu16,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-48\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#10}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_ne_bytes-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_be_bytes-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.to_le_bytes-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_ne_bytes-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_be_bytes-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#127\">source</a><a href=\"#method.from_le_bytes-48\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu32,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu32,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-40\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#13}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_ne_bytes-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_be_bytes-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_le_bytes-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_ne_bytes-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_be_bytes-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_le_bytes-40\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu32,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu32,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#17}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_ne_bytes-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_be_bytes-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_le_bytes-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_ne_bytes-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_be_bytes-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_le_bytes-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu32,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu32,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-46\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#14}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_ne_bytes-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_be_bytes-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_le_bytes-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_ne_bytes-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_be_bytes-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_le_bytes-46\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu32,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu32,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-42\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#15}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_ne_bytes-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_be_bytes-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_le_bytes-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_ne_bytes-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_be_bytes-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_le_bytes-42\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu32,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu32,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#16}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_ne_bytes-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_be_bytes-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.to_le_bytes-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_ne_bytes-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_be_bytes-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#128\">source</a><a href=\"#method.from_le_bytes-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu64,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu64,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#18}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_ne_bytes-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_be_bytes-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_le_bytes-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_ne_bytes-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_be_bytes-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_le_bytes-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu64,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu64,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-43\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#19}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_ne_bytes-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_be_bytes-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_le_bytes-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_ne_bytes-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_be_bytes-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_le_bytes-43\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu64,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu64,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-33\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#20}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_ne_bytes-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_be_bytes-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_le_bytes-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_ne_bytes-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_be_bytes-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_le_bytes-33\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu64,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu64,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-27\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#21}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_ne_bytes-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_be_bytes-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.to_le_bytes-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_ne_bytes-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_be_bytes-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#129\">source</a><a href=\"#method.from_le_bytes-27\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu8,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu8,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#0}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_ne_bytes-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_be_bytes-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_le_bytes-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_ne_bytes-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_be_bytes-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_le_bytes-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu8,+16%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu8,+16%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#4}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_ne_bytes-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_be_bytes-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_le_bytes-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_ne_bytes-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_be_bytes-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_le_bytes-14\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 16&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu8,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu8,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-41\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#1}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_ne_bytes-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_be_bytes-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_le_bytes-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_ne_bytes-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_be_bytes-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_le_bytes-41\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu8,+32%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu8,+32%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-24\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#5}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_ne_bytes-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_be_bytes-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_le_bytes-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_ne_bytes-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_be_bytes-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_le_bytes-24\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 32&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu8,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu8,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-38\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#2}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_ne_bytes-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_be_bytes-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_le_bytes-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_ne_bytes-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_be_bytes-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_le_bytes-38\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu8,+64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu8,+64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#6}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_ne_bytes-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_be_bytes-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_le_bytes-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_ne_bytes-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_be_bytes-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_le_bytes-18\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 64&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cu8,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cu8,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-26\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#3}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_ne_bytes-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_be_bytes-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.to_le_bytes-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_ne_bytes-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_be_bytes-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#126\">source</a><a href=\"#method.from_le_bytes-26\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cusize,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cusize,+1%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-32\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#22}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_ne_bytes-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_be_bytes-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_le_bytes-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_ne_bytes-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_be_bytes-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_le_bytes-32\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 1&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cusize,+2%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cusize,+2%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-25\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#23}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_ne_bytes-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_be_bytes-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_le_bytes-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_ne_bytes-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_be_bytes-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_le_bytes-25\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 2&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cusize,+4%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cusize,+4%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#24}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_ne_bytes-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_be_bytes-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_le_bytes-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_ne_bytes-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_be_bytes-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_le_bytes-12\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 4&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cusize,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cusize,+8%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes-45\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#25}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_ne_bytes-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_be_bytes-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.to_le_bytes-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_ne_bytes-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_be_bytes-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#133\">source</a><a href=\"#method.from_le_bytes-45\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt; as <a class=\"trait\" href=\"trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1041-1044\">source</a><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1049\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;, <a class=\"struct\" href=\"../array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26mut+%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1054-1057\">source</a><a href=\"#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1062\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(slice: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;, <a class=\"struct\" href=\"../array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><section id=\"impl-Copy-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#865-868\">source</a><a href=\"#impl-Copy-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section><section id=\"impl-Eq-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#939-942\">source</a><a href=\"#impl-Eq-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Simd%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Simd%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-Simd%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-Send-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-Simd%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-Simd%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Simd%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Simd%3CT,+N%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-75\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-75\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:33.471Z"
}