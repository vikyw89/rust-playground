{
	"title": "The Rustonomicon",
	"url": "https://doc.rust-lang.org/stable/nomicon/print.html",
	"markdown": "# The Rustonomicon\n\nWarning: This book is incomplete. Documenting everything and rewriting outdated parts take a while. See the [issue tracker](https://github.com/rust-lang/nomicon/issues) to check what's missing/outdated, and if there are any mistakes or ideas that haven't been reported, feel free to open a new issue there.\n\n## [The Dark Arts of Unsafe Rust](#the-dark-arts-of-unsafe-rust)\n\n> THE KNOWLEDGE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF UNLEASHING INDESCRIBABLE HORRORS THAT SHATTER YOUR PSYCHE AND SET YOUR MIND ADRIFT IN THE UNKNOWABLY INFINITE COSMOS.\n\nThe Rustonomicon digs into all the awful details that you need to understand when writing Unsafe Rust programs.\n\nShould you wish a long and happy career of writing Rust programs, you should turn back now and forget you ever saw this book. It is not necessary. However if you intend to write unsafe code — or just want to dig into the guts of the language — this book contains lots of useful information.\n\nUnlike _[The Rust Programming Language](../book/index.html)_, we will be assuming considerable prior knowledge. In particular, you should be comfortable with basic systems programming and Rust. If you don't feel comfortable with these topics, you should consider reading [The Book](../book/index.html) first. That said, we won't assume you have read it, and we will take care to occasionally give a refresher on the basics where appropriate. You can skip straight to this book if you want; just know that we won't be explaining everything from the ground up.\n\nThis book exists primarily as a high-level companion to [The Reference](../reference/index.html). Where The Reference exists to detail the syntax and semantics of every part of the language, The Rustonomicon exists to describe how to use those pieces together, and the issues that you will have in doing so.\n\nThe Reference will tell you the syntax and semantics of references, destructors, and unwinding, but it won't tell you how combining them can lead to exception-safety issues, or how to deal with those issues.\n\nIt should be noted that we haven't synced The Rustnomicon and The Reference well, so they may have duplicate content. In general, if the two documents disagree, The Reference should be assumed to be correct (it isn't yet considered normative, it's just better maintained).\n\nTopics that are within the scope of this book include: the meaning of (un)safety, unsafe primitives provided by the language and standard library, techniques for creating safe abstractions with those unsafe primitives, subtyping and variance, exception-safety (panic/unwind-safety), working with uninitialized memory, type punning, concurrency, interoperating with other languages (FFI), optimization tricks, how constructs lower to compiler/OS/hardware primitives, how to **not** make the memory model people angry, how you're **going** to make the memory model people angry, and more.\n\nThe Rustonomicon is not a place to exhaustively describe the semantics and guarantees of every single API in the standard library, nor is it a place to exhaustively describe every feature of Rust.\n\nUnless otherwise noted, Rust code in this book uses the Rust 2021 edition.\n\n## [Meet Safe and Unsafe](#meet-safe-and-unsafe)\n\n![safe and unsafe](img/safeandunsafe.svg)\n\nIt would be great to not have to worry about low-level implementation details. Who could possibly care how much space the empty tuple occupies? Sadly, it sometimes matters and we need to worry about it. The most common reason developers start to care about implementation details is performance, but more importantly, these details can become a matter of correctness when interfacing directly with hardware, operating systems, or other languages.\n\nWhen implementation details start to matter in a safe programming language, programmers usually have three options:\n\n-   fiddle with the code to encourage the compiler/runtime to perform an optimization\n-   adopt a more unidiomatic or cumbersome design to get the desired implementation\n-   rewrite the implementation in a language that lets you deal with those details\n\nFor that last option, the language programmers tend to use is _C_. This is often necessary to interface with systems that only declare a C interface.\n\nUnfortunately, C is incredibly unsafe to use (sometimes for good reason), and this unsafety is magnified when trying to interoperate with another language. Care must be taken to ensure C and the other language agree on what's happening, and that they don't step on each other's toes.\n\nSo what does this have to do with Rust?\n\nWell, unlike C, Rust is a safe programming language.\n\nBut, like C, Rust is an unsafe programming language.\n\nMore accurately, Rust _contains_ both a safe and unsafe programming language.\n\nRust can be thought of as a combination of two programming languages: _Safe Rust_ and _Unsafe Rust_. Conveniently, these names mean exactly what they say: Safe Rust is Safe. Unsafe Rust is, well, not. In fact, Unsafe Rust lets us do some _really_ unsafe things. Things the Rust authors will implore you not to do, but we'll do anyway.\n\nSafe Rust is the _true_ Rust programming language. If all you do is write Safe Rust, you will never have to worry about type-safety or memory-safety. You will never endure a dangling pointer, a use-after-free, or any other kind of Undefined Behavior (a.k.a. UB).\n\nThe standard library also gives you enough utilities out of the box that you'll be able to write high-performance applications and libraries in pure idiomatic Safe Rust.\n\nBut maybe you want to talk to another language. Maybe you're writing a low-level abstraction not exposed by the standard library. Maybe you're _writing_ the standard library (which is written entirely in Rust). Maybe you need to do something the type-system doesn't understand and just _frob some dang bits_. Maybe you need Unsafe Rust.\n\nUnsafe Rust is exactly like Safe Rust with all the same rules and semantics. It just lets you do some _extra_ things that are Definitely Not Safe (which we will define in the next section).\n\nThe value of this separation is that we gain the benefits of using an unsafe language like C — low level control over implementation details — without most of the problems that come with trying to integrate it with a completely different safe language.\n\nThere are still some problems — most notably, we must become aware of properties that the type system assumes and audit them in any code that interacts with Unsafe Rust. That's the purpose of this book: to teach you about these assumptions and how to manage them.\n\n## [How Safe and Unsafe Interact](#how-safe-and-unsafe-interact)\n\nWhat's the relationship between Safe Rust and Unsafe Rust? How do they interact?\n\nThe separation between Safe Rust and Unsafe Rust is controlled with the `unsafe` keyword, which acts as an interface from one to the other. This is why we can say Safe Rust is a safe language: all the unsafe parts are kept exclusively behind the `unsafe` boundary. If you wish, you can even toss `#![forbid(unsafe_code)]` into your code base to statically guarantee that you're only writing Safe Rust.\n\nThe `unsafe` keyword has two uses: to declare the existence of contracts the compiler can't check, and to declare that a programmer has checked that these contracts have been upheld.\n\nYou can use `unsafe` to indicate the existence of unchecked contracts on _functions_ and _trait declarations_. On functions, `unsafe` means that users of the function must check that function's documentation to ensure they are using it in a way that maintains the contracts the function requires. On trait declarations, `unsafe` means that implementors of the trait must check the trait documentation to ensure their implementation maintains the contracts the trait requires.\n\nYou can use `unsafe` on a block to declare that all unsafe actions performed within are verified to uphold the contracts of those operations. For instance, the index passed to [`slice::get_unchecked`](about:blank/std/primitive.slice.html#method.get_unchecked) is in-bounds.\n\nYou can use `unsafe` on a trait implementation to declare that the implementation upholds the trait's contract. For instance, that a type implementing [`Send`](../std/marker/trait.Send.html) is really safe to move to another thread.\n\nThe standard library has a number of unsafe functions, including:\n\n-   [`slice::get_unchecked`](about:blank/std/primitive.slice.html#method.get_unchecked), which performs unchecked indexing, allowing memory safety to be freely violated.\n-   [`mem::transmute`](../std/mem/fn.transmute.html) reinterprets some value as having a given type, bypassing type safety in arbitrary ways (see [conversions](conversions.html) for details).\n-   Every raw pointer to a sized type has an [`offset`](about:blank/std/primitive.pointer.html#method.offset) method that invokes Undefined Behavior if the passed offset is not [\"in bounds\"](about:blank/std/primitive.pointer.html#method.offset).\n-   All FFI (Foreign Function Interface) functions are `unsafe` to call because the other language can do arbitrary operations that the Rust compiler can't check.\n\nAs of Rust 1.29.2 the standard library defines the following unsafe traits (there are others, but they are not stabilized yet and some of them may never be):\n\n-   [`Send`](../std/marker/trait.Send.html) is a marker trait (a trait with no API) that promises implementors are safe to send (move) to another thread.\n-   [`Sync`](../std/marker/trait.Sync.html) is a marker trait that promises threads can safely share implementors through a shared reference.\n-   [`GlobalAlloc`](../std/alloc/trait.GlobalAlloc.html) allows customizing the memory allocator of the whole program.\n\nMuch of the Rust standard library also uses Unsafe Rust internally. These implementations have generally been rigorously manually checked, so the Safe Rust interfaces built on top of these implementations can be assumed to be safe.\n\nThe need for all of this separation boils down a single fundamental property of Safe Rust, the _soundness property_:\n\n**No matter what, Safe Rust can't cause Undefined Behavior.**\n\nThe design of the safe/unsafe split means that there is an asymmetric trust relationship between Safe and Unsafe Rust. Safe Rust inherently has to trust that any Unsafe Rust it touches has been written correctly. On the other hand, Unsafe Rust cannot trust Safe Rust without care.\n\nAs an example, Rust has the [`PartialOrd`](../std/cmp/trait.PartialOrd.html) and [`Ord`](../std/cmp/trait.Ord.html) traits to differentiate between types which can \"just\" be compared, and those that provide a \"total\" ordering (which basically means that comparison behaves reasonably).\n\n[`BTreeMap`](../std/collections/struct.BTreeMap.html) doesn't really make sense for partially-ordered types, and so it requires that its keys implement `Ord`. However, `BTreeMap` has Unsafe Rust code inside of its implementation. Because it would be unacceptable for a sloppy `Ord` implementation (which is Safe to write) to cause Undefined Behavior, the Unsafe code in BTreeMap must be written to be robust against `Ord` implementations which aren't actually total — even though that's the whole point of requiring `Ord`.\n\nThe Unsafe Rust code just can't trust the Safe Rust code to be written correctly. That said, `BTreeMap` will still behave completely erratically if you feed in values that don't have a total ordering. It just won't ever cause Undefined Behavior.\n\nOne may wonder, if `BTreeMap` cannot trust `Ord` because it's Safe, why can it trust _any_ Safe code? For instance `BTreeMap` relies on integers and slices to be implemented correctly. Those are safe too, right?\n\nThe difference is one of scope. When `BTreeMap` relies on integers and slices, it's relying on one very specific implementation. This is a measured risk that can be weighed against the benefit. In this case there's basically zero risk; if integers and slices are broken, _everyone_ is broken. Also, they're maintained by the same people who maintain `BTreeMap`, so it's easy to keep tabs on them.\n\nOn the other hand, `BTreeMap`'s key type is generic. Trusting its `Ord` implementation means trusting every `Ord` implementation in the past, present, and future. Here the risk is high: someone somewhere is going to make a mistake and mess up their `Ord` implementation, or even just straight up lie about providing a total ordering because \"it seems to work\". When that happens, `BTreeMap` needs to be prepared.\n\nThe same logic applies to trusting a closure that's passed to you to behave correctly.\n\nThis problem of unbounded generic trust is the problem that `unsafe` traits exist to resolve. The `BTreeMap` type could theoretically require that keys implement a new trait called `UnsafeOrd`, rather than `Ord`, that might look like this:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::cmp::Ordering;\n\nunsafe trait UnsafeOrd {\n    fn cmp(&self, other: &Self) -> Ordering;\n}\n}\n```\n\nThen, a type would use `unsafe` to implement `UnsafeOrd`, indicating that they've ensured their implementation maintains whatever contracts the trait expects. In this situation, the Unsafe Rust in the internals of `BTreeMap` would be justified in trusting that the key type's `UnsafeOrd` implementation is correct. If it isn't, it's the fault of the unsafe trait implementation, which is consistent with Rust's safety guarantees.\n\nThe decision of whether to mark a trait `unsafe` is an API design choice. A safe trait is easier to implement, but any unsafe code that relies on it must defend against incorrect behavior. Marking a trait `unsafe` shifts this responsibility to the implementor. Rust has traditionally avoided marking traits `unsafe` because it makes Unsafe Rust pervasive, which isn't desirable.\n\n`Send` and `Sync` are marked unsafe because thread safety is a _fundamental property_ that unsafe code can't possibly hope to defend against in the way it could defend against a buggy `Ord` implementation. Similarly, `GlobalAllocator` is keeping accounts of all the memory in the program and other things like `Box` or `Vec` build on top of it. If it does something weird (giving the same chunk of memory to another request when it is still in use), there's no chance to detect that and do anything about it.\n\nThe decision of whether to mark your own traits `unsafe` depends on the same sort of consideration. If `unsafe` code can't reasonably expect to defend against a broken implementation of the trait, then marking the trait `unsafe` is a reasonable choice.\n\nAs an aside, while `Send` and `Sync` are `unsafe` traits, they are _also_ automatically implemented for types when such derivations are provably safe to do. `Send` is automatically derived for all types composed only of values whose types also implement `Send`. `Sync` is automatically derived for all types composed only of values whose types also implement `Sync`. This minimizes the pervasive unsafety of making these two traits `unsafe`. And not many people are going to _implement_ memory allocators (or use them directly, for that matter).\n\nThis is the balance between Safe and Unsafe Rust. The separation is designed to make using Safe Rust as ergonomic as possible, but requires extra effort and care when writing Unsafe Rust. The rest of this book is largely a discussion of the sort of care that must be taken, and what contracts Unsafe Rust must uphold.\n\n## [What Unsafe Rust Can Do](#what-unsafe-rust-can-do)\n\nThe only things that are different in Unsafe Rust are that you can:\n\n-   Dereference raw pointers\n-   Call `unsafe` functions (including C functions, compiler intrinsics, and the raw allocator)\n-   Implement `unsafe` traits\n-   Mutate statics\n-   Access fields of `union`s\n\nThat's it. The reason these operations are relegated to Unsafe is that misusing any of these things will cause the ever dreaded Undefined Behavior. Invoking Undefined Behavior gives the compiler full rights to do arbitrarily bad things to your program. You definitely _should not_ invoke Undefined Behavior.\n\nUnlike C, Undefined Behavior is pretty limited in scope in Rust. All the core language cares about is preventing the following things:\n\n-   Dereferencing (using the `*` operator on) dangling or unaligned pointers (see below)\n-   Breaking the [pointer aliasing rules](references.html)\n-   Calling a function with the wrong call ABI or unwinding from a function with the wrong unwind ABI.\n-   Causing a [data race](races.html)\n-   Executing code compiled with [target features](about:blank/reference/attributes/codegen.html#the-target_feature-attribute) that the current thread of execution does not support\n-   Producing invalid values (either alone or as a field of a compound type such as `enum`/`struct`/array/tuple):\n    -   a `bool` that isn't 0 or 1\n    -   an `enum` with an invalid discriminant\n    -   a null `fn` pointer\n    -   a `char` outside the ranges \\[0x0, 0xD7FF\\] and \\[0xE000, 0x10FFFF\\]\n    -   a `!` (all values are invalid for this type)\n    -   an integer (`i*`/`u*`), floating point value (`f*`), or raw pointer read from [uninitialized memory](uninitialized.html), or uninitialized memory in a `str`.\n    -   a reference/`Box` that is dangling, unaligned, or points to an invalid value.\n    -   a wide reference, `Box`, or raw pointer that has invalid metadata:\n        -   `dyn Trait` metadata is invalid if it is not a pointer to a vtable for `Trait` that matches the actual dynamic trait the pointer or reference points to\n        -   slice metadata is invalid if the length is not a valid `usize` (i.e., it must not be read from uninitialized memory)\n    -   a type with custom invalid values that is one of those values, such as a [`NonNull`](../std/ptr/struct.NonNull.html) that is null. (Requesting custom invalid values is an unstable feature, but some stable libstd types, like `NonNull`, make use of it.)\n\nFor a more detailed explanation about \"Undefined Bahavior\", you may refer to [the reference](../reference/behavior-considered-undefined.html).\n\n\"Producing\" a value happens any time a value is assigned, passed to a function/primitive operation or returned from a function/primitive operation.\n\nA reference/pointer is \"dangling\" if it is null or not all of the bytes it points to are part of the same allocation (so in particular they all have to be part of _some_ allocation). The span of bytes it points to is determined by the pointer value and the size of the pointee type. As a consequence, if the span is empty, \"dangling\" is the same as \"null\". Note that slices and strings point to their entire range, so it's important that the length metadata is never too large (in particular, allocations and therefore slices and strings cannot be bigger than `isize::MAX` bytes). If for some reason this is too cumbersome, consider using raw pointers.\n\nThat's it. That's all the causes of Undefined Behavior baked into Rust. Of course, unsafe functions and traits are free to declare arbitrary other constraints that a program must maintain to avoid Undefined Behavior. For instance, the allocator APIs declare that deallocating unallocated memory is Undefined Behavior.\n\nHowever, violations of these constraints generally will just transitively lead to one of the above problems. Some additional constraints may also derive from compiler intrinsics that make special assumptions about how code can be optimized. For instance, Vec and Box make use of intrinsics that require their pointers to be non-null at all times.\n\nRust is otherwise quite permissive with respect to other dubious operations. Rust considers it \"safe\" to:\n\n-   Deadlock\n-   Have a [race condition](races.html)\n-   Leak memory\n-   Overflow integers (with the built-in operators such as `+` etc.)\n-   Abort the program\n-   Delete the production database\n\nFor more detailed information, you may refer to [the reference](../reference/behavior-not-considered-unsafe.html).\n\nHowever any program that actually manages to do such a thing is _probably_ incorrect. Rust provides lots of tools to make these things rare, but these problems are considered impractical to categorically prevent.\n\n## [Working with Unsafe](#working-with-unsafe)\n\nRust generally only gives us the tools to talk about Unsafe Rust in a scoped and binary manner. Unfortunately, reality is significantly more complicated than that. For instance, consider the following toy function:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn index(idx: usize, arr: &[u8]) -> Option<u8> {\n    if idx < arr.len() {\n        unsafe {\n            Some(*arr.get_unchecked(idx))\n        }\n    } else {\n        None\n    }\n}\n}\n```\n\nThis function is safe and correct. We check that the index is in bounds, and if it is, index into the array in an unchecked manner. We say that such a correct unsafely implemented function is _sound_, meaning that safe code cannot cause Undefined Behavior through it (which, remember, is the single fundamental property of Safe Rust).\n\nBut even in such a trivial function, the scope of the unsafe block is questionable. Consider changing the `<` to a `<=`:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn index(idx: usize, arr: &[u8]) -> Option<u8> {\n    if idx <= arr.len() {\n        unsafe {\n            Some(*arr.get_unchecked(idx))\n        }\n    } else {\n        None\n    }\n}\n}\n```\n\nThis program is now _unsound_, Safe Rust can cause Undefined Behavior, and yet _we only modified safe code_. This is the fundamental problem of safety: it's non-local. The soundness of our unsafe operations necessarily depends on the state established by otherwise \"safe\" operations.\n\nSafety is modular in the sense that opting into unsafety doesn't require you to consider arbitrary other kinds of badness. For instance, doing an unchecked index into a slice doesn't mean you suddenly need to worry about the slice being null or containing uninitialized memory. Nothing fundamentally changes. However safety _isn't_ modular in the sense that programs are inherently stateful and your unsafe operations may depend on arbitrary other state.\n\nThis non-locality gets much worse when we incorporate actual persistent state. Consider a simple implementation of `Vec`:\n\n```rust\nuse std::ptr;\n\n// Note: This definition is naive. See the chapter on implementing Vec.\npub struct Vec<T> {\n    ptr: *mut T,\n    len: usize,\n    cap: usize,\n}\n\n// Note this implementation does not correctly handle zero-sized types.\n// See the chapter on implementing Vec.\nimpl<T> Vec<T> {\n    pub fn push(&mut self, elem: T) {\n        if self.len == self.cap {\n            // not important for this example\n            self.reallocate();\n        }\n        unsafe {\n            ptr::write(self.ptr.add(self.len), elem);\n            self.len += 1;\n        }\n    }\n    fn reallocate(&mut self) { }\n}\n\nfn main() {}\n```\n\nThis code is simple enough to reasonably audit and informally verify. Now consider adding the following method:\n\n```rust\nfn make_room(&mut self) {\n    // grow the capacity\n    self.cap += 1;\n}\n```\n\nThis code is 100% Safe Rust but it is also completely unsound. Changing the capacity violates the invariants of Vec (that `cap` reflects the allocated space in the Vec). This is not something the rest of Vec can guard against. It _has_ to trust the capacity field because there's no way to verify it.\n\nBecause it relies on invariants of a struct field, this `unsafe` code does more than pollute a whole function: it pollutes a whole _module_. Generally, the only bullet-proof way to limit the scope of unsafe code is at the module boundary with privacy.\n\nHowever this works _perfectly_. The existence of `make_room` is _not_ a problem for the soundness of Vec because we didn't mark it as public. Only the module that defines this function can call it. Also, `make_room` directly accesses the private fields of Vec, so it can only be written in the same module as Vec.\n\nIt is therefore possible for us to write a completely safe abstraction that relies on complex invariants. This is _critical_ to the relationship between Safe Rust and Unsafe Rust.\n\nWe have already seen that Unsafe code must trust _some_ Safe code, but shouldn't trust _generic_ Safe code. Privacy is important to unsafe code for similar reasons: it prevents us from having to trust all the safe code in the universe from messing with our trusted state.\n\nSafety lives!\n\n## [Data Representation in Rust](#data-representation-in-rust)\n\nLow-level programming cares a lot about data layout. It's a big deal. It also pervasively influences the rest of the language, so we're going to start by digging into how data is represented in Rust.\n\nThis chapter is ideally in agreement with, and rendered redundant by, the [Type Layout section of the Reference](../reference/type-layout.html). When this book was first written, the reference was in complete disrepair, and the Rustonomicon was attempting to serve as a partial replacement for the reference. This is no longer the case, so this whole chapter can ideally be deleted.\n\nWe'll keep this chapter around for a bit longer, but ideally you should be contributing any new facts or improvements to the Reference instead.\n\n## [repr(Rust)](#reprrust)\n\nFirst and foremost, all types have an alignment specified in bytes. The alignment of a type specifies what addresses are valid to store the value at. A value with alignment `n` must only be stored at an address that is a multiple of `n`. So alignment 2 means you must be stored at an even address, and 1 means that you can be stored anywhere. Alignment is at least 1, and always a power of 2.\n\nPrimitives are usually aligned to their size, although this is platform-specific behavior. For example, on x86 `u64` and `f64` are often aligned to 4 bytes (32 bits).\n\nA type's size must always be a multiple of its alignment (Zero being a valid size for any alignment). This ensures that an array of that type may always be indexed by offsetting by a multiple of its size. Note that the size and alignment of a type may not be known statically in the case of [dynamically sized types](about:blank/exotic-sizes.html#dynamically-sized-types-dsts).\n\nRust gives you the following ways to lay out composite data:\n\n-   structs (named product types)\n-   tuples (anonymous product types)\n-   arrays (homogeneous product types)\n-   enums (named sum types -- tagged unions)\n-   unions (untagged unions)\n\nAn enum is said to be _field-less_ if none of its variants have associated data.\n\nBy default, composite structures have an alignment equal to the maximum of their fields' alignments. Rust will consequently insert padding where necessary to ensure that all fields are properly aligned and that the overall type's size is a multiple of its alignment. For instance:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A {\n    a: u8,\n    b: u32,\n    c: u16,\n}\n}\n```\n\nwill be 32-bit aligned on a target that aligns these primitives to their respective sizes. The whole struct will therefore have a size that is a multiple of 32-bits. It may become:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A {\n    a: u8,\n    _pad1: [u8; 3], // to align `b`\n    b: u32,\n    c: u16,\n    _pad2: [u8; 2], // to make overall size multiple of 4\n}\n}\n```\n\nor maybe:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A {\n    b: u32,\n    c: u16,\n    a: u8,\n    _pad: u8,\n}\n}\n```\n\nThere is _no indirection_ for these types; all data is stored within the struct, as you would expect in C. However with the exception of arrays (which are densely packed and in-order), the layout of data is not specified by default. Given the two following struct definitions:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A {\n    a: i32,\n    b: u64,\n}\n\nstruct B {\n    a: i32,\n    b: u64,\n}\n}\n```\n\nRust _does_ guarantee that two instances of A have their data laid out in exactly the same way. However Rust _does not_ currently guarantee that an instance of A has the same field ordering or padding as an instance of B.\n\nWith A and B as written, this point would seem to be pedantic, but several other features of Rust make it desirable for the language to play with data layout in complex ways.\n\nFor instance, consider this struct:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo<T, U> {\n    count: u16,\n    data1: T,\n    data2: U,\n}\n}\n```\n\nNow consider the monomorphizations of `Foo<u32, u16>` and `Foo<u16, u32>`. If Rust lays out the fields in the order specified, we expect it to pad the values in the struct to satisfy their alignment requirements. So if Rust didn't reorder fields, we would expect it to produce the following:\n\n```rust\nstruct Foo<u16, u32> {\n    count: u16,\n    data1: u16,\n    data2: u32,\n}\n\nstruct Foo<u32, u16> {\n    count: u16,\n    _pad1: u16,\n    data1: u32,\n    data2: u16,\n    _pad2: u16,\n}\n```\n\nThe latter case quite simply wastes space. An optimal use of space requires different monomorphizations to have _different field orderings_.\n\nEnums make this consideration even more complicated. Naively, an enum such as:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Foo {\n    A(u32),\n    B(u64),\n    C(u8),\n}\n}\n```\n\nmight be laid out as:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct FooRepr {\n    data: u64, // this is either a u64, u32, or u8 based on `tag`\n    tag: u8,   // 0 = A, 1 = B, 2 = C\n}\n}\n```\n\nAnd indeed this is approximately how it would be laid out (modulo the size and position of `tag`).\n\nHowever there are several cases where such a representation is inefficient. The classic case of this is Rust's \"null pointer optimization\": an enum consisting of a single outer unit variant (e.g. `None`) and a (potentially nested) non- nullable pointer variant (e.g. `Some(&T)`) makes the tag unnecessary. A null pointer can safely be interpreted as the unit (`None`) variant. The net result is that, for example, `size_of::<Option<&T>>() == size_of::<&T>()`.\n\nThere are many types in Rust that are, or contain, non-nullable pointers such as `Box<T>`, `Vec<T>`, `String`, `&T`, and `&mut T`. Similarly, one can imagine nested enums pooling their tags into a single discriminant, as they are by definition known to have a limited range of valid values. In principle enums could use fairly elaborate algorithms to store bits throughout nested types with forbidden values. As such it is _especially_ desirable that we leave enum layout unspecified today.\n\n## [Exotically Sized Types](#exotically-sized-types)\n\nMost of the time, we expect types to have a statically known and positive size. This isn't always the case in Rust.\n\n## [Dynamically Sized Types (DSTs)](#dynamically-sized-types-dsts)\n\nRust supports Dynamically Sized Types (DSTs): types without a statically known size or alignment. On the surface, this is a bit nonsensical: Rust _must_ know the size and alignment of something in order to correctly work with it! In this regard, DSTs are not normal types. Because they lack a statically known size, these types can only exist behind a pointer. Any pointer to a DST consequently becomes a _wide_ pointer consisting of the pointer and the information that \"completes\" them (more on this below).\n\nThere are two major DSTs exposed by the language:\n\n-   trait objects: `dyn MyTrait`\n-   slices: [`[T]`](../std/primitive.slice.html), [`str`](../std/primitive.str.html), and others\n\nA trait object represents some type that implements the traits it specifies. The exact original type is _erased_ in favor of runtime reflection with a vtable containing all the information necessary to use the type. The information that completes a trait object pointer is the vtable pointer. The runtime size of the pointee can be dynamically requested from the vtable.\n\nA slice is simply a view into some contiguous storage -- typically an array or `Vec`. The information that completes a slice pointer is just the number of elements it points to. The runtime size of the pointee is just the statically known size of an element multiplied by the number of elements.\n\nStructs can actually store a single DST directly as their last field, but this makes them a DST as well:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Can't be stored on the stack directly\nstruct MySuperSlice {\n    info: u32,\n    data: [u8],\n}\n}\n```\n\nAlthough such a type is largely useless without a way to construct it. Currently the only properly supported way to create a custom DST is by making your type generic and performing an _unsizing coercion_:\n\n```rust\nstruct MySuperSliceable<T: ?Sized> {\n    info: u32,\n    data: T,\n}\n\nfn main() {\n    let sized: MySuperSliceable<[u8; 8]> = MySuperSliceable {\n        info: 17,\n        data: [0; 8],\n    };\n\n    let dynamic: &MySuperSliceable<[u8]> = &sized;\n\n    // prints: \"17 [0, 0, 0, 0, 0, 0, 0, 0]\"\n    println!(\"{} {:?}\", dynamic.info, &dynamic.data);\n}\n```\n\n(Yes, custom DSTs are a largely half-baked feature for now.)\n\n## [Zero Sized Types (ZSTs)](#zero-sized-types-zsts)\n\nRust also allows types to be specified that occupy no space:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Nothing; // No fields = no size\n\n// All fields have no size = no size\nstruct LotsOfNothing {\n    foo: Nothing,\n    qux: (),      // empty tuple has no size\n    baz: [u8; 0], // empty array has no size\n}\n}\n```\n\nOn their own, Zero Sized Types (ZSTs) are, for obvious reasons, pretty useless. However as with many curious layout choices in Rust, their potential is realized in a generic context: Rust largely understands that any operation that produces or stores a ZST can be reduced to a no-op. First off, storing it doesn't even make sense -- it doesn't occupy any space. Also there's only one value of that type, so anything that loads it can just produce it from the aether -- which is also a no-op since it doesn't occupy any space.\n\nOne of the most extreme examples of this is Sets and Maps. Given a `Map<Key, Value>`, it is common to implement a `Set<Key>` as just a thin wrapper around `Map<Key, UselessJunk>`. In many languages, this would necessitate allocating space for UselessJunk and doing work to store and load UselessJunk only to discard it. Proving this unnecessary would be a difficult analysis for the compiler.\n\nHowever in Rust, we can just say that `Set<Key> = Map<Key, ()>`. Now Rust statically knows that every load and store is useless, and no allocation has any size. The result is that the monomorphized code is basically a custom implementation of a HashSet with none of the overhead that HashMap would have to support values.\n\nSafe code need not worry about ZSTs, but _unsafe_ code must be careful about the consequence of types with no size. In particular, pointer offsets are no-ops, and allocators typically [require a non-zero size](about:blank/std/alloc/trait.GlobalAlloc.html#tymethod.alloc).\n\nNote that references to ZSTs (including empty slices), just like all other references, must be non-null and suitably aligned. Dereferencing a null or unaligned pointer to a ZST is [undefined behavior](what-unsafe-does.html), just like for any other type.\n\n## [Empty Types](#empty-types)\n\nRust also enables types to be declared that _cannot even be instantiated_. These types can only be talked about at the type level, and never at the value level. Empty types can be declared by specifying an enum with no variants:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Void {} // No variants = EMPTY\n}\n```\n\nEmpty types are even more marginal than ZSTs. The primary motivating example for an empty type is type-level unreachability. For instance, suppose an API needs to return a Result in general, but a specific case actually is infallible. It's actually possible to communicate this at the type level by returning a `Result<T, Void>`. Consumers of the API can confidently unwrap such a Result knowing that it's _statically impossible_ for this value to be an `Err`, as this would require providing a value of type `Void`.\n\nIn principle, Rust can do some interesting analyses and optimizations based on this fact. For instance, `Result<T, Void>` is represented as just `T`, because the `Err` case doesn't actually exist (strictly speaking, this is only an optimization that is not guaranteed, so for example transmuting one into the other is still Undefined Behavior).\n\nThe following _could_ also compile:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Void {}\n\nlet res: Result<u32, Void> = Ok(0);\n\n// Err doesn't exist anymore, so Ok is actually irrefutable.\nlet Ok(num) = res;\n}\n```\n\nBut this trick doesn't work yet.\n\nOne final subtle detail about empty types is that raw pointers to them are actually valid to construct, but dereferencing them is Undefined Behavior because that wouldn't make sense.\n\nWe recommend against modelling C's `void*` type with `*const Void`. A lot of people started doing that but quickly ran into trouble because Rust doesn't really have any safety guards against trying to instantiate empty types with unsafe code, and if you do it, it's Undefined Behavior. This was especially problematic because developers had a habit of converting raw pointers to references and `&Void` is _also_ Undefined Behavior to construct.\n\n`*const ()` (or equivalent) works reasonably well for `void*`, and can be made into a reference without any safety problems. It still doesn't prevent you from trying to read or write values, but at least it compiles to a no-op instead of Undefined Behavior.\n\n## [Extern Types](#extern-types)\n\nThere is [an accepted RFC](https://github.com/rust-lang/rfcs/blob/master/text/1861-extern-types.md) to add proper types with an unknown size, called _extern types_, which would let Rust developers model things like C's `void*` and other \"declared but never defined\" types more accurately. However as of Rust 2018, [the feature is stuck in limbo over how `size_of_val::<MyExternType>()` should behave](https://github.com/rust-lang/rust/issues/43467).\n\n## [Alternative representations](#alternative-representations)\n\nRust allows you to specify alternative data layout strategies from the default. There's also the [unsafe code guidelines](https://rust-lang.github.io/unsafe-code-guidelines/layout.html) (note that it's **NOT** normative).\n\n## [repr(C)](#reprc)\n\nThis is the most important `repr`. It has fairly simple intent: do what C does. The order, size, and alignment of fields is exactly what you would expect from C or C++. Any type you expect to pass through an FFI boundary should have `repr(C)`, as C is the lingua-franca of the programming world. This is also necessary to soundly do more elaborate tricks with data layout such as reinterpreting values as a different type.\n\nWe strongly recommend using [rust-bindgen](https://rust-lang.github.io/rust-bindgen/) and/or [cbindgen](https://github.com/eqrion/cbindgen) to manage your FFI boundaries for you. The Rust team works closely with those projects to ensure that they work robustly and are compatible with current and future guarantees about type layouts and `repr`s.\n\nThe interaction of `repr(C)` with Rust's more exotic data layout features must be kept in mind. Due to its dual purpose as \"for FFI\" and \"for layout control\", `repr(C)` can be applied to types that will be nonsensical or problematic if passed through the FFI boundary.\n\n-   ZSTs are still zero-sized, even though this is not a standard behavior in C, and is explicitly contrary to the behavior of an empty type in C++, which says they should still consume a byte of space.\n    \n-   DST pointers (wide pointers) and tuples are not a concept in C, and as such are never FFI-safe.\n    \n-   Enums with fields also aren't a concept in C or C++, but a valid bridging of the types [is defined](https://github.com/rust-lang/rfcs/blob/master/text/2195-really-tagged-unions.md).\n    \n-   If `T` is an [FFI-safe non-nullable pointer type](about:blank/ffi.html#the-nullable-pointer-optimization), `Option<T>` is guaranteed to have the same layout and ABI as `T` and is therefore also FFI-safe. As of this writing, this covers `&`, `&mut`, and function pointers, all of which can never be null.\n    \n-   Tuple structs are like structs with regards to `repr(C)`, as the only difference from a struct is that the fields aren’t named.\n    \n-   `repr(C)` is equivalent to one of `repr(u*)` (see the next section) for fieldless enums. The chosen size is the default enum size for the target platform's C application binary interface (ABI). Note that enum representation in C is implementation defined, so this is really a \"best guess\". In particular, this may be incorrect when the C code of interest is compiled with certain flags.\n    \n-   Fieldless enums with `repr(C)` or `repr(u*)` still may not be set to an integer value without a corresponding variant, even though this is permitted behavior in C or C++. It is undefined behavior to (unsafely) construct an instance of an enum that does not match one of its variants. (This allows exhaustive matches to continue to be written and compiled as normal.)\n    \n\n## [repr(transparent)](#reprtransparent)\n\n`#[repr(transparent)]` can only be used on a struct or single-variant enum that has a single non-zero-sized field (there may be additional zero-sized fields). The effect is that the layout and ABI of the whole struct/enum is guaranteed to be the same as that one field.\n\n> NOTE: There's a `transparent_unions` nightly feature to apply `repr(transparent)` to unions, but it hasn't been stabilized due to design concerns. See the [tracking issue](https://github.com/rust-lang/rust/issues/60405) for more details.\n\nThe goal is to make it possible to transmute between the single field and the struct/enum. An example of that is [`UnsafeCell`](../std/cell/struct.UnsafeCell.html), which can be transmuted into the type it wraps ([`UnsafeCell`](../std/cell/struct.UnsafeCell.html) also uses the unstable [no\\_niche](https://github.com/rust-lang/rust/pull/68491), so its ABI is not actually guaranteed to be the same when nested in other types).\n\nAlso, passing the struct/enum through FFI where the inner field type is expected on the other side is guaranteed to work. In particular, this is necessary for `struct Foo(f32)` or `enum Foo { Bar(f32) }` to always have the same ABI as `f32`.\n\nThis repr is only considered part of the public ABI of a type if either the single field is `pub`, or if its layout is documented in prose. Otherwise, the layout should not be relied upon by other crates.\n\nMore details are in the [RFC 1758](https://github.com/rust-lang/rfcs/blob/master/text/1758-repr-transparent.md) and the [RFC 2645](https://rust-lang.github.io/rfcs/2645-transparent-unions.html).\n\n## [repr(u\\*), repr(i\\*)](#repru-repri)\n\nThese specify the size to make a fieldless enum. If the discriminant overflows the integer it has to fit in, it will produce a compile-time error. You can manually ask Rust to allow this by setting the overflowing element to explicitly be 0. However Rust will not allow you to create an enum where two variants have the same discriminant.\n\nThe term \"fieldless enum\" only means that the enum doesn't have data in any of its variants. A fieldless enum without a `repr(u*)` or `repr(C)` is still a Rust native type, and does not have a stable ABI representation. Adding a `repr` causes it to be treated exactly like the specified integer size for ABI purposes.\n\nIf the enum has fields, the effect is similar to the effect of `repr(C)` in that there is a defined layout of the type. This makes it possible to pass the enum to C code, or access the type's raw representation and directly manipulate its tag and fields. See [the RFC](https://github.com/rust-lang/rfcs/blob/master/text/2195-really-tagged-unions.md) for details.\n\nThese `repr`s have no effect on a struct.\n\nAdding an explicit `repr(u*)`, `repr(i*)`, or `repr(C)` to an enum with fields suppresses the null-pointer optimization, like:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::mem::size_of;\nenum MyOption<T> {\n    Some(T),\n    None,\n}\n\n#[repr(u8)]\nenum MyReprOption<T> {\n    Some(T),\n    None,\n}\n\nassert_eq!(8, size_of::<MyOption<&u16>>());\nassert_eq!(16, size_of::<MyReprOption<&u16>>());\n}\n```\n\nThis optimization still applies to fieldless enums with an explicit `repr(u*)`, `repr(i*)`, or `repr(C)`.\n\n## [repr(packed)](#reprpacked)\n\n`repr(packed)` forces Rust to strip any padding, and only align the type to a byte. This may improve the memory footprint, but will likely have other negative side-effects.\n\nIn particular, most architectures _strongly_ prefer values to be aligned. This may mean the unaligned loads are penalized (x86), or even fault (some ARM chips). For simple cases like directly loading or storing a packed field, the compiler might be able to paper over alignment issues with shifts and masks. However if you take a reference to a packed field, it's unlikely that the compiler will be able to emit code to avoid an unaligned load.\n\n[As this can cause undefined behavior](https://github.com/rust-lang/rust/issues/27060), the lint has been implemented and it will become a hard error.\n\n`repr(packed)` is not to be used lightly. Unless you have extreme requirements, this should not be used.\n\nThis repr is a modifier on `repr(C)` and `repr(Rust)`.\n\n## [repr(align(n))](#repralignn)\n\n`repr(align(n))` (where `n` is a power of two) forces the type to have an alignment of _at least_ n.\n\nThis enables several tricks, like making sure neighboring elements of an array never share the same cache line with each other (which may speed up certain kinds of concurrent code).\n\nThis is a modifier on `repr(C)` and `repr(Rust)`. It is incompatible with `repr(packed)`.\n\n## [Ownership and Lifetimes](#ownership-and-lifetimes)\n\nOwnership is the breakout feature of Rust. It allows Rust to be completely memory-safe and efficient, while avoiding garbage collection. Before getting into the ownership system in detail, we will consider the motivation of this design.\n\nWe will assume that you accept that garbage collection (GC) is not always an optimal solution, and that it is desirable to manually manage memory in some contexts. If you do not accept this, might I interest you in a different language?\n\nRegardless of your feelings on GC, it is pretty clearly a _massive_ boon to making code safe. You never have to worry about things going away _too soon_ (although whether you still wanted to be pointing at that thing is a different issue...). This is a pervasive problem that C and C++ programs need to deal with. Consider this simple mistake that all of us who have used a non-GC'd language have made at one point:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn as_str(data: &u32) -> &str {\n    // compute the string\n    let s = format!(\"{}\", data);\n\n    // OH NO! We returned a reference to something that\n    // exists only in this function!\n    // Dangling pointer! Use after free! Alas!\n    // (this does not compile in Rust)\n    &s\n}\n}\n```\n\nThis is exactly what Rust's ownership system was built to solve. Rust knows the scope in which the `&s` lives, and as such can prevent it from escaping. However this is a simple case that even a C compiler could plausibly catch. Things get more complicated as code gets bigger and pointers get fed through various functions. Eventually, a C compiler will fall down and won't be able to perform sufficient escape analysis to prove your code unsound. It will consequently be forced to accept your program on the assumption that it is correct.\n\nThis will never happen to Rust. It's up to the programmer to prove to the compiler that everything is sound.\n\nOf course, Rust's story around ownership is much more complicated than just verifying that references don't escape the scope of their referent. That's because ensuring pointers are always valid is much more complicated than this. For instance in this code,\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut data = vec![1, 2, 3];\n// get an internal reference\nlet x = &data[0];\n\n// OH NO! `push` causes the backing storage of `data` to be reallocated.\n// Dangling pointer! Use after free! Alas!\n// (this does not compile in Rust)\ndata.push(4);\n\nprintln!(\"{}\", x);\n}\n```\n\nnaive scope analysis would be insufficient to prevent this bug, because `data` does in fact live as long as we needed. However it was _changed_ while we had a reference into it. This is why Rust requires any references to freeze the referent and its owners.\n\n## [References](#references)\n\nThere are two kinds of reference:\n\n-   Shared reference: `&`\n-   Mutable reference: `&mut`\n\nWhich obey the following rules:\n\n-   A reference cannot outlive its referent\n-   A mutable reference cannot be aliased\n\nThat's it. That's the whole model references follow.\n\nOf course, we should probably define what _aliased_ means.\n\n```text\nerror[E0425]: cannot find value `aliased` in this scope\n --> <rust.rs>:2:20\n  |\n2 |     println!(\"{}\", aliased);\n  |                    ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n```\n\nUnfortunately, Rust hasn't actually defined its aliasing model. 🙀\n\nWhile we wait for the Rust devs to specify the semantics of their language, let's use the next section to discuss what aliasing is in general, and why it matters.\n\n## [Aliasing](#aliasing)\n\nFirst off, let's get some important caveats out of the way:\n\n-   We will be using the broadest possible definition of aliasing for the sake of discussion. Rust's definition will probably be more restricted to factor in mutations and liveness.\n    \n-   We will be assuming a single-threaded, interrupt-free, execution. We will also be ignoring things like memory-mapped hardware. Rust assumes these things don't happen unless you tell it otherwise. For more details, see the [Concurrency Chapter](concurrency.html).\n    \n\nWith that said, here's our working definition: variables and pointers _alias_ if they refer to overlapping regions of memory.\n\n## [Why Aliasing Matters](#why-aliasing-matters)\n\nSo why should we care about aliasing?\n\nConsider this simple function:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn compute(input: &u32, output: &mut u32) {\n    if *input > 10 {\n        *output = 1;\n    }\n    if *input > 5 {\n        *output *= 2;\n    }\n    // remember that `output` will be `2` if `input > 10`\n}\n}\n```\n\nWe would _like_ to be able to optimize it to the following function:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn compute(input: &u32, output: &mut u32) {\n    let cached_input = *input; // keep `*input` in a register\n    if cached_input > 10 {\n        // If the input is greater than 10, the previous code would set the output to 1 and then double it,\n        // resulting in an output of 2 (because `>10` implies `>5`).\n        // Here, we avoid the double assignment and just set it directly to 2.\n        *output = 2;\n    } else if cached_input > 5 {\n        *output *= 2;\n    }\n}\n}\n```\n\nIn Rust, this optimization should be sound. For almost any other language, it wouldn't be (barring global analysis). This is because the optimization relies on knowing that aliasing doesn't occur, which most languages are fairly liberal with. Specifically, we need to worry about function arguments that make `input` and `output` overlap, such as `compute(&x, &mut x)`.\n\nWith that input, we could get this execution:\n\n```rust\n                    //  input ==  output == 0xabad1dea\n                    // *input == *output == 20\nif *input > 10 {    // true  (*input == 20)\n    *output = 1;    // also overwrites *input, because they are the same\n}\nif *input > 5 {     // false (*input == 1)\n    *output *= 2;\n}\n                    // *input == *output == 1\n```\n\nOur optimized function would produce `*output == 2` for this input, so the correctness of our optimization relies on this input being impossible.\n\nIn Rust we know this input should be impossible because `&mut` isn't allowed to be aliased. So we can safely reject its possibility and perform this optimization. In most other languages, this input would be entirely possible, and must be considered.\n\nThis is why alias analysis is important: it lets the compiler perform useful optimizations! Some examples:\n\n-   keeping values in registers by proving no pointers access the value's memory\n-   eliminating reads by proving some memory hasn't been written to since last we read it\n-   eliminating writes by proving some memory is never read before the next write to it\n-   moving or reordering reads and writes by proving they don't depend on each other\n\nThese optimizations also tend to prove the soundness of bigger optimizations such as loop vectorization, constant propagation, and dead code elimination.\n\nIn the previous example, we used the fact that `&mut u32` can't be aliased to prove that writes to `*output` can't possibly affect `*input`. This lets us cache `*input` in a register, eliminating a read.\n\nBy caching this read, we knew that the write in the `> 10` branch couldn't affect whether we take the `> 5` branch, allowing us to also eliminate a read-modify-write (doubling `*output`) when `*input > 10`.\n\nThe key thing to remember about alias analysis is that writes are the primary hazard for optimizations. That is, the only thing that prevents us from moving a read to any other part of the program is the possibility of us re-ordering it with a write to the same location.\n\nFor instance, we have no concern for aliasing in the following modified version of our function, because we've moved the only write to `*output` to the very end of our function. This allows us to freely reorder the reads of `*input` that occur before it:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn compute(input: &u32, output: &mut u32) {\n    let mut temp = *output;\n    if *input > 10 {\n        temp = 1;\n    }\n    if *input > 5 {\n        temp *= 2;\n    }\n    *output = temp;\n}\n}\n```\n\nWe're still relying on alias analysis to assume that `input` doesn't alias `temp`, but the proof is much simpler: the value of a local variable can't be aliased by things that existed before it was declared. This is an assumption every language freely makes, and so this version of the function could be optimized the way we want in any language.\n\nThis is why the definition of \"alias\" that Rust will use likely involves some notion of liveness and mutation: we don't actually care if aliasing occurs if there aren't any actual writes to memory happening.\n\nOf course, a full aliasing model for Rust must also take into consideration things like function calls (which may mutate things we don't see), raw pointers (which have no aliasing requirements on their own), and UnsafeCell (which lets the referent of an `&` be mutated).\n\n## [Lifetimes](#lifetimes)\n\nRust enforces these rules through _lifetimes_. Lifetimes are named regions of code that a reference must be valid for. Those regions may be fairly complex, as they correspond to paths of execution in the program. There may even be holes in these paths of execution, as it's possible to invalidate a reference as long as it's reinitialized before it's used again. Types which contain references (or pretend to) may also be tagged with lifetimes so that Rust can prevent them from being invalidated as well.\n\nIn most of our examples, the lifetimes will coincide with scopes. This is because our examples are simple. The more complex cases where they don't coincide are described below.\n\nWithin a function body, Rust generally doesn't let you explicitly name the lifetimes involved. This is because it's generally not really necessary to talk about lifetimes in a local context; Rust has all the information and can work out everything as optimally as possible. Many anonymous scopes and temporaries that you would otherwise have to write are often introduced to make your code Just Work.\n\nHowever once you cross the function boundary, you need to start talking about lifetimes. Lifetimes are denoted with an apostrophe: `'a`, `'static`. To dip our toes with lifetimes, we're going to pretend that we're actually allowed to label scopes with lifetimes, and desugar the examples from the start of this chapter.\n\nOriginally, our examples made use of _aggressive_ sugar -- high fructose corn syrup even -- around scopes and lifetimes, because writing everything out explicitly is _extremely noisy_. All Rust code relies on aggressive inference and elision of \"obvious\" things.\n\nOne particularly interesting piece of sugar is that each `let` statement implicitly introduces a scope. For the most part, this doesn't really matter. However it does matter for variables that refer to each other. As a simple example, let's completely desugar this simple piece of Rust code:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 0;\nlet y = &x;\nlet z = &y;\n}\n```\n\nThe borrow checker always tries to minimize the extent of a lifetime, so it will likely desugar to the following:\n\n```rust\n// NOTE: `'a: {` and `&'b x` is not valid syntax!\n'a: {\n    let x: i32 = 0;\n    'b: {\n        // lifetime used is 'b because that's good enough.\n        let y: &'b i32 = &'b x;\n        'c: {\n            // ditto on 'c\n            let z: &'c &'b i32 = &'c y; // \"a reference to a reference to an i32\" (with lifetimes annotated)\n        }\n    }\n}\n```\n\nWow. That's... awful. Let's all take a moment to thank Rust for making this easier.\n\nActually passing references to outer scopes will cause Rust to infer a larger lifetime:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 0;\nlet z;\nlet y = &x;\nz = y;\n}\n```\n\n```rust\n'a: {\n    let x: i32 = 0;\n    'b: {\n        let z: &'b i32;\n        'c: {\n            // Must use 'b here because the reference to x is\n            // being passed to the scope 'b.\n            let y: &'b i32 = &'b x;\n            z = y;\n        }\n    }\n}\n```\n\n## [Example: references that outlive referents](#example-references-that-outlive-referents)\n\nAlright, let's look at some of those examples from before:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn as_str(data: &u32) -> &str {\n    let s = format!(\"{}\", data);\n    &s\n}\n}\n```\n\ndesugars to:\n\n```rust\nfn as_str<'a>(data: &'a u32) -> &'a str {\n    'b: {\n        let s = format!(\"{}\", data);\n        return &'a s;\n    }\n}\n```\n\nThis signature of `as_str` takes a reference to a u32 with _some_ lifetime, and promises that it can produce a reference to a str that can live _just as long_. Already we can see why this signature might be trouble. That basically implies that we're going to find a str somewhere in the scope the reference to the u32 originated in, or somewhere _even earlier_. That's a bit of a tall order.\n\nWe then proceed to compute the string `s`, and return a reference to it. Since the contract of our function says the reference must outlive `'a`, that's the lifetime we infer for the reference. Unfortunately, `s` was defined in the scope `'b`, so the only way this is sound is if `'b` contains `'a` -- which is clearly false since `'a` must contain the function call itself. We have therefore created a reference whose lifetime outlives its referent, which is _literally_ the first thing we said that references can't do. The compiler rightfully blows up in our face.\n\nTo make this more clear, we can expand the example:\n\n```rust\nfn as_str<'a>(data: &'a u32) -> &'a str {\n    'b: {\n        let s = format!(\"{}\", data);\n        return &'a s\n    }\n}\n\nfn main() {\n    'c: {\n        let x: u32 = 0;\n        'd: {\n            // An anonymous scope is introduced because the borrow does not\n            // need to last for the whole scope x is valid for. The return\n            // of as_str must find a str somewhere before this function\n            // call. Obviously not happening.\n            println!(\"{}\", as_str::<'d>(&'d x));\n        }\n    }\n}\n```\n\nShoot!\n\nOf course, the right way to write this function is as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn to_string(data: &u32) -> String {\n    format!(\"{}\", data)\n}\n}\n```\n\nWe must produce an owned value inside the function to return it! The only way we could have returned an `&'a str` would have been if it was in a field of the `&'a u32`, which is obviously not the case.\n\n(Actually we could have also just returned a string literal, which as a global can be considered to reside at the bottom of the stack; though this limits our implementation _just a bit_.)\n\n## [Example: aliasing a mutable reference](#example-aliasing-a-mutable-reference)\n\nHow about the other example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut data = vec![1, 2, 3];\nlet x = &data[0];\ndata.push(4);\nprintln!(\"{}\", x);\n}\n```\n\n```rust\n'a: {\n    let mut data: Vec<i32> = vec![1, 2, 3];\n    'b: {\n        // 'b is as big as we need this borrow to be\n        // (just need to get to `println!`)\n        let x: &'b i32 = Index::index::<'b>(&'b data, 0);\n        'c: {\n            // Temporary scope because we don't need the\n            // &mut to last any longer.\n            Vec::push(&'c mut data, 4);\n        }\n        println!(\"{}\", x);\n    }\n}\n```\n\nThe problem here is a bit more subtle and interesting. We want Rust to reject this program for the following reason: We have a live shared reference `x` to a descendant of `data` when we try to take a mutable reference to `data` to `push`. This would create an aliased mutable reference, which would violate the _second_ rule of references.\n\nHowever this is _not at all_ how Rust reasons that this program is bad. Rust doesn't understand that `x` is a reference to a subpath of `data`. It doesn't understand `Vec` at all. What it _does_ see is that `x` has to live for `'b` in order to be printed. The signature of `Index::index` subsequently demands that the reference we take to `data` has to survive for `'b`. When we try to call `push`, it then sees us try to make an `&'c mut data`. Rust knows that `'c` is contained within `'b`, and rejects our program because the `&'b data` must still be alive!\n\nHere we see that the lifetime system is much more coarse than the reference semantics we're actually interested in preserving. For the most part, _that's totally ok_, because it keeps us from spending all day explaining our program to the compiler. However it does mean that several programs that are totally correct with respect to Rust's _true_ semantics are rejected because lifetimes are too dumb.\n\n## [The area covered by a lifetime](#the-area-covered-by-a-lifetime)\n\nA reference (sometimes called a _borrow_) is _alive_ from the place it is created to its last use. The borrowed value needs to outlive only borrows that are alive. This looks simple, but there are a few subtleties.\n\nThe following snippet compiles, because after printing `x`, it is no longer needed, so it doesn't matter if it is dangling or aliased (even though the variable `x` _technically_ exists to the very end of the scope).\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut data = vec![1, 2, 3];\nlet x = &data[0];\nprintln!(\"{}\", x);\n// This is OK, x is no longer needed\ndata.push(4);\n}\n```\n\nHowever, if the value has a destructor, the destructor is run at the end of the scope. And running the destructor is considered a use ‒ obviously the last one. So, this will _not_ compile.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[derive(Debug)]\nstruct X<'a>(&'a i32);\n\nimpl Drop for X<'_> {\n    fn drop(&mut self) {}\n}\n\nlet mut data = vec![1, 2, 3];\nlet x = X(&data[0]);\nprintln!(\"{:?}\", x);\ndata.push(4);\n// Here, the destructor is run and therefore this'll fail to compile.\n}\n```\n\nOne way to convince the compiler that `x` is no longer valid is by using `drop(x)` before `data.push(4)`.\n\nFurthermore, there might be multiple possible last uses of the borrow, for example in each branch of a condition.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn some_condition() -> bool { true }\nlet mut data = vec![1, 2, 3];\nlet x = &data[0];\n\nif some_condition() {\n    println!(\"{}\", x); // This is the last use of `x` in this branch\n    data.push(4);      // So we can push here\n} else {\n    // There's no use of `x` in here, so effectively the last use is the\n    // creation of x at the top of the example.\n    data.push(5);\n}\n}\n```\n\nAnd a lifetime can have a pause in it. Or you might look at it as two distinct borrows just being tied to the same local variable. This often happens around loops (writing a new value of a variable at the end of the loop and using it for the last time at the top of the next iteration).\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut data = vec![1, 2, 3];\n// This mut allows us to change where the reference points to\nlet mut x = &data[0];\n\nprintln!(\"{}\", x); // Last use of this borrow\ndata.push(4);\nx = &data[3]; // We start a new borrow here\nprintln!(\"{}\", x);\n}\n```\n\nHistorically, Rust kept the borrow alive until the end of scope, so these examples might fail to compile with older compilers. Also, there are still some corner cases where Rust fails to properly shorten the live part of the borrow and fails to compile even when it looks like it should. These'll be solved over time.\n\n## [Limits of Lifetimes](#limits-of-lifetimes)\n\nGiven the following code:\n\n```rust\n#[derive(Debug)]\nstruct Foo;\n\nimpl Foo {\n    fn mutate_and_share(&mut self) -> &Self { &*self }\n    fn share(&self) {}\n}\n\nfn main() {\n    let mut foo = Foo;\n    let loan = foo.mutate_and_share();\n    foo.share();\n    println!(\"{:?}\", loan);\n}\n```\n\nOne might expect it to compile. We call `mutate_and_share`, which mutably borrows `foo` temporarily, but then returns only a shared reference. Therefore we would expect `foo.share()` to succeed as `foo` shouldn't be mutably borrowed.\n\nHowever when we try to compile it:\n\n```text\nerror[E0502]: cannot borrow `foo` as immutable because it is also borrowed as mutable\n  --> src/main.rs:12:5\n   |\n11 |     let loan = foo.mutate_and_share();\n   |                --- mutable borrow occurs here\n12 |     foo.share();\n   |     ^^^ immutable borrow occurs here\n13 |     println!(\"{:?}\", loan);\n\n```\n\nWhat happened? Well, we got the exact same reasoning as we did for [Example 2 in the previous section](about:blank/lifetimes.html#example-aliasing-a-mutable-reference). We desugar the program and we get the following:\n\n```rust\nstruct Foo;\n\nimpl Foo {\n    fn mutate_and_share<'a>(&'a mut self) -> &'a Self { &'a *self }\n    fn share<'a>(&'a self) {}\n}\n\nfn main() {\n    'b: {\n        let mut foo: Foo = Foo;\n        'c: {\n            let loan: &'c Foo = Foo::mutate_and_share::<'c>(&'c mut foo);\n            'd: {\n                Foo::share::<'d>(&'d foo);\n            }\n            println!(\"{:?}\", loan);\n        }\n    }\n}\n```\n\nThe lifetime system is forced to extend the `&mut foo` to have lifetime `'c`, due to the lifetime of `loan` and `mutate_and_share`'s signature. Then when we try to call `share`, it sees we're trying to alias that `&'c mut foo` and blows up in our face!\n\nThis program is clearly correct according to the reference semantics we actually care about, but the lifetime system is too coarse-grained to handle that.\n\n## [Improperly reduced borrows](#improperly-reduced-borrows)\n\nThe following code fails to compile, because Rust sees that a variable, `map`, is borrowed twice, and can not infer that the first borrow ceases to be needed before the second one occurs. This is caused by Rust conservatively falling back to using a whole scope for the first borrow. This will eventually get fixed.\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::collections::HashMap;\nuse std::hash::Hash;\nfn get_default<'m, K, V>(map: &'m mut HashMap<K, V>, key: K) -> &'m mut V\nwhere\n    K: Clone + Eq + Hash,\n    V: Default,\n{\n    match map.get_mut(&key) {\n        Some(value) => value,\n        None => {\n            map.insert(key.clone(), V::default());\n            map.get_mut(&key).unwrap()\n        }\n    }\n}\n}\n```\n\nBecause of the lifetime restrictions imposed, `&mut map`'s lifetime overlaps other mutable borrows, resulting in a compile error:\n\n```text\nerror[E0499]: cannot borrow `*map` as mutable more than once at a time\n  --> src/main.rs:12:13\n   |\n4  |   fn get_default<'m, K, V>(map: &'m mut HashMap<K, V>, key: K) -> &'m mut V\n   |                  -- lifetime `'m` defined here\n...\n9  |       match map.get_mut(&key) {\n   |       -     --- first mutable borrow occurs here\n   |  _____|\n   | |\n10 | |         Some(value) => value,\n11 | |         None => {\n12 | |             map.insert(key.clone(), V::default());\n   | |             ^^^ second mutable borrow occurs here\n13 | |             map.get_mut(&key).unwrap()\n14 | |         }\n15 | |     }\n   | |_____- returning this value requires that `*map` is borrowed for `'m`\n\n```\n\n## [Lifetime Elision](#lifetime-elision)\n\nIn order to make common patterns more ergonomic, Rust allows lifetimes to be _elided_ in function signatures.\n\nA _lifetime position_ is anywhere you can write a lifetime in a type:\n\n```rust\n&'a T\n&'a mut T\nT<'a>\n```\n\nLifetime positions can appear as either \"input\" or \"output\":\n\n-   For `fn` definitions, `fn` types, and the traits `Fn`, `FnMut`, and `FnOnce`, input refers to the types of the formal arguments, while output refers to result types. So `fn foo(s: &str) -> (&str, &str)` has elided one lifetime in input position and two lifetimes in output position. Note that the input positions of a `fn` method definition do not include the lifetimes that occur in the method's `impl` header (nor lifetimes that occur in the trait header, for a default method).\n    \n-   For `impl` headers, all types are input. So `impl Trait<&T> for Struct<&T>` has elided two lifetimes in input position, while `impl Struct<&T>` has elided one.\n    \n\nElision rules are as follows:\n\n-   Each elided lifetime in input position becomes a distinct lifetime parameter.\n    \n-   If there is exactly one input lifetime position (elided or not), that lifetime is assigned to _all_ elided output lifetimes.\n    \n-   If there are multiple input lifetime positions, but one of them is `&self` or `&mut self`, the lifetime of `self` is assigned to _all_ elided output lifetimes.\n    \n-   Otherwise, it is an error to elide an output lifetime.\n    \n\nExamples:\n\n```rust\nfn print(s: &str);                                      // elided\nfn print<'a>(s: &'a str);                               // expanded\n\nfn debug(lvl: usize, s: &str);                          // elided\nfn debug<'a>(lvl: usize, s: &'a str);                   // expanded\n\nfn substr(s: &str, until: usize) -> &str;               // elided\nfn substr<'a>(s: &'a str, until: usize) -> &'a str;     // expanded\n\nfn get_str() -> &str;                                   // ILLEGAL\n\nfn frob(s: &str, t: &str) -> &str;                      // ILLEGAL\n\nfn get_mut(&mut self) -> &mut T;                        // elided\nfn get_mut<'a>(&'a mut self) -> &'a mut T;              // expanded\n\nfn args<T: ToCStr>(&mut self, args: &[T]) -> &mut Command                  // elided\nfn args<'a, 'b, T: ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command // expanded\n\nfn new(buf: &mut [u8]) -> BufWriter;                    // elided\nfn new(buf: &mut [u8]) -> BufWriter<'_>;                // elided (with `rust_2018_idioms`)\nfn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>          // expanded\n```\n\n## [Unbounded Lifetimes](#unbounded-lifetimes)\n\nUnsafe code can often end up producing references or lifetimes out of thin air. Such lifetimes come into the world as _unbounded_. The most common source of this is taking a reference to a dereferenced raw pointer, which produces a reference with an unbounded lifetime. Such a lifetime becomes as big as context demands. This is in fact more powerful than simply becoming `'static`, because for instance `&'static &'a T` will fail to typecheck, but the unbound lifetime will perfectly mold into `&'a &'a T` as needed. However for most intents and purposes, such an unbounded lifetime can be regarded as `'static`.\n\nAlmost no reference is `'static`, so this is probably wrong. `transmute` and `transmute_copy` are the two other primary offenders. One should endeavor to bound an unbounded lifetime as quickly as possible, especially across function boundaries.\n\nGiven a function, any output lifetimes that don't derive from inputs are unbounded. For instance:\n\n```rust\nfn get_str<'a>(s: *const String) -> &'a str {\n    unsafe { &*s }\n}\n\nfn main() {\n    let soon_dropped = String::from(\"hello\");\n    let dangling = get_str(&soon_dropped);\n    drop(soon_dropped);\n    println!(\"Invalid str: {}\", dangling); // Invalid str: gӚ_`\n}\n```\n\nThe easiest way to avoid unbounded lifetimes is to use lifetime elision at the function boundary. If an output lifetime is elided, then it _must_ be bounded by an input lifetime. Of course it might be bounded by the _wrong_ lifetime, but this will usually just cause a compiler error, rather than allow memory safety to be trivially violated.\n\nWithin a function, bounding lifetimes is more error-prone. The safest and easiest way to bound a lifetime is to return it from a function with a bound lifetime. However if this is unacceptable, the reference can be placed in a location with a specific lifetime. Unfortunately it's impossible to name all lifetimes involved in a function.\n\n## [Higher-Rank Trait Bounds (HRTBs)](#higher-rank-trait-bounds-hrtbs)\n\nRust's `Fn` traits are a little bit magic. For instance, we can write the following code:\n\n```rust\nstruct Closure<F> {\n    data: (u8, u16),\n    func: F,\n}\n\nimpl<F> Closure<F>\n    where F: Fn(&(u8, u16)) -> &u8,\n{\n    fn call(&self) -> &u8 {\n        (self.func)(&self.data)\n    }\n}\n\nfn do_it(data: &(u8, u16)) -> &u8 { &data.0 }\n\nfn main() {\n    let clo = Closure { data: (0, 1), func: do_it };\n    println!(\"{}\", clo.call());\n}\n```\n\nIf we try to naively desugar this code in the same way that we did in the [lifetimes section](lifetimes.html), we run into some trouble:\n\n```rust\n// NOTE: `&'b data.0` and `'x: {` is not valid syntax!\nstruct Closure<F> {\n    data: (u8, u16),\n    func: F,\n}\n\nimpl<F> Closure<F>\n    // where F: Fn(&'??? (u8, u16)) -> &'??? u8,\n{\n    fn call<'a>(&'a self) -> &'a u8 {\n        (self.func)(&self.data)\n    }\n}\n\nfn do_it<'b>(data: &'b (u8, u16)) -> &'b u8 { &'b data.0 }\n\nfn main() {\n    'x: {\n        let clo = Closure { data: (0, 1), func: do_it };\n        println!(\"{}\", clo.call());\n    }\n}\n```\n\nHow on earth are we supposed to express the lifetimes on `F`'s trait bound? We need to provide some lifetime there, but the lifetime we care about can't be named until we enter the body of `call`! Also, that isn't some fixed lifetime; `call` works with _any_ lifetime `&self` happens to have at that point.\n\nThis job requires The Magic of Higher-Rank Trait Bounds (HRTBs). The way we desugar this is as follows:\n\n```rust\nwhere for<'a> F: Fn(&'a (u8, u16)) -> &'a u8,\n```\n\nAlternatively:\n\n```rust\nwhere F: for<'a> Fn(&'a (u8, u16)) -> &'a u8,\n```\n\n(Where `Fn(a, b, c) -> d` is itself just sugar for the unstable _real_ `Fn` trait)\n\n`for<'a>` can be read as \"for all choices of `'a`\", and basically produces an _infinite list_ of trait bounds that F must satisfy. Intense. There aren't many places outside of the `Fn` traits where we encounter HRTBs, and even for those we have a nice magic sugar for the common cases.\n\nIn summary, we can rewrite the original code more explicitly as:\n\n```rust\nstruct Closure<F> {\n    data: (u8, u16),\n    func: F,\n}\n\nimpl<F> Closure<F>\n    where for<'a> F: Fn(&'a (u8, u16)) -> &'a u8,\n{\n    fn call(&self) -> &u8 {\n        (self.func)(&self.data)\n    }\n}\n\nfn do_it(data: &(u8, u16)) -> &u8 { &data.0 }\n\nfn main() {\n    let clo = Closure { data: (0, 1), func: do_it };\n    println!(\"{}\", clo.call());\n}\n```\n\n## [Subtyping and Variance](#subtyping-and-variance)\n\nRust uses lifetimes to track the relationships between borrows and ownership. However, a naive implementation of lifetimes would be either too restrictive, or permit undefined behavior.\n\nIn order to allow flexible usage of lifetimes while also preventing their misuse, Rust uses **subtyping** and **variance**.\n\nLet's start with an example.\n\n```rust\n// Note: debug expects two parameters with the *same* lifetime\nfn debug<'a>(a: &'a str, b: &'a str) {\n    println!(\"a = {a:?} b = {b:?}\");\n}\n\nfn main() {\n    let hello: &'static str = \"hello\";\n    {\n        let world = String::from(\"world\");\n        let world = &world; // 'world has a shorter lifetime than 'static\n        debug(hello, world);\n    }\n}\n```\n\nIn a conservative implementation of lifetimes, since `hello` and `world` have different lifetimes, we might see the following error:\n\n```text\nerror[E0308]: mismatched types\n --> src/main.rs:10:16\n   |\n10 |         debug(hello, world);\n   |                      ^\n   |                      |\n   |                      expected `&'static str`, found struct `&'world str`\n\n```\n\nThis would be rather unfortunate. In this case, what we want is to accept any type that lives _at least as long_ as `'world`. Let's try using subtyping with our lifetimes.\n\n## [Subtyping](#subtyping)\n\nSubtyping is the idea that one type can be used in place of another.\n\nLet's define that `Sub` is a subtype of `Super` (we'll be using the notation `Sub <: Super` throughout this chapter).\n\nWhat this is suggesting to us is that the set of _requirements_ that `Super` defines are completely satisfied by `Sub`. `Sub` may then have more requirements.\n\nNow, in order to use subtyping with lifetimes, we need to define the requirement of a lifetime:\n\n> `'a` defines a region of code.\n\nNow that we have a defined set of requirements for lifetimes, we can define how they relate to each other:\n\n> `'long <: 'short` if and only if `'long` defines a region of code that **completely contains** `'short`.\n\n`'long` may define a region larger than `'short`, but that still fits our definition.\n\n> As we will see throughout the rest of this chapter, subtyping is a lot more complicated and subtle than this, but this simple rule is a very good 99% intuition. And unless you write unsafe code, the compiler will automatically handle all the corner cases for you.\n\n> But this is the Rustonomicon. We're writing unsafe code, so we need to understand how this stuff really works, and how we can mess it up.\n\nGoing back to our example above, we can say that `'static <: 'world`. For now, let's also accept the idea that subtypes of lifetimes can be passed through references (more on this in [Variance](about:blank/subtyping.html#variance)), _e.g._ `&'static str` is a subtype of `&'world str`, then we can \"downgrade\" `&'static str` into a `&'world str`. With that, the example above will compile:\n\n```rust\nfn debug<'a>(a: &'a str, b: &'a str) {\n    println!(\"a = {a:?} b = {b:?}\");\n}\n\nfn main() {\n    let hello: &'static str = \"hello\";\n    {\n        let world = String::from(\"world\");\n        let world = &world; // 'world has a shorter lifetime than 'static\n        debug(hello, world); // hello silently downgrades from `&'static str` into `&'world str`\n    }\n}\n```\n\n## [Variance](#variance)\n\nAbove, we glossed over the fact that `'static <: 'b` implied that `&'static T <: &'b T`. This uses a property known as _variance_. It's not always as simple as this example, though. To understand that, let's try to extend this example a bit:\n\n```rust\nfn assign<T>(input: &mut T, val: T) {\n    *input = val;\n}\n\nfn main() {\n    let mut hello: &'static str = \"hello\";\n    {\n        let world = String::from(\"world\");\n        assign(&mut hello, &world);\n    }\n    println!(\"{hello}\"); // use after free 😿\n}\n```\n\nIn `assign`, we are setting the `hello` reference to point to `world`. But then `world` goes out of scope, before the later use of `hello` in the println!\n\nThis is a classic use-after-free bug!\n\nOur first instinct might be to blame the `assign` impl, but there's really nothing wrong here. It shouldn't be surprising that we might want to assign a `T` into a `T`.\n\nThe problem is that we cannot assume that `&mut &'static str` and `&mut &'b str` are compatible. This means that `&mut &'static str` **cannot** be a _subtype_ of `&mut &'b str`, even if `'static` is a subtype of `'b`.\n\nVariance is the concept that Rust borrows to define relationships about subtypes through their generic parameters.\n\n> NOTE: For convenience we will define a generic type `F<T>` so that we can easily talk about `T`. Hopefully this is clear in context.\n\nThe type `F`'s _variance_ is how the subtyping of its inputs affects the subtyping of its outputs. There are three kinds of variance in Rust. Given two types `Sub` and `Super`, where `Sub` is a subtype of `Super`:\n\n-   `F` is **covariant** if `F<Sub>` is a subtype of `F<Super>` (the subtype property is passed through)\n-   `F` is **contravariant** if `F<Super>` is a subtype of `F<Sub>` (the subtype property is \"inverted\")\n-   `F` is **invariant** otherwise (no subtyping relationship exists)\n\nIf we remember from the above examples, it was ok for us to treat `&'a T` as a subtype of `&'b T` if `'a <: 'b`, therefore we can say that `&'a T` is _covariant_ over `'a`.\n\nAlso, we saw that it was not ok for us to treat `&mut &'a U` as a subtype of `&mut &'b U`, therefore we can say that `&mut T` is _invariant_ over `T`\n\nHere is a table of some other generic types and their variances:\n\n|  | 'a | T | U |\n| --- | --- | --- | --- |\n| `&'a T` | covariant | covariant |  |\n| `&'a mut T` | covariant | invariant |  |\n| `Box<T>` |  | covariant |  |\n| `Vec<T>` |  | covariant |  |\n| `UnsafeCell<T>` |  | invariant |  |\n| `Cell<T>` |  | invariant |  |\n| `fn(T) -> U` |  | **contra**variant | covariant |\n| `*const T` |  | covariant |  |\n| `*mut T` |  | invariant |  |\n\nSome of these can be explained simply in relation to the others:\n\n-   `Vec<T>` and all other owning pointers and collections follow the same logic as `Box<T>`\n-   `Cell<T>` and all other interior mutability types follow the same logic as `UnsafeCell<T>`\n-   `UnsafeCell<T>` having interior mutability gives it the same variance properties as `&mut T`\n-   `*const T` follows the logic of `&T`\n-   `*mut T` follows the logic of `&mut T` (or `UnsafeCell<T>`)\n\nFor more types, see the [\"Variance\" section](about:blank/reference/subtyping.html#variance) on the reference.\n\n> NOTE: the _only_ source of contravariance in the language is the arguments to a function, which is why it really doesn't come up much in practice. Invoking contravariance involves higher-order programming with function pointers that take references with specific lifetimes (as opposed to the usual \"any lifetime\", which gets into higher rank lifetimes, which work independently of subtyping).\n\nNow that we have some more formal understanding of variance, let's go through some more examples in more detail.\n\n```rust\nfn assign<T>(input: &mut T, val: T) {\n    *input = val;\n}\n\nfn main() {\n    let mut hello: &'static str = \"hello\";\n    {\n        let world = String::from(\"world\");\n        assign(&mut hello, &world);\n    }\n    println!(\"{hello}\");\n}\n```\n\nAnd what do we get when we run this?\n\n```text\nerror[E0597]: `world` does not live long enough\n  --> src/main.rs:9:28\n   |\n6  |     let mut hello: &'static str = \"hello\";\n   |                    ------------ type annotation requires that `world` is borrowed for `'static`\n...\n9  |         assign(&mut hello, &world);\n   |                            ^^^^^^ borrowed value does not live long enough\n10 |     }\n   |     - `world` dropped here while still borrowed\n\n```\n\nGood, it doesn't compile! Let's break down what's happening here in detail.\n\nFirst let's look at the `assign` function:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn assign<T>(input: &mut T, val: T) {\n    *input = val;\n}\n}\n```\n\nAll it does is take a mutable reference and a value and overwrite the referent with it. What's important about this function is that it creates a type equality constraint. It clearly says in its signature the referent and the value must be the _exact same_ type.\n\nMeanwhile, in the caller we pass in `&mut &'static str` and `&'world str`.\n\nBecause `&mut T` is invariant over `T`, the compiler concludes it can't apply any subtyping to the first argument, and so `T` must be exactly `&'static str`.\n\nThis is counter to the `&T` case:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn debug<T: std::fmt::Debug>(a: T, b: T) {\n    println!(\"a = {a:?} b = {b:?}\");\n}\n}\n```\n\nwhere similarly `a` and `b` must have the same type `T`. But since `&'a T` _is_ covariant over `'a`, we are allowed to perform subtyping. So the compiler decides that `&'static str` can become `&'b str` if and only if `&'static str` is a subtype of `&'b str`, which will hold if `'static <: 'b`. This is true, so the compiler is happy to continue compiling this code.\n\nAs it turns out, the argument for why it's ok for Box (and Vec, HashMap, etc.) to be covariant is pretty similar to the argument for why it's ok for lifetimes to be covariant: as soon as you try to stuff them in something like a mutable reference, they inherit invariance and you're prevented from doing anything bad.\n\nHowever Box makes it easier to focus on the by-value aspect of references that we partially glossed over.\n\nUnlike a lot of languages which allow values to be freely aliased at all times, Rust has a very strict rule: if you're allowed to mutate or move a value, you are guaranteed to be the only one with access to it.\n\nConsider the following code:\n\n```rust\nlet hello: Box<&'static str> = Box::new(\"hello\");\n\nlet mut world: Box<&'b str>;\nworld = hello;\n```\n\nThere is no problem at all with the fact that we have forgotten that `hello` was alive for `'static`, because as soon as we moved `hello` to a variable that only knew it was alive for `'b`, **we destroyed the only thing in the universe that remembered it lived for longer**!\n\nOnly one thing left to explain: function pointers.\n\nTo see why `fn(T) -> U` should be covariant over `U`, consider the following signature:\n\n```rust\nfn get_str() -> &'a str;\n```\n\nThis function claims to produce a `str` bound by some lifetime `'a`. As such, it is perfectly valid to provide a function with the following signature instead:\n\n```rust\nfn get_static() -> &'static str;\n```\n\nSo when the function is called, all it's expecting is a `&str` which lives at least the lifetime of `'a`, it doesn't matter if the value actually lives longer.\n\nHowever, the same logic does not apply to _arguments_. Consider trying to satisfy:\n\n```rust\nfn store_ref(&'a str);\n```\n\nwith:\n\n```rust\nfn store_static(&'static str);\n```\n\nThe first function can accept any string reference as long as it lives at least for `'a`, but the second cannot accept a string reference that lives for any duration less than `'static`, which would cause a conflict. Covariance doesn't work here. But if we flip it around, it actually _does_ work! If we need a function that can handle `&'static str`, a function that can handle _any_ reference lifetime will surely work fine.\n\nLet's see this in practice\n\n```rust\nuse std::cell::RefCell;\nthread_local! {\n    pub static StaticVecs: RefCell<Vec<&'static str>> = RefCell::new(Vec::new());\n}\n\n/// saves the input given into a thread local `Vec<&'static str>`\nfn store(input: &'static str) {\n    StaticVecs.with_borrow_mut(|v| v.push(input));\n}\n\n/// Calls the function with it's input (must have the same lifetime!)\nfn demo<'a>(input: &'a str, f: fn(&'a str)) {\n    f(input);\n}\n\nfn main() {\n    demo(\"hello\", store); // \"hello\" is 'static. Can call `store` fine\n\n    {\n        let smuggle = String::from(\"smuggle\");\n\n        // `&smuggle` is not static. If we were to call `store` with `&smuggle`,\n        // we would have pushed an invalid lifetime into the `StaticVecs`.\n        // Therefore, `fn(&'static str)` cannot be a subtype of `fn(&'a str)`\n        demo(&smuggle, store);\n    }\n\n    // use after free 😿\n    StaticVecs.with_borrow(|v| println!(\"{v:?}\"));\n}\n```\n\nAnd that's why function types, unlike anything else in the language, are **contra**variant over their arguments.\n\nNow, this is all well and good for the types the standard library provides, but how is variance determined for types that _you_ define? A struct, informally speaking, inherits the variance of its fields. If a struct `MyType` has a generic argument `A` that is used in a field `a`, then MyType's variance over `A` is exactly `a`'s variance over `A`.\n\nHowever if `A` is used in multiple fields:\n\n-   If all uses of `A` are covariant, then MyType is covariant over `A`\n-   If all uses of `A` are contravariant, then MyType is contravariant over `A`\n-   Otherwise, MyType is invariant over `A`\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::cell::Cell;\n\nstruct MyType<'a, 'b, A: 'a, B: 'b, C, D, E, F, G, H, In, Out, Mixed> {\n    a: &'a A,     // covariant over 'a and A\n    b: &'b mut B, // covariant over 'b and invariant over B\n\n    c: *const C,  // covariant over C\n    d: *mut D,    // invariant over D\n\n    e: E,         // covariant over E\n    f: Vec<F>,    // covariant over F\n    g: Cell<G>,   // invariant over G\n\n    h1: H,        // would also be covariant over H except...\n    h2: Cell<H>,  // invariant over H, because invariance wins all conflicts\n\n    i: fn(In) -> Out,       // contravariant over In, covariant over Out\n\n    k1: fn(Mixed) -> usize, // would be contravariant over Mixed except..\n    k2: Mixed,              // invariant over Mixed, because invariance wins all conflicts\n}\n}\n```\n\n## [Drop Check](#drop-check)\n\nWe have seen how lifetimes provide us some fairly simple rules for ensuring that we never read dangling references. However up to this point we have only ever interacted with the _outlives_ relationship in an inclusive manner. That is, when we talked about `'a: 'b`, it was ok for `'a` to live _exactly_ as long as `'b`. At first glance, this seems to be a meaningless distinction. Nothing ever gets dropped at the same time as another, right? This is why we used the following desugaring of `let` statements:\n\n```rust\nlet x;\nlet y;\n```\n\ndesugaring to:\n\n```rust\n{\n    let x;\n    {\n        let y;\n    }\n}\n```\n\nThere are some more complex situations which are not possible to desugar using scopes, but the order is still defined ‒ variables are dropped in the reverse order of their definition, fields of structs and tuples in order of their definition. There are some more details about order of drop in [RFC 1857](https://github.com/rust-lang/rfcs/blob/master/text/1857-stabilize-drop-order.md).\n\nLet's do this:\n\n```rust\nlet tuple = (vec![], vec![]);\n```\n\nThe left vector is dropped first. But does it mean the right one strictly outlives it in the eyes of the borrow checker? The answer to this question is _no_. The borrow checker could track fields of tuples separately, but it would still be unable to decide what outlives what in case of vector elements, which are dropped manually via pure-library code the borrow checker doesn't understand.\n\nSo why do we care? We care because if the type system isn't careful, it could accidentally make dangling pointers. Consider the following simple program:\n\n```rust\nstruct Inspector<'a>(&'a u8);\n\nstruct World<'a> {\n    inspector: Option<Inspector<'a>>,\n    days: Box<u8>,\n}\n\nfn main() {\n    let mut world = World {\n        inspector: None,\n        days: Box::new(1),\n    };\n    world.inspector = Some(Inspector(&world.days));\n}\n```\n\nThis program is totally sound and compiles today. The fact that `days` does not strictly outlive `inspector` doesn't matter. As long as the `inspector` is alive, so is `days`.\n\nHowever if we add a destructor, the program will no longer compile!\n\n```rust\nstruct Inspector<'a>(&'a u8);\n\nimpl<'a> Drop for Inspector<'a> {\n    fn drop(&mut self) {\n        println!(\"I was only {} days from retirement!\", self.0);\n    }\n}\n\nstruct World<'a> {\n    inspector: Option<Inspector<'a>>,\n    days: Box<u8>,\n}\n\nfn main() {\n    let mut world = World {\n        inspector: None,\n        days: Box::new(1),\n    };\n    world.inspector = Some(Inspector(&world.days));\n    // Let's say `days` happens to get dropped first.\n    // Then when Inspector is dropped, it will try to read free'd memory!\n}\n```\n\n```text\nerror[E0597]: `world.days` does not live long enough\n  --> src/main.rs:19:38\n   |\n19 |     world.inspector = Some(Inspector(&world.days));\n   |                                      ^^^^^^^^^^^ borrowed value does not live long enough\n...\n22 | }\n   | -\n   | |\n   | `world.days` dropped here while still borrowed\n   | borrow might be used here, when `world` is dropped and runs the destructor for type `World<'_>`\n\n```\n\nYou can try changing the order of fields or use a tuple instead of the struct, it'll still not compile.\n\nImplementing `Drop` lets the `Inspector` execute some arbitrary code during its death. This means it can potentially observe that types that are supposed to live as long as it does actually were destroyed first.\n\nInterestingly, only generic types need to worry about this. If they aren't generic, then the only lifetimes they can harbor are `'static`, which will truly live _forever_. This is why this problem is referred to as _sound generic drop_. Sound generic drop is enforced by the _drop checker_. As of this writing, some of the finer details of how the drop checker (also called dropck) validates types is totally up in the air. However The Big Rule is the subtlety that we have focused on this whole section:\n\n**For a generic type to soundly implement drop, its generics arguments must strictly outlive it.**\n\nObeying this rule is (usually) necessary to satisfy the borrow checker; obeying it is sufficient but not necessary to be sound. That is, if your type obeys this rule then it's definitely sound to drop.\n\nThe reason that it is not always necessary to satisfy the above rule is that some Drop implementations will not access borrowed data even though their type gives them the capability for such access, or because we know the specific drop order and the borrowed data is still fine even if the borrow checker doesn't know that.\n\nFor example, this variant of the above `Inspector` example will never access borrowed data:\n\n```rust\nstruct Inspector<'a>(&'a u8, &'static str);\n\nimpl<'a> Drop for Inspector<'a> {\n    fn drop(&mut self) {\n        println!(\"Inspector(_, {}) knows when *not* to inspect.\", self.1);\n    }\n}\n\nstruct World<'a> {\n    inspector: Option<Inspector<'a>>,\n    days: Box<u8>,\n}\n\nfn main() {\n    let mut world = World {\n        inspector: None,\n        days: Box::new(1),\n    };\n    world.inspector = Some(Inspector(&world.days, \"gadget\"));\n    // Let's say `days` happens to get dropped first.\n    // Even when Inspector is dropped, its destructor will not access the\n    // borrowed `days`.\n}\n```\n\nLikewise, this variant will also never access borrowed data:\n\n```rust\nstruct Inspector<T>(T, &'static str);\n\nimpl<T> Drop for Inspector<T> {\n    fn drop(&mut self) {\n        println!(\"Inspector(_, {}) knows when *not* to inspect.\", self.1);\n    }\n}\n\nstruct World<T> {\n    inspector: Option<Inspector<T>>,\n    days: Box<u8>,\n}\n\nfn main() {\n    let mut world = World {\n        inspector: None,\n        days: Box::new(1),\n    };\n    world.inspector = Some(Inspector(&world.days, \"gadget\"));\n    // Let's say `days` happens to get dropped first.\n    // Even when Inspector is dropped, its destructor will not access the\n    // borrowed `days`.\n}\n```\n\nHowever, _both_ of the above variants are rejected by the borrow checker during the analysis of `fn main`, saying that `days` does not live long enough.\n\nThe reason is that the borrow checking analysis of `main` does not know about the internals of each `Inspector`'s `Drop` implementation. As far as the borrow checker knows while it is analyzing `main`, the body of an inspector's destructor might access that borrowed data.\n\nTherefore, the drop checker forces all borrowed data in a value to strictly outlive that value.\n\n## [An Escape Hatch](#an-escape-hatch)\n\nThe precise rules that govern drop checking may be less restrictive in the future.\n\nThe current analysis is deliberately conservative and trivial; it forces all borrowed data in a value to outlive that value, which is certainly sound.\n\nFuture versions of the language may make the analysis more precise, to reduce the number of cases where sound code is rejected as unsafe. This would help address cases such as the two `Inspector`s above that know not to inspect during destruction.\n\nIn the meantime, there is an unstable attribute that one can use to assert (unsafely) that a generic type's destructor is _guaranteed_ to not access any expired data, even if its type gives it the capability to do so.\n\nThat attribute is called `may_dangle` and was introduced in [RFC 1327](https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md). To deploy it on the `Inspector` from above, we would write:\n\n```rust\n#![feature(dropck_eyepatch)]\n\nstruct Inspector<'a>(&'a u8, &'static str);\n\nunsafe impl<#[may_dangle] 'a> Drop for Inspector<'a> {\n    fn drop(&mut self) {\n        println!(\"Inspector(_, {}) knows when *not* to inspect.\", self.1);\n    }\n}\n\nstruct World<'a> {\n    days: Box<u8>,\n    inspector: Option<Inspector<'a>>,\n}\n\nfn main() {\n    let mut world = World {\n        inspector: None,\n        days: Box::new(1),\n    };\n    world.inspector = Some(Inspector(&world.days, \"gadget\"));\n}\n```\n\nUse of this attribute requires the `Drop` impl to be marked `unsafe` because the compiler is not checking the implicit assertion that no potentially expired data (e.g. `self.0` above) is accessed.\n\nThe attribute can be applied to any number of lifetime and type parameters. In the following example, we assert that we access no data behind a reference of lifetime `'b` and that the only uses of `T` will be moves or drops, but omit the attribute from `'a` and `U`, because we do access data with that lifetime and that type:\n\n```rust\n#![allow(unused)]\n#![feature(dropck_eyepatch)]\nfn main() {\nuse std::fmt::Display;\n\nstruct Inspector<'a, 'b, T, U: Display>(&'a u8, &'b u8, T, U);\n\nunsafe impl<'a, #[may_dangle] 'b, #[may_dangle] T, U: Display> Drop for Inspector<'a, 'b, T, U> {\n    fn drop(&mut self) {\n        println!(\"Inspector({}, _, _, {})\", self.0, self.3);\n    }\n}\n}\n```\n\nIt is sometimes obvious that no such access can occur, like the case above. However, when dealing with a generic type parameter, such access can occur indirectly. Examples of such indirect access are:\n\n-   invoking a callback,\n-   via a trait method call.\n\n(Future changes to the language, such as impl specialization, may add other avenues for such indirect access.)\n\nHere is an example of invoking a callback:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Inspector<T>(T, &'static str, Box<for <'r> fn(&'r T) -> String>);\n\nimpl<T> Drop for Inspector<T> {\n    fn drop(&mut self) {\n        // The `self.2` call could access a borrow e.g. if `T` is `&'a _`.\n        println!(\"Inspector({}, {}) unwittingly inspects expired data.\",\n                 (self.2)(&self.0), self.1);\n    }\n}\n}\n```\n\nHere is an example of a trait method call:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fmt;\n\nstruct Inspector<T: fmt::Display>(T, &'static str);\n\nimpl<T: fmt::Display> Drop for Inspector<T> {\n    fn drop(&mut self) {\n        // There is a hidden call to `<T as Display>::fmt` below, which\n        // could access a borrow e.g. if `T` is `&'a _`\n        println!(\"Inspector({}, {}) unwittingly inspects expired data.\",\n                 self.0, self.1);\n    }\n}\n}\n```\n\nAnd of course, all of these accesses could be further hidden within some other method invoked by the destructor, rather than being written directly within it.\n\nIn all of the above cases where the `&'a u8` is accessed in the destructor, adding the `#[may_dangle]` attribute makes the type vulnerable to misuse that the borrow checker will not catch, inviting havoc. It is better to avoid adding the attribute.\n\nWhile the drop order of fields inside a struct is defined, relying on it is fragile and subtle. When the order matters, it is better to use the [`ManuallyDrop`](../std/mem/struct.ManuallyDrop.html) wrapper.\n\n## [Is that all about drop checker?](#is-that-all-about-drop-checker)\n\nIt turns out that when writing unsafe code, we generally don't need to worry at all about doing the right thing for the drop checker. However there is one special case that you need to worry about, which we will look at in the next section.\n\n## [PhantomData](#phantomdata)\n\nWhen working with unsafe code, we can often end up in a situation where types or lifetimes are logically associated with a struct, but not actually part of a field. This most commonly occurs with lifetimes. For instance, the `Iter` for `&'a [T]` is (approximately) defined as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Iter<'a, T: 'a> {\n    ptr: *const T,\n    end: *const T,\n}\n}\n```\n\nHowever because `'a` is unused within the struct's body, it's _unbounded_. [Because of the troubles this has historically caused](https://rust-lang.github.io/rfcs/0738-variance.html#the-corner-case-unused-parameters-and-parameters-that-are-only-used-unsafely), unbounded lifetimes and types are _forbidden_ in struct definitions. Therefore we must somehow refer to these types in the body. Correctly doing this is necessary to have correct variance and drop checking.\n\nWe do this using `PhantomData`, which is a special marker type. `PhantomData` consumes no space, but simulates a field of the given type for the purpose of static analysis. This was deemed to be less error-prone than explicitly telling the type-system the kind of variance that you want, while also providing other useful things such as auto traits and the information needed by drop check.\n\nIter logically contains a bunch of `&'a T`s, so this is exactly what we tell the `PhantomData` to simulate:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::marker;\n\nstruct Iter<'a, T: 'a> {\n    ptr: *const T,\n    end: *const T,\n    _marker: marker::PhantomData<&'a T>,\n}\n}\n```\n\nand that's it. The lifetime will be bounded, and your iterator will be covariant over `'a` and `T`. Everything Just Works.\n\n## [Generic parameters and drop-checking](#generic-parameters-and-drop-checking)\n\nIn the past, there used to be another thing to take into consideration.\n\nThis very documentation used to say:\n\n> Another important example is Vec, which is (approximately) defined as follows:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> struct Vec<T> {\n>     data: *const T, // *const for variance!\n>     len: usize,\n>     cap: usize,\n> }\n> }\n> ```\n> \n> Unlike the previous example, it _appears_ that everything is exactly as we want. Every generic argument to Vec shows up in at least one field. Good to go!\n> \n> Nope.\n> \n> The drop checker will generously determine that `Vec<T>` does not own any values of type T. This will in turn make it conclude that it doesn't need to worry about Vec dropping any T's in its destructor for determining drop check soundness. This will in turn allow people to create unsoundness using Vec's destructor.\n> \n> In order to tell the drop checker that we _do_ own values of type T, and therefore may drop some T's when _we_ drop, we must add an extra `PhantomData` saying exactly that:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> use std::marker;\n> \n> struct Vec<T> {\n>     data: *const T, // *const for variance!\n>     len: usize,\n>     cap: usize,\n>     _owns_T: marker::PhantomData<T>,\n> }\n> }\n> ```\n\nBut ever since [RFC 1238](https://rust-lang.github.io/rfcs/1238-nonparametric-dropck.html), **this is no longer true nor necessary**.\n\nIf you were to write:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Vec<T> {\n    data: *const T, // `*const` for variance!\n    len: usize,\n    cap: usize,\n}\n\n#[cfg(any())]\nimpl<T> Drop for Vec<T> { /* … */ }\n}\n```\n\nthen the existence of that `impl<T> Drop for Vec<T>` makes it so Rust will consider that that `Vec<T>` _owns_ values of type `T` (more precisely: may use values of type `T` in its `Drop` implementation), and Rust will thus not allow them to _dangle_ should a `Vec<T>` be dropped.\n\nWhen a type already has a `Drop impl`, **adding an extra `_owns_T: PhantomData<T>` field is thus _superfluous_ and accomplishes nothing**, dropck-wise (it still affects variance and auto-traits).\n\n-   (advanced edge case: if the type containing the `PhantomData` has no `Drop` impl at all, but still has drop glue (by having _another_ field with drop glue), then the dropck/`#[may_dangle]` considerations mentioned herein do apply as well: a `PhantomData<T>` field will then require `T` to be droppable whenever the containing type goes out of scope).\n\n---\n\nBut this situation can sometimes lead to overly restrictive code. That's why the standard library uses an unstable and `unsafe` attribute to opt back into the old \"unchecked\" drop-checking behavior, that this very documentation warned about: the `#[may_dangle]` attribute.\n\n### [An exception: the special case of the standard library and its unstable `#[may_dangle]`](#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle)\n\nThis section can be skipped if you are only writing your own library code; but if you are curious about what the standard library does with the actual `Vec` definition, you'll notice that it still needs to use a `_owns_T: PhantomData<T>` field for soundness.\n\nClick here to see why\n\nConsider the following example:\n\n```rust\nfn main() {\n    let mut v: Vec<&str> = Vec::new();\n    let s: String = \"Short-lived\".into();\n    v.push(&s);\n    drop(s);\n} // <- `v` is dropped here\n```\n\nwith a classical `impl<T> Drop for Vec<T> {` definition, the above [is denied](https://rust.godbolt.org/z/ans15Kqz3).\n\nIndeed, in this case we have a `Vec</* T = */ &'s str>` vector of `'s`\\-lived references to `str`ings, but in the case of `let s: String`, it is dropped before the `Vec` is, and thus `'s` **is expired** by the time the `Vec` is dropped, and the `impl<'s> Drop for Vec<&'s str> {` is used.\n\nThis means that if such `Drop` were to be used, it would be dealing with an _expired_, or _dangling_ lifetime `'s`. But this is contrary to Rust principles, where by default all Rust references involved in a function signature are non-dangling and valid to dereference.\n\nHence why Rust has to conservatively deny this snippet.\n\nAnd yet, in the case of the real `Vec`, the `Drop` impl does not care about `&'s str`, _since it has no drop glue of its own_: it only wants to deallocate the backing buffer.\n\nIn other words, it would be nice if the above snippet was somehow accepted, by special casing `Vec`, or by relying on some special property of `Vec`: `Vec` could try to _promise not to use the `&'s str`s it holds when being dropped_.\n\nThis is the kind of `unsafe` promise that can be expressed with `#[may_dangle]`:\n\n```rust\nunsafe impl<#[may_dangle] 's> Drop for Vec<&'s str> { /* … */ }\n```\n\nor, more generally:\n\n```rust\nunsafe impl<#[may_dangle] T> Drop for Vec<T> { /* … */ }\n```\n\nis the `unsafe` way to opt out of this conservative assumption that Rust's drop checker makes about type parameters of a dropped instance not being allowed to dangle.\n\nAnd when this is done, such as in the standard library, we need to be careful in the case where `T` has drop glue of its own. In this instance, imagine replacing the `&'s str`s with a `struct PrintOnDrop<'s> /* = */ (&'s str);` which would have a `Drop` impl wherein the inner `&'s str` would be dereferenced and printed to the screen.\n\nIndeed, `Drop for Vec<T> {`, before deallocating the backing buffer, does have to transitively drop each `T` item when it has drop glue; in the case of `PrintOnDrop<'s>`, it means that `Drop for Vec<PrintOnDrop<'s>>` has to transitively drop the `PrintOnDrop<'s>`s elements before deallocating the backing buffer.\n\nSo when we said that `'s` `#[may_dangle]`, it was an excessively loose statement. We'd rather want to say: \"`'s` may dangle provided it not be involved in some transitive drop glue\". Or, more generally, \"`T` may dangle provided it not be involved in some transitive drop glue\". This \"exception to the exception\" is a pervasive situation whenever **we own a `T`**. That's why Rust's `#[may_dangle]` is smart enough to know of this opt-out, and will thus be disabled _when the generic parameter is held in an owned fashion_ by the fields of the struct.\n\nHence why the standard library ends up with:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(any())]\n// we pinky-swear not to use `T` when dropping a `Vec`…\nunsafe impl<#[may_dangle] T> Drop for Vec<T> {\n    fn drop(&mut self) {\n        unsafe {\n            if mem::needs_drop::<T>() {\n                /* … except here, that is, … */\n                ptr::drop_in_place::<[T]>(/* … */);\n            }\n            // …\n            dealloc(/* … */)\n            // …\n        }\n    }\n}\n\nstruct Vec<T> {\n    // … except for the fact that a `Vec` owns `T` items and\n    // may thus be dropping `T` items on drop!\n    _owns_T: core::marker::PhantomData<T>,\n\n    ptr: *const T, // `*const` for variance (but this does not express ownership of a `T` *per se*)\n    len: usize,\n    cap: usize,\n}\n}\n```\n\n---\n\nRaw pointers that own an allocation is such a pervasive pattern that the standard library made a utility for itself called `Unique<T>` which:\n\n-   wraps a `*const T` for variance\n-   includes a `PhantomData<T>`\n-   auto-derives `Send`/`Sync` as if T was contained\n-   marks the pointer as `NonZero` for the null-pointer optimization\n\n## [Table of `PhantomData` patterns](#table-of-phantomdata-patterns)\n\nHere’s a table of all the wonderful ways `PhantomData` could be used:\n\n| Phantom type | variance of `'a` | variance of `T` | `Send`/`Sync`  \n(or lack thereof) | dangling `'a` or `T` in drop glue  \n(_e.g._, `#[may_dangle] Drop`) |\n| --- | --- | --- | --- | --- |\n| `PhantomData<T>` | \\- | **cov**ariant | inherited | disallowed (\"owns `T`\") |\n| `PhantomData<&'a T>` | **cov**ariant | **cov**ariant | `Send + Sync`  \nrequires  \n`T : Sync` | allowed |\n| `PhantomData<&'a mut T>` | **cov**ariant | **inv**ariant | inherited | allowed |\n| `PhantomData<*const T>` | \\- | **cov**ariant | `!Send + !Sync` | allowed |\n| `PhantomData<*mut T>` | \\- | **inv**ariant | `!Send + !Sync` | allowed |\n| `PhantomData<fn(T)>` | \\- | **contra**variant | `Send + Sync` | allowed |\n| `PhantomData<fn() -> T>` | \\- | **cov**ariant | `Send + Sync` | allowed |\n| `PhantomData<fn(T) -> T>` | \\- | **inv**ariant | `Send + Sync` | allowed |\n| `PhantomData<Cell<&'a ()>>` | **inv**ariant | \\- | `Send + !Sync` | allowed |\n\n-   Note: opting out of the `Unpin` auto-trait requires the dedicated [`PhantomPinned`](../core/marker/struct.PhantomPinned.html) type instead.\n\n## [Splitting Borrows](#splitting-borrows)\n\nThe mutual exclusion property of mutable references can be very limiting when working with a composite structure. The borrow checker (a.k.a. borrowck) understands some basic stuff, but will fall over pretty easily. It does understand structs sufficiently to know that it's possible to borrow disjoint fields of a struct simultaneously. So this works today:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo {\n    a: i32,\n    b: i32,\n    c: i32,\n}\n\nlet mut x = Foo {a: 0, b: 0, c: 0};\nlet a = &mut x.a;\nlet b = &mut x.b;\nlet c = &x.c;\n*b += 1;\nlet c2 = &x.c;\n*a += 10;\nprintln!(\"{} {} {} {}\", a, b, c, c2);\n}\n```\n\nHowever borrowck doesn't understand arrays or slices in any way, so this doesn't work:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut x = [1, 2, 3];\nlet a = &mut x[0];\nlet b = &mut x[1];\nprintln!(\"{} {}\", a, b);\n}\n```\n\n```text\nerror[E0499]: cannot borrow `x[..]` as mutable more than once at a time\n --> src/lib.rs:4:18\n  |\n3 |     let a = &mut x[0];\n  |                  ---- first mutable borrow occurs here\n4 |     let b = &mut x[1];\n  |                  ^^^^ second mutable borrow occurs here\n5 |     println!(\"{} {}\", a, b);\n6 | }\n  | - first borrow ends here\n\nerror: aborting due to previous error\n\n```\n\nWhile it was plausible that borrowck could understand this simple case, it's pretty clearly hopeless for borrowck to understand disjointness in general container types like a tree, especially if distinct keys actually _do_ map to the same value.\n\nIn order to \"teach\" borrowck that what we're doing is ok, we need to drop down to unsafe code. For instance, mutable slices expose a `split_at_mut` function that consumes the slice and returns two mutable slices. One for everything to the left of the index, and one for everything to the right. Intuitively we know this is safe because the slices don't overlap, and therefore alias. However the implementation requires some unsafety:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::slice::from_raw_parts_mut;\nstruct FakeSlice<T>(T);\nimpl<T> FakeSlice<T> {\nfn len(&self) -> usize { unimplemented!() }\nfn as_mut_ptr(&mut self) -> *mut T { unimplemented!() }\npub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n    let len = self.len();\n    let ptr = self.as_mut_ptr();\n\n    unsafe {\n        assert!(mid <= len);\n\n        (from_raw_parts_mut(ptr, mid),\n         from_raw_parts_mut(ptr.add(mid), len - mid))\n    }\n}\n}\n}\n```\n\nThis is actually a bit subtle. So as to avoid ever making two `&mut`'s to the same value, we explicitly construct brand-new slices through raw pointers.\n\nHowever more subtle is how iterators that yield mutable references work. The iterator trait is defined as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n}\n}\n```\n\nGiven this definition, Self::Item has _no_ connection to `self`. This means that we can call `next` several times in a row, and hold onto all the results _concurrently_. This is perfectly fine for by-value iterators, which have exactly these semantics. It's also actually fine for shared references, as they admit arbitrarily many references to the same thing (although the iterator needs to be a separate object from the thing being shared).\n\nBut mutable references make this a mess. At first glance, they might seem completely incompatible with this API, as it would produce multiple mutable references to the same object!\n\nHowever it actually _does_ work, exactly because iterators are one-shot objects. Everything an IterMut yields will be yielded at most once, so we don't actually ever yield multiple mutable references to the same piece of data.\n\nPerhaps surprisingly, mutable iterators don't require unsafe code to be implemented for many types!\n\nFor instance here's a singly linked list:\n\n```rust\nfn main() {}\ntype Link<T> = Option<Box<Node<T>>>;\n\nstruct Node<T> {\n    elem: T,\n    next: Link<T>,\n}\n\npub struct LinkedList<T> {\n    head: Link<T>,\n}\n\npub struct IterMut<'a, T: 'a>(Option<&'a mut Node<T>>);\n\nimpl<T> LinkedList<T> {\n    fn iter_mut(&mut self) -> IterMut<T> {\n        IterMut(self.head.as_mut().map(|node| &mut **node))\n    }\n}\n\nimpl<'a, T> Iterator for IterMut<'a, T> {\n    type Item = &'a mut T;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        self.0.take().map(|node| {\n            self.0 = node.next.as_mut().map(|node| &mut **node);\n            &mut node.elem\n        })\n    }\n}\n```\n\nHere's a mutable slice:\n\n```rust\nfn main() {}\nuse std::mem;\n\npub struct IterMut<'a, T: 'a>(&'a mut[T]);\n\nimpl<'a, T> Iterator for IterMut<'a, T> {\n    type Item = &'a mut T;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        let slice = mem::take(&mut self.0);\n        if slice.is_empty() { return None; }\n\n        let (l, r) = slice.split_at_mut(1);\n        self.0 = r;\n        l.get_mut(0)\n    }\n}\n\nimpl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n    fn next_back(&mut self) -> Option<Self::Item> {\n        let slice = mem::take(&mut self.0);\n        if slice.is_empty() { return None; }\n\n        let new_len = slice.len() - 1;\n        let (l, r) = slice.split_at_mut(new_len);\n        self.0 = l;\n        r.get_mut(0)\n    }\n}\n```\n\nAnd here's a binary tree:\n\n```rust\nfn main() {}\nuse std::collections::VecDeque;\n\ntype Link<T> = Option<Box<Node<T>>>;\n\nstruct Node<T> {\n    elem: T,\n    left: Link<T>,\n    right: Link<T>,\n}\n\npub struct Tree<T> {\n    root: Link<T>,\n}\n\nstruct NodeIterMut<'a, T: 'a> {\n    elem: Option<&'a mut T>,\n    left: Option<&'a mut Node<T>>,\n    right: Option<&'a mut Node<T>>,\n}\n\nenum State<'a, T: 'a> {\n    Elem(&'a mut T),\n    Node(&'a mut Node<T>),\n}\n\npub struct IterMut<'a, T: 'a>(VecDeque<NodeIterMut<'a, T>>);\n\nimpl<T> Tree<T> {\n    pub fn iter_mut(&mut self) -> IterMut<T> {\n        let mut deque = VecDeque::new();\n        self.root.as_mut().map(|root| deque.push_front(root.iter_mut()));\n        IterMut(deque)\n    }\n}\n\nimpl<T> Node<T> {\n    pub fn iter_mut(&mut self) -> NodeIterMut<T> {\n        NodeIterMut {\n            elem: Some(&mut self.elem),\n            left: self.left.as_mut().map(|node| &mut **node),\n            right: self.right.as_mut().map(|node| &mut **node),\n        }\n    }\n}\n\n\nimpl<'a, T> Iterator for NodeIterMut<'a, T> {\n    type Item = State<'a, T>;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        match self.left.take() {\n            Some(node) => Some(State::Node(node)),\n            None => match self.elem.take() {\n                Some(elem) => Some(State::Elem(elem)),\n                None => match self.right.take() {\n                    Some(node) => Some(State::Node(node)),\n                    None => None,\n                }\n            }\n        }\n    }\n}\n\nimpl<'a, T> DoubleEndedIterator for NodeIterMut<'a, T> {\n    fn next_back(&mut self) -> Option<Self::Item> {\n        match self.right.take() {\n            Some(node) => Some(State::Node(node)),\n            None => match self.elem.take() {\n                Some(elem) => Some(State::Elem(elem)),\n                None => match self.left.take() {\n                    Some(node) => Some(State::Node(node)),\n                    None => None,\n                }\n            }\n        }\n    }\n}\n\nimpl<'a, T> Iterator for IterMut<'a, T> {\n    type Item = &'a mut T;\n    fn next(&mut self) -> Option<Self::Item> {\n        loop {\n            match self.0.front_mut().and_then(|node_it| node_it.next()) {\n                Some(State::Elem(elem)) => return Some(elem),\n                Some(State::Node(node)) => self.0.push_front(node.iter_mut()),\n                None => if let None = self.0.pop_front() { return None },\n            }\n        }\n    }\n}\n\nimpl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n    fn next_back(&mut self) -> Option<Self::Item> {\n        loop {\n            match self.0.back_mut().and_then(|node_it| node_it.next_back()) {\n                Some(State::Elem(elem)) => return Some(elem),\n                Some(State::Node(node)) => self.0.push_back(node.iter_mut()),\n                None => if let None = self.0.pop_back() { return None },\n            }\n        }\n    }\n}\n```\n\nAll of these are completely safe and work on stable Rust! This ultimately falls out of the simple struct case we saw before: Rust understands that you can safely split a mutable reference into subfields. We can then encode permanently consuming a reference via Options (or in the case of slices, replacing with an empty slice).\n\n## [Type Conversions](#type-conversions)\n\nAt the end of the day, everything is just a pile of bits somewhere, and type systems are just there to help us use those bits right. There are two common problems with typing bits: needing to reinterpret those exact bits as a different type, and needing to change the bits to have equivalent meaning for a different type. Because Rust encourages encoding important properties in the type system, these problems are incredibly pervasive. As such, Rust consequently gives you several ways to solve them.\n\nFirst we'll look at the ways that Safe Rust gives you to reinterpret values. The most trivial way to do this is to just destructure a value into its constituent parts and then build a new type out of them. e.g.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo {\n    x: u32,\n    y: u16,\n}\n\nstruct Bar {\n    a: u32,\n    b: u16,\n}\n\nfn reinterpret(foo: Foo) -> Bar {\n    let Foo { x, y } = foo;\n    Bar { a: x, b: y }\n}\n}\n```\n\nBut this is, at best, annoying. For common conversions, Rust provides more ergonomic alternatives.\n\n## [Coercions](#coercions)\n\nTypes can implicitly be coerced to change in certain contexts. These changes are generally just _weakening_ of types, largely focused around pointers and lifetimes. They mostly exist to make Rust \"just work\" in more cases, and are largely harmless.\n\nFor an exhaustive list of all the types of coercions, see the [Coercion types](about:blank/reference/type-coercions.html#coercion-types) section on the reference.\n\nNote that we do not perform coercions when matching traits (except for receivers, see the [next page](./dot-operator.html)). If there is an `impl` for some type `U` and `T` coerces to `U`, that does not constitute an implementation for `T`. For example, the following will not type check, even though it is OK to coerce `t` to `&T` and there is an `impl` for `&T`:\n\n```rust\ntrait Trait {}\n\nfn foo<X: Trait>(t: X) {}\n\nimpl<'a> Trait for &'a i32 {}\n\nfn main() {\n    let t: &mut i32 = &mut 0;\n    foo(t);\n}\n```\n\nwhich fails like as follows:\n\n```text\nerror[E0277]: the trait bound `&mut i32: Trait` is not satisfied\n --> src/main.rs:9:9\n  |\n3 | fn foo<X: Trait>(t: X) {}\n  |           ----- required by this bound in `foo`\n...\n9 |     foo(t);\n  |         ^ the trait `Trait` is not implemented for `&mut i32`\n  |\n  = help: the following implementations were found:\n            <&'a i32 as Trait>\n  = note: `Trait` is implemented for `&i32`, but not for `&mut i32`\n\n```\n\n## [The Dot Operator](#the-dot-operator)\n\nThe dot operator will perform a lot of magic to convert types. It will perform auto-referencing, auto-dereferencing, and coercion until types match. The detailed mechanics of method lookup are defined [here](https://rustc-dev-guide.rust-lang.org/method-lookup.html), but here is a brief overview that outlines the main steps.\n\nSuppose we have a function `foo` that has a receiver (a `self`, `&self` or `&mut self` parameter). If we call `value.foo()`, the compiler needs to determine what type `Self` is before it can call the correct implementation of the function. For this example, we will say that `value` has type `T`.\n\nWe will use [fully-qualified syntax](about:blank/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name) to be more clear about exactly which type we are calling a function on.\n\n-   First, the compiler checks if it can call `T::foo(value)` directly. This is called a \"by value\" method call.\n-   If it can't call this function (for example, if the function has the wrong type or a trait isn't implemented for `Self`), then the compiler tries to add in an automatic reference. This means that the compiler tries `<&T>::foo(value)` and `<&mut T>::foo(value)`. This is called an \"autoref\" method call.\n-   If none of these candidates worked, it dereferences `T` and tries again. This uses the `Deref` trait - if `T: Deref<Target = U>` then it tries again with type `U` instead of `T`. If it can't dereference `T`, it can also try _unsizing_ `T`. This just means that if `T` has a size parameter known at compile time, it \"forgets\" it for the purpose of resolving methods. For instance, this unsizing step can convert `[i32; 2]` into `[i32]` by \"forgetting\" the size of the array.\n\nHere is an example of the method lookup algorithm:\n\n```rust\nlet array: Rc<Box<[T; 3]>> = ...;\nlet first_entry = array[0];\n```\n\nHow does the compiler actually compute `array[0]` when the array is behind so many indirections? First, `array[0]` is really just syntax sugar for the [`Index`](../std/ops/trait.Index.html) trait - the compiler will convert `array[0]` into `array.index(0)`. Now, the compiler checks to see if `array` implements `Index`, so that it can call the function.\n\nThen, the compiler checks if `Rc<Box<[T; 3]>>` implements `Index`, but it does not, and neither do `&Rc<Box<[T; 3]>>` or `&mut Rc<Box<[T; 3]>>`. Since none of these worked, the compiler dereferences the `Rc<Box<[T; 3]>>` into `Box<[T; 3]>` and tries again. `Box<[T; 3]>`, `&Box<[T; 3]>`, and `&mut Box<[T; 3]>` do not implement `Index`, so it dereferences again. `[T; 3]` and its autorefs also do not implement `Index`. It can't dereference `[T; 3]`, so the compiler unsizes it, giving `[T]`. Finally, `[T]` implements `Index`, so it can now call the actual `index` function.\n\nConsider the following more complicated example of the dot operator at work:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn do_stuff<T: Clone>(value: &T) {\n    let cloned = value.clone();\n}\n}\n```\n\nWhat type is `cloned`? First, the compiler checks if it can call by value. The type of `value` is `&T`, and so the `clone` function has signature `fn clone(&T) -> T`. It knows that `T: Clone`, so the compiler finds that `cloned: T`.\n\nWhat would happen if the `T: Clone` restriction was removed? It would not be able to call by value, since there is no implementation of `Clone` for `T`. So the compiler tries to call by autoref. In this case, the function has the signature `fn clone(&&T) -> &T` since `Self = &T`. The compiler sees that `&T: Clone`, and then deduces that `cloned: &T`.\n\nHere is another example where the autoref behavior is used to create some subtle effects:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::sync::Arc;\n\n#[derive(Clone)]\nstruct Container<T>(Arc<T>);\n\nfn clone_containers<T>(foo: &Container<i32>, bar: &Container<T>) {\n    let foo_cloned = foo.clone();\n    let bar_cloned = bar.clone();\n}\n}\n```\n\nWhat types are `foo_cloned` and `bar_cloned`? We know that `Container<i32>: Clone`, so the compiler calls `clone` by value to give `foo_cloned: Container<i32>`. However, `bar_cloned` actually has type `&Container<T>`. Surely this doesn't make sense - we added `#[derive(Clone)]` to `Container`, so it must implement `Clone`! Looking closer, the code generated by the `derive` macro is (roughly):\n\n```rust\nimpl<T> Clone for Container<T> where T: Clone {\n    fn clone(&self) -> Self {\n        Self(Arc::clone(&self.0))\n    }\n}\n```\n\nThe derived `Clone` implementation is [only defined where `T: Clone`](about:blank/std/clone/trait.Clone.html#derivable), so there is no implementation for `Container<T>: Clone` for a generic `T`. The compiler then looks to see if `&Container<T>` implements `Clone`, which it does. So it deduces that `clone` is called by autoref, and so `bar_cloned` has type `&Container<T>`.\n\nWe can fix this by implementing `Clone` manually without requiring `T: Clone`:\n\n```rust\nimpl<T> Clone for Container<T> {\n    fn clone(&self) -> Self {\n        Self(Arc::clone(&self.0))\n    }\n}\n```\n\nNow, the type checker deduces that `bar_cloned: Container<T>`.\n\n## [Casts](#casts)\n\nCasts are a superset of coercions: every coercion can be explicitly invoked via a cast. However some conversions require a cast. While coercions are pervasive and largely harmless, these \"true casts\" are rare and potentially dangerous. As such, casts must be explicitly invoked using the `as` keyword: `expr as Type`.\n\nYou can find an exhaustive list of [all the true casts](about:blank/reference/expressions/operator-expr.html#type-cast-expressions) and [casting semantics](about:blank/reference/expressions/operator-expr.html#semantics) on the reference.\n\n## [Safety of casting](#safety-of-casting)\n\nTrue casts generally revolve around raw pointers and the primitive numeric types. Even though they're dangerous, these casts are infallible at runtime. If a cast triggers some subtle corner case no indication will be given that this occurred. The cast will simply succeed. That said, casts must be valid at the type level, or else they will be prevented statically. For instance, `7u8 as bool` will not compile.\n\nThat said, casts aren't `unsafe` because they generally can't violate memory safety _on their own_. For instance, converting an integer to a raw pointer can very easily lead to terrible things. However the act of creating the pointer itself is safe, because actually using a raw pointer is already marked as `unsafe`.\n\n## [Some notes about casting](#some-notes-about-casting)\n\n### [Lengths when casting raw slices](#lengths-when-casting-raw-slices)\n\nNote that lengths are not adjusted when casting raw slices; `*const [u16] as *const [u8]` creates a slice that only includes half of the original memory.\n\n### [Transitivity](#transitivity)\n\nCasting is not transitive, that is, even if `e as U1 as U2` is a valid expression, `e as U2` is not necessarily so.\n\n## [Transmutes](#transmutes)\n\nGet out of our way type system! We're going to reinterpret these bits or die trying! Even though this book is all about doing things that are unsafe, I really can't emphasize enough that you should deeply think about finding Another Way than the operations covered in this section. This is really, truly, the most horribly unsafe thing you can do in Rust. The guardrails here are dental floss.\n\n[`mem::transmute<T, U>`](../std/mem/fn.transmute.html) takes a value of type `T` and reinterprets it to have type `U`. The only restriction is that the `T` and `U` are verified to have the same size. The ways to cause Undefined Behavior with this are mind boggling.\n\n-   First and foremost, creating an instance of _any_ type with an invalid state is going to cause arbitrary chaos that can't really be predicted. Do not transmute `3` to `bool`. Even if you never _do_ anything with the `bool`. Just don't.\n    \n-   Transmute has an overloaded return type. If you do not specify the return type it may produce a surprising type to satisfy inference.\n    \n-   Transmuting an `&` to `&mut` is Undefined Behavior. While certain usages may _appear_ safe, note that the Rust optimizer is free to assume that a shared reference won't change through its lifetime and thus such transmutation will run afoul of those assumptions. So:\n    \n    -   Transmuting an `&` to `&mut` is _always_ Undefined Behavior.\n    -   No you can't do it.\n    -   No you're not special.\n-   Transmuting to a reference without an explicitly provided lifetime produces an [unbounded lifetime](./unbounded-lifetimes.html).\n    \n-   When transmuting between different compound types, you have to make sure they are laid out the same way! If layouts differ, the wrong fields are going to get filled with the wrong data, which will make you unhappy and can also be Undefined Behavior (see above).\n    \n    So how do you know if the layouts are the same? For `repr(C)` types and `repr(transparent)` types, layout is precisely defined. But for your run-of-the-mill `repr(Rust)`, it is not. Even different instances of the same generic type can have wildly different layout. `Vec<i32>` and `Vec<u32>` _might_ have their fields in the same order, or they might not. The details of what exactly is and is not guaranteed for data layout are still being worked out over [at the UCG WG](https://rust-lang.github.io/unsafe-code-guidelines/layout.html).\n    \n\n[`mem::transmute_copy<T, U>`](../std/mem/fn.transmute_copy.html) somehow manages to be _even more_ wildly unsafe than this. It copies `size_of<U>` bytes out of an `&T` and interprets them as a `U`. The size check that `mem::transmute` has is gone (as it may be valid to copy out a prefix), though it is Undefined Behavior for `U` to be larger than `T`.\n\nAlso of course you can get all of the functionality of these functions using raw pointer casts or `union`s, but without any of the lints or other basic sanity checks. Raw pointer casts and `union`s do not magically avoid the above rules.\n\n## [Working With Uninitialized Memory](#working-with-uninitialized-memory)\n\nAll runtime-allocated memory in a Rust program begins its life as _uninitialized_. In this state the value of the memory is an indeterminate pile of bits that may or may not even reflect a valid state for the type that is supposed to inhabit that location of memory. Attempting to interpret this memory as a value of _any_ type will cause Undefined Behavior. Do Not Do This.\n\nRust provides mechanisms to work with uninitialized memory in checked (safe) and unchecked (unsafe) ways.\n\n## [Checked Uninitialized Memory](#checked-uninitialized-memory)\n\nLike C, all stack variables in Rust are uninitialized until a value is explicitly assigned to them. Unlike C, Rust statically prevents you from ever reading them until you do:\n\n```rust\nfn main() {\n    let x: i32;\n    println!(\"{}\", x);\n}\n```\n\n```text\n  |\n3 |     println!(\"{}\", x);\n  |                    ^ use of possibly uninitialized `x`\n\n```\n\nThis is based off of a basic branch analysis: every branch must assign a value to `x` before it is first used. For short, we also say that \"`x` is init\" or \"`x` is uninit\".\n\nInterestingly, Rust doesn't require the variable to be mutable to perform a delayed initialization if every branch assigns exactly once. However the analysis does not take advantage of constant analysis or anything like that. So this compiles:\n\n```rust\nfn main() {\n    let x: i32;\n\n    if true {\n        x = 1;\n    } else {\n        x = 2;\n    }\n\n    println!(\"{}\", x);\n}\n```\n\nbut this doesn't:\n\n```rust\nfn main() {\n    let x: i32;\n    if true {\n        x = 1;\n    }\n    println!(\"{}\", x);\n}\n```\n\n```text\n  |\n6 |     println!(\"{}\", x);\n  |                    ^ use of possibly uninitialized `x`\n\n```\n\nwhile this does:\n\n```rust\nfn main() {\n    let x: i32;\n    if true {\n        x = 1;\n        println!(\"{}\", x);\n    }\n    // Don't care that there are branches where it's not initialized\n    // since we don't use the value in those branches\n}\n```\n\nOf course, while the analysis doesn't consider actual values, it does have a relatively sophisticated understanding of dependencies and control flow. For instance, this works:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x: i32;\n\nloop {\n    // Rust doesn't understand that this branch will be taken unconditionally,\n    // because it relies on actual values.\n    if true {\n        // But it does understand that it will only be taken once because\n        // we unconditionally break out of it. Therefore `x` doesn't\n        // need to be marked as mutable.\n        x = 0;\n        break;\n    }\n}\n// It also knows that it's impossible to get here without reaching the break.\n// And therefore that `x` must be initialized here!\nprintln!(\"{}\", x);\n}\n```\n\nIf a value is moved out of a variable, that variable becomes logically uninitialized if the type of the value isn't Copy. That is:\n\n```rust\nfn main() {\n    let x = 0;\n    let y = Box::new(0);\n    let z1 = x; // x is still valid because i32 is Copy\n    let z2 = y; // y is now logically uninitialized because Box isn't Copy\n}\n```\n\nHowever reassigning `y` in this example _would_ require `y` to be marked as mutable, as a Safe Rust program could observe that the value of `y` changed:\n\n```rust\nfn main() {\n    let mut y = Box::new(0);\n    let z = y; // y is now logically uninitialized because Box isn't Copy\n    y = Box::new(1); // reinitialize y\n}\n```\n\nOtherwise it's like `y` is a brand new variable.\n\n## [Drop Flags](#drop-flags)\n\nThe examples in the previous section introduce an interesting problem for Rust. We have seen that it's possible to conditionally initialize, deinitialize, and reinitialize locations of memory totally safely. For Copy types, this isn't particularly notable since they're just a random pile of bits. However types with destructors are a different story: Rust needs to know whether to call a destructor whenever a variable is assigned to, or a variable goes out of scope. How can it do this with conditional initialization?\n\nNote that this is not a problem that all assignments need worry about. In particular, assigning through a dereference unconditionally drops, and assigning in a `let` unconditionally doesn't drop:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut x = Box::new(0); // let makes a fresh variable, so never need to drop\nlet y = &mut x;\n*y = Box::new(1); // Deref assumes the referent is initialized, so always drops\n}\n```\n\nThis is only a problem when overwriting a previously initialized variable or one of its subfields.\n\nIt turns out that Rust actually tracks whether a type should be dropped or not _at runtime_. As a variable becomes initialized and uninitialized, a _drop flag_ for that variable is toggled. When a variable might need to be dropped, this flag is evaluated to determine if it should be dropped.\n\nOf course, it is often the case that a value's initialization state can be statically known at every point in the program. If this is the case, then the compiler can theoretically generate more efficient code! For instance, straight- line code has such _static drop semantics_:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut x = Box::new(0); // x was uninit; just overwrite.\nlet mut y = x;           // y was uninit; just overwrite and make x uninit.\nx = Box::new(0);         // x was uninit; just overwrite.\ny = x;                   // y was init; Drop y, overwrite it, and make x uninit!\n                         // y goes out of scope; y was init; Drop y!\n                         // x goes out of scope; x was uninit; do nothing.\n}\n```\n\nSimilarly, branched code where all branches have the same behavior with respect to initialization has static drop semantics:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet condition = true;\nlet mut x = Box::new(0);    // x was uninit; just overwrite.\nif condition {\n    drop(x)                 // x gets moved out; make x uninit.\n} else {\n    println!(\"{}\", x);\n    drop(x)                 // x gets moved out; make x uninit.\n}\nx = Box::new(0);            // x was uninit; just overwrite.\n                            // x goes out of scope; x was init; Drop x!\n}\n```\n\nHowever code like this _requires_ runtime information to correctly Drop:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet condition = true;\nlet x;\nif condition {\n    x = Box::new(0);        // x was uninit; just overwrite.\n    println!(\"{}\", x);\n}\n                            // x goes out of scope; x might be uninit;\n                            // check the flag!\n}\n```\n\nOf course, in this case it's trivial to retrieve static drop semantics:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet condition = true;\nif condition {\n    let x = Box::new(0);\n    println!(\"{}\", x);\n}\n}\n```\n\nThe drop flags are tracked on the stack. In old Rust versions, drop flags were stashed in a hidden field of types that implement `Drop`.\n\n## [Unchecked Uninitialized Memory](#unchecked-uninitialized-memory)\n\nOne interesting exception to this rule is working with arrays. Safe Rust doesn't permit you to partially initialize an array. When you initialize an array, you can either set every value to the same thing with `let x = [val; N]`, or you can specify each member individually with `let x = [val1, val2, val3]`. Unfortunately this is pretty rigid, especially if you need to initialize your array in a more incremental or dynamic way.\n\nUnsafe Rust gives us a powerful tool to handle this problem: [`MaybeUninit`](../core/mem/union.MaybeUninit.html). This type can be used to handle memory that has not been fully initialized yet.\n\nWith `MaybeUninit`, we can initialize an array element by element as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::mem::{self, MaybeUninit};\n\n// Size of the array is hard-coded but easy to change (meaning, changing just\n// the constant is sufficient). This means we can't use [a, b, c] syntax to\n// initialize the array, though, as we would have to keep that in sync\n// with `SIZE`!\nconst SIZE: usize = 10;\n\nlet x = {\n    // Create an uninitialized array of `MaybeUninit`. The `assume_init` is\n    // safe because the type we are claiming to have initialized here is a\n    // bunch of `MaybeUninit`s, which do not require initialization.\n    let mut x: [MaybeUninit<Box<u32>>; SIZE] = unsafe {\n        MaybeUninit::uninit().assume_init()\n    };\n\n    // Dropping a `MaybeUninit` does nothing. Thus using raw pointer\n    // assignment instead of `ptr::write` does not cause the old\n    // uninitialized value to be dropped.\n    // Exception safety is not a concern because Box can't panic\n    for i in 0..SIZE {\n        x[i] = MaybeUninit::new(Box::new(i as u32));\n    }\n\n    // Everything is initialized. Transmute the array to the\n    // initialized type.\n    unsafe { mem::transmute::<_, [Box<u32>; SIZE]>(x) }\n};\n\ndbg!(x);\n}\n```\n\nThis code proceeds in three steps:\n\n1.  Create an array of `MaybeUninit<T>`. With current stable Rust, we have to use unsafe code for this: we take some uninitialized piece of memory (`MaybeUninit::uninit()`) and claim we have fully initialized it ([`assume_init()`](about:blank/core/mem/union.MaybeUninit.html#method.assume_init)). This seems ridiculous, because we didn't! The reason this is correct is that the array consists itself entirely of `MaybeUninit`, which do not actually require initialization. For most other types, doing `MaybeUninit::uninit().assume_init()` produces an invalid instance of said type, so you got yourself some Undefined Behavior.\n    \n2.  Initialize the array. The subtle aspect of this is that usually, when we use `=` to assign to a value that the Rust type checker considers to already be initialized (like `x[i]`), the old value stored on the left-hand side gets dropped. This would be a disaster. However, in this case, the type of the left-hand side is `MaybeUninit<Box<u32>>`, and dropping that does not do anything! See below for some more discussion of this `drop` issue.\n    \n3.  Finally, we have to change the type of our array to remove the `MaybeUninit`. With current stable Rust, this requires a `transmute`. This transmute is legal because in memory, `MaybeUninit<T>` looks the same as `T`.\n    \n    However, note that in general, `Container<MaybeUninit<T>>>` does _not_ look the same as `Container<T>`! Imagine if `Container` was `Option`, and `T` was `bool`, then `Option<bool>` exploits that `bool` only has two valid values, but `Option<MaybeUninit<bool>>` cannot do that because the `bool` does not have to be initialized.\n    \n    So, it depends on `Container` whether transmuting away the `MaybeUninit` is allowed. For arrays, it is (and eventually the standard library will acknowledge that by providing appropriate methods).\n    \n\nIt's worth spending a bit more time on the loop in the middle, and in particular the assignment operator and its interaction with `drop`. If we wrote something like:\n\n```rust\n*x[i].as_mut_ptr() = Box::new(i as u32); // WRONG!\n```\n\nwe would actually overwrite a `Box<u32>`, leading to `drop` of uninitialized data, which would cause much sadness and pain.\n\nThe correct alternative, if for some reason we cannot use `MaybeUninit::new`, is to use the [`ptr`](../core/ptr/index.html) module. In particular, it provides three functions that allow us to assign bytes to a location in memory without dropping the old value: [`write`](../core/ptr/fn.write.html), [`copy`](../std/ptr/fn.copy.html), and [`copy_nonoverlapping`](../std/ptr/fn.copy_nonoverlapping.html).\n\n-   `ptr::write(ptr, val)` takes a `val` and moves it into the address pointed to by `ptr`.\n-   `ptr::copy(src, dest, count)` copies the bits that `count` T items would occupy from src to dest. (this is equivalent to C's memmove -- note that the argument order is reversed!)\n-   `ptr::copy_nonoverlapping(src, dest, count)` does what `copy` does, but a little faster on the assumption that the two ranges of memory don't overlap. (this is equivalent to C's memcpy -- note that the argument order is reversed!)\n\nIt should go without saying that these functions, if misused, will cause serious havoc or just straight up Undefined Behavior. The only requirement of these functions _themselves_ is that the locations you want to read and write are allocated and properly aligned. However, the ways writing arbitrary bits to arbitrary locations of memory can break things are basically uncountable!\n\nIt's worth noting that you don't need to worry about `ptr::write`\\-style shenanigans with types which don't implement `Drop` or contain `Drop` types, because Rust knows not to try to drop them. This is what we relied on in the above example.\n\nHowever when working with uninitialized memory you need to be ever-vigilant for Rust trying to drop values you make like this before they're fully initialized. Every control path through that variable's scope must initialize the value before it ends, if it has a destructor. _[This includes code panicking](unwinding.html)_. `MaybeUninit` helps a bit here, because it does not implicitly drop its content - but all this really means in case of a panic is that instead of a double-free of the not yet initialized parts, you end up with a memory leak of the already initialized parts.\n\nNote that, to use the `ptr` methods, you need to first obtain a _raw pointer_ to the data you want to initialize. It is illegal to construct a _reference_ to uninitialized data, which implies that you have to be careful when obtaining said raw pointer:\n\n-   For an array of `T`, you can use `base_ptr.add(idx)` where `base_ptr: *mut T` to compute the address of array index `idx`. This relies on how arrays are laid out in memory.\n-   For a struct, however, in general we do not know how it is laid out, and we also cannot use `&mut base_ptr.field` as that would be creating a reference. So, you must carefully use the [`addr_of_mut`](../core/ptr/macro.addr_of_mut.html) macro. This creates a raw pointer to the field without creating an intermediate reference:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::{ptr, mem::MaybeUninit};\n\nstruct Demo {\n    field: bool,\n}\n\nlet mut uninit = MaybeUninit::<Demo>::uninit();\n// `&uninit.as_mut().field` would create a reference to an uninitialized `bool`,\n// and thus be Undefined Behavior!\nlet f1_ptr = unsafe { ptr::addr_of_mut!((*uninit.as_mut_ptr()).field) };\nunsafe { f1_ptr.write(true); }\n\nlet init = unsafe { uninit.assume_init() };\n}\n```\n\nOne last remark: when reading old Rust code, you might stumble upon the deprecated `mem::uninitialized` function. That function used to be the only way to deal with uninitialized memory on the stack, but it turned out to be impossible to properly integrate with the rest of the language. Always use `MaybeUninit` instead in new code, and port old code over when you get the opportunity.\n\nAnd that's about it for working with uninitialized memory! Basically nothing anywhere expects to be handed uninitialized memory, so if you're going to pass it around at all, be sure to be _really_ careful.\n\n## [The Perils Of Ownership Based Resource Management (OBRM)](#the-perils-of-ownership-based-resource-management-obrm)\n\nOBRM (AKA RAII: Resource Acquisition Is Initialization) is something you'll interact with a lot in Rust. Especially if you use the standard library.\n\nRoughly speaking the pattern is as follows: to acquire a resource, you create an object that manages it. To release the resource, you simply destroy the object, and it cleans up the resource for you. The most common \"resource\" this pattern manages is simply _memory_. `Box`, `Rc`, and basically everything in `std::collections` is a convenience to enable correctly managing memory. This is particularly important in Rust because we have no pervasive GC to rely on for memory management. Which is the point, really: Rust is about control. However we are not limited to just memory. Pretty much every other system resource like a thread, file, or socket is exposed through this kind of API.\n\n## [Constructors](#constructors)\n\nThere is exactly one way to create an instance of a user-defined type: name it, and initialize all its fields at once:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo {\n    a: u8,\n    b: u32,\n    c: bool,\n}\n\nenum Bar {\n    X(u32),\n    Y(bool),\n}\n\nstruct Unit;\n\nlet foo = Foo { a: 0, b: 1, c: false };\nlet bar = Bar::X(0);\nlet empty = Unit;\n}\n```\n\nThat's it. Every other way you make an instance of a type is just calling a totally vanilla function that does some stuff and eventually bottoms out to The One True Constructor.\n\nUnlike C++, Rust does not come with a slew of built-in kinds of constructor. There are no Copy, Default, Assignment, Move, or whatever constructors. The reasons for this are varied, but it largely boils down to Rust's philosophy of _being explicit_.\n\nMove constructors are meaningless in Rust because we don't enable types to \"care\" about their location in memory. Every type must be ready for it to be blindly memcopied to somewhere else in memory. This means pure on-the-stack-but- still-movable intrusive linked lists are simply not happening in Rust (safely).\n\nAssignment and copy constructors similarly don't exist because move semantics are the only semantics in Rust. At most `x = y` just moves the bits of y into the x variable. Rust does provide two facilities for providing C++'s copy- oriented semantics: `Copy` and `Clone`. Clone is our moral equivalent of a copy constructor, but it's never implicitly invoked. You have to explicitly call `clone` on an element you want to be cloned. Copy is a special case of Clone where the implementation is just \"copy the bits\". Copy types _are_ implicitly cloned whenever they're moved, but because of the definition of Copy this just means not treating the old copy as uninitialized -- a no-op.\n\nWhile Rust provides a `Default` trait for specifying the moral equivalent of a default constructor, it's incredibly rare for this trait to be used. This is because variables [aren't implicitly initialized](uninitialized.html). Default is basically only useful for generic programming. In concrete contexts, a type will provide a static `new` method for any kind of \"default\" constructor. This has no relation to `new` in other languages and has no special meaning. It's just a naming convention.\n\nTODO: talk about \"placement new\"?\n\n## [Destructors](#destructors)\n\nWhat the language _does_ provide is full-blown automatic destructors through the `Drop` trait, which provides the following method:\n\n```rust\nfn drop(&mut self);\n```\n\nThis method gives the type time to somehow finish what it was doing.\n\n**After `drop` is run, Rust will recursively try to drop all of the fields of `self`.**\n\nThis is a convenience feature so that you don't have to write \"destructor boilerplate\" to drop children. If a struct has no special logic for being dropped other than dropping its children, then it means `Drop` doesn't need to be implemented at all!\n\n**There is no stable way to prevent this behavior in Rust 1.0.**\n\nNote that taking `&mut self` means that even if you could suppress recursive Drop, Rust will prevent you from e.g. moving fields out of self. For most types, this is totally fine.\n\nFor instance, a custom implementation of `Box` might write `Drop` like this:\n\n```rust\n#![feature(ptr_internals, allocator_api)]\n\nuse std::alloc::{Allocator, Global, GlobalAlloc, Layout};\nuse std::mem;\nuse std::ptr::{drop_in_place, NonNull, Unique};\n\nstruct Box<T>{ ptr: Unique<T> }\n\nimpl<T> Drop for Box<T> {\n    fn drop(&mut self) {\n        unsafe {\n            drop_in_place(self.ptr.as_ptr());\n            let c: NonNull<T> = self.ptr.into();\n            Global.deallocate(c.cast(), Layout::new::<T>())\n        }\n    }\n}\nfn main() {}\n```\n\nand this works fine because when Rust goes to drop the `ptr` field it just sees a [Unique](phantom-data.html) that has no actual `Drop` implementation. Similarly nothing can use-after-free the `ptr` because when drop exits, it becomes inaccessible.\n\nHowever this wouldn't work:\n\n```rust\n#![feature(allocator_api, ptr_internals)]\n\nuse std::alloc::{Allocator, Global, GlobalAlloc, Layout};\nuse std::ptr::{drop_in_place, Unique, NonNull};\nuse std::mem;\n\nstruct Box<T>{ ptr: Unique<T> }\n\nimpl<T> Drop for Box<T> {\n    fn drop(&mut self) {\n        unsafe {\n            drop_in_place(self.ptr.as_ptr());\n            let c: NonNull<T> = self.ptr.into();\n            Global.deallocate(c.cast(), Layout::new::<T>());\n        }\n    }\n}\n\nstruct SuperBox<T> { my_box: Box<T> }\n\nimpl<T> Drop for SuperBox<T> {\n    fn drop(&mut self) {\n        unsafe {\n            // Hyper-optimized: deallocate the box's contents for it\n            // without `drop`ing the contents\n            let c: NonNull<T> = self.my_box.ptr.into();\n            Global.deallocate(c.cast::<u8>(), Layout::new::<T>());\n        }\n    }\n}\nfn main() {}\n```\n\nAfter we deallocate the `box`'s ptr in SuperBox's destructor, Rust will happily proceed to tell the box to Drop itself and everything will blow up with use-after-frees and double-frees.\n\nNote that the recursive drop behavior applies to all structs and enums regardless of whether they implement Drop. Therefore something like\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Boxy<T> {\n    data1: Box<T>,\n    data2: Box<T>,\n    info: u32,\n}\n}\n```\n\nwill have its data1 and data2's fields destructors whenever it \"would\" be dropped, even though it itself doesn't implement Drop. We say that such a type _needs Drop_, even though it is not itself Drop.\n\nSimilarly,\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Link {\n    Next(Box<Link>),\n    None,\n}\n}\n```\n\nwill have its inner Box field dropped if and only if an instance stores the Next variant.\n\nIn general this works really nicely because you don't need to worry about adding/removing drops when you refactor your data layout. Still there's certainly many valid use cases for needing to do trickier things with destructors.\n\nThe classic safe solution to overriding recursive drop and allowing moving out of Self during `drop` is to use an Option:\n\n```rust\n#![feature(allocator_api, ptr_internals)]\n\nuse std::alloc::{Allocator, GlobalAlloc, Global, Layout};\nuse std::ptr::{drop_in_place, Unique, NonNull};\nuse std::mem;\n\nstruct Box<T>{ ptr: Unique<T> }\n\nimpl<T> Drop for Box<T> {\n    fn drop(&mut self) {\n        unsafe {\n            drop_in_place(self.ptr.as_ptr());\n            let c: NonNull<T> = self.ptr.into();\n            Global.deallocate(c.cast(), Layout::new::<T>());\n        }\n    }\n}\n\nstruct SuperBox<T> { my_box: Option<Box<T>> }\n\nimpl<T> Drop for SuperBox<T> {\n    fn drop(&mut self) {\n        unsafe {\n            // Hyper-optimized: deallocate the box's contents for it\n            // without `drop`ing the contents. Need to set the `box`\n            // field as `None` to prevent Rust from trying to Drop it.\n            let my_box = self.my_box.take().unwrap();\n            let c: NonNull<T> = my_box.ptr.into();\n            Global.deallocate(c.cast(), Layout::new::<T>());\n            mem::forget(my_box);\n        }\n    }\n}\nfn main() {}\n```\n\nHowever this has fairly odd semantics: you're saying that a field that _should_ always be Some _may_ be None, just because that happens in the destructor. Of course this conversely makes a lot of sense: you can call arbitrary methods on self during the destructor, and this should prevent you from ever doing so after deinitializing the field. Not that it will prevent you from producing any other arbitrarily invalid state in there.\n\nOn balance this is an ok choice. Certainly what you should reach for by default. However, in the future we expect there to be a first-class way to announce that a field shouldn't be automatically dropped.\n\n## [Leaking](#leaking)\n\nOwnership-based resource management is intended to simplify composition. You acquire resources when you create the object, and you release the resources when it gets destroyed. Since destruction is handled for you, it means you can't forget to release the resources, and it happens as soon as possible! Surely this is perfect and all of our problems are solved.\n\nEverything is terrible and we have new and exotic problems to try to solve.\n\nMany people like to believe that Rust eliminates resource leaks. In practice, this is basically true. You would be surprised to see a Safe Rust program leak resources in an uncontrolled way.\n\nHowever from a theoretical perspective this is absolutely not the case, no matter how you look at it. In the strictest sense, \"leaking\" is so abstract as to be unpreventable. It's quite trivial to initialize a collection at the start of a program, fill it with tons of objects with destructors, and then enter an infinite event loop that never refers to it. The collection will sit around uselessly, holding on to its precious resources until the program terminates (at which point all those resources would have been reclaimed by the OS anyway).\n\nWe may consider a more restricted form of leak: failing to drop a value that is unreachable. Rust also doesn't prevent this. In fact Rust _has a function for doing this_: `mem::forget`. This function consumes the value it is passed _and then doesn't run its destructor_.\n\nIn the past `mem::forget` was marked as unsafe as a sort of lint against using it, since failing to call a destructor is generally not a well-behaved thing to do (though useful for some special unsafe code). However this was generally determined to be an untenable stance to take: there are many ways to fail to call a destructor in safe code. The most famous example is creating a cycle of reference-counted pointers using interior mutability.\n\nIt is reasonable for safe code to assume that destructor leaks do not happen, as any program that leaks destructors is probably wrong. However _unsafe_ code cannot rely on destructors to be run in order to be safe. For most types this doesn't matter: if you leak the destructor then the type is by definition inaccessible, so it doesn't matter, right? For instance, if you leak a `Box<u8>` then you waste some memory but that's hardly going to violate memory-safety.\n\nHowever where we must be careful with destructor leaks are _proxy_ types. These are types which manage access to a distinct object, but don't actually own it. Proxy objects are quite rare. Proxy objects you'll need to care about are even rarer. However we'll focus on three interesting examples in the standard library:\n\n-   `vec::Drain`\n-   `Rc`\n-   `thread::scoped::JoinGuard`\n\n## [Drain](#drain)\n\n`drain` is a collections API that moves data out of the container without consuming the container. This enables us to reuse the allocation of a `Vec` after claiming ownership over all of its contents. It produces an iterator (Drain) that returns the contents of the Vec by-value.\n\nNow, consider Drain in the middle of iteration: some values have been moved out, and others haven't. This means that part of the Vec is now full of logically uninitialized data! We could backshift all the elements in the Vec every time we remove a value, but this would have pretty catastrophic performance consequences.\n\nInstead, we would like Drain to fix the Vec's backing storage when it is dropped. It should run itself to completion, backshift any elements that weren't removed (drain supports subranges), and then fix Vec's `len`. It's even unwinding-safe! Easy!\n\nNow consider the following:\n\n```rust\nlet mut vec = vec![Box::new(0); 4];\n\n{\n    // start draining, vec can no longer be accessed\n    let mut drainer = vec.drain(..);\n\n    // pull out two elements and immediately drop them\n    drainer.next();\n    drainer.next();\n\n    // get rid of drainer, but don't call its destructor\n    mem::forget(drainer);\n}\n\n// Oops, vec[0] was dropped, we're reading a pointer into free'd memory!\nprintln!(\"{}\", vec[0]);\n```\n\nThis is pretty clearly Not Good. Unfortunately, we're kind of stuck between a rock and a hard place: maintaining consistent state at every step has an enormous cost (and would negate any benefits of the API). Failing to maintain consistent state gives us Undefined Behavior in safe code (making the API unsound).\n\nSo what can we do? Well, we can pick a trivially consistent state: set the Vec's len to be 0 when we start the iteration, and fix it up if necessary in the destructor. That way, if everything executes like normal we get the desired behavior with minimal overhead. But if someone has the _audacity_ to mem::forget us in the middle of the iteration, all that does is _leak even more_ (and possibly leave the Vec in an unexpected but otherwise consistent state). Since we've accepted that mem::forget is safe, this is definitely safe. We call leaks causing more leaks a _leak amplification_.\n\n## [Rc](#rc)\n\nRc is an interesting case because at first glance it doesn't appear to be a proxy value at all. After all, it manages the data it points to, and dropping all the Rcs for a value will drop that value. Leaking an Rc doesn't seem like it would be particularly dangerous. It will leave the refcount permanently incremented and prevent the data from being freed or dropped, but that seems just like Box, right?\n\nNope.\n\nLet's consider a simplified implementation of Rc:\n\n```rust\nstruct Rc<T> {\n    ptr: *mut RcBox<T>,\n}\n\nstruct RcBox<T> {\n    data: T,\n    ref_count: usize,\n}\n\nimpl<T> Rc<T> {\n    fn new(data: T) -> Self {\n        unsafe {\n            // Wouldn't it be nice if heap::allocate worked like this?\n            let ptr = heap::allocate::<RcBox<T>>();\n            ptr::write(ptr, RcBox {\n                data,\n                ref_count: 1,\n            });\n            Rc { ptr }\n        }\n    }\n\n    fn clone(&self) -> Self {\n        unsafe {\n            (*self.ptr).ref_count += 1;\n        }\n        Rc { ptr: self.ptr }\n    }\n}\n\nimpl<T> Drop for Rc<T> {\n    fn drop(&mut self) {\n        unsafe {\n            (*self.ptr).ref_count -= 1;\n            if (*self.ptr).ref_count == 0 {\n                // drop the data and then free it\n                ptr::read(self.ptr);\n                heap::deallocate(self.ptr);\n            }\n        }\n    }\n}\n```\n\nThis code contains an implicit and subtle assumption: `ref_count` can fit in a `usize`, because there can't be more than `usize::MAX` Rcs in memory. However this itself assumes that the `ref_count` accurately reflects the number of Rcs in memory, which we know is false with `mem::forget`. Using `mem::forget` we can overflow the `ref_count`, and then get it down to 0 with outstanding Rcs. Then we can happily use-after-free the inner data. Bad Bad Not Good.\n\nThis can be solved by just checking the `ref_count` and doing _something_. The standard library's stance is to just abort, because your program has become horribly degenerate. Also _oh my gosh_ it's such a ridiculous corner case.\n\n## [thread::scoped::JoinGuard](#threadscopedjoinguard)\n\n> Note: This API has already been removed from std, for more information you may refer [issue #24292](https://github.com/rust-lang/rust/issues/24292).\n> \n> This section remains here because we think this example is still important, regardless of whether it is part of std or not.\n\nThe thread::scoped API intended to allow threads to be spawned that reference data on their parent's stack without any synchronization over that data by ensuring the parent joins the thread before any of the shared data goes out of scope.\n\n```rust\npub fn scoped<'a, F>(f: F) -> JoinGuard<'a>\n    where F: FnOnce() + Send + 'a\n```\n\nHere `f` is some closure for the other thread to execute. Saying that `F: Send + 'a` is saying that it closes over data that lives for `'a`, and it either owns that data or the data was Sync (implying `&data` is Send).\n\nBecause JoinGuard has a lifetime, it keeps all the data it closes over borrowed in the parent thread. This means the JoinGuard can't outlive the data that the other thread is working on. When the JoinGuard _does_ get dropped it blocks the parent thread, ensuring the child terminates before any of the closed-over data goes out of scope in the parent.\n\nUsage looked like:\n\n```rust\nlet mut data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n{\n    let mut guards = vec![];\n    for x in &mut data {\n        // Move the mutable reference into the closure, and execute\n        // it on a different thread. The closure has a lifetime bound\n        // by the lifetime of the mutable reference `x` we store in it.\n        // The guard that is returned is in turn assigned the lifetime\n        // of the closure, so it also mutably borrows `data` as `x` did.\n        // This means we cannot access `data` until the guard goes away.\n        let guard = thread::scoped(move || {\n            *x *= 2;\n        });\n        // store the thread's guard for later\n        guards.push(guard);\n    }\n    // All guards are dropped here, forcing the threads to join\n    // (this thread blocks here until the others terminate).\n    // Once the threads join, the borrow expires and the data becomes\n    // accessible again in this thread.\n}\n// data is definitely mutated here.\n```\n\nIn principle, this totally works! Rust's ownership system perfectly ensures it! ...except it relies on a destructor being called to be safe.\n\n```rust\nlet mut data = Box::new(0);\n{\n    let guard = thread::scoped(|| {\n        // This is at best a data race. At worst, it's also a use-after-free.\n        *data += 1;\n    });\n    // Because the guard is forgotten, expiring the loan without blocking this\n    // thread.\n    mem::forget(guard);\n}\n// So the Box is dropped here while the scoped thread may or may not be trying\n// to access it.\n```\n\nDang. Here the destructor running was pretty fundamental to the API, and it had to be scrapped in favor of a completely different design.\n\n## [Unwinding](#unwinding)\n\nRust has a _tiered_ error-handling scheme:\n\n-   If something might reasonably be absent, Option is used.\n-   If something goes wrong and can reasonably be handled, Result is used.\n-   If something goes wrong and cannot reasonably be handled, the thread panics.\n-   If something catastrophic happens, the program aborts.\n\nOption and Result are overwhelmingly preferred in most situations, especially since they can be promoted into a panic or abort at the API user's discretion. Panics cause the thread to halt normal execution and unwind its stack, calling destructors as if every function instantly returned.\n\nAs of 1.0, Rust is of two minds when it comes to panics. In the long-long-ago, Rust was much more like Erlang. Like Erlang, Rust had lightweight tasks, and tasks were intended to kill themselves with a panic when they reached an untenable state. Unlike an exception in Java or C++, a panic could not be caught at any time. Panics could only be caught by the owner of the task, at which point they had to be handled or _that_ task would itself panic.\n\nUnwinding was important to this story because if a task's destructors weren't called, it would cause memory and other system resources to leak. Since tasks were expected to die during normal execution, this would make Rust very poor for long-running systems!\n\nAs the Rust we know today came to be, this style of programming grew out of fashion in the push for less-and-less abstraction. Light-weight tasks were killed in the name of heavy-weight OS threads. Still, on stable Rust as of 1.0 panics can only be caught by the parent thread. This means catching a panic requires spinning up an entire OS thread! This unfortunately stands in conflict to Rust's philosophy of zero-cost abstractions.\n\nThere is an API called [`catch_unwind`](https://doc.rust-lang.org/std/panic/fn.catch_unwind.html) that enables catching a panic without spawning a thread. Still, we would encourage you to only do this sparingly. In particular, Rust's current unwinding implementation is heavily optimized for the \"doesn't unwind\" case. If a program doesn't unwind, there should be no runtime cost for the program being _ready_ to unwind. As a consequence, actually unwinding will be more expensive than in e.g. Java. Don't build your programs to unwind under normal circumstances. Ideally, you should only panic for programming errors or _extreme_ problems.\n\nRust's unwinding strategy is not specified to be fundamentally compatible with any other language's unwinding. As such, unwinding into Rust from another language, or unwinding into another language from Rust is Undefined Behavior. You must _absolutely_ catch any panics at the FFI boundary! What you do at that point is up to you, but _something_ must be done. If you fail to do this, at best, your application will crash and burn. At worst, your application _won't_ crash and burn, and will proceed with completely clobbered state.\n\n## [Exception Safety](#exception-safety)\n\nAlthough programs should use unwinding sparingly, there's a lot of code that _can_ panic. If you unwrap a None, index out of bounds, or divide by 0, your program will panic. On debug builds, every arithmetic operation can panic if it overflows. Unless you are very careful and tightly control what code runs, pretty much everything can unwind, and you need to be ready for it.\n\nBeing ready for unwinding is often referred to as _exception safety_ in the broader programming world. In Rust, there are two levels of exception safety that one may concern themselves with:\n\n-   In unsafe code, we _must_ be exception safe to the point of not violating memory safety. We'll call this _minimal_ exception safety.\n    \n-   In safe code, it is _good_ to be exception safe to the point of your program doing the right thing. We'll call this _maximal_ exception safety.\n    \n\nAs is the case in many places in Rust, Unsafe code must be ready to deal with bad Safe code when it comes to unwinding. Code that transiently creates unsound states must be careful that a panic does not cause that state to be used. Generally this means ensuring that only non-panicking code is run while these states exist, or making a guard that cleans up the state in the case of a panic. This does not necessarily mean that the state a panic witnesses is a fully coherent state. We need only guarantee that it's a _safe_ state.\n\nMost Unsafe code is leaf-like, and therefore fairly easy to make exception-safe. It controls all the code that runs, and most of that code can't panic. However it is not uncommon for Unsafe code to work with arrays of temporarily uninitialized data while repeatedly invoking caller-provided code. Such code needs to be careful and consider exception safety.\n\n## [Vec::push\\_all](#vecpush_all)\n\n`Vec::push_all` is a temporary hack to get extending a Vec by a slice reliably efficient without specialization. Here's a simple implementation:\n\n```rust\nimpl<T: Clone> Vec<T> {\n    fn push_all(&mut self, to_push: &[T]) {\n        self.reserve(to_push.len());\n        unsafe {\n            // can't overflow because we just reserved this\n            self.set_len(self.len() + to_push.len());\n\n            for (i, x) in to_push.iter().enumerate() {\n                self.ptr().add(i).write(x.clone());\n            }\n        }\n    }\n}\n```\n\nWe bypass `push` in order to avoid redundant capacity and `len` checks on the Vec that we definitely know has capacity. The logic is totally correct, except there's a subtle problem with our code: it's not exception-safe! `set_len`, `add`, and `write` are all fine; `clone` is the panic bomb we over-looked.\n\nClone is completely out of our control, and is totally free to panic. If it does, our function will exit early with the length of the Vec set too large. If the Vec is looked at or dropped, uninitialized memory will be read!\n\nThe fix in this case is fairly simple. If we want to guarantee that the values we _did_ clone are dropped, we can set the `len` every loop iteration. If we just want to guarantee that uninitialized memory can't be observed, we can set the `len` after the loop.\n\n## [BinaryHeap::sift\\_up](#binaryheapsift_up)\n\nBubbling an element up a heap is a bit more complicated than extending a Vec. The pseudocode is as follows:\n\n```text\nbubble_up(heap, index):\n    while index != 0 && heap[index] < heap[parent(index)]:\n        heap.swap(index, parent(index))\n        index = parent(index)\n\n```\n\nA literal transcription of this code to Rust is totally fine, but has an annoying performance characteristic: the `self` element is swapped over and over again uselessly. We would rather have the following:\n\n```text\nbubble_up(heap, index):\n    let elem = heap[index]\n    while index != 0 && elem < heap[parent(index)]:\n        heap[index] = heap[parent(index)]\n        index = parent(index)\n    heap[index] = elem\n\n```\n\nThis code ensures that each element is copied as little as possible (it is in fact necessary that elem be copied twice in general). However it now exposes some exception safety trouble! At all times, there exists two copies of one value. If we panic in this function something will be double-dropped. Unfortunately, we also don't have full control of the code: that comparison is user-defined!\n\nUnlike Vec, the fix isn't as easy here. One option is to break the user-defined code and the unsafe code into two separate phases:\n\n```text\nbubble_up(heap, index):\n    let end_index = index;\n    while end_index != 0 && heap[end_index] < heap[parent(end_index)]:\n        end_index = parent(end_index)\n\n    let elem = heap[index]\n    while index != end_index:\n        heap[index] = heap[parent(index)]\n        index = parent(index)\n    heap[index] = elem\n\n```\n\nIf the user-defined code blows up, that's no problem anymore, because we haven't actually touched the state of the heap yet. Once we do start messing with the heap, we're working with only data and functions that we trust, so there's no concern of panics.\n\nPerhaps you're not happy with this design. Surely it's cheating! And we have to do the complex heap traversal _twice_! Alright, let's bite the bullet. Let's intermix untrusted and unsafe code _for reals_.\n\nIf Rust had `try` and `finally` like in Java, we could do the following:\n\n```text\nbubble_up(heap, index):\n    let elem = heap[index]\n    try:\n        while index != 0 && elem < heap[parent(index)]:\n            heap[index] = heap[parent(index)]\n            index = parent(index)\n    finally:\n        heap[index] = elem\n\n```\n\nThe basic idea is simple: if the comparison panics, we just toss the loose element in the logically uninitialized index and bail out. Anyone who observes the heap will see a potentially _inconsistent_ heap, but at least it won't cause any double-drops! If the algorithm terminates normally, then this operation happens to coincide precisely with how we finish up regardless.\n\nSadly, Rust has no such construct, so we're going to need to roll our own! The way to do this is to store the algorithm's state in a separate struct with a destructor for the \"finally\" logic. Whether we panic or not, that destructor will run and clean up after us.\n\n```rust\nstruct Hole<'a, T: 'a> {\n    data: &'a mut [T],\n    /// `elt` is always `Some` from new until drop.\n    elt: Option<T>,\n    pos: usize,\n}\n\nimpl<'a, T> Hole<'a, T> {\n    fn new(data: &'a mut [T], pos: usize) -> Self {\n        unsafe {\n            let elt = ptr::read(&data[pos]);\n            Hole {\n                data,\n                elt: Some(elt),\n                pos,\n            }\n        }\n    }\n\n    fn pos(&self) -> usize { self.pos }\n\n    fn removed(&self) -> &T { self.elt.as_ref().unwrap() }\n\n    fn get(&self, index: usize) -> &T { &self.data[index] }\n\n    unsafe fn move_to(&mut self, index: usize) {\n        let index_ptr: *const _ = &self.data[index];\n        let hole_ptr = &mut self.data[self.pos];\n        ptr::copy_nonoverlapping(index_ptr, hole_ptr, 1);\n        self.pos = index;\n    }\n}\n\nimpl<'a, T> Drop for Hole<'a, T> {\n    fn drop(&mut self) {\n        // fill the hole again\n        unsafe {\n            let pos = self.pos;\n            ptr::write(&mut self.data[pos], self.elt.take().unwrap());\n        }\n    }\n}\n\nimpl<T: Ord> BinaryHeap<T> {\n    fn sift_up(&mut self, pos: usize) {\n        unsafe {\n            // Take out the value at `pos` and create a hole.\n            let mut hole = Hole::new(&mut self.data, pos);\n\n            while hole.pos() != 0 {\n                let parent = parent(hole.pos());\n                if hole.removed() <= hole.get(parent) { break }\n                hole.move_to(parent);\n            }\n            // Hole will be unconditionally filled here; panic or not!\n        }\n    }\n}\n```\n\n## [Poisoning](#poisoning)\n\nAlthough all unsafe code _must_ ensure it has minimal exception safety, not all types ensure _maximal_ exception safety. Even if the type does, your code may ascribe additional meaning to it. For instance, an integer is certainly exception-safe, but has no semantics on its own. It's possible that code that panics could fail to correctly update the integer, producing an inconsistent program state.\n\nThis is _usually_ fine, because anything that witnesses an exception is about to get destroyed. For instance, if you send a Vec to another thread and that thread panics, it doesn't matter if the Vec is in a weird state. It will be dropped and go away forever. However some types are especially good at smuggling values across the panic boundary.\n\nThese types may choose to explicitly _poison_ themselves if they witness a panic. Poisoning doesn't entail anything in particular. Generally it just means preventing normal usage from proceeding. The most notable example of this is the standard library's Mutex type. A Mutex will poison itself if one of its MutexGuards (the thing it returns when a lock is obtained) is dropped during a panic. Any future attempts to lock the Mutex will return an `Err` or panic.\n\nMutex poisons not for true safety in the sense that Rust normally cares about. It poisons as a safety-guard against blindly using the data that comes out of a Mutex that has witnessed a panic while locked. The data in such a Mutex was likely in the middle of being modified, and as such may be in an inconsistent or incomplete state. It is important to note that one cannot violate memory safety with such a type if it is correctly written. After all, it must be minimally exception-safe!\n\nHowever if the Mutex contained, say, a BinaryHeap that does not actually have the heap property, it's unlikely that any code that uses it will do what the author intended. As such, the program should not proceed normally. Still, if you're double-plus-sure that you can do _something_ with the value, the Mutex exposes a method to get the lock anyway. It _is_ safe, after all. Just maybe nonsense.\n\n## [Concurrency and Parallelism](#concurrency-and-parallelism)\n\nRust as a language doesn't _really_ have an opinion on how to do concurrency or parallelism. The standard library exposes OS threads and blocking sys-calls because everyone has those, and they're uniform enough that you can provide an abstraction over them in a relatively uncontroversial way. Message passing, green threads, and async APIs are all diverse enough that any abstraction over them tends to involve trade-offs that we weren't willing to commit to for 1.0.\n\nHowever the way Rust models concurrency makes it relatively easy to design your own concurrency paradigm as a library and have everyone else's code Just Work with yours. Just require the right lifetimes and Send and Sync where appropriate and you're off to the races. Or rather, off to the... not... having... races.\n\n## [Data Races and Race Conditions](#data-races-and-race-conditions)\n\nSafe Rust guarantees an absence of data races, which are defined as:\n\n-   two or more threads concurrently accessing a location of memory\n-   one or more of them is a write\n-   one or more of them is unsynchronized\n\nA data race has Undefined Behavior, and is therefore impossible to perform in Safe Rust. Data races are _mostly_ prevented through Rust's ownership system: it's impossible to alias a mutable reference, so it's impossible to perform a data race. Interior mutability makes this more complicated, which is largely why we have the Send and Sync traits (see the next section for more on this).\n\n**However Rust does not prevent general race conditions.**\n\nThis is mathematically impossible in situations where you do not control the scheduler, which is true for the normal OS environment. If you do control preemption, it _can be_ possible to prevent general races - this technique is used by frameworks such as [RTIC](https://github.com/rtic-rs/rtic). However, actually having control over scheduling is a very uncommon case.\n\nFor this reason, it is considered \"safe\" for Rust to get deadlocked or do something nonsensical with incorrect synchronization: this is known as a general race condition or resource race. Obviously such a program isn't very good, but Rust of course cannot prevent all logic errors.\n\nIn any case, a race condition cannot violate memory safety in a Rust program on its own. Only in conjunction with some other unsafe code can a race condition actually violate memory safety. For instance, a correct program looks like this:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::thread;\nuse std::sync::atomic::{AtomicUsize, Ordering};\nuse std::sync::Arc;\n\nlet data = vec![1, 2, 3, 4];\n// Arc so that the memory the AtomicUsize is stored in still exists for\n// the other thread to increment, even if we completely finish executing\n// before it. Rust won't compile the program without it, because of the\n// lifetime requirements of thread::spawn!\nlet idx = Arc::new(AtomicUsize::new(0));\nlet other_idx = idx.clone();\n\n// `move` captures other_idx by-value, moving it into this thread\nthread::spawn(move || {\n    // It's ok to mutate idx because this value\n    // is an atomic, so it can't cause a Data Race.\n    other_idx.fetch_add(10, Ordering::SeqCst);\n});\n\n// Index with the value loaded from the atomic. This is safe because we\n// read the atomic memory only once, and then pass a copy of that value\n// to the Vec's indexing implementation. This indexing will be correctly\n// bounds checked, and there's no chance of the value getting changed\n// in the middle. However our program may panic if the thread we spawned\n// managed to increment before this ran. A race condition because correct\n// program execution (panicking is rarely correct) depends on order of\n// thread execution.\nprintln!(\"{}\", data[idx.load(Ordering::SeqCst)]);\n}\n```\n\nWe can cause a data race if we instead do the bound check in advance, and then unsafely access the data with an unchecked value:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::thread;\nuse std::sync::atomic::{AtomicUsize, Ordering};\nuse std::sync::Arc;\n\nlet data = vec![1, 2, 3, 4];\n\nlet idx = Arc::new(AtomicUsize::new(0));\nlet other_idx = idx.clone();\n\n// `move` captures other_idx by-value, moving it into this thread\nthread::spawn(move || {\n    // It's ok to mutate idx because this value\n    // is an atomic, so it can't cause a Data Race.\n    other_idx.fetch_add(10, Ordering::SeqCst);\n});\n\nif idx.load(Ordering::SeqCst) < data.len() {\n    unsafe {\n        // Incorrectly loading the idx after we did the bounds check.\n        // It could have changed. This is a race condition, *and dangerous*\n        // because we decided to do `get_unchecked`, which is `unsafe`.\n        println!(\"{}\", data.get_unchecked(idx.load(Ordering::SeqCst)));\n    }\n}\n}\n```\n\n## [Send and Sync](#send-and-sync)\n\nNot everything obeys inherited mutability, though. Some types allow you to have multiple aliases of a location in memory while mutating it. Unless these types use synchronization to manage this access, they are absolutely not thread-safe. Rust captures this through the `Send` and `Sync` traits.\n\n-   A type is Send if it is safe to send it to another thread.\n-   A type is Sync if it is safe to share between threads (T is Sync if and only if `&T` is Send).\n\nSend and Sync are fundamental to Rust's concurrency story. As such, a substantial amount of special tooling exists to make them work right. First and foremost, they're [unsafe traits](safe-unsafe-meaning.html). This means that they are unsafe to implement, and other unsafe code can assume that they are correctly implemented. Since they're _marker traits_ (they have no associated items like methods), correctly implemented simply means that they have the intrinsic properties an implementor should have. Incorrectly implementing Send or Sync can cause Undefined Behavior.\n\nSend and Sync are also automatically derived traits. This means that, unlike every other trait, if a type is composed entirely of Send or Sync types, then it is Send or Sync. Almost all primitives are Send and Sync, and as a consequence pretty much all types you'll ever interact with are Send and Sync.\n\nMajor exceptions include:\n\n-   raw pointers are neither Send nor Sync (because they have no safety guards).\n-   `UnsafeCell` isn't Sync (and therefore `Cell` and `RefCell` aren't).\n-   `Rc` isn't Send or Sync (because the refcount is shared and unsynchronized).\n\n`Rc` and `UnsafeCell` are very fundamentally not thread-safe: they enable unsynchronized shared mutable state. However raw pointers are, strictly speaking, marked as thread-unsafe as more of a _lint_. Doing anything useful with a raw pointer requires dereferencing it, which is already unsafe. In that sense, one could argue that it would be \"fine\" for them to be marked as thread safe.\n\nHowever it's important that they aren't thread-safe to prevent types that contain them from being automatically marked as thread-safe. These types have non-trivial untracked ownership, and it's unlikely that their author was necessarily thinking hard about thread safety. In the case of `Rc`, we have a nice example of a type that contains a `*mut` that is definitely not thread-safe.\n\nTypes that aren't automatically derived can simply implement them if desired:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct MyBox(*mut u8);\n\nunsafe impl Send for MyBox {}\nunsafe impl Sync for MyBox {}\n}\n```\n\nIn the _incredibly rare_ case that a type is inappropriately automatically derived to be Send or Sync, then one can also unimplement Send and Sync:\n\n```rust\n#![allow(unused)]\n#![feature(negative_impls)]\n\nfn main() {\n// I have some magic semantics for some synchronization primitive!\nstruct SpecialThreadToken(u8);\n\nimpl !Send for SpecialThreadToken {}\nimpl !Sync for SpecialThreadToken {}\n}\n```\n\nNote that _in and of itself_ it is impossible to incorrectly derive Send and Sync. Only types that are ascribed special meaning by other unsafe code can possibly cause trouble by being incorrectly Send or Sync.\n\nMost uses of raw pointers should be encapsulated behind a sufficient abstraction that Send and Sync can be derived. For instance all of Rust's standard collections are Send and Sync (when they contain Send and Sync types) in spite of their pervasive use of raw pointers to manage allocations and complex ownership. Similarly, most iterators into these collections are Send and Sync because they largely behave like an `&` or `&mut` into the collection.\n\n## [Example](#example)\n\n[`Box`](https://doc.rust-lang.org/std/boxed/struct.Box.html) is implemented as its own special intrinsic type by the compiler for [various reasons](https://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/), but we can implement something with similar-ish behavior ourselves to see an example of when it is sound to implement Send and Sync. Let's call it a `Carton`.\n\nWe start by writing code to take a value allocated on the stack and transfer it to the heap.\n\n```rust\n#![allow(unused)]\nfn main() {\npub mod libc {\n   pub use ::std::os::raw::{c_int, c_void};\n   #[allow(non_camel_case_types)]\n   pub type size_t = usize;\n   extern \"C\" { pub fn posix_memalign(memptr: *mut *mut c_void, align: size_t, size: size_t) -> c_int; }\n}\nuse std::{\n    mem::{align_of, size_of},\n    ptr,\n    cmp::max,\n};\n\nstruct Carton<T>(ptr::NonNull<T>);\n\nimpl<T> Carton<T> {\n    pub fn new(value: T) -> Self {\n        // Allocate enough memory on the heap to store one T.\n        assert_ne!(size_of::<T>(), 0, \"Zero-sized types are out of the scope of this example\");\n        let mut memptr: *mut T = ptr::null_mut();\n        unsafe {\n            let ret = libc::posix_memalign(\n                (&mut memptr as *mut *mut T).cast(),\n                max(align_of::<T>(), size_of::<usize>()),\n                size_of::<T>()\n            );\n            assert_eq!(ret, 0, \"Failed to allocate or invalid alignment\");\n        };\n\n        // NonNull is just a wrapper that enforces that the pointer isn't null.\n        let ptr = {\n            // Safety: memptr is dereferenceable because we created it from a\n            // reference and have exclusive access.\n            ptr::NonNull::new(memptr)\n                .expect(\"Guaranteed non-null if posix_memalign returns 0\")\n        };\n\n        // Move value from the stack to the location we allocated on the heap.\n        unsafe {\n            // Safety: If non-null, posix_memalign gives us a ptr that is valid\n            // for writes and properly aligned.\n            ptr.as_ptr().write(value);\n        }\n\n        Self(ptr)\n    }\n}\n}\n```\n\nThis isn't very useful, because once our users give us a value they have no way to access it. [`Box`](https://doc.rust-lang.org/std/boxed/struct.Box.html) implements [`Deref`](https://doc.rust-lang.org/core/ops/trait.Deref.html) and [`DerefMut`](https://doc.rust-lang.org/core/ops/trait.DerefMut.html) so that you can access the inner value. Let's do that.\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::ops::{Deref, DerefMut};\n\nstruct Carton<T>(std::ptr::NonNull<T>);\n\nimpl<T> Deref for Carton<T> {\n    type Target = T;\n\n    fn deref(&self) -> &Self::Target {\n        unsafe {\n            // Safety: The pointer is aligned, initialized, and dereferenceable\n            //   by the logic in [`Self::new`]. We require readers to borrow the\n            //   Carton, and the lifetime of the return value is elided to the\n            //   lifetime of the input. This means the borrow checker will\n            //   enforce that no one can mutate the contents of the Carton until\n            //   the reference returned is dropped.\n            self.0.as_ref()\n        }\n    }\n}\n\nimpl<T> DerefMut for Carton<T> {\n    fn deref_mut(&mut self) -> &mut Self::Target {\n        unsafe {\n            // Safety: The pointer is aligned, initialized, and dereferenceable\n            //   by the logic in [`Self::new`]. We require writers to mutably\n            //   borrow the Carton, and the lifetime of the return value is\n            //   elided to the lifetime of the input. This means the borrow\n            //   checker will enforce that no one else can access the contents\n            //   of the Carton until the mutable reference returned is dropped.\n            self.0.as_mut()\n        }\n    }\n}\n}\n```\n\nFinally, let's think about whether our `Carton` is Send and Sync. Something can safely be Send unless it shares mutable state with something else without enforcing exclusive access to it. Each `Carton` has a unique pointer, so we're good.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Carton<T>(std::ptr::NonNull<T>);\n// Safety: No one besides us has the raw pointer, so we can safely transfer the\n// Carton to another thread if T can be safely transferred.\nunsafe impl<T> Send for Carton<T> where T: Send {}\n}\n```\n\nWhat about Sync? For `Carton` to be Sync we have to enforce that you can't write to something stored in a `&Carton` while that same something could be read or written to from another `&Carton`. Since you need an `&mut Carton` to write to the pointer, and the borrow checker enforces that mutable references must be exclusive, there are no soundness issues making `Carton` sync either.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Carton<T>(std::ptr::NonNull<T>);\n// Safety: Since there exists a public way to go from a `&Carton<T>` to a `&T`\n// in an unsynchronized fashion (such as `Deref`), then `Carton<T>` can't be\n// `Sync` if `T` isn't.\n// Conversely, `Carton` itself does not use any interior mutability whatsoever:\n// all the mutations are performed through an exclusive reference (`&mut`). This\n// means it suffices that `T` be `Sync` for `Carton<T>` to be `Sync`:\nunsafe impl<T> Sync for Carton<T> where T: Sync  {}\n}\n```\n\nWhen we assert our type is Send and Sync we usually need to enforce that every contained type is Send and Sync. When writing custom types that behave like standard library types we can assert that we have the same requirements. For example, the following code asserts that a Carton is Send if the same sort of Box would be Send, which in this case is the same as saying T is Send.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Carton<T>(std::ptr::NonNull<T>);\nunsafe impl<T> Send for Carton<T> where Box<T>: Send {}\n}\n```\n\nRight now `Carton<T>` has a memory leak, as it never frees the memory it allocates. Once we fix that we have a new requirement we have to ensure we meet to be Send: we need to know `free` can be called on a pointer that was yielded by an allocation done on another thread. We can check this is true in the docs for [`libc::free`](https://linux.die.net/man/3/free).\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Carton<T>(std::ptr::NonNull<T>);\nmod libc {\n    pub use ::std::os::raw::c_void;\n    extern \"C\" { pub fn free(p: *mut c_void); }\n}\nimpl<T> Drop for Carton<T> {\n    fn drop(&mut self) {\n        unsafe {\n            libc::free(self.0.as_ptr().cast());\n        }\n    }\n}\n}\n```\n\nA nice example where this does not happen is with a MutexGuard: notice how [it is not Send](https://doc.rust-lang.org/std/sync/struct.MutexGuard.html#impl-Send). The implementation of MutexGuard [uses libraries](https://github.com/rust-lang/rust/issues/23465#issuecomment-82730326) that require you to ensure you don't try to free a lock that you acquired in a different thread. If you were able to Send a MutexGuard to another thread the destructor would run in the thread you sent it to, violating the requirement. MutexGuard can still be Sync because all you can send to another thread is an `&MutexGuard` and dropping a reference does nothing.\n\nTODO: better explain what can or can't be Send or Sync. Sufficient to appeal only to data races?\n\n## [Atomics](#atomics)\n\nRust pretty blatantly just inherits the memory model for atomics from C++20. This is not due to this model being particularly excellent or easy to understand. Indeed, this model is quite complex and known to have [several flaws](http://plv.mpi-sws.org/c11comp/popl15.pdf). Rather, it is a pragmatic concession to the fact that _everyone_ is pretty bad at modeling atomics. At very least, we can benefit from existing tooling and research around the C/C++ memory model. (You'll often see this model referred to as \"C/C++11\" or just \"C11\". C just copies the C++ memory model; and C++11 was the first version of the model but it has received some bugfixes since then.)\n\nTrying to fully explain the model in this book is fairly hopeless. It's defined in terms of madness-inducing causality graphs that require a full book to properly understand in a practical way. If you want all the nitty-gritty details, you should check out the [C++ specification](https://en.cppreference.com/w/cpp/atomic/memory_order). Still, we'll try to cover the basics and some of the problems Rust developers face.\n\nThe C++ memory model is fundamentally about trying to bridge the gap between the semantics we want, the optimizations compilers want, and the inconsistent chaos our hardware wants. _We_ would like to just write programs and have them do exactly what we said but, you know, fast. Wouldn't that be great?\n\n## [Compiler Reordering](#compiler-reordering)\n\nCompilers fundamentally want to be able to do all sorts of complicated transformations to reduce data dependencies and eliminate dead code. In particular, they may radically change the actual order of events, or make events never occur! If we write something like:\n\n```rust\nx = 1;\ny = 3;\nx = 2;\n```\n\nThe compiler may conclude that it would be best if your program did:\n\n```rust\nx = 2;\ny = 3;\n```\n\nThis has inverted the order of events and completely eliminated one event. From a single-threaded perspective this is completely unobservable: after all the statements have executed we are in exactly the same state. But if our program is multi-threaded, we may have been relying on `x` to actually be assigned to 1 before `y` was assigned. We would like the compiler to be able to make these kinds of optimizations, because they can seriously improve performance. On the other hand, we'd also like to be able to depend on our program _doing the thing we said_.\n\n## [Hardware Reordering](#hardware-reordering)\n\nOn the other hand, even if the compiler totally understood what we wanted and respected our wishes, our hardware might instead get us in trouble. Trouble comes from CPUs in the form of memory hierarchies. There is indeed a global shared memory space somewhere in your hardware, but from the perspective of each CPU core it is _so very far away_ and _so very slow_. Each CPU would rather work with its local cache of the data and only go through all the anguish of talking to shared memory only when it doesn't actually have that memory in cache.\n\nAfter all, that's the whole point of the cache, right? If every read from the cache had to run back to shared memory to double check that it hadn't changed, what would the point be? The end result is that the hardware doesn't guarantee that events that occur in some order on _one_ thread, occur in the same order on _another_ thread. To guarantee this, we must issue special instructions to the CPU telling it to be a bit less smart.\n\nFor instance, say we convince the compiler to emit this logic:\n\n```text\ninitial state: x = 0, y = 1\n\nTHREAD 1        THREAD 2\ny = 3;          if x == 1 {\nx = 1;              y *= 2;\n                }\n\n```\n\nIdeally this program has 2 possible final states:\n\n-   `y = 3`: (thread 2 did the check before thread 1 completed)\n-   `y = 6`: (thread 2 did the check after thread 1 completed)\n\nHowever there's a third potential state that the hardware enables:\n\n-   `y = 2`: (thread 2 saw `x = 1`, but not `y = 3`, and then overwrote `y = 3`)\n\nIt's worth noting that different kinds of CPU provide different guarantees. It is common to separate hardware into two categories: strongly-ordered and weakly-ordered. Most notably x86/64 provides strong ordering guarantees, while ARM provides weak ordering guarantees. This has two consequences for concurrent programming:\n\n-   Asking for stronger guarantees on strongly-ordered hardware may be cheap or even free because they already provide strong guarantees unconditionally. Weaker guarantees may only yield performance wins on weakly-ordered hardware.\n    \n-   Asking for guarantees that are too weak on strongly-ordered hardware is more likely to _happen_ to work, even though your program is strictly incorrect. If possible, concurrent algorithms should be tested on weakly-ordered hardware.\n    \n\n## [Data Accesses](#data-accesses)\n\nThe C++ memory model attempts to bridge the gap by allowing us to talk about the _causality_ of our program. Generally, this is by establishing a _happens before_ relationship between parts of the program and the threads that are running them. This gives the hardware and compiler room to optimize the program more aggressively where a strict happens-before relationship isn't established, but forces them to be more careful where one is established. The way we communicate these relationships are through _data accesses_ and _atomic accesses_.\n\nData accesses are the bread-and-butter of the programming world. They are fundamentally unsynchronized and compilers are free to aggressively optimize them. In particular, data accesses are free to be reordered by the compiler on the assumption that the program is single-threaded. The hardware is also free to propagate the changes made in data accesses to other threads as lazily and inconsistently as it wants. Most critically, data accesses are how data races happen. Data accesses are very friendly to the hardware and compiler, but as we've seen they offer _awful_ semantics to try to write synchronized code with. Actually, that's too weak.\n\n**It is literally impossible to write correct synchronized code using only data accesses.**\n\nAtomic accesses are how we tell the hardware and compiler that our program is multi-threaded. Each atomic access can be marked with an _ordering_ that specifies what kind of relationship it establishes with other accesses. In practice, this boils down to telling the compiler and hardware certain things they _can't_ do. For the compiler, this largely revolves around re-ordering of instructions. For the hardware, this largely revolves around how writes are propagated to other threads. The set of orderings Rust exposes are:\n\n-   Sequentially Consistent (SeqCst)\n-   Release\n-   Acquire\n-   Relaxed\n\n(Note: We explicitly do not expose the C++ _consume_ ordering)\n\nTODO: negative reasoning vs positive reasoning? TODO: \"can't forget to synchronize\"\n\n## [Sequentially Consistent](#sequentially-consistent)\n\nSequentially Consistent is the most powerful of all, implying the restrictions of all other orderings. Intuitively, a sequentially consistent operation cannot be reordered: all accesses on one thread that happen before and after a SeqCst access stay before and after it. A data-race-free program that uses only sequentially consistent atomics and data accesses has the very nice property that there is a single global execution of the program's instructions that all threads agree on. This execution is also particularly nice to reason about: it's just an interleaving of each thread's individual executions. This does not hold if you start using the weaker atomic orderings.\n\nThe relative developer-friendliness of sequential consistency doesn't come for free. Even on strongly-ordered platforms sequential consistency involves emitting memory fences.\n\nIn practice, sequential consistency is rarely necessary for program correctness. However sequential consistency is definitely the right choice if you're not confident about the other memory orders. Having your program run a bit slower than it needs to is certainly better than it running incorrectly! It's also mechanically trivial to downgrade atomic operations to have a weaker consistency later on. Just change `SeqCst` to `Relaxed` and you're done! Of course, proving that this transformation is _correct_ is a whole other matter.\n\n## [Acquire-Release](#acquire-release)\n\nAcquire and Release are largely intended to be paired. Their names hint at their use case: they're perfectly suited for acquiring and releasing locks, and ensuring that critical sections don't overlap.\n\nIntuitively, an acquire access ensures that every access after it stays after it. However operations that occur before an acquire are free to be reordered to occur after it. Similarly, a release access ensures that every access before it stays before it. However operations that occur after a release are free to be reordered to occur before it.\n\nWhen thread A releases a location in memory and then thread B subsequently acquires _the same_ location in memory, causality is established. Every write (including non-atomic and relaxed atomic writes) that happened before A's release will be observed by B after its acquisition. However no causality is established with any other threads. Similarly, no causality is established if A and B access _different_ locations in memory.\n\nBasic use of release-acquire is therefore simple: you acquire a location of memory to begin the critical section, and then release that location to end it. For instance, a simple spinlock might look like:\n\n```rust\nuse std::sync::Arc;\nuse std::sync::atomic::{AtomicBool, Ordering};\nuse std::thread;\n\nfn main() {\n    let lock = Arc::new(AtomicBool::new(false)); // value answers \"am I locked?\"\n\n    // ... distribute lock to threads somehow ...\n\n    // Try to acquire the lock by setting it to true\n    while lock.compare_and_swap(false, true, Ordering::Acquire) { }\n    // broke out of the loop, so we successfully acquired the lock!\n\n    // ... scary data accesses ...\n\n    // ok we're done, release the lock\n    lock.store(false, Ordering::Release);\n}\n```\n\nOn strongly-ordered platforms most accesses have release or acquire semantics, making release and acquire often totally free. This is not the case on weakly-ordered platforms.\n\n## [Relaxed](#relaxed)\n\nRelaxed accesses are the absolute weakest. They can be freely re-ordered and provide no happens-before relationship. Still, relaxed operations are still atomic. That is, they don't count as data accesses and any read-modify-write operations done to them occur atomically. Relaxed operations are appropriate for things that you definitely want to happen, but don't particularly otherwise care about. For instance, incrementing a counter can be safely done by multiple threads using a relaxed `fetch_add` if you're not using the counter to synchronize any other accesses.\n\nThere's rarely a benefit in making an operation relaxed on strongly-ordered platforms, since they usually provide release-acquire semantics anyway. However relaxed operations can be cheaper on weakly-ordered platforms.\n\n## [Example: Implementing Vec](#example-implementing-vec)\n\nTo bring everything together, we're going to write `std::Vec` from scratch. We will limit ourselves to stable Rust. In particular we won't use any intrinsics that could make our code a little bit nicer or efficient because intrinsics are permanently unstable. Although many intrinsics _do_ become stabilized elsewhere (`std::ptr` and `std::mem` consist of many intrinsics).\n\nUltimately this means our implementation may not take advantage of all possible optimizations, though it will be by no means _naive_. We will definitely get into the weeds over nitty-gritty details, even when the problem doesn't _really_ merit it.\n\nYou wanted advanced. We're gonna go advanced.\n\n## [Layout](#layout)\n\nFirst off, we need to come up with the struct layout. A Vec has three parts: a pointer to the allocation, the size of the allocation, and the number of elements that have been initialized.\n\nNaively, this means we just want this design:\n\n```rust\npub struct Vec<T> {\n    ptr: *mut T,\n    cap: usize,\n    len: usize,\n}\n```\n\nAnd indeed this would compile. Unfortunately, it would be too strict. The compiler will give us too strict variance. So a `&Vec<&'static str>` couldn't be used where a `&Vec<&'a str>` was expected. See [the chapter on ownership and lifetimes](vec/../ownership.html) for all the details on variance.\n\nAs we saw in the ownership chapter, the standard library uses `Unique<T>` in place of `*mut T` when it has a raw pointer to an allocation that it owns. Unique is unstable, so we'd like to not use it if possible, though.\n\nAs a recap, Unique is a wrapper around a raw pointer that declares that:\n\n-   We are covariant over `T`\n-   We may own a value of type `T` (this is not relevant for our example here, but see [the chapter on PhantomData](vec/../phantom-data.html) on why the real `std::vec::Vec<T>` needs this)\n-   We are Send/Sync if `T` is Send/Sync\n-   Our pointer is never null (so `Option<Vec<T>>` is null-pointer-optimized)\n\nWe can implement all of the above requirements in stable Rust. To do this, instead of using `Unique<T>` we will use [`NonNull<T>`](vec/../../std/ptr/struct.NonNull.html), another wrapper around a raw pointer, which gives us two of the above properties, namely it is covariant over `T` and is declared to never be null. By implementing Send/Sync if `T` is, we get the same results as using `Unique<T>`:\n\n```rust\nuse std::ptr::NonNull;\n\npub struct Vec<T> {\n    ptr: NonNull<T>,\n    cap: usize,\n    len: usize,\n}\n\nunsafe impl<T: Send> Send for Vec<T> {}\nunsafe impl<T: Sync> Sync for Vec<T> {}\nfn main() {}\n```\n\n## [Allocating Memory](#allocating-memory)\n\nUsing `NonNull` throws a wrench in an important feature of Vec (and indeed all of the std collections): creating an empty Vec doesn't actually allocate at all. This is not the same as allocating a zero-sized memory block, which is not allowed by the global allocator (it results in undefined behavior!). So if we can't allocate, but also can't put a null pointer in `ptr`, what do we do in `Vec::new`? Well, we just put some other garbage in there!\n\nThis is perfectly fine because we already have `cap == 0` as our sentinel for no allocation. We don't even need to handle it specially in almost any code because we usually need to check if `cap > len` or `len > 0` anyway. The recommended Rust value to put here is `mem::align_of::<T>()`. `NonNull` provides a convenience for this: `NonNull::dangling()`. There are quite a few places where we'll want to use `dangling` because there's no real allocation to talk about but `null` would make the compiler do bad things.\n\nSo:\n\n```rust\nuse std::mem;\n\nimpl<T> Vec<T> {\n    pub fn new() -> Self {\n        assert!(mem::size_of::<T>() != 0, \"We're not ready to handle ZSTs\");\n        Vec {\n            ptr: NonNull::dangling(),\n            len: 0,\n            cap: 0,\n        }\n    }\n}\nfn main() {}\n```\n\nI slipped in that assert there because zero-sized types will require some special handling throughout our code, and I want to defer the issue for now. Without this assert, some of our early drafts will do some Very Bad Things.\n\nNext we need to figure out what to actually do when we _do_ want space. For that, we use the global allocation functions [`alloc`](vec/../../alloc/alloc/fn.alloc.html), [`realloc`](vec/../../alloc/alloc/fn.realloc.html), and [`dealloc`](vec/../../alloc/alloc/fn.dealloc.html) which are available in stable Rust in [`std::alloc`](vec/../../alloc/alloc/index.html). These functions are expected to become deprecated in favor of the methods of [`std::alloc::Global`](vec/../../std/alloc/struct.Global.html) after this type is stabilized.\n\nWe'll also need a way to handle out-of-memory (OOM) conditions. The standard library provides a function [`alloc::handle_alloc_error`](vec/../../alloc/alloc/fn.handle_alloc_error.html), which will abort the program in a platform-specific manner. The reason we abort and don't panic is because unwinding can cause allocations to happen, and that seems like a bad thing to do when your allocator just came back with \"hey I don't have any more memory\".\n\nOf course, this is a bit silly since most platforms don't actually run out of memory in a conventional way. Your operating system will probably kill the application by another means if you legitimately start using up all the memory. The most likely way we'll trigger OOM is by just asking for ludicrous quantities of memory at once (e.g. half the theoretical address space). As such it's _probably_ fine to panic and nothing bad will happen. Still, we're trying to be like the standard library as much as possible, so we'll just kill the whole program.\n\nOkay, now we can write growing. Roughly, we want to have this logic:\n\n```text\nif cap == 0:\n    allocate()\n    cap = 1\nelse:\n    reallocate()\n    cap *= 2\n\n```\n\nBut Rust's only supported allocator API is so low level that we'll need to do a fair bit of extra work. We also need to guard against some special conditions that can occur with really large allocations or empty allocations.\n\nIn particular, `ptr::offset` will cause us a lot of trouble, because it has the semantics of LLVM's GEP inbounds instruction. If you're fortunate enough to not have dealt with this instruction, here's the basic story with GEP: alias analysis, alias analysis, alias analysis. It's super important to an optimizing compiler to be able to reason about data dependencies and aliasing.\n\nAs a simple example, consider the following fragment of code:\n\n```rust\n*x *= 7;\n*y *= 3;\n```\n\nIf the compiler can prove that `x` and `y` point to different locations in memory, the two operations can in theory be executed in parallel (by e.g. loading them into different registers and working on them independently). However the compiler can't do this in general because if x and y point to the same location in memory, the operations need to be done to the same value, and they can't just be merged afterwards.\n\nWhen you use GEP inbounds, you are specifically telling LLVM that the offsets you're about to do are within the bounds of a single \"allocated\" entity. The ultimate payoff being that LLVM can assume that if two pointers are known to point to two disjoint objects, all the offsets of those pointers are _also_ known to not alias (because you won't just end up in some random place in memory). LLVM is heavily optimized to work with GEP offsets, and inbounds offsets are the best of all, so it's important that we use them as much as possible.\n\nSo that's what GEP's about, how can it cause us trouble?\n\nThe first problem is that we index into arrays with unsigned integers, but GEP (and as a consequence `ptr::offset`) takes a signed integer. This means that half of the seemingly valid indices into an array will overflow GEP and actually go in the wrong direction! As such we must limit all allocations to `isize::MAX` elements. This actually means we only need to worry about byte-sized objects, because e.g. `> isize::MAX` `u16`s will truly exhaust all of the system's memory. However in order to avoid subtle corner cases where someone reinterprets some array of `< isize::MAX` objects as bytes, std limits all allocations to `isize::MAX` bytes.\n\nOn all 64-bit targets that Rust currently supports we're artificially limited to significantly less than all 64 bits of the address space (modern x64 platforms only expose 48-bit addressing), so we can rely on just running out of memory first. However on 32-bit targets, particularly those with extensions to use more of the address space (PAE x86 or x32), it's theoretically possible to successfully allocate more than `isize::MAX` bytes of memory.\n\nHowever since this is a tutorial, we're not going to be particularly optimal here, and just unconditionally check, rather than use clever platform-specific `cfg`s.\n\nThe other corner-case we need to worry about is empty allocations. There will be two kinds of empty allocations we need to worry about: `cap = 0` for all T, and `cap > 0` for zero-sized types.\n\nThese cases are tricky because they come down to what LLVM means by \"allocated\". LLVM's notion of an allocation is significantly more abstract than how we usually use it. Because LLVM needs to work with different languages' semantics and custom allocators, it can't really intimately understand allocation. Instead, the main idea behind allocation is \"doesn't overlap with other stuff\". That is, heap allocations, stack allocations, and globals don't randomly overlap. Yep, it's about alias analysis. As such, Rust can technically play a bit fast and loose with the notion of an allocation as long as it's _consistent_.\n\nGetting back to the empty allocation case, there are a couple of places where we want to offset by 0 as a consequence of generic code. The question is then: is it consistent to do so? For zero-sized types, we have concluded that it is indeed consistent to do a GEP inbounds offset by an arbitrary number of elements. This is a runtime no-op because every element takes up no space, and it's fine to pretend that there's infinite zero-sized types allocated at `0x01`. No allocator will ever allocate that address, because they won't allocate `0x00` and they generally allocate to some minimal alignment higher than a byte. Also generally the whole first page of memory is protected from being allocated anyway (a whole 4k, on many platforms).\n\nHowever what about for positive-sized types? That one's a bit trickier. In principle, you can argue that offsetting by 0 gives LLVM no information: either there's an element before the address or after it, but it can't know which. However we've chosen to conservatively assume that it may do bad things. As such we will guard against this case explicitly.\n\n_Phew_\n\nOk with all the nonsense out of the way, let's actually allocate some memory:\n\n```rust\nuse std::alloc::{self, Layout};\n\nimpl<T> Vec<T> {\n    fn grow(&mut self) {\n        let (new_cap, new_layout) = if self.cap == 0 {\n            (1, Layout::array::<T>(1).unwrap())\n        } else {\n            // This can't overflow since self.cap <= isize::MAX.\n            let new_cap = 2 * self.cap;\n\n            // `Layout::array` checks that the number of bytes is <= usize::MAX,\n            // but this is redundant since old_layout.size() <= isize::MAX,\n            // so the `unwrap` should never fail.\n            let new_layout = Layout::array::<T>(new_cap).unwrap();\n            (new_cap, new_layout)\n        };\n\n        // Ensure that the new allocation doesn't exceed `isize::MAX` bytes.\n        assert!(new_layout.size() <= isize::MAX as usize, \"Allocation too large\");\n\n        let new_ptr = if self.cap == 0 {\n            unsafe { alloc::alloc(new_layout) }\n        } else {\n            let old_layout = Layout::array::<T>(self.cap).unwrap();\n            let old_ptr = self.ptr.as_ptr() as *mut u8;\n            unsafe { alloc::realloc(old_ptr, old_layout, new_layout.size()) }\n        };\n\n        // If allocation fails, `new_ptr` will be null, in which case we abort.\n        self.ptr = match NonNull::new(new_ptr as *mut T) {\n            Some(p) => p,\n            None => alloc::handle_alloc_error(new_layout),\n        };\n        self.cap = new_cap;\n    }\n}\nfn main() {}\n```\n\n## [Push and Pop](#push-and-pop)\n\nAlright. We can initialize. We can allocate. Let's actually implement some functionality! Let's start with `push`. All it needs to do is check if we're full to grow, unconditionally write to the next index, and then increment our length.\n\nTo do the write we have to be careful not to evaluate the memory we want to write to. At worst, it's truly uninitialized memory from the allocator. At best it's the bits of some old value we popped off. Either way, we can't just index to the memory and dereference it, because that will evaluate the memory as a valid instance of T. Worse, `foo[idx] = x` will try to call `drop` on the old value of `foo[idx]`!\n\nThe correct way to do this is with `ptr::write`, which just blindly overwrites the target address with the bits of the value we provide. No evaluation involved.\n\nFor `push`, if the old len (before push was called) is 0, then we want to write to the 0th index. So we should offset by the old len.\n\n```rust\npub fn push(&mut self, elem: T) {\n    if self.len == self.cap { self.grow(); }\n\n    unsafe {\n        ptr::write(self.ptr.as_ptr().add(self.len), elem);\n    }\n\n    // Can't fail, we'll OOM first.\n    self.len += 1;\n}\n```\n\nEasy! How about `pop`? Although this time the index we want to access is initialized, Rust won't just let us dereference the location of memory to move the value out, because that would leave the memory uninitialized! For this we need `ptr::read`, which just copies out the bits from the target address and interprets it as a value of type T. This will leave the memory at this address logically uninitialized, even though there is in fact a perfectly good instance of T there.\n\nFor `pop`, if the old len is 1, for example, we want to read out of the 0th index. So we should offset by the new len.\n\n```rust\npub fn pop(&mut self) -> Option<T> {\n    if self.len == 0 {\n        None\n    } else {\n        self.len -= 1;\n        unsafe {\n            Some(ptr::read(self.ptr.as_ptr().add(self.len)))\n        }\n    }\n}\n```\n\n## [Deallocating](#deallocating)\n\nNext we should implement Drop so that we don't massively leak tons of resources. The easiest way is to just call `pop` until it yields None, and then deallocate our buffer. Note that calling `pop` is unneeded if `T: !Drop`. In theory we can ask Rust if `T` `needs_drop` and omit the calls to `pop`. However in practice LLVM is _really_ good at removing simple side-effect free code like this, so I wouldn't bother unless you notice it's not being stripped (in this case it is).\n\nWe must not call `alloc::dealloc` when `self.cap == 0`, as in this case we haven't actually allocated any memory.\n\n```rust\nimpl<T> Drop for Vec<T> {\n    fn drop(&mut self) {\n        if self.cap != 0 {\n            while let Some(_) = self.pop() { }\n            let layout = Layout::array::<T>(self.cap).unwrap();\n            unsafe {\n                alloc::dealloc(self.ptr.as_ptr() as *mut u8, layout);\n            }\n        }\n    }\n}\n```\n\n## [Deref](#deref)\n\nAlright! We've got a decent minimal stack implemented. We can push, we can pop, and we can clean up after ourselves. However there's a whole mess of functionality we'd reasonably want. In particular, we have a proper array, but none of the slice functionality. That's actually pretty easy to solve: we can implement `Deref<Target=[T]>`. This will magically make our Vec coerce to, and behave like, a slice in all sorts of conditions.\n\nAll we need is `slice::from_raw_parts`. It will correctly handle empty slices for us. Later once we set up zero-sized type support it will also Just Work for those too.\n\n```rust\nuse std::ops::Deref;\n\nimpl<T> Deref for Vec<T> {\n    type Target = [T];\n    fn deref(&self) -> &[T] {\n        unsafe {\n            std::slice::from_raw_parts(self.ptr.as_ptr(), self.len)\n        }\n    }\n}\n```\n\nAnd let's do DerefMut too:\n\n```rust\nuse std::ops::DerefMut;\n\nimpl<T> DerefMut for Vec<T> {\n    fn deref_mut(&mut self) -> &mut [T] {\n        unsafe {\n            std::slice::from_raw_parts_mut(self.ptr.as_ptr(), self.len)\n        }\n    }\n}\n```\n\nNow we have `len`, `first`, `last`, indexing, slicing, sorting, `iter`, `iter_mut`, and all other sorts of bells and whistles provided by slice. Sweet!\n\n## [Insert and Remove](#insert-and-remove)\n\nSomething _not_ provided by slice is `insert` and `remove`, so let's do those next.\n\nInsert needs to shift all the elements at the target index to the right by one. To do this we need to use `ptr::copy`, which is our version of C's `memmove`. This copies some chunk of memory from one location to another, correctly handling the case where the source and destination overlap (which will definitely happen here).\n\nIf we insert at index `i`, we want to shift the `[i .. len]` to `[i+1 .. len+1]` using the old len.\n\n```rust\npub fn insert(&mut self, index: usize, elem: T) {\n    // Note: `<=` because it's valid to insert after everything\n    // which would be equivalent to push.\n    assert!(index <= self.len, \"index out of bounds\");\n    if self.len == self.cap { self.grow(); }\n\n    unsafe {\n        // ptr::copy(src, dest, len): \"copy from src to dest len elems\"\n        ptr::copy(\n            self.ptr.as_ptr().add(index),\n            self.ptr.as_ptr().add(index + 1),\n            self.len - index,\n        );\n        ptr::write(self.ptr.as_ptr().add(index), elem);\n    }\n\n    self.len += 1;\n}\n```\n\nRemove behaves in the opposite manner. We need to shift all the elements from `[i+1 .. len + 1]` to `[i .. len]` using the _new_ len.\n\n```rust\npub fn remove(&mut self, index: usize) -> T {\n    // Note: `<` because it's *not* valid to remove after everything\n    assert!(index < self.len, \"index out of bounds\");\n    unsafe {\n        self.len -= 1;\n        let result = ptr::read(self.ptr.as_ptr().add(index));\n        ptr::copy(\n            self.ptr.as_ptr().add(index + 1),\n            self.ptr.as_ptr().add(index),\n            self.len - index,\n        );\n        result\n    }\n}\n```\n\n## [IntoIter](#intoiter)\n\nLet's move on to writing iterators. `iter` and `iter_mut` have already been written for us thanks to The Magic of Deref. However there's two interesting iterators that Vec provides that slices can't: `into_iter` and `drain`.\n\nIntoIter consumes the Vec by-value, and can consequently yield its elements by-value. In order to enable this, IntoIter needs to take control of Vec's allocation.\n\nIntoIter needs to be DoubleEnded as well, to enable reading from both ends. Reading from the back could just be implemented as calling `pop`, but reading from the front is harder. We could call `remove(0)` but that would be insanely expensive. Instead we're going to just use ptr::read to copy values out of either end of the Vec without mutating the buffer at all.\n\nTo do this we're going to use a very common C idiom for array iteration. We'll make two pointers; one that points to the start of the array, and one that points to one-element past the end. When we want an element from one end, we'll read out the value pointed to at that end and move the pointer over by one. When the two pointers are equal, we know we're done.\n\nNote that the order of read and offset are reversed for `next` and `next_back` For `next_back` the pointer is always after the element it wants to read next, while for `next` the pointer is always at the element it wants to read next. To see why this is, consider the case where every element but one has been yielded.\n\nThe array looks like this:\n\n```text\n          S  E\n[X, X, X, O, X, X, X]\n\n```\n\nIf E pointed directly at the element it wanted to yield next, it would be indistinguishable from the case where there are no more elements to yield.\n\nAlthough we don't actually care about it during iteration, we also need to hold onto the Vec's allocation information in order to free it once IntoIter is dropped.\n\nSo we're going to use the following struct:\n\n```rust\npub struct IntoIter<T> {\n    buf: NonNull<T>,\n    cap: usize,\n    start: *const T,\n    end: *const T,\n}\n```\n\nAnd this is what we end up with for initialization:\n\n```rust\nimpl<T> IntoIterator for Vec<T> {\n    type Item = T;\n    type IntoIter = IntoIter<T>;\n    fn into_iter(self) -> IntoIter<T> {\n        // Make sure not to drop Vec since that would free the buffer\n        let vec = ManuallyDrop::new(self);\n\n        // Can't destructure Vec since it's Drop\n        let ptr = vec.ptr;\n        let cap = vec.cap;\n        let len = vec.len;\n\n        IntoIter {\n            buf: ptr,\n            cap,\n            start: ptr.as_ptr(),\n            end: if cap == 0 {\n                // can't offset off this pointer, it's not allocated!\n                ptr.as_ptr()\n            } else {\n                unsafe { ptr.as_ptr().add(len) }\n            },\n        }\n    }\n}\n```\n\nHere's iterating forward:\n\n```rust\nimpl<T> Iterator for IntoIter<T> {\n    type Item = T;\n    fn next(&mut self) -> Option<T> {\n        if self.start == self.end {\n            None\n        } else {\n            unsafe {\n                let result = ptr::read(self.start);\n                self.start = self.start.offset(1);\n                Some(result)\n            }\n        }\n    }\n\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        let len = (self.end as usize - self.start as usize)\n                  / mem::size_of::<T>();\n        (len, Some(len))\n    }\n}\n```\n\nAnd here's iterating backwards.\n\n```rust\nimpl<T> DoubleEndedIterator for IntoIter<T> {\n    fn next_back(&mut self) -> Option<T> {\n        if self.start == self.end {\n            None\n        } else {\n            unsafe {\n                self.end = self.end.offset(-1);\n                Some(ptr::read(self.end))\n            }\n        }\n    }\n}\n```\n\nBecause IntoIter takes ownership of its allocation, it needs to implement Drop to free it. However it also wants to implement Drop to drop any elements it contains that weren't yielded.\n\n```rust\nimpl<T> Drop for IntoIter<T> {\n    fn drop(&mut self) {\n        if self.cap != 0 {\n            // drop any remaining elements\n            for _ in &mut *self {}\n            let layout = Layout::array::<T>(self.cap).unwrap();\n            unsafe {\n                alloc::dealloc(self.buf.as_ptr() as *mut u8, layout);\n            }\n        }\n    }\n}\n```\n\n## [RawVec](#rawvec)\n\nWe've actually reached an interesting situation here: we've duplicated the logic for specifying a buffer and freeing its memory in Vec and IntoIter. Now that we've implemented it and identified _actual_ logic duplication, this is a good time to perform some logic compression.\n\nWe're going to abstract out the `(ptr, cap)` pair and give them the logic for allocating, growing, and freeing:\n\n```rust\nstruct RawVec<T> {\n    ptr: NonNull<T>,\n    cap: usize,\n}\n\nunsafe impl<T: Send> Send for RawVec<T> {}\nunsafe impl<T: Sync> Sync for RawVec<T> {}\n\nimpl<T> RawVec<T> {\n    fn new() -> Self {\n        assert!(mem::size_of::<T>() != 0, \"TODO: implement ZST support\");\n        RawVec {\n            ptr: NonNull::dangling(),\n            cap: 0,\n        }\n    }\n\n    fn grow(&mut self) {\n        // This can't overflow because we ensure self.cap <= isize::MAX.\n        let new_cap = if self.cap == 0 { 1 } else { 2 * self.cap };\n\n        // Layout::array checks that the number of bytes is <= usize::MAX,\n        // but this is redundant since old_layout.size() <= isize::MAX,\n        // so the `unwrap` should never fail.\n        let new_layout = Layout::array::<T>(new_cap).unwrap();\n\n        // Ensure that the new allocation doesn't exceed `isize::MAX` bytes.\n        assert!(new_layout.size() <= isize::MAX as usize, \"Allocation too large\");\n\n        let new_ptr = if self.cap == 0 {\n            unsafe { alloc::alloc(new_layout) }\n        } else {\n            let old_layout = Layout::array::<T>(self.cap).unwrap();\n            let old_ptr = self.ptr.as_ptr() as *mut u8;\n            unsafe { alloc::realloc(old_ptr, old_layout, new_layout.size()) }\n        };\n\n        // If allocation fails, `new_ptr` will be null, in which case we abort.\n        self.ptr = match NonNull::new(new_ptr as *mut T) {\n            Some(p) => p,\n            None => alloc::handle_alloc_error(new_layout),\n        };\n        self.cap = new_cap;\n    }\n}\n\nimpl<T> Drop for RawVec<T> {\n    fn drop(&mut self) {\n        if self.cap != 0 {\n            let layout = Layout::array::<T>(self.cap).unwrap();\n            unsafe {\n                alloc::dealloc(self.ptr.as_ptr() as *mut u8, layout);\n            }\n        }\n    }\n}\n```\n\nAnd change Vec as follows:\n\n```rust\npub struct Vec<T> {\n    buf: RawVec<T>,\n    len: usize,\n}\n\nimpl<T> Vec<T> {\n    fn ptr(&self) -> *mut T {\n        self.buf.ptr.as_ptr()\n    }\n\n    fn cap(&self) -> usize {\n        self.buf.cap\n    }\n\n    pub fn new() -> Self {\n        Vec {\n            buf: RawVec::new(),\n            len: 0,\n        }\n    }\n\n    // push/pop/insert/remove largely unchanged:\n    // * `self.ptr.as_ptr() -> self.ptr()`\n    // * `self.cap -> self.cap()`\n    // * `self.grow() -> self.buf.grow()`\n}\n\nimpl<T> Drop for Vec<T> {\n    fn drop(&mut self) {\n        while let Some(_) = self.pop() {}\n        // deallocation is handled by RawVec\n    }\n}\n```\n\nAnd finally we can really simplify IntoIter:\n\n```rust\npub struct IntoIter<T> {\n    _buf: RawVec<T>, // we don't actually care about this. Just need it to live.\n    start: *const T,\n    end: *const T,\n}\n\n// next and next_back literally unchanged since they never referred to the buf\n\nimpl<T> Drop for IntoIter<T> {\n    fn drop(&mut self) {\n        // only need to ensure all our elements are read;\n        // buffer will clean itself up afterwards.\n        for _ in &mut *self {}\n    }\n}\n\nimpl<T> IntoIterator for Vec<T> {\n    type Item = T;\n    type IntoIter = IntoIter<T>;\n    fn into_iter(self) -> IntoIter<T> {\n        // need to use ptr::read to unsafely move the buf out since it's\n        // not Copy, and Vec implements Drop (so we can't destructure it).\n        let buf = unsafe { ptr::read(&self.buf) };\n        let len = self.len;\n        mem::forget(self);\n\n        IntoIter {\n            start: buf.ptr.as_ptr(),\n            end: if buf.cap == 0 {\n                // can't offset off of a pointer unless it's part of an allocation\n                buf.ptr.as_ptr()\n            } else {\n                unsafe { buf.ptr.as_ptr().add(len) }\n            },\n            _buf: buf,\n        }\n    }\n}\n```\n\nMuch better.\n\n## [Drain](#drain-1)\n\nLet's move on to Drain. Drain is largely the same as IntoIter, except that instead of consuming the Vec, it borrows the Vec and leaves its allocation untouched. For now we'll only implement the \"basic\" full-range version.\n\n```rust\nuse std::marker::PhantomData;\n\nstruct Drain<'a, T: 'a> {\n    // Need to bound the lifetime here, so we do it with `&'a mut Vec<T>`\n    // because that's semantically what we contain. We're \"just\" calling\n    // `pop()` and `remove(0)`.\n    vec: PhantomData<&'a mut Vec<T>>,\n    start: *const T,\n    end: *const T,\n}\n\nimpl<'a, T> Iterator for Drain<'a, T> {\n    type Item = T;\n    fn next(&mut self) -> Option<T> {\n        if self.start == self.end {\n            None\n```\n\n\\-- wait, this is seeming familiar. Let's do some more compression. Both IntoIter and Drain have the exact same structure, let's just factor it out.\n\n```rust\nstruct RawValIter<T> {\n    start: *const T,\n    end: *const T,\n}\n\nimpl<T> RawValIter<T> {\n    // unsafe to construct because it has no associated lifetimes.\n    // This is necessary to store a RawValIter in the same struct as\n    // its actual allocation. OK since it's a private implementation\n    // detail.\n    unsafe fn new(slice: &[T]) -> Self {\n        RawValIter {\n            start: slice.as_ptr(),\n            end: if slice.len() == 0 {\n                // if `len = 0`, then this is not actually allocated memory.\n                // Need to avoid offsetting because that will give wrong\n                // information to LLVM via GEP.\n                slice.as_ptr()\n            } else {\n                slice.as_ptr().add(slice.len())\n            }\n        }\n    }\n}\n\n// Iterator and DoubleEndedIterator impls identical to IntoIter.\n```\n\nAnd IntoIter becomes the following:\n\n```rust\npub struct IntoIter<T> {\n    _buf: RawVec<T>, // we don't actually care about this. Just need it to live.\n    iter: RawValIter<T>,\n}\n\nimpl<T> Iterator for IntoIter<T> {\n    type Item = T;\n    fn next(&mut self) -> Option<T> { self.iter.next() }\n    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n}\n\nimpl<T> DoubleEndedIterator for IntoIter<T> {\n    fn next_back(&mut self) -> Option<T> { self.iter.next_back() }\n}\n\nimpl<T> Drop for IntoIter<T> {\n    fn drop(&mut self) {\n        for _ in &mut *self {}\n    }\n}\n\nimpl<T> IntoIterator for Vec<T> {\n    type Item = T;\n    type IntoIter = IntoIter<T>;\n    fn into_iter(self) -> IntoIter<T> {\n        unsafe {\n            let iter = RawValIter::new(&self);\n\n            let buf = ptr::read(&self.buf);\n            mem::forget(self);\n\n            IntoIter {\n                iter,\n                _buf: buf,\n            }\n        }\n    }\n}\n```\n\nNote that I've left a few quirks in this design to make upgrading Drain to work with arbitrary subranges a bit easier. In particular we _could_ have RawValIter drain itself on drop, but that won't work right for a more complex Drain. We also take a slice to simplify Drain initialization.\n\nAlright, now Drain is really easy:\n\n```rust\nuse std::marker::PhantomData;\n\npub struct Drain<'a, T: 'a> {\n    vec: PhantomData<&'a mut Vec<T>>,\n    iter: RawValIter<T>,\n}\n\nimpl<'a, T> Iterator for Drain<'a, T> {\n    type Item = T;\n    fn next(&mut self) -> Option<T> { self.iter.next() }\n    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n}\n\nimpl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n    fn next_back(&mut self) -> Option<T> { self.iter.next_back() }\n}\n\nimpl<'a, T> Drop for Drain<'a, T> {\n    fn drop(&mut self) {\n        for _ in &mut *self {}\n    }\n}\n\nimpl<T> Vec<T> {\n    pub fn drain(&mut self) -> Drain<T> {\n        let iter = unsafe { RawValIter::new(&self) };\n\n        // this is a mem::forget safety thing. If Drain is forgotten, we just\n        // leak the whole Vec's contents. Also we need to do this *eventually*\n        // anyway, so why not do it now?\n        self.len = 0;\n\n        Drain {\n            iter,\n            vec: PhantomData,\n        }\n    }\n}\n```\n\nFor more details on the `mem::forget` problem, see the [section on leaks](vec/../leaking.html).\n\n## [Handling Zero-Sized Types](#handling-zero-sized-types)\n\nIt's time. We're going to fight the specter that is zero-sized types. Safe Rust _never_ needs to care about this, but Vec is very intensive on raw pointers and raw allocations, which are exactly the two things that care about zero-sized types. We need to be careful of two things:\n\n-   The raw allocator API has undefined behavior if you pass in 0 for an allocation size.\n-   raw pointer offsets are no-ops for zero-sized types, which will break our C-style pointer iterator.\n\nThankfully we abstracted out pointer-iterators and allocating handling into `RawValIter` and `RawVec` respectively. How mysteriously convenient.\n\n## [Allocating Zero-Sized Types](#allocating-zero-sized-types)\n\nSo if the allocator API doesn't support zero-sized allocations, what on earth do we store as our allocation? `NonNull::dangling()` of course! Almost every operation with a ZST is a no-op since ZSTs have exactly one value, and therefore no state needs to be considered to store or load them. This actually extends to `ptr::read` and `ptr::write`: they won't actually look at the pointer at all. As such we never need to change the pointer.\n\nNote however that our previous reliance on running out of memory before overflow is no longer valid with zero-sized types. We must explicitly guard against capacity overflow for zero-sized types.\n\nDue to our current architecture, all this means is writing 3 guards, one in each method of `RawVec`.\n\n```rust\nimpl<T> RawVec<T> {\n    fn new() -> Self {\n        // This branch should be stripped at compile time.\n        let cap = if mem::size_of::<T>() == 0 { usize::MAX } else { 0 };\n\n        // `NonNull::dangling()` doubles as \"unallocated\" and \"zero-sized allocation\"\n        RawVec {\n            ptr: NonNull::dangling(),\n            cap,\n        }\n    }\n\n    fn grow(&mut self) {\n        // since we set the capacity to usize::MAX when T has size 0,\n        // getting to here necessarily means the Vec is overfull.\n        assert!(mem::size_of::<T>() != 0, \"capacity overflow\");\n\n        let (new_cap, new_layout) = if self.cap == 0 {\n            (1, Layout::array::<T>(1).unwrap())\n        } else {\n            // This can't overflow because we ensure self.cap <= isize::MAX.\n            let new_cap = 2 * self.cap;\n\n            // `Layout::array` checks that the number of bytes is <= usize::MAX,\n            // but this is redundant since old_layout.size() <= isize::MAX,\n            // so the `unwrap` should never fail.\n            let new_layout = Layout::array::<T>(new_cap).unwrap();\n            (new_cap, new_layout)\n        };\n\n        // Ensure that the new allocation doesn't exceed `isize::MAX` bytes.\n        assert!(new_layout.size() <= isize::MAX as usize, \"Allocation too large\");\n\n        let new_ptr = if self.cap == 0 {\n            unsafe { alloc::alloc(new_layout) }\n        } else {\n            let old_layout = Layout::array::<T>(self.cap).unwrap();\n            let old_ptr = self.ptr.as_ptr() as *mut u8;\n            unsafe { alloc::realloc(old_ptr, old_layout, new_layout.size()) }\n        };\n\n        // If allocation fails, `new_ptr` will be null, in which case we abort.\n        self.ptr = match NonNull::new(new_ptr as *mut T) {\n            Some(p) => p,\n            None => alloc::handle_alloc_error(new_layout),\n        };\n        self.cap = new_cap;\n    }\n}\n\nimpl<T> Drop for RawVec<T> {\n    fn drop(&mut self) {\n        let elem_size = mem::size_of::<T>();\n\n        if self.cap != 0 && elem_size != 0 {\n            unsafe {\n                alloc::dealloc(\n                    self.ptr.as_ptr() as *mut u8,\n                    Layout::array::<T>(self.cap).unwrap(),\n                );\n            }\n        }\n    }\n}\n```\n\nThat's it. We support pushing and popping zero-sized types now. Our iterators (that aren't provided by slice Deref) are still busted, though.\n\n## [Iterating Zero-Sized Types](#iterating-zero-sized-types)\n\nZero-sized offsets are no-ops. This means that our current design will always initialize `start` and `end` as the same value, and our iterators will yield nothing. The current solution to this is to cast the pointers to integers, increment, and then cast them back:\n\n```rust\nimpl<T> RawValIter<T> {\n    unsafe fn new(slice: &[T]) -> Self {\n        RawValIter {\n            start: slice.as_ptr(),\n            end: if mem::size_of::<T>() == 0 {\n                ((slice.as_ptr() as usize) + slice.len()) as *const _\n            } else if slice.len() == 0 {\n                slice.as_ptr()\n            } else {\n                slice.as_ptr().add(slice.len())\n            },\n        }\n    }\n}\n```\n\nNow we have a different bug. Instead of our iterators not running at all, our iterators now run _forever_. We need to do the same trick in our iterator impls. Also, our size\\_hint computation code will divide by 0 for ZSTs. Since we'll basically be treating the two pointers as if they point to bytes, we'll just map size 0 to divide by 1. Here's what `next` will be:\n\n```rust\nfn next(&mut self) -> Option<T> {\n    if self.start == self.end {\n        None\n    } else {\n        unsafe {\n            let result = ptr::read(self.start);\n            self.start = if mem::size_of::<T>() == 0 {\n                (self.start as usize + 1) as *const _\n            } else {\n                self.start.offset(1)\n            };\n            Some(result)\n        }\n    }\n}\n```\n\nDo you see the \"bug\"? No one else did! The original author only noticed the problem when linking to this page years later. This code is kind of dubious because abusing the iterator pointers to be _counters_ makes them unaligned! Our _one job_ when using ZSTs is to keep pointers aligned! _forehead slap_\n\nRaw pointers don't need to be aligned at all times, so the basic trick of using pointers as counters is _fine_, but they _should_ definitely be aligned when passed to `ptr::read`! This is _possibly_ needless pedantry because `ptr::read` is a noop for a ZST, but let's be a _little_ more responsible and read from `NonNull::dangling` on the ZST path.\n\n(Alternatively you could call `read_unaligned` on the ZST path. Either is fine, because either way we're making up a value from nothing and it all compiles to doing nothing.)\n\n```rust\nimpl<T> Iterator for RawValIter<T> {\n    type Item = T;\n    fn next(&mut self) -> Option<T> {\n        if self.start == self.end {\n            None\n        } else {\n            unsafe {\n                if mem::size_of::<T>() == 0 {\n                    self.start = (self.start as usize + 1) as *const _;\n                    Some(ptr::read(NonNull::<T>::dangling().as_ptr()))\n                } else {\n                    let old_ptr = self.start;\n                    self.start = self.start.offset(1);\n                    Some(ptr::read(old_ptr))\n                }\n            }\n        }\n    }\n\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        let elem_size = mem::size_of::<T>();\n        let len = (self.end as usize - self.start as usize)\n                  / if elem_size == 0 { 1 } else { elem_size };\n        (len, Some(len))\n    }\n}\n\nimpl<T> DoubleEndedIterator for RawValIter<T> {\n    fn next_back(&mut self) -> Option<T> {\n        if self.start == self.end {\n            None\n        } else {\n            unsafe {\n                if mem::size_of::<T>() == 0 {\n                    self.end = (self.end as usize - 1) as *const _;\n                    Some(ptr::read(NonNull::<T>::dangling().as_ptr()))\n                } else {\n                    self.end = self.end.offset(-1);\n                    Some(ptr::read(self.end))\n                }\n            }\n        }\n    }\n}\n```\n\nAnd that's it. Iteration works!\n\n## [The Final Code](#the-final-code)\n\n```rust\nuse std::alloc::{self, Layout};\nuse std::marker::PhantomData;\nuse std::mem;\nuse std::ops::{Deref, DerefMut};\nuse std::ptr::{self, NonNull};\n\nstruct RawVec<T> {\n    ptr: NonNull<T>,\n    cap: usize,\n}\n\nunsafe impl<T: Send> Send for RawVec<T> {}\nunsafe impl<T: Sync> Sync for RawVec<T> {}\n\nimpl<T> RawVec<T> {\n    fn new() -> Self {\n        // !0 is usize::MAX. This branch should be stripped at compile time.\n        let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n\n        // `NonNull::dangling()` doubles as \"unallocated\" and \"zero-sized allocation\"\n        RawVec {\n            ptr: NonNull::dangling(),\n            cap,\n        }\n    }\n\n    fn grow(&mut self) {\n        // since we set the capacity to usize::MAX when T has size 0,\n        // getting to here necessarily means the Vec is overfull.\n        assert!(mem::size_of::<T>() != 0, \"capacity overflow\");\n\n        let (new_cap, new_layout) = if self.cap == 0 {\n            (1, Layout::array::<T>(1).unwrap())\n        } else {\n            // This can't overflow because we ensure self.cap <= isize::MAX.\n            let new_cap = 2 * self.cap;\n\n            // `Layout::array` checks that the number of bytes is <= usize::MAX,\n            // but this is redundant since old_layout.size() <= isize::MAX,\n            // so the `unwrap` should never fail.\n            let new_layout = Layout::array::<T>(new_cap).unwrap();\n            (new_cap, new_layout)\n        };\n\n        // Ensure that the new allocation doesn't exceed `isize::MAX` bytes.\n        assert!(\n            new_layout.size() <= isize::MAX as usize,\n            \"Allocation too large\"\n        );\n\n        let new_ptr = if self.cap == 0 {\n            unsafe { alloc::alloc(new_layout) }\n        } else {\n            let old_layout = Layout::array::<T>(self.cap).unwrap();\n            let old_ptr = self.ptr.as_ptr() as *mut u8;\n            unsafe { alloc::realloc(old_ptr, old_layout, new_layout.size()) }\n        };\n\n        // If allocation fails, `new_ptr` will be null, in which case we abort.\n        self.ptr = match NonNull::new(new_ptr as *mut T) {\n            Some(p) => p,\n            None => alloc::handle_alloc_error(new_layout),\n        };\n        self.cap = new_cap;\n    }\n}\n\nimpl<T> Drop for RawVec<T> {\n    fn drop(&mut self) {\n        let elem_size = mem::size_of::<T>();\n\n        if self.cap != 0 && elem_size != 0 {\n            unsafe {\n                alloc::dealloc(\n                    self.ptr.as_ptr() as *mut u8,\n                    Layout::array::<T>(self.cap).unwrap(),\n                );\n            }\n        }\n    }\n}\n\npub struct Vec<T> {\n    buf: RawVec<T>,\n    len: usize,\n}\n\nimpl<T> Vec<T> {\n    fn ptr(&self) -> *mut T {\n        self.buf.ptr.as_ptr()\n    }\n\n    fn cap(&self) -> usize {\n        self.buf.cap\n    }\n\n    pub fn new() -> Self {\n        Vec {\n            buf: RawVec::new(),\n            len: 0,\n        }\n    }\n    pub fn push(&mut self, elem: T) {\n        if self.len == self.cap() {\n            self.buf.grow();\n        }\n\n        unsafe {\n            ptr::write(self.ptr().add(self.len), elem);\n        }\n\n        // Can't overflow, we'll OOM first.\n        self.len += 1;\n    }\n\n    pub fn pop(&mut self) -> Option<T> {\n        if self.len == 0 {\n            None\n        } else {\n            self.len -= 1;\n            unsafe { Some(ptr::read(self.ptr().add(self.len))) }\n        }\n    }\n\n    pub fn insert(&mut self, index: usize, elem: T) {\n        assert!(index <= self.len, \"index out of bounds\");\n        if self.len == self.cap() {\n            self.buf.grow();\n        }\n\n        unsafe {\n            ptr::copy(\n                self.ptr().add(index),\n                self.ptr().add(index + 1),\n                self.len - index,\n            );\n            ptr::write(self.ptr().add(index), elem);\n        }\n\n        self.len += 1;\n    }\n\n    pub fn remove(&mut self, index: usize) -> T {\n        assert!(index < self.len, \"index out of bounds\");\n\n        self.len -= 1;\n\n        unsafe {\n            let result = ptr::read(self.ptr().add(index));\n            ptr::copy(\n                self.ptr().add(index + 1),\n                self.ptr().add(index),\n                self.len - index,\n            );\n            result\n        }\n    }\n\n    pub fn drain(&mut self) -> Drain<T> {\n        let iter = unsafe { RawValIter::new(&self) };\n\n        // this is a mem::forget safety thing. If Drain is forgotten, we just\n        // leak the whole Vec's contents. Also we need to do this *eventually*\n        // anyway, so why not do it now?\n        self.len = 0;\n\n        Drain {\n            iter,\n            vec: PhantomData,\n        }\n    }\n}\n\nimpl<T> Drop for Vec<T> {\n    fn drop(&mut self) {\n        while let Some(_) = self.pop() {}\n        // deallocation is handled by RawVec\n    }\n}\n\nimpl<T> Deref for Vec<T> {\n    type Target = [T];\n    fn deref(&self) -> &[T] {\n        unsafe { std::slice::from_raw_parts(self.ptr(), self.len) }\n    }\n}\n\nimpl<T> DerefMut for Vec<T> {\n    fn deref_mut(&mut self) -> &mut [T] {\n        unsafe { std::slice::from_raw_parts_mut(self.ptr(), self.len) }\n    }\n}\n\nimpl<T> IntoIterator for Vec<T> {\n    type Item = T;\n    type IntoIter = IntoIter<T>;\n    fn into_iter(self) -> IntoIter<T> {\n        let (iter, buf) = unsafe {\n            (RawValIter::new(&self), ptr::read(&self.buf))\n        };\n\n        mem::forget(self);\n\n        IntoIter {\n            iter,\n            _buf: buf,\n        }\n    }\n}\n\nstruct RawValIter<T> {\n    start: *const T,\n    end: *const T,\n}\n\nimpl<T> RawValIter<T> {\n    unsafe fn new(slice: &[T]) -> Self {\n        RawValIter {\n            start: slice.as_ptr(),\n            end: if mem::size_of::<T>() == 0 {\n                ((slice.as_ptr() as usize) + slice.len()) as *const _\n            } else if slice.len() == 0 {\n                slice.as_ptr()\n            } else {\n                slice.as_ptr().add(slice.len())\n            },\n        }\n    }\n}\n\nimpl<T> Iterator for RawValIter<T> {\n    type Item = T;\n    fn next(&mut self) -> Option<T> {\n        if self.start == self.end {\n            None\n        } else {\n            unsafe {\n                if mem::size_of::<T>() == 0 {\n                    self.start = (self.start as usize + 1) as *const _;\n                    Some(ptr::read(NonNull::<T>::dangling().as_ptr()))\n                } else {\n                    let old_ptr = self.start;\n                    self.start = self.start.offset(1);\n                    Some(ptr::read(old_ptr))\n                }\n            }\n        }\n    }\n\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        let elem_size = mem::size_of::<T>();\n        let len = (self.end as usize - self.start as usize)\n                  / if elem_size == 0 { 1 } else { elem_size };\n        (len, Some(len))\n    }\n}\n\nimpl<T> DoubleEndedIterator for RawValIter<T> {\n    fn next_back(&mut self) -> Option<T> {\n        if self.start == self.end {\n            None\n        } else {\n            unsafe {\n                if mem::size_of::<T>() == 0 {\n                    self.end = (self.end as usize - 1) as *const _;\n                    Some(ptr::read(NonNull::<T>::dangling().as_ptr()))\n                } else {\n                    self.end = self.end.offset(-1);\n                    Some(ptr::read(self.end))\n                }\n            }\n        }\n    }\n}\n\npub struct IntoIter<T> {\n    _buf: RawVec<T>, // we don't actually care about this. Just need it to live.\n    iter: RawValIter<T>,\n}\n\nimpl<T> Iterator for IntoIter<T> {\n    type Item = T;\n    fn next(&mut self) -> Option<T> {\n        self.iter.next()\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        self.iter.size_hint()\n    }\n}\n\nimpl<T> DoubleEndedIterator for IntoIter<T> {\n    fn next_back(&mut self) -> Option<T> {\n        self.iter.next_back()\n    }\n}\n\nimpl<T> Drop for IntoIter<T> {\n    fn drop(&mut self) {\n        for _ in &mut *self {}\n    }\n}\n\npub struct Drain<'a, T: 'a> {\n    vec: PhantomData<&'a mut Vec<T>>,\n    iter: RawValIter<T>,\n}\n\nimpl<'a, T> Iterator for Drain<'a, T> {\n    type Item = T;\n    fn next(&mut self) -> Option<T> {\n        self.iter.next()\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        self.iter.size_hint()\n    }\n}\n\nimpl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n    fn next_back(&mut self) -> Option<T> {\n        self.iter.next_back()\n    }\n}\n\nimpl<'a, T> Drop for Drain<'a, T> {\n    fn drop(&mut self) {\n        // pre-drain the iter\n        for _ in &mut *self {}\n    }\n}\n\nfn main() {\n    tests::create_push_pop();\n    tests::iter_test();\n    tests::test_drain();\n    tests::test_zst();\n    println!(\"All tests finished OK\");\n}\n\nmod tests {\n    use super::*;\n\n    pub fn create_push_pop() {\n        let mut v = Vec::new();\n        v.push(1);\n        assert_eq!(1, v.len());\n        assert_eq!(1, v[0]);\n        for i in v.iter_mut() {\n            *i += 1;\n        }\n        v.insert(0, 5);\n        let x = v.pop();\n        assert_eq!(Some(2), x);\n        assert_eq!(1, v.len());\n        v.push(10);\n        let x = v.remove(0);\n        assert_eq!(5, x);\n        assert_eq!(1, v.len());\n    }\n\n    pub fn iter_test() {\n        let mut v = Vec::new();\n        for i in 0..10 {\n            v.push(Box::new(i))\n        }\n        let mut iter = v.into_iter();\n        let first = iter.next().unwrap();\n        let last = iter.next_back().unwrap();\n        drop(iter);\n        assert_eq!(0, *first);\n        assert_eq!(9, *last);\n    }\n\n    pub fn test_drain() {\n        let mut v = Vec::new();\n        for i in 0..10 {\n            v.push(Box::new(i))\n        }\n        {\n            let mut drain = v.drain();\n            let first = drain.next().unwrap();\n            let last = drain.next_back().unwrap();\n            assert_eq!(0, *first);\n            assert_eq!(9, *last);\n        }\n        assert_eq!(0, v.len());\n        v.push(Box::new(1));\n        assert_eq!(1, *v.pop().unwrap());\n    }\n\n    pub fn test_zst() {\n        let mut v = Vec::new();\n        for _i in 0..10 {\n            v.push(())\n        }\n\n        let mut count = 0;\n\n        for _ in v.into_iter() {\n            count += 1\n        }\n\n        assert_eq!(10, count);\n    }\n}\n```\n\n## [Implementing Arc and Mutex](#implementing-arc-and-mutex)\n\nKnowing the theory is all fine and good, but the _best_ way to understand something is to use it. To better understand atomics and interior mutability, we'll be implementing versions of the standard library's `Arc` and `Mutex` types.\n\nTODO: Write `Mutex` chapters.\n\n## [Implementing Arc](#implementing-arc)\n\nIn this section, we'll be implementing a simpler version of `std::sync::Arc`. Similarly to [the implementation of `Vec` we made earlier](arc-mutex/../vec/vec.html), we won't be taking advantage of as many optimizations, intrinsics, or unstable code as the standard library may.\n\nThis implementation is loosely based on the standard library's implementation (technically taken from `alloc::sync` in 1.49, as that's where it's actually implemented), but it will not support weak references at the moment as they make the implementation slightly more complex.\n\nPlease note that this section is very work-in-progress at the moment.\n\n## [Layout](#layout-1)\n\nLet's start by making the layout for our implementation of `Arc`.\n\nAn `Arc<T>` provides thread-safe shared ownership of a value of type `T`, allocated in the heap. Sharing implies immutability in Rust, so we don't need to design anything that manages access to that value, right? Although interior mutability types like Mutex allow Arc's users to create shared mutability, Arc itself doesn't need to concern itself with these issues.\n\nHowever there _is_ one place where Arc needs to concern itself with mutation: destruction. When all the owners of the Arc go away, we need to be able to `drop` its contents and free its allocation. So we need a way for an owner to know if it's the _last_ owner, and the simplest way to do that is with a count of the owners -- Reference Counting.\n\nUnfortunately, this reference count is inherently shared mutable state, so Arc _does_ need to think about synchronization. We _could_ use a Mutex for this, but that's overkill. Instead, we'll use atomics. And since everyone already needs a pointer to the T's allocation, we might as well put the reference count in that same allocation.\n\nNaively, it would look something like this:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::sync::atomic;\n\npub struct Arc<T> {\n    ptr: *mut ArcInner<T>,\n}\n\npub struct ArcInner<T> {\n    rc: atomic::AtomicUsize,\n    data: T,\n}\n}\n```\n\nThis would compile, however it would be incorrect. First of all, the compiler will give us too strict variance. For example, an `Arc<&'static str>` couldn't be used where an `Arc<&'a str>` was expected. More importantly, it will give incorrect ownership information to the drop checker, as it will assume we don't own any values of type `T`. As this is a structure providing shared ownership of a value, at some point there will be an instance of this structure that entirely owns its data. See [the chapter on ownership and lifetimes](arc-mutex/../ownership.html) for all the details on variance and drop check.\n\nTo fix the first problem, we can use `NonNull<T>`. Note that `NonNull<T>` is a wrapper around a raw pointer that declares that:\n\n-   We are covariant over `T`\n-   Our pointer is never null\n\nTo fix the second problem, we can include a `PhantomData` marker containing an `ArcInner<T>`. This will tell the drop checker that we have some notion of ownership of a value of `ArcInner<T>` (which itself contains some `T`).\n\nWith these changes we get our final structure:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::marker::PhantomData;\nuse std::ptr::NonNull;\nuse std::sync::atomic::AtomicUsize;\n\npub struct Arc<T> {\n    ptr: NonNull<ArcInner<T>>,\n    phantom: PhantomData<ArcInner<T>>,\n}\n\npub struct ArcInner<T> {\n    rc: AtomicUsize,\n    data: T,\n}\n}\n```\n\n## [Base Code](#base-code)\n\nNow that we've decided the layout for our implementation of `Arc`, let's create some basic code.\n\n## [Constructing the Arc](#constructing-the-arc)\n\nWe'll first need a way to construct an `Arc<T>`.\n\nThis is pretty simple, as we just need to box the `ArcInner<T>` and get a `NonNull<T>` pointer to it.\n\n```rust\nimpl<T> Arc<T> {\n    pub fn new(data: T) -> Arc<T> {\n        // We start the reference count at 1, as that first reference is the\n        // current pointer.\n        let boxed = Box::new(ArcInner {\n            rc: AtomicUsize::new(1),\n            data,\n        });\n        Arc {\n            // It is okay to call `.unwrap()` here as we get a pointer from\n            // `Box::into_raw` which is guaranteed to not be null.\n            ptr: NonNull::new(Box::into_raw(boxed)).unwrap(),\n            phantom: PhantomData,\n        }\n    }\n}\n```\n\n## [Send and Sync](#send-and-sync-1)\n\nSince we're building a concurrency primitive, we'll need to be able to send it across threads. Thus, we can implement the `Send` and `Sync` marker traits. For more information on these, see [the section on `Send` and `Sync`](arc-mutex/../send-and-sync.html).\n\nThis is okay because:\n\n-   You can only get a mutable reference to the value inside an `Arc` if and only if it is the only `Arc` referencing that data (which only happens in `Drop`)\n-   We use atomics for the shared mutable reference counting\n\n```rust\nunsafe impl<T: Sync + Send> Send for Arc<T> {}\nunsafe impl<T: Sync + Send> Sync for Arc<T> {}\n```\n\nWe need to have the bound `T: Sync + Send` because if we did not provide those bounds, it would be possible to share values that are thread-unsafe across a thread boundary via an `Arc`, which could possibly cause data races or unsoundness.\n\nFor example, if those bounds were not present, `Arc<Rc<u32>>` would be `Sync` or `Send`, meaning that you could clone the `Rc` out of the `Arc` to send it across a thread (without creating an entirely new `Rc`), which would create data races as `Rc` is not thread-safe.\n\n## [Getting the `ArcInner`](#getting-the-arcinner)\n\nTo dereference the `NonNull<T>` pointer into a `&T`, we can call `NonNull::as_ref`. This is unsafe, unlike the typical `as_ref` function, so we must call it like this:\n\n```rust\nunsafe { self.ptr.as_ref() }\n```\n\nWe'll be using this snippet a few times in this code (usually with an associated `let` binding).\n\nThis unsafety is okay because while this `Arc` is alive, we're guaranteed that the inner pointer is valid.\n\n## [Deref](#deref-1)\n\nAlright. Now we can make `Arc`s (and soon will be able to clone and destroy them correctly), but how do we get to the data inside?\n\nWhat we need now is an implementation of `Deref`.\n\nWe'll need to import the trait:\n\n```rust\nuse std::ops::Deref;\n```\n\nAnd here's the implementation:\n\n```rust\nimpl<T> Deref for Arc<T> {\n    type Target = T;\n\n    fn deref(&self) -> &T {\n        let inner = unsafe { self.ptr.as_ref() };\n        &inner.data\n    }\n}\n```\n\nPretty simple, eh? This simply dereferences the `NonNull` pointer to the `ArcInner<T>`, then gets a reference to the data inside.\n\n## [Code](#code)\n\nHere's all the code from this section:\n\n```rust\nuse std::ops::Deref;\n\nimpl<T> Arc<T> {\n    pub fn new(data: T) -> Arc<T> {\n        // We start the reference count at 1, as that first reference is the\n        // current pointer.\n        let boxed = Box::new(ArcInner {\n            rc: AtomicUsize::new(1),\n            data,\n        });\n        Arc {\n            // It is okay to call `.unwrap()` here as we get a pointer from\n            // `Box::into_raw` which is guaranteed to not be null.\n            ptr: NonNull::new(Box::into_raw(boxed)).unwrap(),\n            phantom: PhantomData,\n        }\n    }\n}\n\nunsafe impl<T: Sync + Send> Send for Arc<T> {}\nunsafe impl<T: Sync + Send> Sync for Arc<T> {}\n\n\nimpl<T> Deref for Arc<T> {\n    type Target = T;\n\n    fn deref(&self) -> &T {\n        let inner = unsafe { self.ptr.as_ref() };\n        &inner.data\n    }\n}\n```\n\n## [Cloning](#cloning)\n\nNow that we've got some basic code set up, we'll need a way to clone the `Arc`.\n\nBasically, we need to:\n\n1.  Increment the atomic reference count\n2.  Construct a new instance of the `Arc` from the inner pointer\n\nFirst, we need to get access to the `ArcInner`:\n\n```rust\nlet inner = unsafe { self.ptr.as_ref() };\n```\n\nWe can update the atomic reference count as follows:\n\n```rust\nlet old_rc = inner.rc.fetch_add(1, Ordering::???);\n```\n\nBut what ordering should we use here? We don't really have any code that will need atomic synchronization when cloning, as we do not modify the internal value while cloning. Thus, we can use a Relaxed ordering here, which implies no happens-before relationship but is atomic. When `Drop`ping the Arc, however, we'll need to atomically synchronize when decrementing the reference count. This is described more in [the section on the `Drop` implementation for `Arc`](arc-mutex/arc-drop.html). For more information on atomic relationships and Relaxed ordering, see [the section on atomics](arc-mutex/../atomics.html).\n\nThus, the code becomes this:\n\n```rust\nlet old_rc = inner.rc.fetch_add(1, Ordering::Relaxed);\n```\n\nWe'll need to add another import to use `Ordering`:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::sync::atomic::Ordering;\n}\n```\n\nHowever, we have one problem with this implementation right now. What if someone decides to `mem::forget` a bunch of Arcs? The code we have written so far (and will write) assumes that the reference count accurately portrays how many Arcs are in memory, but with `mem::forget` this is false. Thus, when more and more Arcs are cloned from this one without them being `Drop`ped and the reference count being decremented, we can overflow! This will cause use-after-free which is **INCREDIBLY BAD!**\n\nTo handle this, we need to check that the reference count does not go over some arbitrary value (below `usize::MAX`, as we're storing the reference count as an `AtomicUsize`), and do _something_.\n\nThe standard library's implementation decides to just abort the program (as it is an incredibly unlikely case in normal code and if it happens, the program is probably incredibly degenerate) if the reference count reaches `isize::MAX` (about half of `usize::MAX`) on any thread, on the assumption that there are probably not about 2 billion threads (or about **9 quintillion** on some 64-bit machines) incrementing the reference count at once. This is what we'll do.\n\nIt's pretty simple to implement this behavior:\n\n```rust\nif old_rc >= isize::MAX as usize {\n    std::process::abort();\n}\n```\n\nThen, we need to return a new instance of the `Arc`:\n\n```rust\nSelf {\n    ptr: self.ptr,\n    phantom: PhantomData\n}\n```\n\nNow, let's wrap this all up inside the `Clone` implementation:\n\n```rust\nuse std::sync::atomic::Ordering;\n\nimpl<T> Clone for Arc<T> {\n    fn clone(&self) -> Arc<T> {\n        let inner = unsafe { self.ptr.as_ref() };\n        // Using a relaxed ordering is alright here as we don't need any atomic\n        // synchronization here as we're not modifying or accessing the inner\n        // data.\n        let old_rc = inner.rc.fetch_add(1, Ordering::Relaxed);\n\n        if old_rc >= isize::MAX as usize {\n            std::process::abort();\n        }\n\n        Self {\n            ptr: self.ptr,\n            phantom: PhantomData,\n        }\n    }\n}\n```\n\n## [Dropping](#dropping)\n\nWe now need a way to decrease the reference count and drop the data once it is low enough, otherwise the data will live forever on the heap.\n\nTo do this, we can implement `Drop`.\n\nBasically, we need to:\n\n1.  Decrement the reference count\n2.  If there is only one reference remaining to the data, then:\n3.  Atomically fence the data to prevent reordering of the use and deletion of the data\n4.  Drop the inner data\n\nFirst, we'll need to get access to the `ArcInner`:\n\n```rust\nlet inner = unsafe { self.ptr.as_ref() };\n```\n\nNow, we need to decrement the reference count. To streamline our code, we can also return if the returned value from `fetch_sub` (the value of the reference count before decrementing it) is not equal to `1` (which happens when we are not the last reference to the data).\n\n```rust\nif inner.rc.fetch_sub(1, Ordering::Release) != 1 {\n    return;\n}\n```\n\nWe then need to create an atomic fence to prevent reordering of the use of the data and deletion of the data. As described in [the standard library's implementation of `Arc`](https://github.com/rust-lang/rust/blob/e1884a8e3c3e813aada8254edfa120e85bf5ffca/library/alloc/src/sync.rs#L1440-L1467):\n\n> This fence is needed to prevent reordering of use of the data and deletion of the data. Because it is marked `Release`, the decreasing of the reference count synchronizes with this `Acquire` fence. This means that use of the data happens before decreasing the reference count, which happens before this fence, which happens before the deletion of the data.\n> \n> As explained in the [Boost documentation](https://www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html),\n> \n> > It is important to enforce any possible access to the object in one thread (through an existing reference) to _happen before_ deleting the object in a different thread. This is achieved by a \"release\" operation after dropping a reference (any access to the object through this reference must obviously happened before), and an \"acquire\" operation before deleting the object.\n> \n> In particular, while the contents of an Arc are usually immutable, it's possible to have interior writes to something like a Mutex. Since a Mutex is not acquired when it is deleted, we can't rely on its synchronization logic to make writes in thread A visible to a destructor running in thread B.\n> \n> Also note that the Acquire fence here could probably be replaced with an Acquire load, which could improve performance in highly-contended situations. See [2](https://github.com/rust-lang/rust/pull/41714).\n\nTo do this, we do the following:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::sync::atomic::Ordering;\nuse std::sync::atomic;\natomic::fence(Ordering::Acquire);\n}\n```\n\nFinally, we can drop the data itself. We use `Box::from_raw` to drop the boxed `ArcInner<T>` and its data. This takes a `*mut T` and not a `NonNull<T>`, so we must convert using `NonNull::as_ptr`.\n\n```rust\nunsafe { Box::from_raw(self.ptr.as_ptr()); }\n```\n\nThis is safe as we know we have the last pointer to the `ArcInner` and that its pointer is valid.\n\nNow, let's wrap this all up inside the `Drop` implementation:\n\n```rust\nimpl<T> Drop for Arc<T> {\n    fn drop(&mut self) {\n        let inner = unsafe { self.ptr.as_ref() };\n        if inner.rc.fetch_sub(1, Ordering::Release) != 1 {\n            return;\n        }\n        // This fence is needed to prevent reordering of the use and deletion\n        // of the data.\n        atomic::fence(Ordering::Acquire);\n        // This is safe as we know we have the last pointer to the `ArcInner`\n        // and that its pointer is valid.\n        unsafe { Box::from_raw(self.ptr.as_ptr()); }\n    }\n}\n```\n\n## [Final Code](#final-code)\n\nHere's the final code, with some added comments and re-ordered imports:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::marker::PhantomData;\nuse std::ops::Deref;\nuse std::ptr::NonNull;\nuse std::sync::atomic::{self, AtomicUsize, Ordering};\n\npub struct Arc<T> {\n    ptr: NonNull<ArcInner<T>>,\n    phantom: PhantomData<ArcInner<T>>,\n}\n\npub struct ArcInner<T> {\n    rc: AtomicUsize,\n    data: T,\n}\n\nimpl<T> Arc<T> {\n    pub fn new(data: T) -> Arc<T> {\n        // We start the reference count at 1, as that first reference is the\n        // current pointer.\n        let boxed = Box::new(ArcInner {\n            rc: AtomicUsize::new(1),\n            data,\n        });\n        Arc {\n            // It is okay to call `.unwrap()` here as we get a pointer from\n            // `Box::into_raw` which is guaranteed to not be null.\n            ptr: NonNull::new(Box::into_raw(boxed)).unwrap(),\n            phantom: PhantomData,\n        }\n    }\n}\n\nunsafe impl<T: Sync + Send> Send for Arc<T> {}\nunsafe impl<T: Sync + Send> Sync for Arc<T> {}\n\nimpl<T> Deref for Arc<T> {\n    type Target = T;\n\n    fn deref(&self) -> &T {\n        let inner = unsafe { self.ptr.as_ref() };\n        &inner.data\n    }\n}\n\nimpl<T> Clone for Arc<T> {\n    fn clone(&self) -> Arc<T> {\n        let inner = unsafe { self.ptr.as_ref() };\n        // Using a relaxed ordering is alright here as we don't need any atomic\n        // synchronization here as we're not modifying or accessing the inner\n        // data.\n        let old_rc = inner.rc.fetch_add(1, Ordering::Relaxed);\n\n        if old_rc >= isize::MAX as usize {\n            std::process::abort();\n        }\n\n        Self {\n            ptr: self.ptr,\n            phantom: PhantomData,\n        }\n    }\n}\n\nimpl<T> Drop for Arc<T> {\n    fn drop(&mut self) {\n        let inner = unsafe { self.ptr.as_ref() };\n        if inner.rc.fetch_sub(1, Ordering::Release) != 1 {\n            return;\n        }\n        // This fence is needed to prevent reordering of the use and deletion\n        // of the data.\n        atomic::fence(Ordering::Acquire);\n        // This is safe as we know we have the last pointer to the `ArcInner`\n        // and that its pointer is valid.\n        unsafe { Box::from_raw(self.ptr.as_ptr()); }\n    }\n}\n}\n```\n\n## [Foreign Function Interface](#foreign-function-interface)\n\n## [Introduction](#introduction)\n\nThis guide will use the [snappy](https://github.com/google/snappy) compression/decompression library as an introduction to writing bindings for foreign code. Rust is currently unable to call directly into a C++ library, but snappy includes a C interface (documented in [`snappy-c.h`](https://github.com/google/snappy/blob/master/snappy-c.h)).\n\n## [A note about libc](#a-note-about-libc)\n\nMany of these examples use [the `libc` crate](https://crates.io/crates/libc), which provides various type definitions for C types, among other things. If you’re trying these examples yourself, you’ll need to add `libc` to your `Cargo.toml`:\n\n```toml\n[dependencies]\nlibc = \"0.2.0\"\n\n```\n\n## [Calling foreign functions](#calling-foreign-functions)\n\nThe following is a minimal example of calling a foreign function which will compile if snappy is installed:\n\n```rust\nuse libc::size_t;\n\n#[link(name = \"snappy\")]\nextern {\n    fn snappy_max_compressed_length(source_length: size_t) -> size_t;\n}\n\nfn main() {\n    let x = unsafe { snappy_max_compressed_length(100) };\n    println!(\"max compressed length of a 100 byte buffer: {}\", x);\n}\n```\n\nThe `extern` block is a list of function signatures in a foreign library, in this case with the platform's C ABI. The `#[link(...)]` attribute is used to instruct the linker to link against the snappy library so the symbols are resolved.\n\nForeign functions are assumed to be unsafe so calls to them need to be wrapped with `unsafe {}` as a promise to the compiler that everything contained within truly is safe. C libraries often expose interfaces that aren't thread-safe, and almost any function that takes a pointer argument isn't valid for all possible inputs since the pointer could be dangling, and raw pointers fall outside of Rust's safe memory model.\n\nWhen declaring the argument types to a foreign function, the Rust compiler cannot check if the declaration is correct, so specifying it correctly is part of keeping the binding correct at runtime.\n\nThe `extern` block can be extended to cover the entire snappy API:\n\n```rust\nuse libc::{c_int, size_t};\n\n#[link(name = \"snappy\")]\nextern {\n    fn snappy_compress(input: *const u8,\n                       input_length: size_t,\n                       compressed: *mut u8,\n                       compressed_length: *mut size_t) -> c_int;\n    fn snappy_uncompress(compressed: *const u8,\n                         compressed_length: size_t,\n                         uncompressed: *mut u8,\n                         uncompressed_length: *mut size_t) -> c_int;\n    fn snappy_max_compressed_length(source_length: size_t) -> size_t;\n    fn snappy_uncompressed_length(compressed: *const u8,\n                                  compressed_length: size_t,\n                                  result: *mut size_t) -> c_int;\n    fn snappy_validate_compressed_buffer(compressed: *const u8,\n                                         compressed_length: size_t) -> c_int;\n}\nfn main() {}\n```\n\n## [Creating a safe interface](#creating-a-safe-interface)\n\nThe raw C API needs to be wrapped to provide memory safety and make use of higher-level concepts like vectors. A library can choose to expose only the safe, high-level interface and hide the unsafe internal details.\n\nWrapping the functions which expect buffers involves using the `slice::raw` module to manipulate Rust vectors as pointers to memory. Rust's vectors are guaranteed to be a contiguous block of memory. The length is the number of elements currently contained, and the capacity is the total size in elements of the allocated memory. The length is less than or equal to the capacity.\n\n```rust\nuse libc::{c_int, size_t};\nunsafe fn snappy_validate_compressed_buffer(_: *const u8, _: size_t) -> c_int { 0 }\nfn main() {}\npub fn validate_compressed_buffer(src: &[u8]) -> bool {\n    unsafe {\n        snappy_validate_compressed_buffer(src.as_ptr(), src.len() as size_t) == 0\n    }\n}\n```\n\nThe `validate_compressed_buffer` wrapper above makes use of an `unsafe` block, but it makes the guarantee that calling it is safe for all inputs by leaving off `unsafe` from the function signature.\n\nThe `snappy_compress` and `snappy_uncompress` functions are more complex, since a buffer has to be allocated to hold the output too.\n\nThe `snappy_max_compressed_length` function can be used to allocate a vector with the maximum required capacity to hold the compressed output. The vector can then be passed to the `snappy_compress` function as an output parameter. An output parameter is also passed to retrieve the true length after compression for setting the length.\n\n```rust\nuse libc::{size_t, c_int};\nunsafe fn snappy_compress(a: *const u8, b: size_t, c: *mut u8,\n                          d: *mut size_t) -> c_int { 0 }\nunsafe fn snappy_max_compressed_length(a: size_t) -> size_t { a }\nfn main() {}\npub fn compress(src: &[u8]) -> Vec<u8> {\n    unsafe {\n        let srclen = src.len() as size_t;\n        let psrc = src.as_ptr();\n\n        let mut dstlen = snappy_max_compressed_length(srclen);\n        let mut dst = Vec::with_capacity(dstlen as usize);\n        let pdst = dst.as_mut_ptr();\n\n        snappy_compress(psrc, srclen, pdst, &mut dstlen);\n        dst.set_len(dstlen as usize);\n        dst\n    }\n}\n```\n\nDecompression is similar, because snappy stores the uncompressed size as part of the compression format and `snappy_uncompressed_length` will retrieve the exact buffer size required.\n\n```rust\nuse libc::{size_t, c_int};\nunsafe fn snappy_uncompress(compressed: *const u8,\n                            compressed_length: size_t,\n                            uncompressed: *mut u8,\n                            uncompressed_length: *mut size_t) -> c_int { 0 }\nunsafe fn snappy_uncompressed_length(compressed: *const u8,\n                                     compressed_length: size_t,\n                                     result: *mut size_t) -> c_int { 0 }\nfn main() {}\npub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {\n    unsafe {\n        let srclen = src.len() as size_t;\n        let psrc = src.as_ptr();\n\n        let mut dstlen: size_t = 0;\n        snappy_uncompressed_length(psrc, srclen, &mut dstlen);\n\n        let mut dst = Vec::with_capacity(dstlen as usize);\n        let pdst = dst.as_mut_ptr();\n\n        if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 {\n            dst.set_len(dstlen as usize);\n            Some(dst)\n        } else {\n            None // SNAPPY_INVALID_INPUT\n        }\n    }\n}\n```\n\nThen, we can add some tests to show how to use them.\n\n```rust\nuse libc::{c_int, size_t};\nunsafe fn snappy_compress(input: *const u8,\n                          input_length: size_t,\n                          compressed: *mut u8,\n                          compressed_length: *mut size_t)\n                          -> c_int { 0 }\nunsafe fn snappy_uncompress(compressed: *const u8,\n                            compressed_length: size_t,\n                            uncompressed: *mut u8,\n                            uncompressed_length: *mut size_t)\n                            -> c_int { 0 }\nunsafe fn snappy_max_compressed_length(source_length: size_t) -> size_t { 0 }\nunsafe fn snappy_uncompressed_length(compressed: *const u8,\n                                     compressed_length: size_t,\n                                     result: *mut size_t)\n                                     -> c_int { 0 }\nunsafe fn snappy_validate_compressed_buffer(compressed: *const u8,\n                                            compressed_length: size_t)\n                                            -> c_int { 0 }\nfn main() { }\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn valid() {\n        let d = vec![0xde, 0xad, 0xd0, 0x0d];\n        let c: &[u8] = &compress(&d);\n        assert!(validate_compressed_buffer(c));\n        assert!(uncompress(c) == Some(d));\n    }\n\n    #[test]\n    fn invalid() {\n        let d = vec![0, 0, 0, 0];\n        assert!(!validate_compressed_buffer(&d));\n        assert!(uncompress(&d).is_none());\n    }\n\n    #[test]\n    fn empty() {\n        let d = vec![];\n        assert!(!validate_compressed_buffer(&d));\n        assert!(uncompress(&d).is_none());\n        let c = compress(&d);\n        assert!(validate_compressed_buffer(&c));\n        assert!(uncompress(&c) == Some(d));\n    }\n}\n```\n\n## [Destructors](#destructors-1)\n\nForeign libraries often hand off ownership of resources to the calling code. When this occurs, we must use Rust's destructors to provide safety and guarantee the release of these resources (especially in the case of panic).\n\nFor more about destructors, see the [Drop trait](../std/ops/trait.Drop.html).\n\n## [Calling Rust code from C](#calling-rust-code-from-c)\n\nYou may wish to compile Rust code in a way so that it can be called from C. This is fairly easy, but requires a few things.\n\n### [Rust side](#rust-side)\n\nFirst, we assume you have a lib crate named as `rust_from_c`. `lib.rs` should have Rust code as following:\n\n```rust\n#[no_mangle]\npub extern \"C\" fn hello_from_rust() {\n    println!(\"Hello from Rust!\");\n}\nfn main() {}\n```\n\nThe `extern \"C\"` makes this function adhere to the C calling convention, as discussed below in \"[Foreign Calling Conventions](about:blank/ffi.html#foreign-calling-conventions)\". The `no_mangle` attribute turns off Rust's name mangling, so that it has a well defined symbol to link to.\n\nThen, to compile Rust code as a shared library that can be called from C, add the following to your `Cargo.toml`:\n\n```toml\n[lib]\ncrate-type = [\"cdylib\"]\n\n```\n\n(NOTE: We could also use the `staticlib` crate type but it needs to tweak some linking flags.)\n\nRun `cargo build` and you're ready to go on the Rust side.\n\n### [C side](#c-side)\n\nWe'll create a C file to call the `hello_from_rust` function and compile it by `gcc`.\n\nC file should look like:\n\n```c\nextern void hello_from_rust();\n\nint main(void) {\n    hello_from_rust();\n    return 0;\n}\n\n```\n\nWe name the file as `call_rust.c` and place it on the crate root. Run the following to compile:\n\n```sh\ngcc call_rust.c -o call_rust -lrust_from_c -L./target/debug\n\n```\n\n`-l` and `-L` tell gcc to find our Rust library.\n\nFinally, we can call Rust code from C with `LD_LIBRARY_PATH` specified:\n\n```sh\n$ LD_LIBRARY_PATH=./target/debug ./call_rust\nHello from Rust!\n\n```\n\nThat's it! For more realistic example, check the [`cbindgen`](https://github.com/eqrion/cbindgen).\n\n## [Callbacks from C code to Rust functions](#callbacks-from-c-code-to-rust-functions)\n\nSome external libraries require the usage of callbacks to report back their current state or intermediate data to the caller. It is possible to pass functions defined in Rust to an external library. The requirement for this is that the callback function is marked as `extern` with the correct calling convention to make it callable from C code.\n\nThe callback function can then be sent through a registration call to the C library and afterwards be invoked from there.\n\nA basic example is:\n\nRust code:\n\n```rust\nextern fn callback(a: i32) {\n    println!(\"I'm called from C with value {0}\", a);\n}\n\n#[link(name = \"extlib\")]\nextern {\n   fn register_callback(cb: extern fn(i32)) -> i32;\n   fn trigger_callback();\n}\n\nfn main() {\n    unsafe {\n        register_callback(callback);\n        trigger_callback(); // Triggers the callback.\n    }\n}\n```\n\nC code:\n\n```c\ntypedef void (*rust_callback)(int32_t);\nrust_callback cb;\n\nint32_t register_callback(rust_callback callback) {\n    cb = callback;\n    return 1;\n}\n\nvoid trigger_callback() {\n  cb(7); // Will call callback(7) in Rust.\n}\n\n```\n\nIn this example Rust's `main()` will call `trigger_callback()` in C, which would, in turn, call back to `callback()` in Rust.\n\n## [Targeting callbacks to Rust objects](#targeting-callbacks-to-rust-objects)\n\nThe former example showed how a global function can be called from C code. However it is often desired that the callback is targeted to a special Rust object. This could be the object that represents the wrapper for the respective C object.\n\nThis can be achieved by passing a raw pointer to the object down to the C library. The C library can then include the pointer to the Rust object in the notification. This will allow the callback to unsafely access the referenced Rust object.\n\nRust code:\n\n```rust\nstruct RustObject {\n    a: i32,\n    // Other members...\n}\n\nextern \"C\" fn callback(target: *mut RustObject, a: i32) {\n    println!(\"I'm called from C with value {0}\", a);\n    unsafe {\n        // Update the value in RustObject with the value received from the callback:\n        (*target).a = a;\n    }\n}\n\n#[link(name = \"extlib\")]\nextern {\n   fn register_callback(target: *mut RustObject,\n                        cb: extern fn(*mut RustObject, i32)) -> i32;\n   fn trigger_callback();\n}\n\nfn main() {\n    // Create the object that will be referenced in the callback:\n    let mut rust_object = Box::new(RustObject { a: 5 });\n\n    unsafe {\n        register_callback(&mut *rust_object, callback);\n        trigger_callback();\n    }\n}\n```\n\nC code:\n\n```c\ntypedef void (*rust_callback)(void*, int32_t);\nvoid* cb_target;\nrust_callback cb;\n\nint32_t register_callback(void* callback_target, rust_callback callback) {\n    cb_target = callback_target;\n    cb = callback;\n    return 1;\n}\n\nvoid trigger_callback() {\n  cb(cb_target, 7); // Will call callback(&rustObject, 7) in Rust.\n}\n\n```\n\n## [Asynchronous callbacks](#asynchronous-callbacks)\n\nIn the previously given examples the callbacks are invoked as a direct reaction to a function call to the external C library. The control over the current thread is switched from Rust to C to Rust for the execution of the callback, but in the end the callback is executed on the same thread that called the function which triggered the callback.\n\nThings get more complicated when the external library spawns its own threads and invokes callbacks from there. In these cases access to Rust data structures inside the callbacks is especially unsafe and proper synchronization mechanisms must be used. Besides classical synchronization mechanisms like mutexes, one possibility in Rust is to use channels (in `std::sync::mpsc`) to forward data from the C thread that invoked the callback into a Rust thread.\n\nIf an asynchronous callback targets a special object in the Rust address space it is also absolutely necessary that no more callbacks are performed by the C library after the respective Rust object gets destroyed. This can be achieved by unregistering the callback in the object's destructor and designing the library in a way that guarantees that no callback will be performed after deregistration.\n\n## [Linking](#linking)\n\nThe `link` attribute on `extern` blocks provides the basic building block for instructing rustc how it will link to native libraries. There are two accepted forms of the link attribute today:\n\n-   `#[link(name = \"foo\")]`\n-   `#[link(name = \"foo\", kind = \"bar\")]`\n\nIn both of these cases, `foo` is the name of the native library that we're linking to, and in the second case `bar` is the type of native library that the compiler is linking to. There are currently three known types of native libraries:\n\n-   Dynamic - `#[link(name = \"readline\")]`\n-   Static - `#[link(name = \"my_build_dependency\", kind = \"static\")]`\n-   Frameworks - `#[link(name = \"CoreFoundation\", kind = \"framework\")]`\n\nNote that frameworks are only available on macOS targets.\n\nThe different `kind` values are meant to differentiate how the native library participates in linkage. From a linkage perspective, the Rust compiler creates two flavors of artifacts: partial (rlib/staticlib) and final (dylib/binary). Native dynamic library and framework dependencies are propagated to the final artifact boundary, while static library dependencies are not propagated at all, because the static libraries are integrated directly into the subsequent artifact.\n\nA few examples of how this model can be used are:\n\n-   A native build dependency. Sometimes some C/C++ glue is needed when writing some Rust code, but distribution of the C/C++ code in a library format is a burden. In this case, the code will be archived into `libfoo.a` and then the Rust crate would declare a dependency via `#[link(name = \"foo\", kind = \"static\")]`.\n    \n    Regardless of the flavor of output for the crate, the native static library will be included in the output, meaning that distribution of the native static library is not necessary.\n    \n-   A normal dynamic dependency. Common system libraries (like `readline`) are available on a large number of systems, and often a static copy of these libraries cannot be found. When this dependency is included in a Rust crate, partial targets (like rlibs) will not link to the library, but when the rlib is included in a final target (like a binary), the native library will be linked in.\n    \n\nOn macOS, frameworks behave with the same semantics as a dynamic library.\n\n## [Unsafe blocks](#unsafe-blocks)\n\nSome operations, like dereferencing raw pointers or calling functions that have been marked unsafe are only allowed inside unsafe blocks. Unsafe blocks isolate unsafety and are a promise to the compiler that the unsafety does not leak out of the block.\n\nUnsafe functions, on the other hand, advertise it to the world. An unsafe function is written like this:\n\n```rust\n#![allow(unused)]\nfn main() {\nunsafe fn kaboom(ptr: *const i32) -> i32 { *ptr }\n}\n```\n\nThis function can only be called from an `unsafe` block or another `unsafe` function.\n\n## [Accessing foreign globals](#accessing-foreign-globals)\n\nForeign APIs often export a global variable which could do something like track global state. In order to access these variables, you declare them in `extern` blocks with the `static` keyword:\n\n```rust\n#[link(name = \"readline\")]\nextern {\n    static rl_readline_version: libc::c_int;\n}\n\nfn main() {\n    println!(\"You have readline version {} installed.\",\n             unsafe { rl_readline_version as i32 });\n}\n```\n\nAlternatively, you may need to alter global state provided by a foreign interface. To do this, statics can be declared with `mut` so we can mutate them.\n\n```rust\nuse std::ffi::CString;\nuse std::ptr;\n\n#[link(name = \"readline\")]\nextern {\n    static mut rl_prompt: *const libc::c_char;\n}\n\nfn main() {\n    let prompt = CString::new(\"[my-awesome-shell] $\").unwrap();\n    unsafe {\n        rl_prompt = prompt.as_ptr();\n\n        println!(\"{:?}\", rl_prompt);\n\n        rl_prompt = ptr::null();\n    }\n}\n```\n\nNote that all interaction with a `static mut` is unsafe, both reading and writing. Dealing with global mutable state requires a great deal of care.\n\n## [Foreign calling conventions](#foreign-calling-conventions)\n\nMost foreign code exposes a C ABI, and Rust uses the platform's C calling convention by default when calling foreign functions. Some foreign functions, most notably the Windows API, use other calling conventions. Rust provides a way to tell the compiler which convention to use:\n\n```rust\n#[cfg(all(target_os = \"win32\", target_arch = \"x86\"))]\n#[link(name = \"kernel32\")]\n#[allow(non_snake_case)]\nextern \"stdcall\" {\n    fn SetEnvironmentVariableA(n: *const u8, v: *const u8) -> libc::c_int;\n}\nfn main() { }\n```\n\nThis applies to the entire `extern` block. The list of supported ABI constraints are:\n\n-   `stdcall`\n-   `aapcs`\n-   `cdecl`\n-   `fastcall`\n-   `thiscall`\n-   `vectorcall` This is currently hidden behind the `abi_vectorcall` gate and is subject to change.\n-   `Rust`\n-   `rust-intrinsic`\n-   `system`\n-   `C`\n-   `win64`\n-   `sysv64`\n\nMost of the abis in this list are self-explanatory, but the `system` abi may seem a little odd. This constraint selects whatever the appropriate ABI is for interoperating with the target's libraries. For example, on win32 with a x86 architecture, this means that the abi used would be `stdcall`. On x86\\_64, however, windows uses the `C` calling convention, so `C` would be used. This means that in our previous example, we could have used `extern \"system\" { ... }` to define a block for all windows systems, not only x86 ones.\n\n## [Interoperability with foreign code](#interoperability-with-foreign-code)\n\nRust guarantees that the layout of a `struct` is compatible with the platform's representation in C only if the `#[repr(C)]` attribute is applied to it. `#[repr(C, packed)]` can be used to lay out struct members without padding. `#[repr(C)]` can also be applied to an enum.\n\nRust's owned boxes (`Box<T>`) use non-nullable pointers as handles which point to the contained object. However, they should not be manually created because they are managed by internal allocators. References can safely be assumed to be non-nullable pointers directly to the type. However, breaking the borrow checking or mutability rules is not guaranteed to be safe, so prefer using raw pointers (`*`) if that's needed because the compiler can't make as many assumptions about them.\n\nVectors and strings share the same basic memory layout, and utilities are available in the `vec` and `str` modules for working with C APIs. However, strings are not terminated with `\\0`. If you need a NUL-terminated string for interoperability with C, you should use the `CString` type in the `std::ffi` module.\n\nThe [`libc` crate on crates.io](https://crates.io/crates/libc) includes type aliases and function definitions for the C standard library in the `libc` module, and Rust links against `libc` and `libm` by default.\n\n## [Variadic functions](#variadic-functions)\n\nIn C, functions can be 'variadic', meaning they accept a variable number of arguments. This can be achieved in Rust by specifying `...` within the argument list of a foreign function declaration:\n\n```no\nextern {\n    fn foo(x: i32, ...);\n}\n\nfn main() {\n    unsafe {\n        foo(10, 20, 30, 40, 50);\n    }\n}\n\n```\n\nNormal Rust functions can _not_ be variadic:\n\n```rust\n#![allow(unused)]\nfn main() {\n// This will not compile\n\nfn foo(x: i32, ...) {}\n}\n```\n\n## [The \"nullable pointer optimization\"](#the-nullable-pointer-optimization)\n\nCertain Rust types are defined to never be `null`. This includes references (`&T`, `&mut T`), boxes (`Box<T>`), and function pointers (`extern \"abi\" fn()`). When interfacing with C, pointers that might be `null` are often used, which would seem to require some messy `transmute`s and/or unsafe code to handle conversions to/from Rust types. However, trying to construct/work with these invalid values **is undefined behavior**, so you should use the following workaround instead.\n\nAs a special case, an `enum` is eligible for the \"nullable pointer optimization\" if it contains exactly two variants, one of which contains no data and the other contains a field of one of the non-nullable types listed above. This means no extra space is required for a discriminant; rather, the empty variant is represented by putting a `null` value into the non-nullable field. This is called an \"optimization\", but unlike other optimizations it is guaranteed to apply to eligible types.\n\nThe most common type that takes advantage of the nullable pointer optimization is `Option<T>`, where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` is a correct way to represent a nullable function pointer using the C ABI (corresponding to the C type `int (*)(int)`).\n\nHere is a contrived example. Let's say some C library has a facility for registering a callback, which gets called in certain situations. The callback is passed a function pointer and an integer and it is supposed to run the function with the integer as a parameter. So we have function pointers flying across the FFI boundary in both directions.\n\n```rust\nuse libc::c_int;\n\n#[cfg(hidden)]\nextern \"C\" {\n    /// Registers the callback.\n    fn register(cb: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>, c_int) -> c_int>);\n}\nunsafe fn register(_: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>,\n                                           c_int) -> c_int>)\n{}\n\n/// This fairly useless function receives a function pointer and an integer\n/// from C, and returns the result of calling the function with the integer.\n/// In case no function is provided, it squares the integer by default.\nextern \"C\" fn apply(process: Option<extern \"C\" fn(c_int) -> c_int>, int: c_int) -> c_int {\n    match process {\n        Some(f) => f(int),\n        None    => int * int\n    }\n}\n\nfn main() {\n    unsafe {\n        register(Some(apply));\n    }\n}\n```\n\nAnd the code on the C side looks like this:\n\n```c\nvoid register(int (*f)(int (*)(int), int)) {\n    ...\n}\n\n```\n\nNo `transmute` required!\n\n## [FFI and unwinding](#ffi-and-unwinding)\n\nIt’s important to be mindful of unwinding when working with FFI. Most ABI strings come in two variants, one with an `-unwind` suffix and one without. The `Rust` ABI always permits unwinding, so there is no `Rust-unwind` ABI.\n\nIf you expect Rust `panic`s or foreign (e.g. C++) exceptions to cross an FFI boundary, that boundary must use the appropriate `-unwind` ABI string. Conversely, if you do not expect unwinding to cross an ABI boundary, use one of the non-`unwind` ABI strings.\n\n> Note: Compiling with `panic=abort` will still cause `panic!` to immediately abort the process, regardless of which ABI is specified by the function that `panic`s.\n\nIf an unwinding operation does encounter an ABI boundary that is not permitted to unwind, the behavior depends on the source of the unwinding (Rust `panic` or a foreign exception):\n\n-   `panic` will cause the process to safely abort.\n-   A foreign exception entering Rust will cause undefined behavior.\n\nNote that the interaction of `catch_unwind` with foreign exceptions **is undefined**, as is the interaction of `panic` with foreign exception-catching mechanisms (notably C++'s `try`/`catch`).\n\n### [Rust `panic` with `\"C-unwind\"`](#rust-panic-with-c-unwind)\n\n```rust\n#[no_mangle]\nextern \"C-unwind\" fn example() {\n    panic!(\"Uh oh\");\n}\n```\n\nThis function (when compiled with `panic=unwind`) is permitted to unwind C++ stack frames.\n\n```text\n[Rust function with `catch_unwind`, which stops the unwinding]\n      |\n     ...\n      |\n[C++ frames]\n      |                           ^\n      | (calls)                   | (unwinding\n      v                           |  goes this\n[Rust function `example`]         |  way)\n      |                           |\n      +--- rust function panics --+\n\n```\n\nIf the C++ frames have objects, their destructors will be called.\n\n### [C++ `throw` with `\"C-unwind\"`](#c-throw-with-c-unwind)\n\n```rust\n#[link(...)]\nextern \"C-unwind\" {\n    // A C++ function that may throw an exception\n    fn may_throw();\n}\n\n#[no_mangle]\nextern \"C-unwind\" fn rust_passthrough() {\n    let b = Box::new(5);\n    unsafe { may_throw(); }\n    println!(\"{:?}\", &b);\n}\n```\n\nA C++ function with a `try` block may invoke `rust_passthrough` and `catch` an exception thrown by `may_throw`.\n\n```text\n[C++ function with `try` block that invokes `rust_passthrough`]\n      |\n     ...\n      |\n[Rust function `rust_passthrough`]\n      |                            ^\n      | (calls)                    | (unwinding\n      v                            |  goes this\n[C++ function `may_throw`]         |  way)\n      |                            |\n      +--- C++ function throws ----+\n\n```\n\nIf `may_throw` does throw an exception, `b` will be dropped. Otherwise, `5` will be printed.\n\n### [`panic` can be stopped at an ABI boundary](#panic-can-be-stopped-at-an-abi-boundary)\n\n```rust\n#![allow(unused)]\nfn main() {\n#[no_mangle]\nextern \"C\" fn assert_nonzero(input: u32) {\n    assert!(input != 0)\n}\n}\n```\n\nIf `assert_nonzero` is called with the argument `0`, the runtime is guaranteed to (safely) abort the process, whether or not compiled with `panic=abort`.\n\n### [Catching `panic` preemptively](#catching-panic-preemptively)\n\nIf you are writing Rust code that may panic, and you don't wish to abort the process if it panics, you must use [`catch_unwind`](../std/panic/fn.catch_unwind.html):\n\n```rust\nuse std::panic::catch_unwind;\n\n#[no_mangle]\npub extern \"C\" fn oh_no() -> i32 {\n    let result = catch_unwind(|| {\n        panic!(\"Oops!\");\n    });\n    match result {\n        Ok(_) => 0,\n        Err(_) => 1,\n    }\n}\n\nfn main() {}\n```\n\nPlease note that [`catch_unwind`](../std/panic/fn.catch_unwind.html) will only catch unwinding panics, not those that abort the process. See the documentation of [`catch_unwind`](../std/panic/fn.catch_unwind.html) for more information.\n\n## [Representing opaque structs](#representing-opaque-structs)\n\nSometimes, a C library wants to provide a pointer to something, but not let you know the internal details of the thing it wants. A stable and simple way is to use a `void *` argument:\n\n```c\nvoid foo(void *arg);\nvoid bar(void *arg);\n\n```\n\nWe can represent this in Rust with the `c_void` type:\n\n```rust\nextern \"C\" {\n    pub fn foo(arg: *mut libc::c_void);\n    pub fn bar(arg: *mut libc::c_void);\n}\nfn main() {}\n```\n\nThis is a perfectly valid way of handling the situation. However, we can do a bit better. To solve this, some C libraries will instead create a `struct`, where the details and memory layout of the struct are private. This gives some amount of type safety. These structures are called ‘opaque’. Here’s an example, in C:\n\n```c\nstruct Foo; /* Foo is a structure, but its contents are not part of the public interface */\nstruct Bar;\nvoid foo(struct Foo *arg);\nvoid bar(struct Bar *arg);\n\n```\n\nTo do this in Rust, let’s create our own opaque types:\n\n```rust\n#[repr(C)]\npub struct Foo {\n    _data: [u8; 0],\n    _marker:\n        core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,\n}\n#[repr(C)]\npub struct Bar {\n    _data: [u8; 0],\n    _marker:\n        core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,\n}\n\nextern \"C\" {\n    pub fn foo(arg: *mut Foo);\n    pub fn bar(arg: *mut Bar);\n}\nfn main() {}\n```\n\nBy including at least one private field and no constructor, we create an opaque type that we can't instantiate outside of this module. (A struct with no field could be instantiated by anyone.) We also want to use this type in FFI, so we have to add `#[repr(C)]`. The marker ensures the compiler does not mark the struct as `Send`, `Sync` and `Unpin` are not applied to the struct. (`*mut u8` is not `Send` or `Sync`, `PhantomPinned` is not `Unpin`)\n\nBut because our `Foo` and `Bar` types are different, we’ll get type safety between the two of them, so we cannot accidentally pass a pointer to `Foo` to `bar()`.\n\nNotice that it is a really bad idea to use an empty enum as FFI type. The compiler relies on empty enums being uninhabited, so handling values of type `&Empty` is a huge footgun and can lead to buggy program behavior (by triggering undefined behavior).\n\n> **NOTE:** The simplest way would use \"extern types\". But it's currently (as of June 2021) unstable and has some unresolved questions, see the [RFC page](https://rust-lang.github.io/rfcs/1861-extern-types.html) and the [tracking issue](https://github.com/rust-lang/rust/issues/43467) for more details.\n\n## [Beneath `std`](#beneath-std)\n\nThis section documents features that are normally provided by the `std` crate and that `#![no_std]` developers have to deal with (i.e. provide) to build `#![no_std]` binary crates.\n\n## [Using `libc`](#using-libc)\n\nIn order to build a `#[no_std]` executable we will need `libc` as a dependency. We can specify this using our `Cargo.toml` file:\n\n```toml\n[dependencies]\nlibc = { version = \"0.2.146\", default-features = false }\n\n```\n\nNote that the default features have been disabled. This is a critical step - **the default features of `libc` include the `std` crate and so must be disabled.**\n\nAlternatively, we can use the unstable `rustc_private` private feature together with an `extern crate libc;` declaration as shown in the examples below. Note that windows-msvc targets do not require a libc, and correspondingly there is no `libc` crate in their sysroot. We do not need the `extern crate libc;` below, and having it on a windows-msvc target would be a compile error.\n\n## [Writing an executable without `std`](#writing-an-executable-without-std)\n\nWe will probably need a nightly version of the compiler to produce a `#![no_std]` executable because on many platforms, we have to provide the `eh_personality` [lang item](https://doc.rust-lang.org/nightly/unstable-book/language-features/lang-items.html), which is unstable.\n\nControlling the entry point is possible in two ways: the `#[start]` attribute, or overriding the default shim for the C `main` function with your own. Additionally, it's required to define a [panic handler function](panic-handler.html).\n\nThe function marked `#[start]` is passed the command line parameters in the same format as C (aside from the exact integer types being used):\n\n```rust\n#![feature(start, lang_items, core_intrinsics, rustc_private)]\n#![allow(internal_features)]\n#![no_std]\n\n// Necessary for `panic = \"unwind\"` builds on cfg(unix) platforms.\n#![feature(panic_unwind)]\nextern crate unwind;\n\n// Pull in the system libc library for what crt0.o likely requires.\n#[cfg(not(windows))]\nextern crate libc;\n\nuse core::panic::PanicInfo;\n\n// Entry point for this program.\n#[start]\nfn main(_argc: isize, _argv: *const *const u8) -> isize {\n    0\n}\n\n// These functions are used by the compiler, but not for an empty program like this.\n// They are normally provided by `std`.\n#[lang = \"eh_personality\"]\nfn rust_eh_personality() {}\n#[panic_handler]\nfn panic_handler(_info: &PanicInfo) -> ! { core::intrinsics::abort() }\n```\n\nTo override the compiler-inserted `main` shim, we have to disable it with `#![no_main]` and then create the appropriate symbol with the correct ABI and the correct name, which requires overriding the compiler's name mangling too:\n\n```rust\n#![feature(lang_items, core_intrinsics, rustc_private)]\n#![allow(internal_features)]\n#![no_std]\n#![no_main]\n\n// Necessary for `panic = \"unwind\"` builds on cfg(unix) platforms.\n#![feature(panic_unwind)]\nextern crate unwind;\n\n// Pull in the system libc library for what crt0.o likely requires.\n#[cfg(not(windows))]\nextern crate libc;\n\nuse core::ffi::{c_char, c_int};\nuse core::panic::PanicInfo;\n\n// Entry point for this program.\n#[no_mangle] // ensure that this symbol is included in the output as `main`\nextern \"C\" fn main(_argc: c_int, _argv: *const *const c_char) -> c_int {\n    0\n}\n\n// These functions are used by the compiler, but not for an empty program like this.\n// They are normally provided by `std`.\n#[lang = \"eh_personality\"]\nfn rust_eh_personality() {}\n#[panic_handler]\nfn panic_handler(_info: &PanicInfo) -> ! { core::intrinsics::abort() }\n```\n\nIf you are working with a target that doesn't have binary releases of the standard library available via rustup (this probably means you are building the `core` crate yourself) and need compiler-rt intrinsics (i.e. you are probably getting linker errors when building an executable: ``undefined reference to `__aeabi_memcpy'``), you need to manually link to the [`compiler_builtins` crate](https://crates.io/crates/compiler_builtins) to get those intrinsics and solve the linker errors.\n\n## [#\\[panic\\_handler\\]](#panic_handler)\n\n`#[panic_handler]` is used to define the behavior of `panic!` in `#![no_std]` applications. The `#[panic_handler]` attribute must be applied to a function with signature `fn(&PanicInfo) -> !` and such function must appear _once_ in the dependency graph of a binary / dylib / cdylib crate. The API of `PanicInfo` can be found in the [API docs](../core/panic/struct.PanicInfo.html).\n\nGiven that `#![no_std]` applications have no _standard_ output and that some `#![no_std]` applications, e.g. embedded applications, need different panicking behaviors for development and for release it can be helpful to have panic crates, crate that only contain a `#[panic_handler]`. This way applications can easily swap the panicking behavior by simply linking to a different panic crate.\n\nBelow is shown an example where an application has a different panicking behavior depending on whether is compiled using the dev profile (`cargo build`) or using the release profile (`cargo build --release`).\n\n`panic-semihosting` crate -- log panic messages to the host stderr using semihosting:\n\n```rust\n#![no_std]\n\nuse core::fmt::{Write, self};\nuse core::panic::PanicInfo;\n\nstruct HStderr {\n    // ..\n    _0: (),\n}\n\nimpl HStderr {\n    fn new() -> HStderr { HStderr { _0: () } }\n}\n\nimpl fmt::Write for HStderr {\n    fn write_str(&mut self, _: &str) -> fmt::Result { Ok(()) }\n}\n\n#[panic_handler]\nfn panic(info: &PanicInfo) -> ! {\n    let mut host_stderr = HStderr::new();\n\n    // logs \"panicked at '$reason', src/main.rs:27:4\" to the host stderr\n    writeln!(host_stderr, \"{}\", info).ok();\n\n    loop {}\n}\n```\n\n`panic-halt` crate -- halt the thread on panic; messages are discarded:\n\n```rust\n#![no_std]\n\nuse core::panic::PanicInfo;\n\n#[panic_handler]\nfn panic(_info: &PanicInfo) -> ! {\n    loop {}\n}\n```\n\n`app` crate:\n\n```rust\n#![no_std]\n\n// dev profile\n#[cfg(debug_assertions)]\nextern crate panic_semihosting;\n\n// release profile\n#[cfg(not(debug_assertions))]\nextern crate panic_halt;\n\nfn main() {\n    // ..\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>The Rustonomicon</title>\n        <meta name=\"robots\" content=\"noindex\">\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"The Dark Arts of Advanced and Unsafe Rust Programming\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/nomicon.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"intro.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"meet-safe-and-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Meet Safe and Unsafe</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"safe-unsafe-meaning.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> How Safe and Unsafe Interact</a></li><li class=\"chapter-item expanded \"><a href=\"what-unsafe-does.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> What Unsafe Can Do</a></li><li class=\"chapter-item expanded \"><a href=\"working-with-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Working with Unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"data.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Data Layout</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"repr-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> repr(Rust)</a></li><li class=\"chapter-item expanded \"><a href=\"exotic-sizes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Exotically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"other-reprs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Other reprs</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"references.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> References</a></li><li class=\"chapter-item expanded \"><a href=\"aliasing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Aliasing</a></li><li class=\"chapter-item expanded \"><a href=\"lifetimes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Lifetimes</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-mismatch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Limits of Lifetimes</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Lifetime Elision</a></li><li class=\"chapter-item expanded \"><a href=\"unbounded-lifetimes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Unbounded Lifetimes</a></li><li class=\"chapter-item expanded \"><a href=\"hrtb.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Higher-Rank Trait Bounds</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"dropck.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Drop Check</a></li><li class=\"chapter-item expanded \"><a href=\"phantom-data.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> PhantomData</a></li><li class=\"chapter-item expanded \"><a href=\"borrow-splitting.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Splitting Borrows</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"conversions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Type Conversions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> Coercions</a></li><li class=\"chapter-item expanded \"><a href=\"dot-operator.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> The Dot Operator</a></li><li class=\"chapter-item expanded \"><a href=\"casts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Casts</a></li><li class=\"chapter-item expanded \"><a href=\"transmutes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Transmutes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"uninitialized.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Uninitialized Memory</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"checked-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Checked</a></li><li class=\"chapter-item expanded \"><a href=\"drop-flags.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> Drop Flags</a></li><li class=\"chapter-item expanded \"><a href=\"unchecked-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Unchecked</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"obrm.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Ownership Based Resource Management</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"constructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Constructors</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"leaking.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Leaking</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"unwinding.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Unwinding</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"exception-safety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Exception Safety</a></li><li class=\"chapter-item expanded \"><a href=\"poisoning.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Poisoning</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"races.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Races</a></li><li class=\"chapter-item expanded \"><a href=\"send-and-sync.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Send and Sync</a></li><li class=\"chapter-item expanded \"><a href=\"atomics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Atomics</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"vec/vec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Implementing Vec</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"vec/vec-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Layout</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-alloc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Allocating</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-push-pop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> Push and Pop</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-dealloc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.4.</strong> Deallocating</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.5.</strong> Deref</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-insert-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.6.</strong> Insert and Remove</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-into-iter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.7.</strong> IntoIter</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-raw.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.8.</strong> RawVec</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-drain.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.9.</strong> Drain</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-zsts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.10.</strong> Handling Zero-Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-final.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.11.</strong> Final Code</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-and-mutex.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Implementing Arc and Mutex</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Arc</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Layout</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-base.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Base Code</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-clone.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Cloning</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Dropping</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-final.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Final Code</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ffi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> FFI</a></li><li class=\"chapter-item expanded \"><a href=\"beneath-std.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Beneath std</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"panic-handler.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> #[panic_handler]</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rustonomicon</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/nomicon\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"the-rustonomicon\"><a class=\"header\" href=\"#the-rustonomicon\">The Rustonomicon</a></h1>\n<div class=\"warning\">\n<p>Warning:\nThis book is incomplete.\nDocumenting everything and rewriting outdated parts take a while.\nSee the <a href=\"https://github.com/rust-lang/nomicon/issues\">issue tracker</a> to check what's missing/outdated, and if there are any mistakes or ideas that haven't been reported, feel free to open a new issue there.</p>\n</div>\n<h2 id=\"the-dark-arts-of-unsafe-rust\"><a class=\"header\" href=\"#the-dark-arts-of-unsafe-rust\">The Dark Arts of Unsafe Rust</a></h2>\n<blockquote>\n<p>THE KNOWLEDGE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF UNLEASHING INDESCRIBABLE HORRORS THAT SHATTER YOUR PSYCHE AND SET YOUR MIND ADRIFT IN THE UNKNOWABLY INFINITE COSMOS.</p>\n</blockquote>\n<p>The Rustonomicon digs into all the awful details that you need to understand when writing Unsafe Rust programs.</p>\n<p>Should you wish a long and happy career of writing Rust programs, you should turn back now and forget you ever saw this book.\nIt is not necessary.\nHowever if you intend to write unsafe code — or just want to dig into the guts of the language — this book contains lots of useful information.</p>\n<p>Unlike <em><a href=\"../book/index.html\">The Rust Programming Language</a></em>, we will be assuming considerable prior knowledge.\nIn particular, you should be comfortable with basic systems programming and Rust.\nIf you don't feel comfortable with these topics, you should consider reading <a href=\"../book/index.html\">The Book</a> first.\nThat said, we won't assume you have read it, and we will take care to occasionally give a refresher on the basics where appropriate.\nYou can skip straight to this book if you want; just know that we won't be explaining everything from the ground up.</p>\n<p>This book exists primarily as a high-level companion to <a href=\"../reference/index.html\">The Reference</a>.\nWhere The Reference exists to detail the syntax and semantics of every part of the language, The Rustonomicon exists to describe how to use those pieces together, and the issues that you will have in doing so.</p>\n<p>The Reference will tell you the syntax and semantics of references, destructors, and unwinding, but it won't tell you how combining them can lead to exception-safety issues, or how to deal with those issues.</p>\n<p>It should be noted that we haven't synced The Rustnomicon and The Reference well, so they may have duplicate content.\nIn general, if the two documents disagree, The Reference should be assumed to be correct (it isn't yet considered normative, it's just better maintained).</p>\n<p>Topics that are within the scope of this book include: the meaning of (un)safety, unsafe primitives provided by the language and standard library, techniques for creating safe abstractions with those unsafe primitives, subtyping and variance, exception-safety (panic/unwind-safety), working with uninitialized memory, type punning, concurrency, interoperating with other languages (FFI), optimization tricks, how constructs lower to compiler/OS/hardware primitives, how to <strong>not</strong> make the memory model people angry, how you're <strong>going</strong> to make the memory model people angry, and more.</p>\n<p>The Rustonomicon is not a place to exhaustively describe the semantics and guarantees of every single API in the standard library, nor is it a place to exhaustively describe every feature of Rust.</p>\n<p>Unless otherwise noted, Rust code in this book uses the Rust 2021 edition.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"meet-safe-and-unsafe\"><a class=\"header\" href=\"#meet-safe-and-unsafe\">Meet Safe and Unsafe</a></h1>\n<p><img src=\"img/safeandunsafe.svg\" alt=\"safe and unsafe\"></p>\n<p>It would be great to not have to worry about low-level implementation details.\nWho could possibly care how much space the empty tuple occupies? Sadly, it\nsometimes matters and we need to worry about it. The most common reason\ndevelopers start to care about implementation details is performance, but more\nimportantly, these details can become a matter of correctness when interfacing\ndirectly with hardware, operating systems, or other languages.</p>\n<p>When implementation details start to matter in a safe programming language,\nprogrammers usually have three options:</p>\n<ul>\n<li>fiddle with the code to encourage the compiler/runtime to perform an optimization</li>\n<li>adopt a more unidiomatic or cumbersome design to get the desired implementation</li>\n<li>rewrite the implementation in a language that lets you deal with those details</li>\n</ul>\n<p>For that last option, the language programmers tend to use is <em>C</em>. This is often\nnecessary to interface with systems that only declare a C interface.</p>\n<p>Unfortunately, C is incredibly unsafe to use (sometimes for good reason),\nand this unsafety is magnified when trying to interoperate with another\nlanguage. Care must be taken to ensure C and the other language agree on\nwhat's happening, and that they don't step on each other's toes.</p>\n<p>So what does this have to do with Rust?</p>\n<p>Well, unlike C, Rust is a safe programming language.</p>\n<p>But, like C, Rust is an unsafe programming language.</p>\n<p>More accurately, Rust <em>contains</em> both a safe and unsafe programming language.</p>\n<p>Rust can be thought of as a combination of two programming languages: <em>Safe\nRust</em> and <em>Unsafe Rust</em>. Conveniently, these names mean exactly what they say:\nSafe Rust is Safe. Unsafe Rust is, well, not. In fact, Unsafe Rust lets us\ndo some <em>really</em> unsafe things. Things the Rust authors will implore you not to\ndo, but we'll do anyway.</p>\n<p>Safe Rust is the <em>true</em> Rust programming language. If all you do is write Safe\nRust, you will never have to worry about type-safety or memory-safety. You will\nnever endure a dangling pointer, a use-after-free, or any other kind of\nUndefined Behavior (a.k.a. UB).</p>\n<p>The standard library also gives you enough utilities out of the box that you'll\nbe able to write high-performance applications and libraries in pure idiomatic\nSafe Rust.</p>\n<p>But maybe you want to talk to another language. Maybe you're writing a\nlow-level abstraction not exposed by the standard library. Maybe you're\n<em>writing</em> the standard library (which is written entirely in Rust). Maybe you\nneed to do something the type-system doesn't understand and just <em>frob some dang\nbits</em>. Maybe you need Unsafe Rust.</p>\n<p>Unsafe Rust is exactly like Safe Rust with all the same rules and semantics.\nIt just lets you do some <em>extra</em> things that are Definitely Not Safe\n(which we will define in the next section).</p>\n<p>The value of this separation is that we gain the benefits of using an unsafe\nlanguage like C — low level control over implementation details — without most\nof the problems that come with trying to integrate it with a completely\ndifferent safe language.</p>\n<p>There are still some problems — most notably, we must become aware of properties\nthat the type system assumes and audit them in any code that interacts with\nUnsafe Rust. That's the purpose of this book: to teach you about these assumptions\nand how to manage them.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"how-safe-and-unsafe-interact\"><a class=\"header\" href=\"#how-safe-and-unsafe-interact\">How Safe and Unsafe Interact</a></h1>\n<p>What's the relationship between Safe Rust and Unsafe Rust? How do they\ninteract?</p>\n<p>The separation between Safe Rust and Unsafe Rust is controlled with the\n<code class=\"hljs\">unsafe</code> keyword, which acts as an interface from one to the other. This is\nwhy we can say Safe Rust is a safe language: all the unsafe parts are kept\nexclusively behind the <code class=\"hljs\">unsafe</code> boundary. If you wish, you can even toss\n<code class=\"hljs\">#![forbid(unsafe_code)]</code> into your code base to statically guarantee that\nyou're only writing Safe Rust.</p>\n<p>The <code class=\"hljs\">unsafe</code> keyword has two uses: to declare the existence of contracts the\ncompiler can't check, and to declare that a programmer has checked that these\ncontracts have been upheld.</p>\n<p>You can use <code class=\"hljs\">unsafe</code> to indicate the existence of unchecked contracts on\n<em>functions</em> and <em>trait declarations</em>. On functions, <code class=\"hljs\">unsafe</code> means that\nusers of the function must check that function's documentation to ensure\nthey are using it in a way that maintains the contracts the function\nrequires. On trait declarations, <code class=\"hljs\">unsafe</code> means that implementors of the\ntrait must check the trait documentation to ensure their implementation\nmaintains the contracts the trait requires.</p>\n<p>You can use <code class=\"hljs\">unsafe</code> on a block to declare that all unsafe actions performed\nwithin are verified to uphold the contracts of those operations. For instance,\nthe index passed to <a href=\"../std/primitive.slice.html#method.get_unchecked\"><code class=\"hljs\">slice::get_unchecked</code></a> is in-bounds.</p>\n<p>You can use <code class=\"hljs\">unsafe</code> on a trait implementation to declare that the implementation\nupholds the trait's contract. For instance, that a type implementing <a href=\"../std/marker/trait.Send.html\"><code class=\"hljs\">Send</code></a> is\nreally safe to move to another thread.</p>\n<p>The standard library has a number of unsafe functions, including:</p>\n<ul>\n<li><a href=\"../std/primitive.slice.html#method.get_unchecked\"><code class=\"hljs\">slice::get_unchecked</code></a>, which performs unchecked indexing,\nallowing memory safety to be freely violated.</li>\n<li><a href=\"../std/mem/fn.transmute.html\"><code class=\"hljs\">mem::transmute</code></a> reinterprets some value as having a given type,\nbypassing type safety in arbitrary ways (see <a href=\"conversions.html\">conversions</a> for details).</li>\n<li>Every raw pointer to a sized type has an <a href=\"../std/primitive.pointer.html#method.offset\"><code class=\"hljs\">offset</code></a> method that\ninvokes Undefined Behavior if the passed offset is not <a href=\"../std/primitive.pointer.html#method.offset\">\"in bounds\"</a>.</li>\n<li>All FFI (Foreign Function Interface) functions are <code class=\"hljs\">unsafe</code> to call because the\nother language can do arbitrary operations that the Rust compiler can't check.</li>\n</ul>\n<p>As of Rust 1.29.2 the standard library defines the following unsafe traits\n(there are others, but they are not stabilized yet and some of them may never\nbe):</p>\n<ul>\n<li><a href=\"../std/marker/trait.Send.html\"><code class=\"hljs\">Send</code></a> is a marker trait (a trait with no API) that promises implementors\nare safe to send (move) to another thread.</li>\n<li><a href=\"../std/marker/trait.Sync.html\"><code class=\"hljs\">Sync</code></a> is a marker trait that promises threads can safely share implementors\nthrough a shared reference.</li>\n<li><a href=\"../std/alloc/trait.GlobalAlloc.html\"><code class=\"hljs\">GlobalAlloc</code></a> allows customizing the memory allocator of the whole program.</li>\n</ul>\n<p>Much of the Rust standard library also uses Unsafe Rust internally. These\nimplementations have generally been rigorously manually checked, so the Safe Rust\ninterfaces built on top of these implementations can be assumed to be safe.</p>\n<p>The need for all of this separation boils down a single fundamental property\nof Safe Rust, the <em>soundness property</em>:</p>\n<p><strong>No matter what, Safe Rust can't cause Undefined Behavior.</strong></p>\n<p>The design of the safe/unsafe split means that there is an asymmetric trust\nrelationship between Safe and Unsafe Rust. Safe Rust inherently has to\ntrust that any Unsafe Rust it touches has been written correctly.\nOn the other hand, Unsafe Rust cannot trust Safe Rust without care.</p>\n<p>As an example, Rust has the <a href=\"../std/cmp/trait.PartialOrd.html\"><code class=\"hljs\">PartialOrd</code></a> and <a href=\"../std/cmp/trait.Ord.html\"><code class=\"hljs\">Ord</code></a> traits to differentiate\nbetween types which can \"just\" be compared, and those that provide a \"total\"\nordering (which basically means that comparison behaves reasonably).</p>\n<p><a href=\"../std/collections/struct.BTreeMap.html\"><code class=\"hljs\">BTreeMap</code></a> doesn't really make sense for partially-ordered types, and so it\nrequires that its keys implement <code class=\"hljs\">Ord</code>. However, <code class=\"hljs\">BTreeMap</code> has Unsafe Rust code\ninside of its implementation. Because it would be unacceptable for a sloppy <code class=\"hljs\">Ord</code>\nimplementation (which is Safe to write) to cause Undefined Behavior, the Unsafe\ncode in BTreeMap must be written to be robust against <code class=\"hljs\">Ord</code> implementations which\naren't actually total — even though that's the whole point of requiring <code class=\"hljs\">Ord</code>.</p>\n<p>The Unsafe Rust code just can't trust the Safe Rust code to be written correctly.\nThat said, <code class=\"hljs\">BTreeMap</code> will still behave completely erratically if you feed in\nvalues that don't have a total ordering. It just won't ever cause Undefined\nBehavior.</p>\n<p>One may wonder, if <code class=\"hljs\">BTreeMap</code> cannot trust <code class=\"hljs\">Ord</code> because it's Safe, why can it\ntrust <em>any</em> Safe code? For instance <code class=\"hljs\">BTreeMap</code> relies on integers and slices to\nbe implemented correctly. Those are safe too, right?</p>\n<p>The difference is one of scope. When <code class=\"hljs\">BTreeMap</code> relies on integers and slices,\nit's relying on one very specific implementation. This is a measured risk that\ncan be weighed against the benefit. In this case there's basically zero risk;\nif integers and slices are broken, <em>everyone</em> is broken. Also, they're maintained\nby the same people who maintain <code class=\"hljs\">BTreeMap</code>, so it's easy to keep tabs on them.</p>\n<p>On the other hand, <code class=\"hljs\">BTreeMap</code>'s key type is generic. Trusting its <code class=\"hljs\">Ord</code> implementation\nmeans trusting every <code class=\"hljs\">Ord</code> implementation in the past, present, and future.\nHere the risk is high: someone somewhere is going to make a mistake and mess up\ntheir <code class=\"hljs\">Ord</code> implementation, or even just straight up lie about providing a total\nordering because \"it seems to work\". When that happens, <code class=\"hljs\">BTreeMap</code> needs to be\nprepared.</p>\n<p>The same logic applies to trusting a closure that's passed to you to behave\ncorrectly.</p>\n<p>This problem of unbounded generic trust is the problem that <code class=\"hljs\">unsafe</code> traits\nexist to resolve. The <code class=\"hljs\">BTreeMap</code> type could theoretically require that keys\nimplement a new trait called <code class=\"hljs\">UnsafeOrd</code>, rather than <code class=\"hljs\">Ord</code>, that might look\nlike this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">UnsafeOrd</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">cmp</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;<span class=\"hljs-keyword\">Self</span>) -&gt; Ordering;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Then, a type would use <code class=\"hljs\">unsafe</code> to implement <code class=\"hljs\">UnsafeOrd</code>, indicating that\nthey've ensured their implementation maintains whatever contracts the\ntrait expects. In this situation, the Unsafe Rust in the internals of\n<code class=\"hljs\">BTreeMap</code> would be justified in trusting that the key type's <code class=\"hljs\">UnsafeOrd</code>\nimplementation is correct. If it isn't, it's the fault of the unsafe trait\nimplementation, which is consistent with Rust's safety guarantees.</p>\n<p>The decision of whether to mark a trait <code class=\"hljs\">unsafe</code> is an API design choice. A\nsafe trait is easier to implement, but any unsafe code that relies on it must\ndefend against incorrect behavior. Marking a trait <code class=\"hljs\">unsafe</code> shifts this\nresponsibility to the implementor. Rust has traditionally avoided marking\ntraits <code class=\"hljs\">unsafe</code> because it makes Unsafe Rust pervasive, which isn't desirable.</p>\n<p><code class=\"hljs\">Send</code> and <code class=\"hljs\">Sync</code> are marked unsafe because thread safety is a <em>fundamental\nproperty</em> that unsafe code can't possibly hope to defend against in the way it\ncould defend against a buggy <code class=\"hljs\">Ord</code> implementation. Similarly, <code class=\"hljs\">GlobalAllocator</code>\nis keeping accounts of all the memory in the program and other things like\n<code class=\"hljs\">Box</code> or <code class=\"hljs\">Vec</code> build on top of it. If it does something weird (giving the same\nchunk of memory to another request when it is still in use), there's no chance\nto detect that and do anything about it.</p>\n<p>The decision of whether to mark your own traits <code class=\"hljs\">unsafe</code> depends on the same\nsort of consideration. If <code class=\"hljs\">unsafe</code> code can't reasonably expect to defend\nagainst a broken implementation of the trait, then marking the trait <code class=\"hljs\">unsafe</code> is\na reasonable choice.</p>\n<p>As an aside, while <code class=\"hljs\">Send</code> and <code class=\"hljs\">Sync</code> are <code class=\"hljs\">unsafe</code> traits, they are <em>also</em>\nautomatically implemented for types when such derivations are provably safe\nto do. <code class=\"hljs\">Send</code> is automatically derived for all types composed only of values\nwhose types also implement <code class=\"hljs\">Send</code>. <code class=\"hljs\">Sync</code> is automatically derived for all\ntypes composed only of values whose types also implement <code class=\"hljs\">Sync</code>. This minimizes\nthe pervasive unsafety of making these two traits <code class=\"hljs\">unsafe</code>. And not many people\nare going to <em>implement</em> memory allocators (or use them directly, for that\nmatter).</p>\n<p>This is the balance between Safe and Unsafe Rust. The separation is designed to\nmake using Safe Rust as ergonomic as possible, but requires extra effort and\ncare when writing Unsafe Rust. The rest of this book is largely a discussion\nof the sort of care that must be taken, and what contracts Unsafe Rust must uphold.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"what-unsafe-rust-can-do\"><a class=\"header\" href=\"#what-unsafe-rust-can-do\">What Unsafe Rust Can Do</a></h1>\n<p>The only things that are different in Unsafe Rust are that you can:</p>\n<ul>\n<li>Dereference raw pointers</li>\n<li>Call <code class=\"hljs\">unsafe</code> functions (including C functions, compiler intrinsics, and the raw allocator)</li>\n<li>Implement <code class=\"hljs\">unsafe</code> traits</li>\n<li>Mutate statics</li>\n<li>Access fields of <code class=\"hljs\">union</code>s</li>\n</ul>\n<p>That's it. The reason these operations are relegated to Unsafe is that misusing\nany of these things will cause the ever dreaded Undefined Behavior. Invoking\nUndefined Behavior gives the compiler full rights to do arbitrarily bad things\nto your program. You definitely <em>should not</em> invoke Undefined Behavior.</p>\n<p>Unlike C, Undefined Behavior is pretty limited in scope in Rust. All the core\nlanguage cares about is preventing the following things:</p>\n<ul>\n<li>Dereferencing (using the <code class=\"hljs\">*</code> operator on) dangling or unaligned pointers (see below)</li>\n<li>Breaking the <a href=\"references.html\">pointer aliasing rules</a></li>\n<li>Calling a function with the wrong call ABI or unwinding from a function with the wrong unwind ABI.</li>\n<li>Causing a <a href=\"races.html\">data race</a></li>\n<li>Executing code compiled with <a href=\"../reference/attributes/codegen.html#the-target_feature-attribute\">target features</a> that the current thread of execution does\nnot support</li>\n<li>Producing invalid values (either alone or as a field of a compound type such\nas <code class=\"hljs\">enum</code>/<code class=\"hljs\">struct</code>/array/tuple):\n<ul>\n<li>a <code class=\"hljs\">bool</code> that isn't 0 or 1</li>\n<li>an <code class=\"hljs\">enum</code> with an invalid discriminant</li>\n<li>a null <code class=\"hljs\">fn</code> pointer</li>\n<li>a <code class=\"hljs\">char</code> outside the ranges [0x0, 0xD7FF] and [0xE000, 0x10FFFF]</li>\n<li>a <code class=\"hljs\">!</code> (all values are invalid for this type)</li>\n<li>an integer (<code class=\"hljs\">i*</code>/<code class=\"hljs\">u*</code>), floating point value (<code class=\"hljs\">f*</code>), or raw pointer read from\n<a href=\"uninitialized.html\">uninitialized memory</a>, or uninitialized memory in a <code class=\"hljs\">str</code>.</li>\n<li>a reference/<code class=\"hljs\">Box</code> that is dangling, unaligned, or points to an invalid value.</li>\n<li>a wide reference, <code class=\"hljs\">Box</code>, or raw pointer that has invalid metadata:\n<ul>\n<li><code class=\"hljs\">dyn Trait</code> metadata is invalid if it is not a pointer to a vtable for\n<code class=\"hljs\">Trait</code> that matches the actual dynamic trait the pointer or reference points to</li>\n<li>slice metadata is invalid if the length is not a valid <code class=\"hljs\">usize</code>\n(i.e., it must not be read from uninitialized memory)</li>\n</ul>\n</li>\n<li>a type with custom invalid values that is one of those values, such as a\n<a href=\"../std/ptr/struct.NonNull.html\"><code class=\"hljs\">NonNull</code></a> that is null. (Requesting custom invalid values is an unstable\nfeature, but some stable libstd types, like <code class=\"hljs\">NonNull</code>, make use of it.)</li>\n</ul>\n</li>\n</ul>\n<p>For a more detailed explanation about \"Undefined Bahavior\", you may refer to\n<a href=\"../reference/behavior-considered-undefined.html\">the reference</a>.</p>\n<p>\"Producing\" a value happens any time a value is assigned, passed to a\nfunction/primitive operation or returned from a function/primitive operation.</p>\n<p>A reference/pointer is \"dangling\" if it is null or not all of the bytes it\npoints to are part of the same allocation (so in particular they all have to be\npart of <em>some</em> allocation). The span of bytes it points to is determined by the\npointer value and the size of the pointee type. As a consequence, if the span is\nempty, \"dangling\" is the same as \"null\". Note that slices and strings point\nto their entire range, so it's important that the length metadata is never too\nlarge (in particular, allocations and therefore slices and strings cannot be\nbigger than <code class=\"hljs\">isize::MAX</code> bytes). If for some reason this is too cumbersome,\nconsider using raw pointers.</p>\n<p>That's it. That's all the causes of Undefined Behavior baked into Rust. Of\ncourse, unsafe functions and traits are free to declare arbitrary other\nconstraints that a program must maintain to avoid Undefined Behavior. For\ninstance, the allocator APIs declare that deallocating unallocated memory is\nUndefined Behavior.</p>\n<p>However, violations of these constraints generally will just transitively lead to one of\nthe above problems. Some additional constraints may also derive from compiler\nintrinsics that make special assumptions about how code can be optimized. For instance,\nVec and Box make use of intrinsics that require their pointers to be non-null at all times.</p>\n<p>Rust is otherwise quite permissive with respect to other dubious operations.\nRust considers it \"safe\" to:</p>\n<ul>\n<li>Deadlock</li>\n<li>Have a <a href=\"races.html\">race condition</a></li>\n<li>Leak memory</li>\n<li>Overflow integers (with the built-in operators such as <code class=\"hljs\">+</code> etc.)</li>\n<li>Abort the program</li>\n<li>Delete the production database</li>\n</ul>\n<p>For more detailed information, you may refer to <a href=\"../reference/behavior-not-considered-unsafe.html\">the reference</a>.</p>\n<p>However any program that actually manages to do such a thing is <em>probably</em>\nincorrect. Rust provides lots of tools to make these things rare, but\nthese problems are considered impractical to categorically prevent.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"working-with-unsafe\"><a class=\"header\" href=\"#working-with-unsafe\">Working with Unsafe</a></h1>\n<p>Rust generally only gives us the tools to talk about Unsafe Rust in a scoped and\nbinary manner. Unfortunately, reality is significantly more complicated than\nthat. For instance, consider the following toy function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">index</span></span>(idx: <span class=\"hljs-built_in\">usize</span>, arr: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt; {\n    <span class=\"hljs-keyword\">if</span> idx &lt; arr.len() {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-literal\">Some</span>(*arr.get_unchecked(idx))\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-literal\">None</span>\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This function is safe and correct. We check that the index is in bounds, and if\nit is, index into the array in an unchecked manner. We say that such a correct\nunsafely implemented function is <em>sound</em>, meaning that safe code cannot cause\nUndefined Behavior through it (which, remember, is the single fundamental\nproperty of Safe Rust).</p>\n<p>But even in such a trivial function, the scope of the unsafe block is\nquestionable. Consider changing the <code class=\"hljs\">&lt;</code> to a <code class=\"hljs\">&lt;=</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">index</span></span>(idx: <span class=\"hljs-built_in\">usize</span>, arr: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt; {\n    <span class=\"hljs-keyword\">if</span> idx &lt;= arr.len() {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-literal\">Some</span>(*arr.get_unchecked(idx))\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-literal\">None</span>\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This program is now <em>unsound</em>, Safe Rust can cause Undefined Behavior, and yet\n<em>we only modified safe code</em>. This is the fundamental problem of safety: it's\nnon-local. The soundness of our unsafe operations necessarily depends on the\nstate established by otherwise \"safe\" operations.</p>\n<p>Safety is modular in the sense that opting into unsafety doesn't require you\nto consider arbitrary other kinds of badness. For instance, doing an unchecked\nindex into a slice doesn't mean you suddenly need to worry about the slice being\nnull or containing uninitialized memory. Nothing fundamentally changes. However\nsafety <em>isn't</em> modular in the sense that programs are inherently stateful and\nyour unsafe operations may depend on arbitrary other state.</p>\n<p>This non-locality gets much worse when we incorporate actual persistent state.\nConsider a simple implementation of <code class=\"hljs\">Vec</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::ptr;\n\n<span class=\"hljs-comment\">// Note: This definition is naive. See the chapter on implementing Vec.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    ptr: *<span class=\"hljs-keyword\">mut</span> T,\n    len: <span class=\"hljs-built_in\">usize</span>,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-comment\">// Note this implementation does not correctly handle zero-sized types.</span>\n<span class=\"hljs-comment\">// See the chapter on implementing Vec.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">push</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, elem: T) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.len == <span class=\"hljs-keyword\">self</span>.cap {\n            <span class=\"hljs-comment\">// not important for this example</span>\n            <span class=\"hljs-keyword\">self</span>.reallocate();\n        }\n        <span class=\"hljs-keyword\">unsafe</span> {\n            ptr::write(<span class=\"hljs-keyword\">self</span>.ptr.add(<span class=\"hljs-keyword\">self</span>.len), elem);\n            <span class=\"hljs-keyword\">self</span>.len += <span class=\"hljs-number\">1</span>;\n        }\n    }\n<span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">reallocate</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) { }\n</span>}\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>This code is simple enough to reasonably audit and informally verify. Now consider\nadding the following method:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">make_room</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n    <span class=\"hljs-comment\">// grow the capacity</span>\n    <span class=\"hljs-keyword\">self</span>.cap += <span class=\"hljs-number\">1</span>;\n}</code></pre>\n<p>This code is 100% Safe Rust but it is also completely unsound. Changing the\ncapacity violates the invariants of Vec (that <code class=\"hljs\">cap</code> reflects the allocated space\nin the Vec). This is not something the rest of Vec can guard against. It <em>has</em>\nto trust the capacity field because there's no way to verify it.</p>\n<p>Because it relies on invariants of a struct field, this <code class=\"hljs\">unsafe</code> code\ndoes more than pollute a whole function: it pollutes a whole <em>module</em>.\nGenerally, the only bullet-proof way to limit the scope of unsafe code is at the\nmodule boundary with privacy.</p>\n<p>However this works <em>perfectly</em>. The existence of <code class=\"hljs\">make_room</code> is <em>not</em> a\nproblem for the soundness of Vec because we didn't mark it as public. Only the\nmodule that defines this function can call it. Also, <code class=\"hljs\">make_room</code> directly\naccesses the private fields of Vec, so it can only be written in the same module\nas Vec.</p>\n<p>It is therefore possible for us to write a completely safe abstraction that\nrelies on complex invariants. This is <em>critical</em> to the relationship between\nSafe Rust and Unsafe Rust.</p>\n<p>We have already seen that Unsafe code must trust <em>some</em> Safe code, but shouldn't\ntrust <em>generic</em> Safe code. Privacy is important to unsafe code for similar reasons:\nit prevents us from having to trust all the safe code in the universe from messing\nwith our trusted state.</p>\n<p>Safety lives!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"data-representation-in-rust\"><a class=\"header\" href=\"#data-representation-in-rust\">Data Representation in Rust</a></h1>\n<p>Low-level programming cares a lot about data layout. It's a big deal. It also\npervasively influences the rest of the language, so we're going to start by\ndigging into how data is represented in Rust.</p>\n<p>This chapter is ideally in agreement with, and rendered redundant by,\nthe <a href=\"../reference/type-layout.html\">Type Layout section of the Reference</a>. When this\nbook was first written, the reference was in complete disrepair, and the\nRustonomicon was attempting to serve as a partial replacement for the reference.\nThis is no longer the case, so this whole chapter can ideally be deleted.</p>\n<p>We'll keep this chapter around for a bit longer, but ideally you should be\ncontributing any new facts or improvements to the Reference instead.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"reprrust\"><a class=\"header\" href=\"#reprrust\">repr(Rust)</a></h1>\n<p>First and foremost, all types have an alignment specified in bytes. The\nalignment of a type specifies what addresses are valid to store the value at. A\nvalue with alignment <code class=\"hljs\">n</code> must only be stored at an address that is a multiple of\n<code class=\"hljs\">n</code>. So alignment 2 means you must be stored at an even address, and 1 means\nthat you can be stored anywhere. Alignment is at least 1, and always a power\nof 2.</p>\n<p>Primitives are usually aligned to their size, although this is\nplatform-specific behavior. For example, on x86 <code class=\"hljs\">u64</code> and <code class=\"hljs\">f64</code> are often\naligned to 4 bytes (32 bits).</p>\n<p>A type's size must always be a multiple of its alignment (Zero being a valid size\nfor any alignment). This ensures that an array of that type may always be indexed\nby offsetting by a multiple of its size. Note that the size and alignment of a\ntype may not be known statically in the case of <a href=\"exotic-sizes.html#dynamically-sized-types-dsts\">dynamically sized types</a>.</p>\n<p>Rust gives you the following ways to lay out composite data:</p>\n<ul>\n<li>structs (named product types)</li>\n<li>tuples (anonymous product types)</li>\n<li>arrays (homogeneous product types)</li>\n<li>enums (named sum types -- tagged unions)</li>\n<li>unions (untagged unions)</li>\n</ul>\n<p>An enum is said to be <em>field-less</em> if none of its variants have associated data.</p>\n<p>By default, composite structures have an alignment equal to the maximum\nof their fields' alignments. Rust will consequently insert padding where\nnecessary to ensure that all fields are properly aligned and that the overall\ntype's size is a multiple of its alignment. For instance:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span> {\n    a: <span class=\"hljs-built_in\">u8</span>,\n    b: <span class=\"hljs-built_in\">u32</span>,\n    c: <span class=\"hljs-built_in\">u16</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>will be 32-bit aligned on a target that aligns these primitives to their\nrespective sizes. The whole struct will therefore have a size that is a multiple\nof 32-bits. It may become:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span> {\n    a: <span class=\"hljs-built_in\">u8</span>,\n    _pad1: [<span class=\"hljs-built_in\">u8</span>; <span class=\"hljs-number\">3</span>], <span class=\"hljs-comment\">// to align `b`</span>\n    b: <span class=\"hljs-built_in\">u32</span>,\n    c: <span class=\"hljs-built_in\">u16</span>,\n    _pad2: [<span class=\"hljs-built_in\">u8</span>; <span class=\"hljs-number\">2</span>], <span class=\"hljs-comment\">// to make overall size multiple of 4</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>or maybe:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span> {\n    b: <span class=\"hljs-built_in\">u32</span>,\n    c: <span class=\"hljs-built_in\">u16</span>,\n    a: <span class=\"hljs-built_in\">u8</span>,\n    _pad: <span class=\"hljs-built_in\">u8</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>There is <em>no indirection</em> for these types; all data is stored within the struct,\nas you would expect in C. However with the exception of arrays (which are\ndensely packed and in-order), the layout of data is not specified by default.\nGiven the two following struct definitions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span> {\n    a: <span class=\"hljs-built_in\">i32</span>,\n    b: <span class=\"hljs-built_in\">u64</span>,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">B</span></span> {\n    a: <span class=\"hljs-built_in\">i32</span>,\n    b: <span class=\"hljs-built_in\">u64</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Rust <em>does</em> guarantee that two instances of A have their data laid out in\nexactly the same way. However Rust <em>does not</em> currently guarantee that an\ninstance of A has the same field ordering or padding as an instance of B.</p>\n<p>With A and B as written, this point would seem to be pedantic, but several other\nfeatures of Rust make it desirable for the language to play with data layout in\ncomplex ways.</p>\n<p>For instance, consider this struct:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;T, U&gt; {\n    count: <span class=\"hljs-built_in\">u16</span>,\n    data1: T,\n    data2: U,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Now consider the monomorphizations of <code class=\"hljs\">Foo&lt;u32, u16&gt;</code> and <code class=\"hljs\">Foo&lt;u16, u32&gt;</code>. If\nRust lays out the fields in the order specified, we expect it to pad the\nvalues in the struct to satisfy their alignment requirements. So if Rust\ndidn't reorder fields, we would expect it to produce the following:</p>\n<!-- ignore: explanation code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-built_in\">u16</span>, <span class=\"hljs-built_in\">u32</span>&gt; {\n    count: <span class=\"hljs-built_in\">u16</span>,\n    data1: <span class=\"hljs-built_in\">u16</span>,\n    data2: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-built_in\">u32</span>, <span class=\"hljs-built_in\">u16</span>&gt; {\n    count: <span class=\"hljs-built_in\">u16</span>,\n    _pad1: <span class=\"hljs-built_in\">u16</span>,\n    data1: <span class=\"hljs-built_in\">u32</span>,\n    data2: <span class=\"hljs-built_in\">u16</span>,\n    _pad2: <span class=\"hljs-built_in\">u16</span>,\n}</code></pre>\n<p>The latter case quite simply wastes space. An optimal use of space\nrequires different monomorphizations to have <em>different field orderings</em>.</p>\n<p>Enums make this consideration even more complicated. Naively, an enum such as:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Foo</span></span> {\n    A(<span class=\"hljs-built_in\">u32</span>),\n    B(<span class=\"hljs-built_in\">u64</span>),\n    C(<span class=\"hljs-built_in\">u8</span>),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>might be laid out as:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">FooRepr</span></span> {\n    data: <span class=\"hljs-built_in\">u64</span>, <span class=\"hljs-comment\">// this is either a u64, u32, or u8 based on `tag`</span>\n    tag: <span class=\"hljs-built_in\">u8</span>,   <span class=\"hljs-comment\">// 0 = A, 1 = B, 2 = C</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>And indeed this is approximately how it would be laid out (modulo the\nsize and position of <code class=\"hljs\">tag</code>).</p>\n<p>However there are several cases where such a representation is inefficient. The\nclassic case of this is Rust's \"null pointer optimization\": an enum consisting\nof a single outer unit variant (e.g. <code class=\"hljs\">None</code>) and a (potentially nested) non-\nnullable pointer variant (e.g. <code class=\"hljs\">Some(&amp;T)</code>) makes the tag unnecessary. A null\npointer can safely be interpreted as the unit (<code class=\"hljs\">None</code>) variant. The net\nresult is that, for example, <code class=\"hljs\">size_of::&lt;Option&lt;&amp;T&gt;&gt;() == size_of::&lt;&amp;T&gt;()</code>.</p>\n<p>There are many types in Rust that are, or contain, non-nullable pointers such as\n<code class=\"hljs\">Box&lt;T&gt;</code>, <code class=\"hljs\">Vec&lt;T&gt;</code>, <code class=\"hljs\">String</code>, <code class=\"hljs\">&amp;T</code>, and <code class=\"hljs\">&amp;mut T</code>. Similarly, one can imagine\nnested enums pooling their tags into a single discriminant, as they are by\ndefinition known to have a limited range of valid values. In principle enums could\nuse fairly elaborate algorithms to store bits throughout nested types with\nforbidden values. As such it is <em>especially</em> desirable that\nwe leave enum layout unspecified today.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"exotically-sized-types\"><a class=\"header\" href=\"#exotically-sized-types\">Exotically Sized Types</a></h1>\n<p>Most of the time, we expect types to have a statically known and positive size.\nThis isn't always the case in Rust.</p>\n<h2 id=\"dynamically-sized-types-dsts\"><a class=\"header\" href=\"#dynamically-sized-types-dsts\">Dynamically Sized Types (DSTs)</a></h2>\n<p>Rust supports Dynamically Sized Types (DSTs): types without a statically\nknown size or alignment. On the surface, this is a bit nonsensical: Rust <em>must</em>\nknow the size and alignment of something in order to correctly work with it! In\nthis regard, DSTs are not normal types. Because they lack a statically known\nsize, these types can only exist behind a pointer. Any pointer to a\nDST consequently becomes a <em>wide</em> pointer consisting of the pointer and the\ninformation that \"completes\" them (more on this below).</p>\n<p>There are two major DSTs exposed by the language:</p>\n<ul>\n<li>trait objects: <code class=\"hljs\">dyn MyTrait</code></li>\n<li>slices: <a href=\"../std/primitive.slice.html\"><code class=\"hljs\">[T]</code></a>, <a href=\"../std/primitive.str.html\"><code class=\"hljs\">str</code></a>, and others</li>\n</ul>\n<p>A trait object represents some type that implements the traits it specifies.\nThe exact original type is <em>erased</em> in favor of runtime reflection\nwith a vtable containing all the information necessary to use the type.\nThe information that completes a trait object pointer is the vtable pointer.\nThe runtime size of the pointee can be dynamically requested from the vtable.</p>\n<p>A slice is simply a view into some contiguous storage -- typically an array or\n<code class=\"hljs\">Vec</code>. The information that completes a slice pointer is just the number of elements\nit points to. The runtime size of the pointee is just the statically known size\nof an element multiplied by the number of elements.</p>\n<p>Structs can actually store a single DST directly as their last field, but this\nmakes them a DST as well:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Can't be stored on the stack directly</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MySuperSlice</span></span> {\n    info: <span class=\"hljs-built_in\">u32</span>,\n    data: [<span class=\"hljs-built_in\">u8</span>],\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Although such a type is largely useless without a way to construct it. Currently the\nonly properly supported way to create a custom DST is by making your type generic\nand performing an <em>unsizing coercion</em>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MySuperSliceable</span></span>&lt;T: ?<span class=\"hljs-built_in\">Sized</span>&gt; {\n    info: <span class=\"hljs-built_in\">u32</span>,\n    data: T,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> sized: MySuperSliceable&lt;[<span class=\"hljs-built_in\">u8</span>; <span class=\"hljs-number\">8</span>]&gt; = MySuperSliceable {\n        info: <span class=\"hljs-number\">17</span>,\n        data: [<span class=\"hljs-number\">0</span>; <span class=\"hljs-number\">8</span>],\n    };\n\n    <span class=\"hljs-keyword\">let</span> dynamic: &amp;MySuperSliceable&lt;[<span class=\"hljs-built_in\">u8</span>]&gt; = &amp;sized;\n\n    <span class=\"hljs-comment\">// prints: \"17 [0, 0, 0, 0, 0, 0, 0, 0]\"</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{} {:?}\"</span>, dynamic.info, &amp;dynamic.data);\n}</code></pre></pre>\n<p>(Yes, custom DSTs are a largely half-baked feature for now.)</p>\n<h2 id=\"zero-sized-types-zsts\"><a class=\"header\" href=\"#zero-sized-types-zsts\">Zero Sized Types (ZSTs)</a></h2>\n<p>Rust also allows types to be specified that occupy no space:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Nothing</span></span>; <span class=\"hljs-comment\">// No fields = no size</span>\n\n<span class=\"hljs-comment\">// All fields have no size = no size</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LotsOfNothing</span></span> {\n    foo: Nothing,\n    qux: (),      <span class=\"hljs-comment\">// empty tuple has no size</span>\n    baz: [<span class=\"hljs-built_in\">u8</span>; <span class=\"hljs-number\">0</span>], <span class=\"hljs-comment\">// empty array has no size</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>On their own, Zero Sized Types (ZSTs) are, for obvious reasons, pretty useless.\nHowever as with many curious layout choices in Rust, their potential is realized\nin a generic context: Rust largely understands that any operation that produces\nor stores a ZST can be reduced to a no-op. First off, storing it doesn't even\nmake sense -- it doesn't occupy any space. Also there's only one value of that\ntype, so anything that loads it can just produce it from the aether -- which is\nalso a no-op since it doesn't occupy any space.</p>\n<p>One of the most extreme examples of this is Sets and Maps. Given a\n<code class=\"hljs\">Map&lt;Key, Value&gt;</code>, it is common to implement a <code class=\"hljs\">Set&lt;Key&gt;</code> as just a thin wrapper\naround <code class=\"hljs\">Map&lt;Key, UselessJunk&gt;</code>. In many languages, this would necessitate\nallocating space for UselessJunk and doing work to store and load UselessJunk\nonly to discard it. Proving this unnecessary would be a difficult analysis for\nthe compiler.</p>\n<p>However in Rust, we can just say that  <code class=\"hljs\">Set&lt;Key&gt; = Map&lt;Key, ()&gt;</code>. Now Rust\nstatically knows that every load and store is useless, and no allocation has any\nsize. The result is that the monomorphized code is basically a custom\nimplementation of a HashSet with none of the overhead that HashMap would have to\nsupport values.</p>\n<p>Safe code need not worry about ZSTs, but <em>unsafe</em> code must be careful about the\nconsequence of types with no size. In particular, pointer offsets are no-ops,\nand allocators typically <a href=\"../std/alloc/trait.GlobalAlloc.html#tymethod.alloc\">require a non-zero size</a>.</p>\n<p>Note that references to ZSTs (including empty slices), just like all other\nreferences, must be non-null and suitably aligned. Dereferencing a null or\nunaligned pointer to a ZST is <a href=\"what-unsafe-does.html\">undefined behavior</a>, just like for any other\ntype.</p>\n<h2 id=\"empty-types\"><a class=\"header\" href=\"#empty-types\">Empty Types</a></h2>\n<p>Rust also enables types to be declared that <em>cannot even be instantiated</em>. These\ntypes can only be talked about at the type level, and never at the value level.\nEmpty types can be declared by specifying an enum with no variants:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Void</span></span> {} <span class=\"hljs-comment\">// No variants = EMPTY</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Empty types are even more marginal than ZSTs. The primary motivating example for\nan empty type is type-level unreachability. For instance, suppose an API needs to\nreturn a Result in general, but a specific case actually is infallible. It's\nactually possible to communicate this at the type level by returning a\n<code class=\"hljs\">Result&lt;T, Void&gt;</code>. Consumers of the API can confidently unwrap such a Result\nknowing that it's <em>statically impossible</em> for this value to be an <code class=\"hljs\">Err</code>, as\nthis would require providing a value of type <code class=\"hljs\">Void</code>.</p>\n<p>In principle, Rust can do some interesting analyses and optimizations based\non this fact. For instance, <code class=\"hljs\">Result&lt;T, Void&gt;</code> is represented as just <code class=\"hljs\">T</code>,\nbecause the <code class=\"hljs\">Err</code> case doesn't actually exist (strictly speaking, this is only\nan optimization that is not guaranteed, so for example transmuting one into the\nother is still Undefined Behavior).</p>\n<p>The following <em>could</em> also compile:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Void</span></span> {}\n\n<span class=\"hljs-keyword\">let</span> res: <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">u32</span>, Void&gt; = <span class=\"hljs-literal\">Ok</span>(<span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-comment\">// Err doesn't exist anymore, so Ok is actually irrefutable.</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Ok</span>(num) = res;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>But this trick doesn't work yet.</p>\n<p>One final subtle detail about empty types is that raw pointers to them are\nactually valid to construct, but dereferencing them is Undefined Behavior\nbecause that wouldn't make sense.</p>\n<p>We recommend against modelling C's <code class=\"hljs\">void*</code> type with <code class=\"hljs\">*const Void</code>.\nA lot of people started doing that but quickly ran into trouble because\nRust doesn't really have any safety guards against trying to instantiate\nempty types with unsafe code, and if you do it, it's Undefined Behavior.\nThis was especially problematic because developers had a habit of converting\nraw pointers to references and <code class=\"hljs\">&amp;Void</code> is <em>also</em> Undefined Behavior to\nconstruct.</p>\n<p><code class=\"hljs\">*const ()</code> (or equivalent) works reasonably well for <code class=\"hljs\">void*</code>, and can be made\ninto a reference without any safety problems. It still doesn't prevent you from\ntrying to read or write values, but at least it compiles to a no-op instead\nof Undefined Behavior.</p>\n<h2 id=\"extern-types\"><a class=\"header\" href=\"#extern-types\">Extern Types</a></h2>\n<p>There is <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1861-extern-types.md\">an accepted RFC</a> to add proper types with an unknown size,\ncalled <em>extern types</em>, which would let Rust developers model things like C's <code class=\"hljs\">void*</code>\nand other \"declared but never defined\" types more accurately. However as of\nRust 2018, <a href=\"https://github.com/rust-lang/rust/issues/43467\">the feature is stuck in limbo over how <code class=\"hljs\">size_of_val::&lt;MyExternType&gt;()</code>\nshould behave</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"alternative-representations\"><a class=\"header\" href=\"#alternative-representations\">Alternative representations</a></h1>\n<p>Rust allows you to specify alternative data layout strategies from the default.\nThere's also the <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout.html\">unsafe code guidelines</a> (note that it's <strong>NOT</strong> normative).</p>\n<h2 id=\"reprc\"><a class=\"header\" href=\"#reprc\">repr(C)</a></h2>\n<p>This is the most important <code class=\"hljs\">repr</code>. It has fairly simple intent: do what C does.\nThe order, size, and alignment of fields is exactly what you would expect from C\nor C++. Any type you expect to pass through an FFI boundary should have\n<code class=\"hljs\">repr(C)</code>, as C is the lingua-franca of the programming world. This is also\nnecessary to soundly do more elaborate tricks with data layout such as\nreinterpreting values as a different type.</p>\n<p>We strongly recommend using <a href=\"https://rust-lang.github.io/rust-bindgen/\">rust-bindgen</a> and/or <a href=\"https://github.com/eqrion/cbindgen\">cbindgen</a> to manage your FFI\nboundaries for you. The Rust team works closely with those projects to ensure\nthat they work robustly and are compatible with current and future guarantees\nabout type layouts and <code class=\"hljs\">repr</code>s.</p>\n<p>The interaction of <code class=\"hljs\">repr(C)</code> with Rust's more exotic data layout features must be\nkept in mind. Due to its dual purpose as \"for FFI\" and \"for layout control\",\n<code class=\"hljs\">repr(C)</code> can be applied to types that will be nonsensical or problematic if\npassed through the FFI boundary.</p>\n<ul>\n<li>\n<p>ZSTs are still zero-sized, even though this is not a standard behavior in\nC, and is explicitly contrary to the behavior of an empty type in C++, which\nsays they should still consume a byte of space.</p>\n</li>\n<li>\n<p>DST pointers (wide pointers) and tuples are not a concept\nin C, and as such are never FFI-safe.</p>\n</li>\n<li>\n<p>Enums with fields also aren't a concept in C or C++, but a valid bridging\nof the types <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2195-really-tagged-unions.md\">is defined</a>.</p>\n</li>\n<li>\n<p>If <code class=\"hljs\">T</code> is an <a href=\"ffi.html#the-nullable-pointer-optimization\">FFI-safe non-nullable pointer\ntype</a>,\n<code class=\"hljs\">Option&lt;T&gt;</code> is guaranteed to have the same layout and ABI as <code class=\"hljs\">T</code> and is\ntherefore also FFI-safe. As of this writing, this covers <code class=\"hljs\">&amp;</code>, <code class=\"hljs\">&amp;mut</code>,\nand function pointers, all of which can never be null.</p>\n</li>\n<li>\n<p>Tuple structs are like structs with regards to <code class=\"hljs\">repr(C)</code>, as the only\ndifference from a struct is that the fields aren’t named.</p>\n</li>\n<li>\n<p><code class=\"hljs\">repr(C)</code> is equivalent to one of <code class=\"hljs\">repr(u*)</code> (see the next section) for\nfieldless enums. The chosen size is the default enum size for the target platform's C\napplication binary interface (ABI). Note that enum representation in C is implementation\ndefined, so this is really a \"best guess\". In particular, this may be incorrect\nwhen the C code of interest is compiled with certain flags.</p>\n</li>\n<li>\n<p>Fieldless enums with <code class=\"hljs\">repr(C)</code> or <code class=\"hljs\">repr(u*)</code> still may not be set to an\ninteger value without a corresponding variant, even though this is\npermitted behavior in C or C++. It is undefined behavior to (unsafely)\nconstruct an instance of an enum that does not match one of its\nvariants. (This allows exhaustive matches to continue to be written and\ncompiled as normal.)</p>\n</li>\n</ul>\n<h2 id=\"reprtransparent\"><a class=\"header\" href=\"#reprtransparent\">repr(transparent)</a></h2>\n<p><code class=\"hljs\">#[repr(transparent)]</code> can only be used on a struct or single-variant enum that has a single non-zero-sized field (there may be additional zero-sized fields).\nThe effect is that the layout and ABI of the whole struct/enum is guaranteed to be the same as that one field.</p>\n<blockquote>\n<p>NOTE: There's a <code class=\"hljs\">transparent_unions</code> nightly feature to apply <code class=\"hljs\">repr(transparent)</code> to unions,\nbut it hasn't been stabilized due to design concerns. See the <a href=\"https://github.com/rust-lang/rust/issues/60405\">tracking issue</a> for more details.</p>\n</blockquote>\n<p>The goal is to make it possible to transmute between the single field and the\nstruct/enum. An example of that is <a href=\"../std/cell/struct.UnsafeCell.html\"><code class=\"hljs\">UnsafeCell</code></a>, which can be transmuted into\nthe type it wraps (<a href=\"../std/cell/struct.UnsafeCell.html\"><code class=\"hljs\">UnsafeCell</code></a> also uses the unstable <a href=\"https://github.com/rust-lang/rust/pull/68491\">no_niche</a>,\nso its ABI is not actually guaranteed to be the same when nested in other types).</p>\n<p>Also, passing the struct/enum through FFI where the inner field type is expected on\nthe other side is guaranteed to work. In particular, this is necessary for\n<code class=\"hljs\">struct Foo(f32)</code> or <code class=\"hljs\">enum Foo { Bar(f32) }</code> to always have the same ABI as <code class=\"hljs\">f32</code>.</p>\n<p>This repr is only considered part of the public ABI of a type if either the single\nfield is <code class=\"hljs\">pub</code>, or if its layout is documented in prose. Otherwise, the layout should\nnot be relied upon by other crates.</p>\n<p>More details are in the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1758-repr-transparent.md\">RFC 1758</a> and the <a href=\"https://rust-lang.github.io/rfcs/2645-transparent-unions.html\">RFC 2645</a>.</p>\n<h2 id=\"repru-repri\"><a class=\"header\" href=\"#repru-repri\">repr(u*), repr(i*)</a></h2>\n<p>These specify the size to make a fieldless enum. If the discriminant overflows\nthe integer it has to fit in, it will produce a compile-time error. You can\nmanually ask Rust to allow this by setting the overflowing element to explicitly\nbe 0. However Rust will not allow you to create an enum where two variants have\nthe same discriminant.</p>\n<p>The term \"fieldless enum\" only means that the enum doesn't have data in any\nof its variants. A fieldless enum without a <code class=\"hljs\">repr(u*)</code> or <code class=\"hljs\">repr(C)</code> is\nstill a Rust native type, and does not have a stable ABI representation.\nAdding a <code class=\"hljs\">repr</code> causes it to be treated exactly like the specified\ninteger size for ABI purposes.</p>\n<p>If the enum has fields, the effect is similar to the effect of <code class=\"hljs\">repr(C)</code>\nin that there is a defined layout of the type. This makes it possible to\npass the enum to C code, or access the type's raw representation and directly\nmanipulate its tag and fields. See <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2195-really-tagged-unions.md\">the RFC</a> for details.</p>\n<p>These <code class=\"hljs\">repr</code>s have no effect on a struct.</p>\n<p>Adding an explicit <code class=\"hljs\">repr(u*)</code>, <code class=\"hljs\">repr(i*)</code>, or <code class=\"hljs\">repr(C)</code> to an enum with fields suppresses the null-pointer optimization, like:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::mem::size_of;\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">MyOption</span></span>&lt;T&gt; {\n    <span class=\"hljs-literal\">Some</span>(T),\n    <span class=\"hljs-literal\">None</span>,\n}\n\n<span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">MyReprOption</span></span>&lt;T&gt; {\n    <span class=\"hljs-literal\">Some</span>(T),\n    <span class=\"hljs-literal\">None</span>,\n}\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">8</span>, size_of::&lt;MyOption&lt;&amp;<span class=\"hljs-built_in\">u16</span>&gt;&gt;());\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">16</span>, size_of::&lt;MyReprOption&lt;&amp;<span class=\"hljs-built_in\">u16</span>&gt;&gt;());\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This optimization still applies to fieldless enums with an explicit <code class=\"hljs\">repr(u*)</code>, <code class=\"hljs\">repr(i*)</code>, or <code class=\"hljs\">repr(C)</code>.</p>\n<h2 id=\"reprpacked\"><a class=\"header\" href=\"#reprpacked\">repr(packed)</a></h2>\n<p><code class=\"hljs\">repr(packed)</code> forces Rust to strip any padding, and only align the type to a\nbyte. This may improve the memory footprint, but will likely have other negative\nside-effects.</p>\n<p>In particular, most architectures <em>strongly</em> prefer values to be aligned. This\nmay mean the unaligned loads are penalized (x86), or even fault (some ARM\nchips). For simple cases like directly loading or storing a packed field, the\ncompiler might be able to paper over alignment issues with shifts and masks.\nHowever if you take a reference to a packed field, it's unlikely that the\ncompiler will be able to emit code to avoid an unaligned load.</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/27060\">As this can cause undefined behavior</a>, the lint has been implemented\nand it will become a hard error.</p>\n<p><code class=\"hljs\">repr(packed)</code> is not to be used lightly. Unless you have extreme requirements,\nthis should not be used.</p>\n<p>This repr is a modifier on <code class=\"hljs\">repr(C)</code> and <code class=\"hljs\">repr(Rust)</code>.</p>\n<h2 id=\"repralignn\"><a class=\"header\" href=\"#repralignn\">repr(align(n))</a></h2>\n<p><code class=\"hljs\">repr(align(n))</code> (where <code class=\"hljs\">n</code> is a power of two) forces the type to have an\nalignment of <em>at least</em> n.</p>\n<p>This enables several tricks, like making sure neighboring elements of an array\nnever share the same cache line with each other (which may speed up certain\nkinds of concurrent code).</p>\n<p>This is a modifier on <code class=\"hljs\">repr(C)</code> and <code class=\"hljs\">repr(Rust)</code>. It is incompatible with\n<code class=\"hljs\">repr(packed)</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"ownership-and-lifetimes\"><a class=\"header\" href=\"#ownership-and-lifetimes\">Ownership and Lifetimes</a></h1>\n<p>Ownership is the breakout feature of Rust. It allows Rust to be completely\nmemory-safe and efficient, while avoiding garbage collection. Before getting\ninto the ownership system in detail, we will consider the motivation of this\ndesign.</p>\n<p>We will assume that you accept that garbage collection (GC) is not always an\noptimal solution, and that it is desirable to manually manage memory in some\ncontexts. If you do not accept this, might I interest you in a different\nlanguage?</p>\n<p>Regardless of your feelings on GC, it is pretty clearly a <em>massive</em> boon to\nmaking code safe. You never have to worry about things going away <em>too soon</em>\n(although whether you still wanted to be pointing at that thing is a different\nissue...). This is a pervasive problem that C and C++ programs need to deal\nwith. Consider this simple mistake that all of us who have used a non-GC'd\nlanguage have made at one point:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">as_str</span></span>(data: &amp;<span class=\"hljs-built_in\">u32</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-comment\">// compute the string</span>\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}\"</span>, data);\n\n    <span class=\"hljs-comment\">// OH NO! We returned a reference to something that</span>\n    <span class=\"hljs-comment\">// exists only in this function!</span>\n    <span class=\"hljs-comment\">// Dangling pointer! Use after free! Alas!</span>\n    <span class=\"hljs-comment\">// (this does not compile in Rust)</span>\n    &amp;s\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This is exactly what Rust's ownership system was built to solve.\nRust knows the scope in which the <code class=\"hljs\">&amp;s</code> lives, and as such can prevent it from\nescaping. However this is a simple case that even a C compiler could plausibly\ncatch. Things get more complicated as code gets bigger and pointers get fed through\nvarious functions. Eventually, a C compiler will fall down and won't be able to\nperform sufficient escape analysis to prove your code unsound. It will consequently\nbe forced to accept your program on the assumption that it is correct.</p>\n<p>This will never happen to Rust. It's up to the programmer to prove to the\ncompiler that everything is sound.</p>\n<p>Of course, Rust's story around ownership is much more complicated than just\nverifying that references don't escape the scope of their referent. That's\nbecause ensuring pointers are always valid is much more complicated than this.\nFor instance in this code,</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> data = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-comment\">// get an internal reference</span>\n<span class=\"hljs-keyword\">let</span> x = &amp;data[<span class=\"hljs-number\">0</span>];\n\n<span class=\"hljs-comment\">// OH NO! `push` causes the backing storage of `data` to be reallocated.</span>\n<span class=\"hljs-comment\">// Dangling pointer! Use after free! Alas!</span>\n<span class=\"hljs-comment\">// (this does not compile in Rust)</span>\ndata.push(<span class=\"hljs-number\">4</span>);\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>naive scope analysis would be insufficient to prevent this bug, because <code class=\"hljs\">data</code>\ndoes in fact live as long as we needed. However it was <em>changed</em> while we had\na reference into it. This is why Rust requires any references to freeze the\nreferent and its owners.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"references\"><a class=\"header\" href=\"#references\">References</a></h1>\n<p>There are two kinds of reference:</p>\n<ul>\n<li>Shared reference: <code class=\"hljs\">&amp;</code></li>\n<li>Mutable reference: <code class=\"hljs\">&amp;mut</code></li>\n</ul>\n<p>Which obey the following rules:</p>\n<ul>\n<li>A reference cannot outlive its referent</li>\n<li>A mutable reference cannot be aliased</li>\n</ul>\n<p>That's it. That's the whole model references follow.</p>\n<p>Of course, we should probably define what <em>aliased</em> means.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0425]: cannot find value `aliased` in this scope\n --&gt; &lt;rust.rs&gt;:2:20\n  |\n2 |     println!(\"{}\", aliased);\n  |                    ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n</code></pre>\n<p>Unfortunately, Rust hasn't actually defined its aliasing model. 🙀</p>\n<p>While we wait for the Rust devs to specify the semantics of their language,\nlet's use the next section to discuss what aliasing is in general, and why it\nmatters.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"aliasing\"><a class=\"header\" href=\"#aliasing\">Aliasing</a></h1>\n<p>First off, let's get some important caveats out of the way:</p>\n<ul>\n<li>\n<p>We will be using the broadest possible definition of aliasing for the sake\nof discussion. Rust's definition will probably be more restricted to factor\nin mutations and liveness.</p>\n</li>\n<li>\n<p>We will be assuming a single-threaded, interrupt-free, execution. We will also\nbe ignoring things like memory-mapped hardware. Rust assumes these things\ndon't happen unless you tell it otherwise. For more details, see the\n<a href=\"concurrency.html\">Concurrency Chapter</a>.</p>\n</li>\n</ul>\n<p>With that said, here's our working definition: variables and pointers <em>alias</em>\nif they refer to overlapping regions of memory.</p>\n<h2 id=\"why-aliasing-matters\"><a class=\"header\" href=\"#why-aliasing-matters\">Why Aliasing Matters</a></h2>\n<p>So why should we care about aliasing?</p>\n<p>Consider this simple function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">compute</span></span>(input: &amp;<span class=\"hljs-built_in\">u32</span>, output: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u32</span>) {\n    <span class=\"hljs-keyword\">if</span> *input &gt; <span class=\"hljs-number\">10</span> {\n        *output = <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> *input &gt; <span class=\"hljs-number\">5</span> {\n        *output *= <span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-comment\">// remember that `output` will be `2` if `input &gt; 10`</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We would <em>like</em> to be able to optimize it to the following function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">compute</span></span>(input: &amp;<span class=\"hljs-built_in\">u32</span>, output: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u32</span>) {\n    <span class=\"hljs-keyword\">let</span> cached_input = *input; <span class=\"hljs-comment\">// keep `*input` in a register</span>\n    <span class=\"hljs-keyword\">if</span> cached_input &gt; <span class=\"hljs-number\">10</span> {\n        <span class=\"hljs-comment\">// If the input is greater than 10, the previous code would set the output to 1 and then double it,</span>\n        <span class=\"hljs-comment\">// resulting in an output of 2 (because `&gt;10` implies `&gt;5`).</span>\n        <span class=\"hljs-comment\">// Here, we avoid the double assignment and just set it directly to 2.</span>\n        *output = <span class=\"hljs-number\">2</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> cached_input &gt; <span class=\"hljs-number\">5</span> {\n        *output *= <span class=\"hljs-number\">2</span>;\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In Rust, this optimization should be sound. For almost any other language, it\nwouldn't be (barring global analysis). This is because the optimization relies\non knowing that aliasing doesn't occur, which most languages are fairly liberal\nwith. Specifically, we need to worry about function arguments that make <code class=\"hljs\">input</code>\nand <code class=\"hljs\">output</code> overlap, such as <code class=\"hljs\">compute(&amp;x, &amp;mut x)</code>.</p>\n<p>With that input, we could get this execution:</p>\n<!-- ignore: expanded code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">                    <span class=\"hljs-comment\">//  input ==  output == 0xabad1dea</span>\n                    <span class=\"hljs-comment\">// *input == *output == 20</span>\n<span class=\"hljs-keyword\">if</span> *input &gt; <span class=\"hljs-number\">10</span> {    <span class=\"hljs-comment\">// true  (*input == 20)</span>\n    *output = <span class=\"hljs-number\">1</span>;    <span class=\"hljs-comment\">// also overwrites *input, because they are the same</span>\n}\n<span class=\"hljs-keyword\">if</span> *input &gt; <span class=\"hljs-number\">5</span> {     <span class=\"hljs-comment\">// false (*input == 1)</span>\n    *output *= <span class=\"hljs-number\">2</span>;\n}\n                    <span class=\"hljs-comment\">// *input == *output == 1</span></code></pre>\n<p>Our optimized function would produce <code class=\"hljs\">*output == 2</code> for this input, so the\ncorrectness of our optimization relies on this input being impossible.</p>\n<p>In Rust we know this input should be impossible because <code class=\"hljs\">&amp;mut</code> isn't allowed to be\naliased. So we can safely reject its possibility and perform this optimization.\nIn most other languages, this input would be entirely possible, and must be considered.</p>\n<p>This is why alias analysis is important: it lets the compiler perform useful\noptimizations! Some examples:</p>\n<ul>\n<li>keeping values in registers by proving no pointers access the value's memory</li>\n<li>eliminating reads by proving some memory hasn't been written to since last we read it</li>\n<li>eliminating writes by proving some memory is never read before the next write to it</li>\n<li>moving or reordering reads and writes by proving they don't depend on each other</li>\n</ul>\n<p>These optimizations also tend to prove the soundness of bigger optimizations\nsuch as loop vectorization, constant propagation, and dead code elimination.</p>\n<p>In the previous example, we used the fact that <code class=\"hljs\">&amp;mut u32</code> can't be aliased to prove\nthat writes to <code class=\"hljs\">*output</code> can't possibly affect <code class=\"hljs\">*input</code>. This lets us cache <code class=\"hljs\">*input</code>\nin a register, eliminating a read.</p>\n<p>By caching this read, we knew that the write in the <code class=\"hljs\">&gt; 10</code> branch couldn't\naffect whether we take the <code class=\"hljs\">&gt; 5</code> branch, allowing us to also eliminate a\nread-modify-write (doubling <code class=\"hljs\">*output</code>) when <code class=\"hljs\">*input &gt; 10</code>.</p>\n<p>The key thing to remember about alias analysis is that writes are the primary\nhazard for optimizations. That is, the only thing that prevents us\nfrom moving a read to any other part of the program is the possibility of us\nre-ordering it with a write to the same location.</p>\n<p>For instance, we have no concern for aliasing in the following modified version\nof our function, because we've moved the only write to <code class=\"hljs\">*output</code> to the very\nend of our function. This allows us to freely reorder the reads of <code class=\"hljs\">*input</code> that\noccur before it:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">compute</span></span>(input: &amp;<span class=\"hljs-built_in\">u32</span>, output: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u32</span>) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> temp = *output;\n    <span class=\"hljs-keyword\">if</span> *input &gt; <span class=\"hljs-number\">10</span> {\n        temp = <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> *input &gt; <span class=\"hljs-number\">5</span> {\n        temp *= <span class=\"hljs-number\">2</span>;\n    }\n    *output = temp;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We're still relying on alias analysis to assume that <code class=\"hljs\">input</code> doesn't alias\n<code class=\"hljs\">temp</code>, but the proof is much simpler: the value of a local variable can't be\naliased by things that existed before it was declared. This is an assumption\nevery language freely makes, and so this version of the function could be\noptimized the way we want in any language.</p>\n<p>This is why the definition of \"alias\" that Rust will use likely involves some\nnotion of liveness and mutation: we don't actually care if aliasing occurs if\nthere aren't any actual writes to memory happening.</p>\n<p>Of course, a full aliasing model for Rust must also take into consideration things like\nfunction calls (which may mutate things we don't see), raw pointers (which have\nno aliasing requirements on their own), and UnsafeCell (which lets the referent\nof an <code class=\"hljs\">&amp;</code> be mutated).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lifetimes\"><a class=\"header\" href=\"#lifetimes\">Lifetimes</a></h1>\n<p>Rust enforces these rules through <em>lifetimes</em>. Lifetimes are named\nregions of code that a reference must be valid for. Those regions\nmay be fairly complex, as they correspond to paths of execution\nin the program. There may even be holes in these paths of execution,\nas it's possible to invalidate a reference as long as it's reinitialized\nbefore it's used again. Types which contain references (or pretend to)\nmay also be tagged with lifetimes so that Rust can prevent them from\nbeing invalidated as well.</p>\n<p>In most of our examples, the lifetimes will coincide with scopes. This is\nbecause our examples are simple. The more complex cases where they don't\ncoincide are described below.</p>\n<p>Within a function body, Rust generally doesn't let you explicitly name the\nlifetimes involved. This is because it's generally not really necessary\nto talk about lifetimes in a local context; Rust has all the information and\ncan work out everything as optimally as possible. Many anonymous scopes and\ntemporaries that you would otherwise have to write are often introduced to\nmake your code Just Work.</p>\n<p>However once you cross the function boundary, you need to start talking about\nlifetimes. Lifetimes are denoted with an apostrophe: <code class=\"hljs\">'a</code>, <code class=\"hljs\">'static</code>. To dip\nour toes with lifetimes, we're going to pretend that we're actually allowed\nto label scopes with lifetimes, and desugar the examples from the start of\nthis chapter.</p>\n<p>Originally, our examples made use of <em>aggressive</em> sugar -- high fructose corn\nsyrup even -- around scopes and lifetimes, because writing everything out\nexplicitly is <em>extremely noisy</em>. All Rust code relies on aggressive inference\nand elision of \"obvious\" things.</p>\n<p>One particularly interesting piece of sugar is that each <code class=\"hljs\">let</code> statement\nimplicitly introduces a scope. For the most part, this doesn't really matter.\nHowever it does matter for variables that refer to each other. As a simple\nexample, let's completely desugar this simple piece of Rust code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> y = &amp;x;\n<span class=\"hljs-keyword\">let</span> z = &amp;y;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The borrow checker always tries to minimize the extent of a lifetime, so it will\nlikely desugar to the following:</p>\n<!-- ignore: desugared code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> `'a: {` and `&amp;'b x` is not valid syntax!</span>\n<span class=\"hljs-symbol\">'a</span>: {\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-symbol\">'b</span>: {\n        <span class=\"hljs-comment\">// lifetime used is 'b because that's good enough.</span>\n        <span class=\"hljs-keyword\">let</span> y: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">i32</span> = &amp;<span class=\"hljs-symbol\">'b</span> x;\n        <span class=\"hljs-symbol\">'c</span>: {\n            <span class=\"hljs-comment\">// ditto on 'c</span>\n            <span class=\"hljs-keyword\">let</span> z: &amp;<span class=\"hljs-symbol\">'c</span> &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">i32</span> = &amp;<span class=\"hljs-symbol\">'c</span> y; <span class=\"hljs-comment\">// \"a reference to a reference to an i32\" (with lifetimes annotated)</span>\n        }\n    }\n}</code></pre>\n<p>Wow. That's... awful. Let's all take a moment to thank Rust for making this easier.</p>\n<p>Actually passing references to outer scopes will cause Rust to infer\na larger lifetime:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> z;\n<span class=\"hljs-keyword\">let</span> y = &amp;x;\nz = y;\n<span class=\"boring\">}</span></code></pre></pre>\n<!-- ignore: desugared code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-symbol\">'a</span>: {\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-symbol\">'b</span>: {\n        <span class=\"hljs-keyword\">let</span> z: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">i32</span>;\n        <span class=\"hljs-symbol\">'c</span>: {\n            <span class=\"hljs-comment\">// Must use 'b here because the reference to x is</span>\n            <span class=\"hljs-comment\">// being passed to the scope 'b.</span>\n            <span class=\"hljs-keyword\">let</span> y: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">i32</span> = &amp;<span class=\"hljs-symbol\">'b</span> x;\n            z = y;\n        }\n    }\n}</code></pre>\n<h2 id=\"example-references-that-outlive-referents\"><a class=\"header\" href=\"#example-references-that-outlive-referents\">Example: references that outlive referents</a></h2>\n<p>Alright, let's look at some of those examples from before:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">as_str</span></span>(data: &amp;<span class=\"hljs-built_in\">u32</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}\"</span>, data);\n    &amp;s\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>desugars to:</p>\n<!-- ignore: desugared code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">as_str</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(data: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u32</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-symbol\">'b</span>: {\n        <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}\"</span>, data);\n        <span class=\"hljs-keyword\">return</span> &amp;<span class=\"hljs-symbol\">'a</span> s;\n    }\n}</code></pre>\n<p>This signature of <code class=\"hljs\">as_str</code> takes a reference to a u32 with <em>some</em> lifetime, and\npromises that it can produce a reference to a str that can live <em>just as long</em>.\nAlready we can see why this signature might be trouble. That basically implies\nthat we're going to find a str somewhere in the scope the reference\nto the u32 originated in, or somewhere <em>even earlier</em>. That's a bit of a tall\norder.</p>\n<p>We then proceed to compute the string <code class=\"hljs\">s</code>, and return a reference to it. Since\nthe contract of our function says the reference must outlive <code class=\"hljs\">'a</code>, that's the\nlifetime we infer for the reference. Unfortunately, <code class=\"hljs\">s</code> was defined in the\nscope <code class=\"hljs\">'b</code>, so the only way this is sound is if <code class=\"hljs\">'b</code> contains <code class=\"hljs\">'a</code> -- which is\nclearly false since <code class=\"hljs\">'a</code> must contain the function call itself. We have therefore\ncreated a reference whose lifetime outlives its referent, which is <em>literally</em>\nthe first thing we said that references can't do. The compiler rightfully blows\nup in our face.</p>\n<p>To make this more clear, we can expand the example:</p>\n<!-- ignore: desugared code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">as_str</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(data: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u32</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-symbol\">'b</span>: {\n        <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}\"</span>, data);\n        <span class=\"hljs-keyword\">return</span> &amp;<span class=\"hljs-symbol\">'a</span> s\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-symbol\">'c</span>: {\n        <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-symbol\">'d</span>: {\n            <span class=\"hljs-comment\">// An anonymous scope is introduced because the borrow does not</span>\n            <span class=\"hljs-comment\">// need to last for the whole scope x is valid for. The return</span>\n            <span class=\"hljs-comment\">// of as_str must find a str somewhere before this function</span>\n            <span class=\"hljs-comment\">// call. Obviously not happening.</span>\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, as_str::&lt;<span class=\"hljs-symbol\">'d</span>&gt;(&amp;<span class=\"hljs-symbol\">'d</span> x));\n        }\n    }\n}</code></pre>\n<p>Shoot!</p>\n<p>Of course, the right way to write this function is as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">to_string</span></span>(data: &amp;<span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n    <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}\"</span>, data)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We must produce an owned value inside the function to return it! The only way\nwe could have returned an <code class=\"hljs\">&amp;'a str</code> would have been if it was in a field of the\n<code class=\"hljs\">&amp;'a u32</code>, which is obviously not the case.</p>\n<p>(Actually we could have also just returned a string literal, which as a global\ncan be considered to reside at the bottom of the stack; though this limits\nour implementation <em>just a bit</em>.)</p>\n<h2 id=\"example-aliasing-a-mutable-reference\"><a class=\"header\" href=\"#example-aliasing-a-mutable-reference\">Example: aliasing a mutable reference</a></h2>\n<p>How about the other example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> data = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> x = &amp;data[<span class=\"hljs-number\">0</span>];\ndata.push(<span class=\"hljs-number\">4</span>);\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n<span class=\"boring\">}</span></code></pre></pre>\n<!-- ignore: desugared code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-symbol\">'a</span>: {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> data: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-symbol\">'b</span>: {\n        <span class=\"hljs-comment\">// 'b is as big as we need this borrow to be</span>\n        <span class=\"hljs-comment\">// (just need to get to `println!`)</span>\n        <span class=\"hljs-keyword\">let</span> x: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">i32</span> = Index::index::&lt;<span class=\"hljs-symbol\">'b</span>&gt;(&amp;<span class=\"hljs-symbol\">'b</span> data, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-symbol\">'c</span>: {\n            <span class=\"hljs-comment\">// Temporary scope because we don't need the</span>\n            <span class=\"hljs-comment\">// &amp;mut to last any longer.</span>\n            <span class=\"hljs-built_in\">Vec</span>::push(&amp;<span class=\"hljs-symbol\">'c</span> <span class=\"hljs-keyword\">mut</span> data, <span class=\"hljs-number\">4</span>);\n        }\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n    }\n}</code></pre>\n<p>The problem here is a bit more subtle and interesting. We want Rust to\nreject this program for the following reason: We have a live shared reference <code class=\"hljs\">x</code>\nto a descendant of <code class=\"hljs\">data</code> when we try to take a mutable reference to <code class=\"hljs\">data</code>\nto <code class=\"hljs\">push</code>. This would create an aliased mutable reference, which would\nviolate the <em>second</em> rule of references.</p>\n<p>However this is <em>not at all</em> how Rust reasons that this program is bad. Rust\ndoesn't understand that <code class=\"hljs\">x</code> is a reference to a subpath of <code class=\"hljs\">data</code>. It doesn't\nunderstand <code class=\"hljs\">Vec</code> at all. What it <em>does</em> see is that <code class=\"hljs\">x</code> has to live for <code class=\"hljs\">'b</code> in\norder to be printed. The signature of <code class=\"hljs\">Index::index</code> subsequently demands that\nthe reference we take to <code class=\"hljs\">data</code> has to survive for <code class=\"hljs\">'b</code>. When we try to call\n<code class=\"hljs\">push</code>, it then sees us try to make an <code class=\"hljs\">&amp;'c mut data</code>. Rust knows that <code class=\"hljs\">'c</code> is\ncontained within <code class=\"hljs\">'b</code>, and rejects our program because the <code class=\"hljs\">&amp;'b data</code> must still\nbe alive!</p>\n<p>Here we see that the lifetime system is much more coarse than the reference\nsemantics we're actually interested in preserving. For the most part, <em>that's\ntotally ok</em>, because it keeps us from spending all day explaining our program\nto the compiler. However it does mean that several programs that are totally\ncorrect with respect to Rust's <em>true</em> semantics are rejected because lifetimes\nare too dumb.</p>\n<h2 id=\"the-area-covered-by-a-lifetime\"><a class=\"header\" href=\"#the-area-covered-by-a-lifetime\">The area covered by a lifetime</a></h2>\n<p>A reference (sometimes called a <em>borrow</em>) is <em>alive</em> from the place it is\ncreated to its last use. The borrowed value needs to outlive only borrows that\nare alive. This looks simple, but there are a few subtleties.</p>\n<p>The following snippet compiles, because after printing <code class=\"hljs\">x</code>, it is no longer\nneeded, so it doesn't matter if it is dangling or aliased (even though the\nvariable <code class=\"hljs\">x</code> <em>technically</em> exists to the very end of the scope).</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> data = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> x = &amp;data[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n<span class=\"hljs-comment\">// This is OK, x is no longer needed</span>\ndata.push(<span class=\"hljs-number\">4</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However, if the value has a destructor, the destructor is run at the end of the\nscope. And running the destructor is considered a use ‒ obviously the last one.\nSo, this will <em>not</em> compile.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">X</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> X&lt;<span class=\"hljs-symbol\">'_</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> data = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> x = X(&amp;data[<span class=\"hljs-number\">0</span>]);\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, x);\ndata.push(<span class=\"hljs-number\">4</span>);\n<span class=\"hljs-comment\">// Here, the destructor is run and therefore this'll fail to compile.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>One way to convince the compiler that <code class=\"hljs\">x</code> is no longer valid is by using <code class=\"hljs\">drop(x)</code> before <code class=\"hljs\">data.push(4)</code>.</p>\n<p>Furthermore, there might be multiple possible last uses of the borrow, for\nexample in each branch of a condition.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">some_condition</span></span>() -&gt; <span class=\"hljs-built_in\">bool</span> { <span class=\"hljs-literal\">true</span> }\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> data = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> x = &amp;data[<span class=\"hljs-number\">0</span>];\n\n<span class=\"hljs-keyword\">if</span> some_condition() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x); <span class=\"hljs-comment\">// This is the last use of `x` in this branch</span>\n    data.push(<span class=\"hljs-number\">4</span>);      <span class=\"hljs-comment\">// So we can push here</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// There's no use of `x` in here, so effectively the last use is the</span>\n    <span class=\"hljs-comment\">// creation of x at the top of the example.</span>\n    data.push(<span class=\"hljs-number\">5</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>And a lifetime can have a pause in it. Or you might look at it as two distinct\nborrows just being tied to the same local variable. This often happens around\nloops (writing a new value of a variable at the end of the loop and using it for\nthe last time at the top of the next iteration).</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> data = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-comment\">// This mut allows us to change where the reference points to</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = &amp;data[<span class=\"hljs-number\">0</span>];\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x); <span class=\"hljs-comment\">// Last use of this borrow</span>\ndata.push(<span class=\"hljs-number\">4</span>);\nx = &amp;data[<span class=\"hljs-number\">3</span>]; <span class=\"hljs-comment\">// We start a new borrow here</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Historically, Rust kept the borrow alive until the end of scope, so these\nexamples might fail to compile with older compilers. Also, there are still some\ncorner cases where Rust fails to properly shorten the live part of the borrow\nand fails to compile even when it looks like it should. These'll be solved over\ntime.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"limits-of-lifetimes\"><a class=\"header\" href=\"#limits-of-lifetimes\">Limits of Lifetimes</a></h1>\n<p>Given the following code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail edition2021 hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Foo {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mutate_and_share</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-keyword\">Self</span> { &amp;*<span class=\"hljs-keyword\">self</span> }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">share</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> foo = Foo;\n    <span class=\"hljs-keyword\">let</span> loan = foo.mutate_and_share();\n    foo.share();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, loan);\n}</code></pre></pre>\n<p>One might expect it to compile. We call <code class=\"hljs\">mutate_and_share</code>, which mutably\nborrows <code class=\"hljs\">foo</code> temporarily, but then returns only a shared reference. Therefore\nwe would expect <code class=\"hljs\">foo.share()</code> to succeed as <code class=\"hljs\">foo</code> shouldn't be mutably borrowed.</p>\n<p>However when we try to compile it:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0502]: cannot borrow `foo` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:12:5\n   |\n11 |     let loan = foo.mutate_and_share();\n   |                --- mutable borrow occurs here\n12 |     foo.share();\n   |     ^^^ immutable borrow occurs here\n13 |     println!(\"{:?}\", loan);\n</code></pre>\n<p>What happened? Well, we got the exact same reasoning as we did for\n<a href=\"lifetimes.html#example-aliasing-a-mutable-reference\">Example 2 in the previous section</a>. We desugar the program and we get\nthe following:</p>\n<!-- ignore: desugared code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Foo {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mutate_and_share</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">Self</span> { &amp;<span class=\"hljs-symbol\">'a</span> *<span class=\"hljs-keyword\">self</span> }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">share</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">self</span>) {}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-symbol\">'b</span>: {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> foo: Foo = Foo;\n        <span class=\"hljs-symbol\">'c</span>: {\n            <span class=\"hljs-keyword\">let</span> loan: &amp;<span class=\"hljs-symbol\">'c</span> Foo = Foo::mutate_and_share::&lt;<span class=\"hljs-symbol\">'c</span>&gt;(&amp;<span class=\"hljs-symbol\">'c</span> <span class=\"hljs-keyword\">mut</span> foo);\n            <span class=\"hljs-symbol\">'d</span>: {\n                Foo::share::&lt;<span class=\"hljs-symbol\">'d</span>&gt;(&amp;<span class=\"hljs-symbol\">'d</span> foo);\n            }\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, loan);\n        }\n    }\n}</code></pre>\n<p>The lifetime system is forced to extend the <code class=\"hljs\">&amp;mut foo</code> to have lifetime <code class=\"hljs\">'c</code>,\ndue to the lifetime of <code class=\"hljs\">loan</code> and <code class=\"hljs\">mutate_and_share</code>'s signature. Then when we\ntry to call <code class=\"hljs\">share</code>, it sees we're trying to alias that <code class=\"hljs\">&amp;'c mut foo</code> and\nblows up in our face!</p>\n<p>This program is clearly correct according to the reference semantics we actually\ncare about, but the lifetime system is too coarse-grained to handle that.</p>\n<h2 id=\"improperly-reduced-borrows\"><a class=\"header\" href=\"#improperly-reduced-borrows\">Improperly reduced borrows</a></h2>\n<p>The following code fails to compile, because Rust sees that a variable, <code class=\"hljs\">map</code>,\nis borrowed twice, and can not infer that the first borrow ceases to be needed\nbefore the second one occurs. This is caused by Rust conservatively falling back\nto using a whole scope for the first borrow. This will eventually get fixed.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::hash::Hash;\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_default</span></span>&lt;<span class=\"hljs-symbol\">'m</span>, K, V&gt;(map: &amp;<span class=\"hljs-symbol\">'m</span> <span class=\"hljs-keyword\">mut</span> HashMap&lt;K, V&gt;, key: K) -&gt; &amp;<span class=\"hljs-symbol\">'m</span> <span class=\"hljs-keyword\">mut</span> V\n<span class=\"hljs-keyword\">where</span>\n    K: <span class=\"hljs-built_in\">Clone</span> + <span class=\"hljs-built_in\">Eq</span> + Hash,\n    V: <span class=\"hljs-built_in\">Default</span>,\n{\n    <span class=\"hljs-keyword\">match</span> map.get_mut(&amp;key) {\n        <span class=\"hljs-literal\">Some</span>(value) =&gt; value,\n        <span class=\"hljs-literal\">None</span> =&gt; {\n            map.insert(key.clone(), V::default());\n            map.get_mut(&amp;key).unwrap()\n        }\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Because of the lifetime restrictions imposed, <code class=\"hljs\">&amp;mut map</code>'s lifetime\noverlaps other mutable borrows, resulting in a compile error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0499]: cannot borrow `*map` as mutable more than once at a time\n  --&gt; src/main.rs:12:13\n   |\n4  |   fn get_default&lt;'m, K, V&gt;(map: &amp;'m mut HashMap&lt;K, V&gt;, key: K) -&gt; &amp;'m mut V\n   |                  -- lifetime `'m` defined here\n...\n9  |       match map.get_mut(&amp;key) {\n   |       -     --- first mutable borrow occurs here\n   |  _____|\n   | |\n10 | |         Some(value) =&gt; value,\n11 | |         None =&gt; {\n12 | |             map.insert(key.clone(), V::default());\n   | |             ^^^ second mutable borrow occurs here\n13 | |             map.get_mut(&amp;key).unwrap()\n14 | |         }\n15 | |     }\n   | |_____- returning this value requires that `*map` is borrowed for `'m`\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"lifetime-elision\"><a class=\"header\" href=\"#lifetime-elision\">Lifetime Elision</a></h1>\n<p>In order to make common patterns more ergonomic, Rust allows lifetimes to be\n<em>elided</em> in function signatures.</p>\n<p>A <em>lifetime position</em> is anywhere you can write a lifetime in a type:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">&amp;<span class=\"hljs-symbol\">'a</span> T\n&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T\nT&lt;<span class=\"hljs-symbol\">'a</span>&gt;</code></pre>\n<p>Lifetime positions can appear as either \"input\" or \"output\":</p>\n<ul>\n<li>\n<p>For <code class=\"hljs\">fn</code> definitions, <code class=\"hljs\">fn</code> types, and the traits <code class=\"hljs\">Fn</code>, <code class=\"hljs\">FnMut</code>, and <code class=\"hljs\">FnOnce</code>,\ninput refers to the types of the formal arguments, while output refers to\nresult types. So <code class=\"hljs\">fn foo(s: &amp;str) -&gt; (&amp;str, &amp;str)</code> has elided one lifetime in\ninput position and two lifetimes in output position. Note that the input\npositions of a <code class=\"hljs\">fn</code> method definition do not include the lifetimes that occur\nin the method's <code class=\"hljs\">impl</code> header (nor lifetimes that occur in the trait header,\nfor a default method).</p>\n</li>\n<li>\n<p>For <code class=\"hljs\">impl</code> headers, all types are input. So <code class=\"hljs\">impl Trait&lt;&amp;T&gt; for Struct&lt;&amp;T&gt;</code>\nhas elided two lifetimes in input position, while <code class=\"hljs\">impl Struct&lt;&amp;T&gt;</code> has elided\none.</p>\n</li>\n</ul>\n<p>Elision rules are as follows:</p>\n<ul>\n<li>\n<p>Each elided lifetime in input position becomes a distinct lifetime\nparameter.</p>\n</li>\n<li>\n<p>If there is exactly one input lifetime position (elided or not), that lifetime\nis assigned to <em>all</em> elided output lifetimes.</p>\n</li>\n<li>\n<p>If there are multiple input lifetime positions, but one of them is <code class=\"hljs\">&amp;self</code> or\n<code class=\"hljs\">&amp;mut self</code>, the lifetime of <code class=\"hljs\">self</code> is assigned to <em>all</em> elided output lifetimes.</p>\n</li>\n<li>\n<p>Otherwise, it is an error to elide an output lifetime.</p>\n</li>\n</ul>\n<p>Examples:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>);                                      <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>);                               <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">debug</span></span>(lvl: <span class=\"hljs-built_in\">usize</span>, s: &amp;<span class=\"hljs-built_in\">str</span>);                          <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">debug</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(lvl: <span class=\"hljs-built_in\">usize</span>, s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>);                   <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">substr</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>, until: <span class=\"hljs-built_in\">usize</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span>;               <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">substr</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, until: <span class=\"hljs-built_in\">usize</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>;     <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_str</span></span>() -&gt; &amp;<span class=\"hljs-built_in\">str</span>;                                   <span class=\"hljs-comment\">// ILLEGAL</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">frob</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>, t: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span>;                      <span class=\"hljs-comment\">// ILLEGAL</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-keyword\">mut</span> T;                        <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_mut</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T;              <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">args</span></span>&lt;T: ToCStr&gt;(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, args: &amp;[T]) -&gt; &amp;<span class=\"hljs-keyword\">mut</span> Command                  <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">args</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>, T: ToCStr&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, args: &amp;<span class=\"hljs-symbol\">'b</span> [T]) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Command <span class=\"hljs-comment\">// expanded</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(buf: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">u8</span>]) -&gt; BufWriter;                    <span class=\"hljs-comment\">// elided</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(buf: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">u8</span>]) -&gt; BufWriter&lt;<span class=\"hljs-symbol\">'_</span>&gt;;                <span class=\"hljs-comment\">// elided (with `rust_2018_idioms`)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(buf: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">u8</span>]) -&gt; BufWriter&lt;<span class=\"hljs-symbol\">'a</span>&gt;          <span class=\"hljs-comment\">// expanded</span></code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unbounded-lifetimes\"><a class=\"header\" href=\"#unbounded-lifetimes\">Unbounded Lifetimes</a></h1>\n<p>Unsafe code can often end up producing references or lifetimes out of thin air.\nSuch lifetimes come into the world as <em>unbounded</em>. The most common source of\nthis is taking a reference to a dereferenced raw pointer, which produces a\nreference with an unbounded lifetime. Such a lifetime becomes as big as context\ndemands. This is in fact more powerful than simply becoming <code class=\"hljs\">'static</code>, because\nfor instance <code class=\"hljs\">&amp;'static &amp;'a T</code> will fail to typecheck, but the unbound lifetime\nwill perfectly mold into <code class=\"hljs\">&amp;'a &amp;'a T</code> as needed. However for most intents and\npurposes, such an unbounded lifetime can be regarded as <code class=\"hljs\">'static</code>.</p>\n<p>Almost no reference is <code class=\"hljs\">'static</code>, so this is probably wrong. <code class=\"hljs\">transmute</code> and\n<code class=\"hljs\">transmute_copy</code> are the two other primary offenders. One should endeavor to\nbound an unbounded lifetime as quickly as possible, especially across function\nboundaries.</p>\n<p>Given a function, any output lifetimes that don't derive from inputs are\nunbounded. For instance:</p>\n<!-- no_run: This example exhibits undefined behavior. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust no_run edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_str</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">String</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">unsafe</span> { &amp;*s }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> soon_dropped = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n    <span class=\"hljs-keyword\">let</span> dangling = get_str(&amp;soon_dropped);\n    <span class=\"hljs-built_in\">drop</span>(soon_dropped);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Invalid str: {}\"</span>, dangling); <span class=\"hljs-comment\">// Invalid str: gӚ_`</span>\n}</code></pre></pre>\n<p>The easiest way to avoid unbounded lifetimes is to use lifetime elision at the\nfunction boundary. If an output lifetime is elided, then it <em>must</em> be bounded by\nan input lifetime. Of course it might be bounded by the <em>wrong</em> lifetime, but\nthis will usually just cause a compiler error, rather than allow memory safety\nto be trivially violated.</p>\n<p>Within a function, bounding lifetimes is more error-prone. The safest and easiest\nway to bound a lifetime is to return it from a function with a bound lifetime.\nHowever if this is unacceptable, the reference can be placed in a location with\na specific lifetime. Unfortunately it's impossible to name all lifetimes involved\nin a function.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"higher-rank-trait-bounds-hrtbs\"><a class=\"header\" href=\"#higher-rank-trait-bounds-hrtbs\">Higher-Rank Trait Bounds (HRTBs)</a></h1>\n<p>Rust's <code class=\"hljs\">Fn</code> traits are a little bit magic. For instance, we can write the\nfollowing code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Closure</span></span>&lt;F&gt; {\n    data: (<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>),\n    func: F,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;F&gt; Closure&lt;F&gt;\n    <span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-built_in\">Fn</span>(&amp;(<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>)) -&gt; &amp;<span class=\"hljs-built_in\">u8</span>,\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">u8</span> {\n        (<span class=\"hljs-keyword\">self</span>.func)(&amp;<span class=\"hljs-keyword\">self</span>.data)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_it</span></span>(data: &amp;(<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>)) -&gt; &amp;<span class=\"hljs-built_in\">u8</span> { &amp;data.<span class=\"hljs-number\">0</span> }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> clo = Closure { data: (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), func: do_it };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, clo.call());\n}</code></pre></pre>\n<p>If we try to naively desugar this code in the same way that we did in the\n<a href=\"lifetimes.html\">lifetimes section</a>, we run into some trouble:</p>\n<!-- ignore: desugared code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> `&amp;'b data.0` and `'x: {` is not valid syntax!</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Closure</span></span>&lt;F&gt; {\n    data: (<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>),\n    func: F,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;F&gt; Closure&lt;F&gt;\n    <span class=\"hljs-comment\">// where F: Fn(&amp;'??? (u8, u16)) -&gt; &amp;'??? u8,</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u8</span> {\n        (<span class=\"hljs-keyword\">self</span>.func)(&amp;<span class=\"hljs-keyword\">self</span>.data)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_it</span></span>&lt;<span class=\"hljs-symbol\">'b</span>&gt;(data: &amp;<span class=\"hljs-symbol\">'b</span> (<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>)) -&gt; &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">u8</span> { &amp;<span class=\"hljs-symbol\">'b</span> data.<span class=\"hljs-number\">0</span> }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-symbol\">'x</span>: {\n        <span class=\"hljs-keyword\">let</span> clo = Closure { data: (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), func: do_it };\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, clo.call());\n    }\n}</code></pre>\n<p>How on earth are we supposed to express the lifetimes on <code class=\"hljs\">F</code>'s trait bound? We\nneed to provide some lifetime there, but the lifetime we care about can't be\nnamed until we enter the body of <code class=\"hljs\">call</code>! Also, that isn't some fixed lifetime;\n<code class=\"hljs\">call</code> works with <em>any</em> lifetime <code class=\"hljs\">&amp;self</code> happens to have at that point.</p>\n<p>This job requires The Magic of Higher-Rank Trait Bounds (HRTBs). The way we\ndesugar this is as follows:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; F: <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'a</span> (<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>)) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u8</span>,</code></pre>\n<p>Alternatively:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'a</span> (<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>)) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u8</span>,</code></pre>\n<p>(Where <code class=\"hljs\">Fn(a, b, c) -&gt; d</code> is itself just sugar for the unstable <em>real</em> <code class=\"hljs\">Fn</code>\ntrait)</p>\n<p><code class=\"hljs\">for&lt;'a&gt;</code> can be read as \"for all choices of <code class=\"hljs\">'a</code>\", and basically produces an\n<em>infinite list</em> of trait bounds that F must satisfy. Intense. There aren't many\nplaces outside of the <code class=\"hljs\">Fn</code> traits where we encounter HRTBs, and even for\nthose we have a nice magic sugar for the common cases.</p>\n<p>In summary, we can rewrite the original code more explicitly as:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Closure</span></span>&lt;F&gt; {\n    data: (<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>),\n    func: F,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;F&gt; Closure&lt;F&gt;\n    <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">for</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; F: <span class=\"hljs-built_in\">Fn</span>(&amp;<span class=\"hljs-symbol\">'a</span> (<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>)) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u8</span>,\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">u8</span> {\n        (<span class=\"hljs-keyword\">self</span>.func)(&amp;<span class=\"hljs-keyword\">self</span>.data)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_it</span></span>(data: &amp;(<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>)) -&gt; &amp;<span class=\"hljs-built_in\">u8</span> { &amp;data.<span class=\"hljs-number\">0</span> }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> clo = Closure { data: (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), func: do_it };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, clo.call());\n}</code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"subtyping-and-variance\"><a class=\"header\" href=\"#subtyping-and-variance\">Subtyping and Variance</a></h1>\n<p>Rust uses lifetimes to track the relationships between borrows and ownership.\nHowever, a naive implementation of lifetimes would be either too restrictive,\nor permit undefined behavior.</p>\n<p>In order to allow flexible usage of lifetimes\nwhile also preventing their misuse, Rust uses <strong>subtyping</strong> and <strong>variance</strong>.</p>\n<p>Let's start with an example.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-comment\">// Note: debug expects two parameters with the *same* lifetime</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">debug</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(a: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, b: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"a = {a:?} b = {b:?}\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> hello: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"hello\"</span>;\n    {\n        <span class=\"hljs-keyword\">let</span> world = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"world\"</span>);\n        <span class=\"hljs-keyword\">let</span> world = &amp;world; <span class=\"hljs-comment\">// 'world has a shorter lifetime than 'static</span>\n        debug(hello, world);\n    }\n}</code></pre></pre>\n<p>In a conservative implementation of lifetimes, since <code class=\"hljs\">hello</code> and <code class=\"hljs\">world</code> have different lifetimes,\nwe might see the following error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0308]: mismatched types\n --&gt; src/main.rs:10:16\n   |\n10 |         debug(hello, world);\n   |                      ^\n   |                      |\n   |                      expected `&amp;'static str`, found struct `&amp;'world str`\n</code></pre>\n<p>This would be rather unfortunate. In this case,\nwhat we want is to accept any type that lives <em>at least as long</em> as <code class=\"hljs\">'world</code>.\nLet's try using subtyping with our lifetimes.</p>\n<h2 id=\"subtyping\"><a class=\"header\" href=\"#subtyping\">Subtyping</a></h2>\n<p>Subtyping is the idea that one type can be used in place of another.</p>\n<p>Let's define that <code class=\"hljs\">Sub</code> is a subtype of <code class=\"hljs\">Super</code> (we'll be using the notation <code class=\"hljs\">Sub &lt;: Super</code> throughout this chapter).</p>\n<p>What this is suggesting to us is that the set of <em>requirements</em> that <code class=\"hljs\">Super</code> defines\nare completely satisfied by <code class=\"hljs\">Sub</code>. <code class=\"hljs\">Sub</code> may then have more requirements.</p>\n<p>Now, in order to use subtyping with lifetimes, we need to define the requirement of a lifetime:</p>\n<blockquote>\n<p><code class=\"hljs\">'a</code> defines a region of code.</p>\n</blockquote>\n<p>Now that we have a defined set of requirements for lifetimes, we can define how they relate to each other:</p>\n<blockquote>\n<p><code class=\"hljs\">'long &lt;: 'short</code> if and only if <code class=\"hljs\">'long</code> defines a region of code that <strong>completely contains</strong> <code class=\"hljs\">'short</code>.</p>\n</blockquote>\n<p><code class=\"hljs\">'long</code> may define a region larger than <code class=\"hljs\">'short</code>, but that still fits our definition.</p>\n<blockquote>\n<p>As we will see throughout the rest of this chapter,\nsubtyping is a lot more complicated and subtle than this,\nbut this simple rule is a very good 99% intuition.\nAnd unless you write unsafe code, the compiler will automatically handle all the corner cases for you.</p>\n</blockquote>\n<blockquote>\n<p>But this is the Rustonomicon. We're writing unsafe code,\nso we need to understand how this stuff really works, and how we can mess it up.</p>\n</blockquote>\n<p>Going back to our example above, we can say that <code class=\"hljs\">'static &lt;: 'world</code>.\nFor now, let's also accept the idea that subtypes of lifetimes can be passed through references\n(more on this in <a href=\"subtyping.html#variance\">Variance</a>),\n<em>e.g.</em> <code class=\"hljs\">&amp;'static str</code> is a subtype of <code class=\"hljs\">&amp;'world str</code>, then we can \"downgrade\" <code class=\"hljs\">&amp;'static str</code> into a <code class=\"hljs\">&amp;'world str</code>.\nWith that, the example above will compile:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">debug</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(a: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, b: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"a = {a:?} b = {b:?}\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> hello: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"hello\"</span>;\n    {\n        <span class=\"hljs-keyword\">let</span> world = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"world\"</span>);\n        <span class=\"hljs-keyword\">let</span> world = &amp;world; <span class=\"hljs-comment\">// 'world has a shorter lifetime than 'static</span>\n        debug(hello, world); <span class=\"hljs-comment\">// hello silently downgrades from `&amp;'static str` into `&amp;'world str`</span>\n    }\n}</code></pre></pre>\n<h2 id=\"variance\"><a class=\"header\" href=\"#variance\">Variance</a></h2>\n<p>Above, we glossed over the fact that <code class=\"hljs\">'static &lt;: 'b</code> implied that <code class=\"hljs\">&amp;'static T &lt;: &amp;'b T</code>. This uses a property known as <em>variance</em>.\nIt's not always as simple as this example, though. To understand that, let's try to extend this example a bit:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail E0597 edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">assign</span></span>&lt;T&gt;(input: &amp;<span class=\"hljs-keyword\">mut</span> T, val: T) {\n    *input = val;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> hello: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"hello\"</span>;\n    {\n        <span class=\"hljs-keyword\">let</span> world = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"world\"</span>);\n        assign(&amp;<span class=\"hljs-keyword\">mut</span> hello, &amp;world);\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{hello}\"</span>); <span class=\"hljs-comment\">// use after free 😿</span>\n}</code></pre></pre>\n<p>In <code class=\"hljs\">assign</code>, we are setting the <code class=\"hljs\">hello</code> reference to point to <code class=\"hljs\">world</code>.\nBut then <code class=\"hljs\">world</code> goes out of scope, before the later use of <code class=\"hljs\">hello</code> in the println!</p>\n<p>This is a classic use-after-free bug!</p>\n<p>Our first instinct might be to blame the <code class=\"hljs\">assign</code> impl, but there's really nothing wrong here.\nIt shouldn't be surprising that we might want to assign a <code class=\"hljs\">T</code> into a <code class=\"hljs\">T</code>.</p>\n<p>The problem is that we cannot assume that <code class=\"hljs\">&amp;mut &amp;'static str</code> and <code class=\"hljs\">&amp;mut &amp;'b str</code> are compatible.\nThis means that <code class=\"hljs\">&amp;mut &amp;'static str</code> <strong>cannot</strong> be a <em>subtype</em> of <code class=\"hljs\">&amp;mut &amp;'b str</code>,\neven if <code class=\"hljs\">'static</code> is a subtype of <code class=\"hljs\">'b</code>.</p>\n<p>Variance is the concept that Rust borrows to define relationships about subtypes through their generic parameters.</p>\n<blockquote>\n<p>NOTE: For convenience we will define a generic type <code class=\"hljs\">F&lt;T&gt;</code> so\nthat we can easily talk about <code class=\"hljs\">T</code>. Hopefully this is clear in context.</p>\n</blockquote>\n<p>The type <code class=\"hljs\">F</code>'s <em>variance</em> is how the subtyping of its inputs affects the\nsubtyping of its outputs. There are three kinds of variance in Rust. Given two\ntypes <code class=\"hljs\">Sub</code> and <code class=\"hljs\">Super</code>, where <code class=\"hljs\">Sub</code> is a subtype of <code class=\"hljs\">Super</code>:</p>\n<ul>\n<li><code class=\"hljs\">F</code> is <strong>covariant</strong> if <code class=\"hljs\">F&lt;Sub&gt;</code> is a subtype of <code class=\"hljs\">F&lt;Super&gt;</code> (the subtype property is passed through)</li>\n<li><code class=\"hljs\">F</code> is <strong>contravariant</strong> if <code class=\"hljs\">F&lt;Super&gt;</code> is a subtype of <code class=\"hljs\">F&lt;Sub&gt;</code> (the subtype property is \"inverted\")</li>\n<li><code class=\"hljs\">F</code> is <strong>invariant</strong> otherwise (no subtyping relationship exists)</li>\n</ul>\n<p>If we remember from the above examples,\nit was ok for us to treat <code class=\"hljs\">&amp;'a T</code> as a subtype of <code class=\"hljs\">&amp;'b T</code> if <code class=\"hljs\">'a &lt;: 'b</code>,\ntherefore we can say that <code class=\"hljs\">&amp;'a T</code> is <em>covariant</em> over <code class=\"hljs\">'a</code>.</p>\n<p>Also, we saw that it was not ok for us to treat <code class=\"hljs\">&amp;mut &amp;'a U</code> as a subtype of <code class=\"hljs\">&amp;mut &amp;'b U</code>,\ntherefore we can say that <code class=\"hljs\">&amp;mut T</code> is <em>invariant</em> over <code class=\"hljs\">T</code></p>\n<p>Here is a table of some other generic types and their variances:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th style=\"text-align: center\">'a</th><th style=\"text-align: center\">T</th><th style=\"text-align: center\">U</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">&amp;'a T </code></td><td style=\"text-align: center\">covariant</td><td style=\"text-align: center\">covariant</td><td style=\"text-align: center\"></td></tr>\n<tr><td><code class=\"hljs\">&amp;'a mut T</code></td><td style=\"text-align: center\">covariant</td><td style=\"text-align: center\">invariant</td><td style=\"text-align: center\"></td></tr>\n<tr><td><code class=\"hljs\">Box&lt;T&gt;</code></td><td style=\"text-align: center\"></td><td style=\"text-align: center\">covariant</td><td style=\"text-align: center\"></td></tr>\n<tr><td><code class=\"hljs\">Vec&lt;T&gt;</code></td><td style=\"text-align: center\"></td><td style=\"text-align: center\">covariant</td><td style=\"text-align: center\"></td></tr>\n<tr><td><code class=\"hljs\">UnsafeCell&lt;T&gt;</code></td><td style=\"text-align: center\"></td><td style=\"text-align: center\">invariant</td><td style=\"text-align: center\"></td></tr>\n<tr><td><code class=\"hljs\">Cell&lt;T&gt;</code></td><td style=\"text-align: center\"></td><td style=\"text-align: center\">invariant</td><td style=\"text-align: center\"></td></tr>\n<tr><td><code class=\"hljs\">fn(T) -&gt; U</code></td><td style=\"text-align: center\"></td><td style=\"text-align: center\"><strong>contra</strong>variant</td><td style=\"text-align: center\">covariant</td></tr>\n<tr><td><code class=\"hljs\">*const T</code></td><td style=\"text-align: center\"></td><td style=\"text-align: center\">covariant</td><td style=\"text-align: center\"></td></tr>\n<tr><td><code class=\"hljs\">*mut T</code></td><td style=\"text-align: center\"></td><td style=\"text-align: center\">invariant</td><td style=\"text-align: center\"></td></tr>\n</tbody></table>\n</div>\n<p>Some of these can be explained simply in relation to the others:</p>\n<ul>\n<li><code class=\"hljs\">Vec&lt;T&gt;</code> and all other owning pointers and collections follow the same logic as <code class=\"hljs\">Box&lt;T&gt;</code></li>\n<li><code class=\"hljs\">Cell&lt;T&gt;</code> and all other interior mutability types follow the same logic as <code class=\"hljs\">UnsafeCell&lt;T&gt;</code></li>\n<li><code class=\"hljs\">UnsafeCell&lt;T&gt;</code> having interior mutability gives it the same variance properties as <code class=\"hljs\">&amp;mut T</code></li>\n<li><code class=\"hljs\">*const T</code> follows the logic of <code class=\"hljs\">&amp;T</code></li>\n<li><code class=\"hljs\">*mut T</code> follows the logic of <code class=\"hljs\">&amp;mut T</code> (or <code class=\"hljs\">UnsafeCell&lt;T&gt;</code>)</li>\n</ul>\n<p>For more types, see the <a href=\"../reference/subtyping.html#variance\">\"Variance\" section</a> on the reference.</p>\n<blockquote>\n<p>NOTE: the <em>only</em> source of contravariance in the language is the arguments to\na function, which is why it really doesn't come up much in practice. Invoking\ncontravariance involves higher-order programming with function pointers that\ntake references with specific lifetimes (as opposed to the usual \"any lifetime\",\nwhich gets into higher rank lifetimes, which work independently of subtyping).</p>\n</blockquote>\n<p>Now that we have some more formal understanding of variance,\nlet's go through some more examples in more detail.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail E0597 edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">assign</span></span>&lt;T&gt;(input: &amp;<span class=\"hljs-keyword\">mut</span> T, val: T) {\n    *input = val;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> hello: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"hello\"</span>;\n    {\n        <span class=\"hljs-keyword\">let</span> world = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"world\"</span>);\n        assign(&amp;<span class=\"hljs-keyword\">mut</span> hello, &amp;world);\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{hello}\"</span>);\n}</code></pre></pre>\n<p>And what do we get when we run this?</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0597]: `world` does not live long enough\n  --&gt; src/main.rs:9:28\n   |\n6  |     let mut hello: &amp;'static str = \"hello\";\n   |                    ------------ type annotation requires that `world` is borrowed for `'static`\n...\n9  |         assign(&amp;mut hello, &amp;world);\n   |                            ^^^^^^ borrowed value does not live long enough\n10 |     }\n   |     - `world` dropped here while still borrowed\n</code></pre>\n<p>Good, it doesn't compile! Let's break down what's happening here in detail.</p>\n<p>First let's look at the <code class=\"hljs\">assign</code> function:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">assign</span></span>&lt;T&gt;(input: &amp;<span class=\"hljs-keyword\">mut</span> T, val: T) {\n    *input = val;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>All it does is take a mutable reference and a value and overwrite the referent with it.\nWhat's important about this function is that it creates a type equality constraint. It\nclearly says in its signature the referent and the value must be the <em>exact same</em> type.</p>\n<p>Meanwhile, in the caller we pass in <code class=\"hljs\">&amp;mut &amp;'static str</code> and <code class=\"hljs\">&amp;'world str</code>.</p>\n<p>Because <code class=\"hljs\">&amp;mut T</code> is invariant over <code class=\"hljs\">T</code>, the compiler concludes it can't apply any subtyping\nto the first argument, and so <code class=\"hljs\">T</code> must be exactly <code class=\"hljs\">&amp;'static str</code>.</p>\n<p>This is counter to the <code class=\"hljs\">&amp;T</code> case:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">debug</span></span>&lt;T: std::fmt::<span class=\"hljs-built_in\">Debug</span>&gt;(a: T, b: T) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"a = {a:?} b = {b:?}\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>where similarly <code class=\"hljs\">a</code> and <code class=\"hljs\">b</code> must have the same type <code class=\"hljs\">T</code>.\nBut since <code class=\"hljs\">&amp;'a T</code> <em>is</em> covariant over <code class=\"hljs\">'a</code>, we are allowed to perform subtyping.\nSo the compiler decides that <code class=\"hljs\">&amp;'static str</code> can become <code class=\"hljs\">&amp;'b str</code> if and only if\n<code class=\"hljs\">&amp;'static str</code> is a subtype of <code class=\"hljs\">&amp;'b str</code>, which will hold if <code class=\"hljs\">'static &lt;: 'b</code>.\nThis is true, so the compiler is happy to continue compiling this code.</p>\n<p>As it turns out, the argument for why it's ok for Box (and Vec, HashMap, etc.) to be covariant is pretty similar to the argument for why it's ok for lifetimes to be covariant: as soon as you try to stuff them in something like a mutable reference, they inherit invariance and you're prevented from doing anything bad.</p>\n<p>However Box makes it easier to focus on the by-value aspect of references that we partially glossed over.</p>\n<p>Unlike a lot of languages which allow values to be freely aliased at all times, Rust has a very strict rule: if you're allowed to mutate or move a value, you are guaranteed to be the only one with access to it.</p>\n<p>Consider the following code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> hello: <span class=\"hljs-built_in\">Box</span>&lt;&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-string\">\"hello\"</span>);\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> world: <span class=\"hljs-built_in\">Box</span>&lt;&amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">str</span>&gt;;\nworld = hello;</code></pre>\n<p>There is no problem at all with the fact that we have forgotten that <code class=\"hljs\">hello</code> was alive for <code class=\"hljs\">'static</code>,\nbecause as soon as we moved <code class=\"hljs\">hello</code> to a variable that only knew it was alive for <code class=\"hljs\">'b</code>,\n<strong>we destroyed the only thing in the universe that remembered it lived for longer</strong>!</p>\n<p>Only one thing left to explain: function pointers.</p>\n<p>To see why <code class=\"hljs\">fn(T) -&gt; U</code> should be covariant over <code class=\"hljs\">U</code>, consider the following signature:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_str</span></span>() -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>;</code></pre>\n<p>This function claims to produce a <code class=\"hljs\">str</code> bound by some lifetime <code class=\"hljs\">'a</code>. As such, it is perfectly valid to\nprovide a function with the following signature instead:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_static</span></span>() -&gt; &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>;</code></pre>\n<p>So when the function is called, all it's expecting is a <code class=\"hljs\">&amp;str</code> which lives at least the lifetime of <code class=\"hljs\">'a</code>,\nit doesn't matter if the value actually lives longer.</p>\n<p>However, the same logic does not apply to <em>arguments</em>. Consider trying to satisfy:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">store_ref</span></span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>);</code></pre>\n<p>with:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">store_static</span></span>(&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);</code></pre>\n<p>The first function can accept any string reference as long as it lives at least for <code class=\"hljs\">'a</code>,\nbut the second cannot accept a string reference that lives for any duration less than <code class=\"hljs\">'static</code>,\nwhich would cause a conflict.\nCovariance doesn't work here. But if we flip it around, it actually <em>does</em>\nwork! If we need a function that can handle <code class=\"hljs\">&amp;'static str</code>, a function that can handle <em>any</em> reference lifetime\nwill surely work fine.</p>\n<p>Let's see this in practice</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n</span>thread_local! {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">static</span> StaticVecs: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt;&gt; = RefCell::new(<span class=\"hljs-built_in\">Vec</span>::new());\n}\n\n<span class=\"hljs-comment\">/// saves the input given into a thread local `Vec&lt;&amp;'static str&gt;`</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">store</span></span>(input: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>) {\n    StaticVecs.with_borrow_mut(|v| v.push(input));\n}\n\n<span class=\"hljs-comment\">/// Calls the function with it's input (must have the same lifetime!)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">demo</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(input: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>)) {\n    f(input);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    demo(<span class=\"hljs-string\">\"hello\"</span>, store); <span class=\"hljs-comment\">// \"hello\" is 'static. Can call `store` fine</span>\n\n    {\n        <span class=\"hljs-keyword\">let</span> smuggle = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"smuggle\"</span>);\n\n        <span class=\"hljs-comment\">// `&amp;smuggle` is not static. If we were to call `store` with `&amp;smuggle`,</span>\n        <span class=\"hljs-comment\">// we would have pushed an invalid lifetime into the `StaticVecs`.</span>\n        <span class=\"hljs-comment\">// Therefore, `fn(&amp;'static str)` cannot be a subtype of `fn(&amp;'a str)`</span>\n        demo(&amp;smuggle, store);\n    }\n\n    <span class=\"hljs-comment\">// use after free 😿</span>\n    StaticVecs.with_borrow(|v| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{v:?}\"</span>));\n}</code></pre></pre>\n<p>And that's why function types, unlike anything else in the language, are\n<strong>contra</strong>variant over their arguments.</p>\n<p>Now, this is all well and good for the types the standard library provides, but\nhow is variance determined for types that <em>you</em> define? A struct, informally\nspeaking, inherits the variance of its fields. If a struct <code class=\"hljs\">MyType</code>\nhas a generic argument <code class=\"hljs\">A</code> that is used in a field <code class=\"hljs\">a</code>, then MyType's variance\nover <code class=\"hljs\">A</code> is exactly <code class=\"hljs\">a</code>'s variance over <code class=\"hljs\">A</code>.</p>\n<p>However if <code class=\"hljs\">A</code> is used in multiple fields:</p>\n<ul>\n<li>If all uses of <code class=\"hljs\">A</code> are covariant, then MyType is covariant over <code class=\"hljs\">A</code></li>\n<li>If all uses of <code class=\"hljs\">A</code> are contravariant, then MyType is contravariant over <code class=\"hljs\">A</code></li>\n<li>Otherwise, MyType is invariant over <code class=\"hljs\">A</code></li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::cell::Cell;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyType</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>, A: <span class=\"hljs-symbol\">'a</span>, B: <span class=\"hljs-symbol\">'b</span>, C, D, E, F, G, H, In, Out, Mixed&gt; {\n    a: &amp;<span class=\"hljs-symbol\">'a</span> A,     <span class=\"hljs-comment\">// covariant over 'a and A</span>\n    b: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-keyword\">mut</span> B, <span class=\"hljs-comment\">// covariant over 'b and invariant over B</span>\n\n    c: *<span class=\"hljs-keyword\">const</span> C,  <span class=\"hljs-comment\">// covariant over C</span>\n    d: *<span class=\"hljs-keyword\">mut</span> D,    <span class=\"hljs-comment\">// invariant over D</span>\n\n    e: E,         <span class=\"hljs-comment\">// covariant over E</span>\n    f: <span class=\"hljs-built_in\">Vec</span>&lt;F&gt;,    <span class=\"hljs-comment\">// covariant over F</span>\n    g: Cell&lt;G&gt;,   <span class=\"hljs-comment\">// invariant over G</span>\n\n    h1: H,        <span class=\"hljs-comment\">// would also be covariant over H except...</span>\n    h2: Cell&lt;H&gt;,  <span class=\"hljs-comment\">// invariant over H, because invariance wins all conflicts</span>\n\n    i: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(In) -&gt; Out,       <span class=\"hljs-comment\">// contravariant over In, covariant over Out</span>\n\n    k1: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(Mixed) -&gt; <span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-comment\">// would be contravariant over Mixed except..</span>\n    k2: Mixed,              <span class=\"hljs-comment\">// invariant over Mixed, because invariance wins all conflicts</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"drop-check\"><a class=\"header\" href=\"#drop-check\">Drop Check</a></h1>\n<p>We have seen how lifetimes provide us some fairly simple rules for ensuring\nthat we never read dangling references. However up to this point we have only ever\ninteracted with the <em>outlives</em> relationship in an inclusive manner. That is,\nwhen we talked about <code class=\"hljs\">'a: 'b</code>, it was ok for <code class=\"hljs\">'a</code> to live <em>exactly</em> as long as\n<code class=\"hljs\">'b</code>. At first glance, this seems to be a meaningless distinction. Nothing ever\ngets dropped at the same time as another, right? This is why we used the\nfollowing desugaring of <code class=\"hljs\">let</code> statements:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> x;\n<span class=\"hljs-keyword\">let</span> y;</code></pre>\n<p>desugaring to:</p>\n<!-- ignore: desugared code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">{\n    <span class=\"hljs-keyword\">let</span> x;\n    {\n        <span class=\"hljs-keyword\">let</span> y;\n    }\n}</code></pre>\n<p>There are some more complex situations which are not possible to desugar using\nscopes, but the order is still defined ‒ variables are dropped in the reverse\norder of their definition, fields of structs and tuples in order of their\ndefinition. There are some more details about order of drop in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1857-stabilize-drop-order.md\">RFC 1857</a>.</p>\n<p>Let's do this:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> tuple = (<span class=\"hljs-built_in\">vec!</span>[], <span class=\"hljs-built_in\">vec!</span>[]);</code></pre>\n<p>The left vector is dropped first. But does it mean the right one strictly\noutlives it in the eyes of the borrow checker? The answer to this question is\n<em>no</em>. The borrow checker could track fields of tuples separately, but it would\nstill be unable to decide what outlives what in case of vector elements, which\nare dropped manually via pure-library code the borrow checker doesn't\nunderstand.</p>\n<p>So why do we care? We care because if the type system isn't careful, it could\naccidentally make dangling pointers. Consider the following simple program:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Inspector</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u8</span>);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">World</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    inspector: <span class=\"hljs-built_in\">Option</span>&lt;Inspector&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt;,\n    days: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt;,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> world = World {\n        inspector: <span class=\"hljs-literal\">None</span>,\n        days: <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">1</span>),\n    };\n    world.inspector = <span class=\"hljs-literal\">Some</span>(Inspector(&amp;world.days));\n}</code></pre></pre>\n<p>This program is totally sound and compiles today. The fact that <code class=\"hljs\">days</code> does not\nstrictly outlive <code class=\"hljs\">inspector</code> doesn't matter. As long as the <code class=\"hljs\">inspector</code> is\nalive, so is <code class=\"hljs\">days</code>.</p>\n<p>However if we add a destructor, the program will no longer compile!</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Inspector</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u8</span>);\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Inspector&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I was only {} days from retirement!\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">World</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    inspector: <span class=\"hljs-built_in\">Option</span>&lt;Inspector&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt;,\n    days: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt;,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> world = World {\n        inspector: <span class=\"hljs-literal\">None</span>,\n        days: <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">1</span>),\n    };\n    world.inspector = <span class=\"hljs-literal\">Some</span>(Inspector(&amp;world.days));\n    <span class=\"hljs-comment\">// Let's say `days` happens to get dropped first.</span>\n    <span class=\"hljs-comment\">// Then when Inspector is dropped, it will try to read free'd memory!</span>\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0597]: `world.days` does not live long enough\n  --&gt; src/main.rs:19:38\n   |\n19 |     world.inspector = Some(Inspector(&amp;world.days));\n   |                                      ^^^^^^^^^^^ borrowed value does not live long enough\n...\n22 | }\n   | -\n   | |\n   | `world.days` dropped here while still borrowed\n   | borrow might be used here, when `world` is dropped and runs the destructor for type `World&lt;'_&gt;`\n</code></pre>\n<p>You can try changing the order of fields or use a tuple instead of the struct,\nit'll still not compile.</p>\n<p>Implementing <code class=\"hljs\">Drop</code> lets the <code class=\"hljs\">Inspector</code> execute some arbitrary code during its\ndeath. This means it can potentially observe that types that are supposed to\nlive as long as it does actually were destroyed first.</p>\n<p>Interestingly, only generic types need to worry about this. If they aren't\ngeneric, then the only lifetimes they can harbor are <code class=\"hljs\">'static</code>, which will truly\nlive <em>forever</em>. This is why this problem is referred to as <em>sound generic drop</em>.\nSound generic drop is enforced by the <em>drop checker</em>. As of this writing, some\nof the finer details of how the drop checker (also called dropck) validates\ntypes is totally up in the air. However The Big Rule is the subtlety that we\nhave focused on this whole section:</p>\n<p><strong>For a generic type to soundly implement drop, its generics arguments must\nstrictly outlive it.</strong></p>\n<p>Obeying this rule is (usually) necessary to satisfy the borrow\nchecker; obeying it is sufficient but not necessary to be\nsound. That is, if your type obeys this rule then it's definitely\nsound to drop.</p>\n<p>The reason that it is not always necessary to satisfy the above rule\nis that some Drop implementations will not access borrowed data even\nthough their type gives them the capability for such access, or because we know\nthe specific drop order and the borrowed data is still fine even if the borrow\nchecker doesn't know that.</p>\n<p>For example, this variant of the above <code class=\"hljs\">Inspector</code> example will never\naccess borrowed data:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Inspector</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u8</span>, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Inspector&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Inspector(_, {}) knows when *not* to inspect.\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">1</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">World</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    inspector: <span class=\"hljs-built_in\">Option</span>&lt;Inspector&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt;,\n    days: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt;,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> world = World {\n        inspector: <span class=\"hljs-literal\">None</span>,\n        days: <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">1</span>),\n    };\n    world.inspector = <span class=\"hljs-literal\">Some</span>(Inspector(&amp;world.days, <span class=\"hljs-string\">\"gadget\"</span>));\n    <span class=\"hljs-comment\">// Let's say `days` happens to get dropped first.</span>\n    <span class=\"hljs-comment\">// Even when Inspector is dropped, its destructor will not access the</span>\n    <span class=\"hljs-comment\">// borrowed `days`.</span>\n}</code></pre></pre>\n<p>Likewise, this variant will also never access borrowed data:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Inspector</span></span>&lt;T&gt;(T, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Inspector&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Inspector(_, {}) knows when *not* to inspect.\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">1</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">World</span></span>&lt;T&gt; {\n    inspector: <span class=\"hljs-built_in\">Option</span>&lt;Inspector&lt;T&gt;&gt;,\n    days: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt;,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> world = World {\n        inspector: <span class=\"hljs-literal\">None</span>,\n        days: <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">1</span>),\n    };\n    world.inspector = <span class=\"hljs-literal\">Some</span>(Inspector(&amp;world.days, <span class=\"hljs-string\">\"gadget\"</span>));\n    <span class=\"hljs-comment\">// Let's say `days` happens to get dropped first.</span>\n    <span class=\"hljs-comment\">// Even when Inspector is dropped, its destructor will not access the</span>\n    <span class=\"hljs-comment\">// borrowed `days`.</span>\n}</code></pre></pre>\n<p>However, <em>both</em> of the above variants are rejected by the borrow\nchecker during the analysis of <code class=\"hljs\">fn main</code>, saying that <code class=\"hljs\">days</code> does not\nlive long enough.</p>\n<p>The reason is that the borrow checking analysis of <code class=\"hljs\">main</code> does not\nknow about the internals of each <code class=\"hljs\">Inspector</code>'s <code class=\"hljs\">Drop</code> implementation. As\nfar as the borrow checker knows while it is analyzing <code class=\"hljs\">main</code>, the body\nof an inspector's destructor might access that borrowed data.</p>\n<p>Therefore, the drop checker forces all borrowed data in a value to\nstrictly outlive that value.</p>\n<h2 id=\"an-escape-hatch\"><a class=\"header\" href=\"#an-escape-hatch\">An Escape Hatch</a></h2>\n<p>The precise rules that govern drop checking may be less restrictive in\nthe future.</p>\n<p>The current analysis is deliberately conservative and trivial; it forces all\nborrowed data in a value to outlive that value, which is certainly sound.</p>\n<p>Future versions of the language may make the analysis more precise, to\nreduce the number of cases where sound code is rejected as unsafe.\nThis would help address cases such as the two <code class=\"hljs\">Inspector</code>s above that\nknow not to inspect during destruction.</p>\n<p>In the meantime, there is an unstable attribute that one can use to\nassert (unsafely) that a generic type's destructor is <em>guaranteed</em> to\nnot access any expired data, even if its type gives it the capability\nto do so.</p>\n<p>That attribute is called <code class=\"hljs\">may_dangle</code> and was introduced in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md\">RFC 1327</a>.\nTo deploy it on the <code class=\"hljs\">Inspector</code> from above, we would write:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-meta\">#![feature(dropck_eyepatch)]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Inspector</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u8</span>, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-meta\">#[may_dangle]</span> <span class=\"hljs-symbol\">'a</span>&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Inspector&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Inspector(_, {}) knows when *not* to inspect.\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">1</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">World</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    days: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt;,\n    inspector: <span class=\"hljs-built_in\">Option</span>&lt;Inspector&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt;,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> world = World {\n        inspector: <span class=\"hljs-literal\">None</span>,\n        days: <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">1</span>),\n    };\n    world.inspector = <span class=\"hljs-literal\">Some</span>(Inspector(&amp;world.days, <span class=\"hljs-string\">\"gadget\"</span>));\n}</code></pre></pre>\n<p>Use of this attribute requires the <code class=\"hljs\">Drop</code> impl to be marked <code class=\"hljs\">unsafe</code> because the\ncompiler is not checking the implicit assertion that no potentially expired data\n(e.g. <code class=\"hljs\">self.0</code> above) is accessed.</p>\n<p>The attribute can be applied to any number of lifetime and type parameters. In\nthe following example, we assert that we access no data behind a reference of\nlifetime <code class=\"hljs\">'b</code> and that the only uses of <code class=\"hljs\">T</code> will be moves or drops, but omit\nthe attribute from <code class=\"hljs\">'a</code> and <code class=\"hljs\">U</code>, because we do access data with that lifetime\nand that type:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(dropck_eyepatch)]</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fmt::Display;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Inspector</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>, T, U: Display&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">u8</span>, &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">u8</span>, T, U);\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-meta\">#[may_dangle]</span> <span class=\"hljs-symbol\">'b</span>, <span class=\"hljs-meta\">#[may_dangle]</span> T, U: Display&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Inspector&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>, T, U&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Inspector({}, _, _, {})\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">3</span>);\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>It is sometimes obvious that no such access can occur, like the case above.\nHowever, when dealing with a generic type parameter, such access can\noccur indirectly. Examples of such indirect access are:</p>\n<ul>\n<li>invoking a callback,</li>\n<li>via a trait method call.</li>\n</ul>\n<p>(Future changes to the language, such as impl specialization, may add\nother avenues for such indirect access.)</p>\n<p>Here is an example of invoking a callback:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Inspector</span></span>&lt;T&gt;(T, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">for</span> &lt;<span class=\"hljs-symbol\">'r</span>&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(&amp;<span class=\"hljs-symbol\">'r</span> T) -&gt; <span class=\"hljs-built_in\">String</span>&gt;);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Inspector&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// The `self.2` call could access a borrow e.g. if `T` is `&amp;'a _`.</span>\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Inspector({}, {}) unwittingly inspects expired data.\"</span>,\n                 (<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">2</span>)(&amp;<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>), <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">1</span>);\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Here is an example of a trait method call:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fmt;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Inspector</span></span>&lt;T: fmt::Display&gt;(T, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: fmt::Display&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Inspector&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// There is a hidden call to `&lt;T as Display&gt;::fmt` below, which</span>\n        <span class=\"hljs-comment\">// could access a borrow e.g. if `T` is `&amp;'a _`</span>\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Inspector({}, {}) unwittingly inspects expired data.\"</span>,\n                 <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">1</span>);\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>And of course, all of these accesses could be further hidden within\nsome other method invoked by the destructor, rather than being written\ndirectly within it.</p>\n<p>In all of the above cases where the <code class=\"hljs\">&amp;'a u8</code> is accessed in the\ndestructor, adding the <code class=\"hljs\">#[may_dangle]</code>\nattribute makes the type vulnerable to misuse that the borrow\nchecker will not catch, inviting havoc. It is better to avoid adding\nthe attribute.</p>\n<h2 id=\"a-related-side-note-about-drop-order\"><a class=\"header\" href=\"#a-related-side-note-about-drop-order\">A related side note about drop order</a></h2>\n<p>While the drop order of fields inside a struct is defined, relying on it is\nfragile and subtle. When the order matters, it is better to use the\n<a href=\"../std/mem/struct.ManuallyDrop.html\"><code class=\"hljs\">ManuallyDrop</code></a> wrapper.</p>\n<h2 id=\"is-that-all-about-drop-checker\"><a class=\"header\" href=\"#is-that-all-about-drop-checker\">Is that all about drop checker?</a></h2>\n<p>It turns out that when writing unsafe code, we generally don't need to\nworry at all about doing the right thing for the drop checker. However there\nis one special case that you need to worry about, which we will look at in\nthe next section.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"phantomdata\"><a class=\"header\" href=\"#phantomdata\">PhantomData</a></h1>\n<p>When working with unsafe code, we can often end up in a situation where\ntypes or lifetimes are logically associated with a struct, but not actually\npart of a field. This most commonly occurs with lifetimes. For instance, the\n<code class=\"hljs\">Iter</code> for <code class=\"hljs\">&amp;'a [T]</code> is (approximately) defined as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Iter</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    ptr: *<span class=\"hljs-keyword\">const</span> T,\n    end: *<span class=\"hljs-keyword\">const</span> T,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However because <code class=\"hljs\">'a</code> is unused within the struct's body, it's <em>unbounded</em>.\n<a href=\"https://rust-lang.github.io/rfcs/0738-variance.html#the-corner-case-unused-parameters-and-parameters-that-are-only-used-unsafely\">Because of the troubles this has historically caused</a>,\nunbounded lifetimes and types are <em>forbidden</em> in struct definitions.\nTherefore we must somehow refer to these types in the body.\nCorrectly doing this is necessary to have correct variance and drop checking.</p>\n<p>We do this using <code class=\"hljs\">PhantomData</code>, which is a special marker type. <code class=\"hljs\">PhantomData</code>\nconsumes no space, but simulates a field of the given type for the purpose of\nstatic analysis. This was deemed to be less error-prone than explicitly telling\nthe type-system the kind of variance that you want, while also providing other\nuseful things such as auto traits and the information needed by drop check.</p>\n<p>Iter logically contains a bunch of <code class=\"hljs\">&amp;'a T</code>s, so this is exactly what we tell\nthe <code class=\"hljs\">PhantomData</code> to simulate:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::marker;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Iter</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    ptr: *<span class=\"hljs-keyword\">const</span> T,\n    end: *<span class=\"hljs-keyword\">const</span> T,\n    _marker: marker::PhantomData&lt;&amp;<span class=\"hljs-symbol\">'a</span> T&gt;,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>and that's it. The lifetime will be bounded, and your iterator will be covariant\nover <code class=\"hljs\">'a</code> and <code class=\"hljs\">T</code>. Everything Just Works.</p>\n<h2 id=\"generic-parameters-and-drop-checking\"><a class=\"header\" href=\"#generic-parameters-and-drop-checking\">Generic parameters and drop-checking</a></h2>\n<p>In the past, there used to be another thing to take into consideration.</p>\n<p>This very documentation used to say:</p>\n<blockquote>\n<p>Another important example is Vec, which is (approximately) defined as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    data: *<span class=\"hljs-keyword\">const</span> T, <span class=\"hljs-comment\">// *const for variance!</span>\n    len: <span class=\"hljs-built_in\">usize</span>,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Unlike the previous example, it <em>appears</em> that everything is exactly as we\nwant. Every generic argument to Vec shows up in at least one field.\nGood to go!</p>\n<p>Nope.</p>\n<p>The drop checker will generously determine that <code class=\"hljs\">Vec&lt;T&gt;</code> does not own any values\nof type T. This will in turn make it conclude that it doesn't need to worry\nabout Vec dropping any T's in its destructor for determining drop check\nsoundness. This will in turn allow people to create unsoundness using\nVec's destructor.</p>\n<p>In order to tell the drop checker that we <em>do</em> own values of type T, and\ntherefore may drop some T's when <em>we</em> drop, we must add an extra <code class=\"hljs\">PhantomData</code>\nsaying exactly that:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::marker;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    data: *<span class=\"hljs-keyword\">const</span> T, <span class=\"hljs-comment\">// *const for variance!</span>\n    len: <span class=\"hljs-built_in\">usize</span>,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n    _owns_T: marker::PhantomData&lt;T&gt;,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<p>But ever since <a href=\"https://rust-lang.github.io/rfcs/1238-nonparametric-dropck.html\">RFC 1238</a>,\n<strong>this is no longer true nor necessary</strong>.</p>\n<p>If you were to write:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    data: *<span class=\"hljs-keyword\">const</span> T, <span class=\"hljs-comment\">// `*const` for variance!</span>\n    len: <span class=\"hljs-built_in\">usize</span>,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"boring\"><span class=\"hljs-meta\">#[cfg(any())]</span>\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; { <span class=\"hljs-comment\">/* … */</span> }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>then the existence of that <code class=\"hljs\">impl&lt;T&gt; Drop for Vec&lt;T&gt;</code> makes it so Rust will consider\nthat that <code class=\"hljs\">Vec&lt;T&gt;</code> <em>owns</em> values of type <code class=\"hljs\">T</code> (more precisely: may use values of type <code class=\"hljs\">T</code>\nin its <code class=\"hljs\">Drop</code> implementation), and Rust will thus not allow them to <em>dangle</em> should a\n<code class=\"hljs\">Vec&lt;T&gt;</code> be dropped.</p>\n<p>When a type already has a <code class=\"hljs\">Drop impl</code>, <strong>adding an extra <code class=\"hljs\">_owns_T: PhantomData&lt;T&gt;</code> field\nis thus <em>superfluous</em> and accomplishes nothing</strong>, dropck-wise (it still affects variance\nand auto-traits).</p>\n<ul>\n<li>(advanced edge case: if the type containing the <code class=\"hljs\">PhantomData</code> has no <code class=\"hljs\">Drop</code> impl at all,\nbut still has drop glue (by having <em>another</em> field with drop glue), then the\ndropck/<code class=\"hljs\">#[may_dangle]</code> considerations mentioned herein do apply as well: a <code class=\"hljs\">PhantomData&lt;T&gt;</code>\nfield will then require <code class=\"hljs\">T</code> to be droppable whenever the containing type goes out of scope).</li>\n</ul>\n<hr>\n<p>But this situation can sometimes lead to overly restrictive code. That's why the\nstandard library uses an unstable and <code class=\"hljs\">unsafe</code> attribute to opt back into the old\n\"unchecked\" drop-checking behavior, that this very documentation warned about: the\n<code class=\"hljs\">#[may_dangle]</code> attribute.</p>\n<h3 id=\"an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle\"><a class=\"header\" href=\"#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle\">An exception: the special case of the standard library and its unstable <code>#[may_dangle]</code></a></h3>\n<p>This section can be skipped if you are only writing your own library code; but if you are\ncurious about what the standard library does with the actual <code class=\"hljs\">Vec</code> definition, you'll notice\nthat it still needs to use a <code class=\"hljs\">_owns_T: PhantomData&lt;T&gt;</code> field for soundness.</p>\n<details><summary>Click here to see why</summary>\n<p>Consider the following example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v: <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-built_in\">str</span>&gt; = <span class=\"hljs-built_in\">Vec</span>::new();\n    <span class=\"hljs-keyword\">let</span> s: <span class=\"hljs-built_in\">String</span> = <span class=\"hljs-string\">\"Short-lived\"</span>.into();\n    v.push(&amp;s);\n    <span class=\"hljs-built_in\">drop</span>(s);\n} <span class=\"hljs-comment\">// &lt;- `v` is dropped here</span></code></pre></pre>\n<p>with a classical <code class=\"hljs\">impl&lt;T&gt; Drop for Vec&lt;T&gt; {</code> definition, the above <a href=\"https://rust.godbolt.org/z/ans15Kqz3\">is denied</a>.</p>\n<p>Indeed, in this case we have a <code class=\"hljs\">Vec&lt;/* T = */ &amp;'s str&gt;</code> vector of <code class=\"hljs\">'s</code>-lived references\nto <code class=\"hljs\">str</code>ings, but in the case of <code class=\"hljs\">let s: String</code>, it is dropped before the <code class=\"hljs\">Vec</code> is, and\nthus <code class=\"hljs\">'s</code> <strong>is expired</strong> by the time the <code class=\"hljs\">Vec</code> is dropped, and the\n<code class=\"hljs\">impl&lt;'s&gt; Drop for Vec&lt;&amp;'s str&gt; {</code> is used.</p>\n<p>This means that if such <code class=\"hljs\">Drop</code> were to be used, it would be dealing with an <em>expired</em>, or\n<em>dangling</em> lifetime <code class=\"hljs\">'s</code>. But this is contrary to Rust principles, where by default all\nRust references involved in a function signature are non-dangling and valid to dereference.</p>\n<p>Hence why Rust has to conservatively deny this snippet.</p>\n<p>And yet, in the case of the real <code class=\"hljs\">Vec</code>, the <code class=\"hljs\">Drop</code> impl does not care about <code class=\"hljs\">&amp;'s str</code>,\n<em>since it has no drop glue of its own</em>: it only wants to deallocate the backing buffer.</p>\n<p>In other words, it would be nice if the above snippet was somehow accepted, by special\ncasing <code class=\"hljs\">Vec</code>, or by relying on some special property of <code class=\"hljs\">Vec</code>: <code class=\"hljs\">Vec</code> could try to\n<em>promise not to use the <code class=\"hljs\">&amp;'s str</code>s it holds when being dropped</em>.</p>\n<p>This is the kind of <code class=\"hljs\">unsafe</code> promise that can be expressed with <code class=\"hljs\">#[may_dangle]</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-meta\">#[may_dangle]</span> <span class=\"hljs-symbol\">'s</span>&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'s</span> <span class=\"hljs-built_in\">str</span>&gt; { <span class=\"hljs-comment\">/* … */</span> }</code></pre>\n<p>or, more generally:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-meta\">#[may_dangle]</span> T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; { <span class=\"hljs-comment\">/* … */</span> }</code></pre>\n<p>is the <code class=\"hljs\">unsafe</code> way to opt out of this conservative assumption that Rust's drop\nchecker makes about type parameters of a dropped instance not being allowed to dangle.</p>\n<p>And when this is done, such as in the standard library, we need to be careful in the\ncase where <code class=\"hljs\">T</code> has drop glue of its own. In this instance, imagine replacing the\n<code class=\"hljs\">&amp;'s str</code>s with a <code class=\"hljs\">struct PrintOnDrop&lt;'s&gt; /* = */ (&amp;'s str);</code> which would have a\n<code class=\"hljs\">Drop</code> impl wherein the inner <code class=\"hljs\">&amp;'s str</code> would be dereferenced and printed to the screen.</p>\n<p>Indeed, <code class=\"hljs\">Drop for Vec&lt;T&gt; {</code>, before deallocating the backing buffer, does have to transitively\ndrop each <code class=\"hljs\">T</code> item when it has drop glue; in the case of <code class=\"hljs\">PrintOnDrop&lt;'s&gt;</code>, it means that\n<code class=\"hljs\">Drop for Vec&lt;PrintOnDrop&lt;'s&gt;&gt;</code> has to transitively drop the <code class=\"hljs\">PrintOnDrop&lt;'s&gt;</code>s elements before\ndeallocating the backing buffer.</p>\n<p>So when we said that <code class=\"hljs\">'s</code> <code class=\"hljs\">#[may_dangle]</code>, it was an excessively loose statement. We'd rather want\nto say: \"<code class=\"hljs\">'s</code> may dangle provided it not be involved in some transitive drop glue\". Or, more generally,\n\"<code class=\"hljs\">T</code> may dangle provided it not be involved in some transitive drop glue\". This \"exception to the\nexception\" is a pervasive situation whenever <strong>we own a <code class=\"hljs\">T</code></strong>. That's why Rust's <code class=\"hljs\">#[may_dangle]</code> is\nsmart enough to know of this opt-out, and will thus be disabled <em>when the generic parameter is held\nin an owned fashion</em> by the fields of the struct.</p>\n<p>Hence why the standard library ends up with:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(any())]</span>\n</span><span class=\"hljs-comment\">// we pinky-swear not to use `T` when dropping a `Vec`…</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-meta\">#[may_dangle]</span> T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">if</span> mem::needs_drop::&lt;T&gt;() {\n                <span class=\"hljs-comment\">/* … except here, that is, … */</span>\n                ptr::drop_in_place::&lt;[T]&gt;(<span class=\"hljs-comment\">/* … */</span>);\n            }\n            <span class=\"hljs-comment\">// …</span>\n            dealloc(<span class=\"hljs-comment\">/* … */</span>)\n            <span class=\"hljs-comment\">// …</span>\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    <span class=\"hljs-comment\">// … except for the fact that a `Vec` owns `T` items and</span>\n    <span class=\"hljs-comment\">// may thus be dropping `T` items on drop!</span>\n    _owns_T: core::marker::PhantomData&lt;T&gt;,\n\n    ptr: *<span class=\"hljs-keyword\">const</span> T, <span class=\"hljs-comment\">// `*const` for variance (but this does not express ownership of a `T` *per se*)</span>\n    len: <span class=\"hljs-built_in\">usize</span>,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n</details>\n<hr>\n<p>Raw pointers that own an allocation is such a pervasive pattern that the\nstandard library made a utility for itself called <code class=\"hljs\">Unique&lt;T&gt;</code> which:</p>\n<ul>\n<li>wraps a <code class=\"hljs\">*const T</code> for variance</li>\n<li>includes a <code class=\"hljs\">PhantomData&lt;T&gt;</code></li>\n<li>auto-derives <code class=\"hljs\">Send</code>/<code class=\"hljs\">Sync</code> as if T was contained</li>\n<li>marks the pointer as <code class=\"hljs\">NonZero</code> for the null-pointer optimization</li>\n</ul>\n<h2 id=\"table-of-phantomdata-patterns\"><a class=\"header\" href=\"#table-of-phantomdata-patterns\">Table of <code>PhantomData</code> patterns</a></h2>\n<p>Here’s a table of all the wonderful ways <code class=\"hljs\">PhantomData</code> could be used:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Phantom type</th><th style=\"text-align: center\">variance of <code class=\"hljs\">'a</code></th><th style=\"text-align: center\">variance of <code class=\"hljs\">T</code></th><th style=\"text-align: center\"><code class=\"hljs\">Send</code>/<code class=\"hljs\">Sync</code><br>(or lack thereof)</th><th style=\"text-align: center\">dangling <code class=\"hljs\">'a</code> or <code class=\"hljs\">T</code> in drop glue<br>(<em>e.g.</em>, <code class=\"hljs\">#[may_dangle] Drop</code>)</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">PhantomData&lt;T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\">inherited</td><td style=\"text-align: center\">disallowed (\"owns <code class=\"hljs\">T</code>\")</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;&amp;'a T&gt;</code></td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">Send + Sync</code><br>requires<br><code class=\"hljs\">T : Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;&amp;'a mut T&gt;</code></td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><strong>inv</strong>ariant</td><td style=\"text-align: center\">inherited</td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;*const T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">!Send + !Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;*mut T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>inv</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">!Send + !Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;fn(T)&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>contra</strong>variant</td><td style=\"text-align: center\"><code class=\"hljs\">Send + Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;fn() -&gt; T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>cov</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">Send + Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;fn(T) -&gt; T&gt;</code></td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><strong>inv</strong>ariant</td><td style=\"text-align: center\"><code class=\"hljs\">Send + Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n<tr><td><code class=\"hljs\">PhantomData&lt;Cell&lt;&amp;'a ()&gt;&gt;</code></td><td style=\"text-align: center\"><strong>inv</strong>ariant</td><td style=\"text-align: center\">-</td><td style=\"text-align: center\"><code class=\"hljs\">Send + !Sync</code></td><td style=\"text-align: center\">allowed</td></tr>\n</tbody></table>\n</div>\n<ul>\n<li>Note: opting out of the <code class=\"hljs\">Unpin</code> auto-trait requires the dedicated <a href=\"../core/marker/struct.PhantomPinned.html\"><code class=\"hljs\">PhantomPinned</code></a> type instead.</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"splitting-borrows\"><a class=\"header\" href=\"#splitting-borrows\">Splitting Borrows</a></h1>\n<p>The mutual exclusion property of mutable references can be very limiting when\nworking with a composite structure. The borrow checker (a.k.a. borrowck)\nunderstands some basic stuff, but will fall over pretty easily. It does\nunderstand structs sufficiently to know that it's possible to borrow disjoint\nfields of a struct simultaneously. So this works today:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    a: <span class=\"hljs-built_in\">i32</span>,\n    b: <span class=\"hljs-built_in\">i32</span>,\n    c: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = Foo {a: <span class=\"hljs-number\">0</span>, b: <span class=\"hljs-number\">0</span>, c: <span class=\"hljs-number\">0</span>};\n<span class=\"hljs-keyword\">let</span> a = &amp;<span class=\"hljs-keyword\">mut</span> x.a;\n<span class=\"hljs-keyword\">let</span> b = &amp;<span class=\"hljs-keyword\">mut</span> x.b;\n<span class=\"hljs-keyword\">let</span> c = &amp;x.c;\n*b += <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">let</span> c2 = &amp;x.c;\n*a += <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{} {} {} {}\"</span>, a, b, c, c2);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However borrowck doesn't understand arrays or slices in any way, so this doesn't\nwork:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> a = &amp;<span class=\"hljs-keyword\">mut</span> x[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-keyword\">let</span> b = &amp;<span class=\"hljs-keyword\">mut</span> x[<span class=\"hljs-number\">1</span>];\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{} {}\"</span>, a, b);\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0499]: cannot borrow `x[..]` as mutable more than once at a time\n --&gt; src/lib.rs:4:18\n  |\n3 |     let a = &amp;mut x[0];\n  |                  ---- first mutable borrow occurs here\n4 |     let b = &amp;mut x[1];\n  |                  ^^^^ second mutable borrow occurs here\n5 |     println!(\"{} {}\", a, b);\n6 | }\n  | - first borrow ends here\n\nerror: aborting due to previous error\n</code></pre>\n<p>While it was plausible that borrowck could understand this simple case, it's\npretty clearly hopeless for borrowck to understand disjointness in general\ncontainer types like a tree, especially if distinct keys actually <em>do</em> map\nto the same value.</p>\n<p>In order to \"teach\" borrowck that what we're doing is ok, we need to drop down\nto unsafe code. For instance, mutable slices expose a <code class=\"hljs\">split_at_mut</code> function\nthat consumes the slice and returns two mutable slices. One for everything to\nthe left of the index, and one for everything to the right. Intuitively we know\nthis is safe because the slices don't overlap, and therefore alias. However\nthe implementation requires some unsafety:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::slice::from_raw_parts_mut;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">FakeSlice</span></span>&lt;T&gt;(T);\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; FakeSlice&lt;T&gt; {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">len</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">usize</span> { <span class=\"hljs-built_in\">unimplemented!</span>() }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">as_mut_ptr</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; *<span class=\"hljs-keyword\">mut</span> T { <span class=\"hljs-built_in\">unimplemented!</span>() }\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">split_at_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, mid: <span class=\"hljs-built_in\">usize</span>) -&gt; (&amp;<span class=\"hljs-keyword\">mut</span> [T], &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\n    <span class=\"hljs-keyword\">let</span> len = <span class=\"hljs-keyword\">self</span>.len();\n    <span class=\"hljs-keyword\">let</span> ptr = <span class=\"hljs-keyword\">self</span>.as_mut_ptr();\n\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-built_in\">assert!</span>(mid &lt;= len);\n\n        (from_raw_parts_mut(ptr, mid),\n         from_raw_parts_mut(ptr.add(mid), len - mid))\n    }\n}\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>This is actually a bit subtle. So as to avoid ever making two <code class=\"hljs\">&amp;mut</code>'s to the\nsame value, we explicitly construct brand-new slices through raw pointers.</p>\n<p>However more subtle is how iterators that yield mutable references work.\nThe iterator trait is defined as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Iterator</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Given this definition, Self::Item has <em>no</em> connection to <code class=\"hljs\">self</code>. This means that\nwe can call <code class=\"hljs\">next</code> several times in a row, and hold onto all the results\n<em>concurrently</em>. This is perfectly fine for by-value iterators, which have\nexactly these semantics. It's also actually fine for shared references, as they\nadmit arbitrarily many references to the same thing (although the iterator needs\nto be a separate object from the thing being shared).</p>\n<p>But mutable references make this a mess. At first glance, they might seem\ncompletely incompatible with this API, as it would produce multiple mutable\nreferences to the same object!</p>\n<p>However it actually <em>does</em> work, exactly because iterators are one-shot objects.\nEverything an IterMut yields will be yielded at most once, so we don't\nactually ever yield multiple mutable references to the same piece of data.</p>\n<p>Perhaps surprisingly, mutable iterators don't require unsafe code to be\nimplemented for many types!</p>\n<p>For instance here's a singly linked list:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Link</span></span>&lt;T&gt; = <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;Node&lt;T&gt;&gt;&gt;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span></span>&lt;T&gt; {\n    elem: T,\n    next: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkedList</span></span>&lt;T&gt; {\n    head: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IterMut</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;(<span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;&gt;);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; LinkedList&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; IterMut&lt;T&gt; {\n        IterMut(<span class=\"hljs-keyword\">self</span>.head.as_mut().map(|node| &amp;<span class=\"hljs-keyword\">mut</span> **node))\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.take().map(|node| {\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span> = node.next.as_mut().map(|node| &amp;<span class=\"hljs-keyword\">mut</span> **node);\n            &amp;<span class=\"hljs-keyword\">mut</span> node.elem\n        })\n    }\n}</code></pre></pre>\n<p>Here's a mutable slice:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IterMut</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span>[T]);\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">let</span> slice = mem::take(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">if</span> slice.is_empty() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>; }\n\n        <span class=\"hljs-keyword\">let</span> (l, r) = slice.split_at_mut(<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span> = r;\n        l.get_mut(<span class=\"hljs-number\">0</span>)\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">let</span> slice = mem::take(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">if</span> slice.is_empty() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>; }\n\n        <span class=\"hljs-keyword\">let</span> new_len = slice.len() - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> (l, r) = slice.split_at_mut(new_len);\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span> = l;\n        r.get_mut(<span class=\"hljs-number\">0</span>)\n    }\n}</code></pre></pre>\n<p>And here's a binary tree:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-keyword\">use</span> std::collections::VecDeque;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Link</span></span>&lt;T&gt; = <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;Node&lt;T&gt;&gt;&gt;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span></span>&lt;T&gt; {\n    elem: T,\n    left: Link&lt;T&gt;,\n    right: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tree</span></span>&lt;T&gt; {\n    root: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NodeIterMut</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    elem: <span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T&gt;,\n    left: <span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;&gt;,\n    right: <span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;&gt;,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">State</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    Elem(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T),\n    Node(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;),\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IterMut</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;(VecDeque&lt;NodeIterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;&gt;);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Tree&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; IterMut&lt;T&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> deque = VecDeque::new();\n        <span class=\"hljs-keyword\">self</span>.root.as_mut().map(|root| deque.push_front(root.iter_mut()));\n        IterMut(deque)\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Node&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; NodeIterMut&lt;T&gt; {\n        NodeIterMut {\n            elem: <span class=\"hljs-literal\">Some</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.elem),\n            left: <span class=\"hljs-keyword\">self</span>.left.as_mut().map(|node| &amp;<span class=\"hljs-keyword\">mut</span> **node),\n            right: <span class=\"hljs-keyword\">self</span>.right.as_mut().map(|node| &amp;<span class=\"hljs-keyword\">mut</span> **node),\n        }\n    }\n}\n\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> NodeIterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = State&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.left.take() {\n            <span class=\"hljs-literal\">Some</span>(node) =&gt; <span class=\"hljs-literal\">Some</span>(State::Node(node)),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.elem.take() {\n                <span class=\"hljs-literal\">Some</span>(elem) =&gt; <span class=\"hljs-literal\">Some</span>(State::Elem(elem)),\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.right.take() {\n                    <span class=\"hljs-literal\">Some</span>(node) =&gt; <span class=\"hljs-literal\">Some</span>(State::Node(node)),\n                    <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n                }\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> NodeIterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.right.take() {\n            <span class=\"hljs-literal\">Some</span>(node) =&gt; <span class=\"hljs-literal\">Some</span>(State::Node(node)),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.elem.take() {\n                <span class=\"hljs-literal\">Some</span>(elem) =&gt; <span class=\"hljs-literal\">Some</span>(State::Elem(elem)),\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.left.take() {\n                    <span class=\"hljs-literal\">Some</span>(node) =&gt; <span class=\"hljs-literal\">Some</span>(State::Node(node)),\n                    <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n                }\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.front_mut().and_then(|node_it| node_it.next()) {\n                <span class=\"hljs-literal\">Some</span>(State::Elem(elem)) =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Some</span>(elem),\n                <span class=\"hljs-literal\">Some</span>(State::Node(node)) =&gt; <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.push_front(node.iter_mut()),\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">None</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.pop_front() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span> },\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.back_mut().and_then(|node_it| node_it.next_back()) {\n                <span class=\"hljs-literal\">Some</span>(State::Elem(elem)) =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Some</span>(elem),\n                <span class=\"hljs-literal\">Some</span>(State::Node(node)) =&gt; <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.push_back(node.iter_mut()),\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">None</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.pop_back() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span> },\n            }\n        }\n    }\n}</code></pre></pre>\n<p>All of these are completely safe and work on stable Rust! This ultimately\nfalls out of the simple struct case we saw before: Rust understands that you\ncan safely split a mutable reference into subfields. We can then encode\npermanently consuming a reference via Options (or in the case of slices,\nreplacing with an empty slice).</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"type-conversions\"><a class=\"header\" href=\"#type-conversions\">Type Conversions</a></h1>\n<p>At the end of the day, everything is just a pile of bits somewhere, and type\nsystems are just there to help us use those bits right. There are two common\nproblems with typing bits: needing to reinterpret those exact bits as a\ndifferent type, and needing to change the bits to have equivalent meaning for\na different type. Because Rust encourages encoding important properties in the\ntype system, these problems are incredibly pervasive. As such, Rust\nconsequently gives you several ways to solve them.</p>\n<p>First we'll look at the ways that Safe Rust gives you to reinterpret values.\nThe most trivial way to do this is to just destructure a value into its\nconstituent parts and then build a new type out of them. e.g.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    x: <span class=\"hljs-built_in\">u32</span>,\n    y: <span class=\"hljs-built_in\">u16</span>,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span> {\n    a: <span class=\"hljs-built_in\">u32</span>,\n    b: <span class=\"hljs-built_in\">u16</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">reinterpret</span></span>(foo: Foo) -&gt; Bar {\n    <span class=\"hljs-keyword\">let</span> Foo { x, y } = foo;\n    Bar { a: x, b: y }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>But this is, at best, annoying. For common conversions, Rust provides\nmore ergonomic alternatives.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"coercions\"><a class=\"header\" href=\"#coercions\">Coercions</a></h1>\n<p>Types can implicitly be coerced to change in certain contexts.\nThese changes are generally just <em>weakening</em> of types, largely focused around pointers and lifetimes.\nThey mostly exist to make Rust \"just work\" in more cases, and are largely harmless.</p>\n<p>For an exhaustive list of all the types of coercions, see the <a href=\"../reference/type-coercions.html#coercion-types\">Coercion types</a> section on the reference.</p>\n<p>Note that we do not perform coercions when matching traits (except for receivers, see the <a href=\"./dot-operator.html\">next page</a>).\nIf there is an <code class=\"hljs\">impl</code> for some type <code class=\"hljs\">U</code> and <code class=\"hljs\">T</code> coerces to <code class=\"hljs\">U</code>, that does not constitute an implementation for <code class=\"hljs\">T</code>.\nFor example, the following will not type check, even though it is OK to coerce <code class=\"hljs\">t</code> to <code class=\"hljs\">&amp;T</code> and there is an <code class=\"hljs\">impl</code> for <code class=\"hljs\">&amp;T</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;X: Trait&gt;(t: X) {}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; Trait <span class=\"hljs-keyword\">for</span> &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span> {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> t: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span> = &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-number\">0</span>;\n    foo(t);\n}</code></pre></pre>\n<p>which fails like as follows:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0277]: the trait bound `&amp;mut i32: Trait` is not satisfied\n --&gt; src/main.rs:9:9\n  |\n3 | fn foo&lt;X: Trait&gt;(t: X) {}\n  |           ----- required by this bound in `foo`\n...\n9 |     foo(t);\n  |         ^ the trait `Trait` is not implemented for `&amp;mut i32`\n  |\n  = help: the following implementations were found:\n            &lt;&amp;'a i32 as Trait&gt;\n  = note: `Trait` is implemented for `&amp;i32`, but not for `&amp;mut i32`\n</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"the-dot-operator\"><a class=\"header\" href=\"#the-dot-operator\">The Dot Operator</a></h1>\n<p>The dot operator will perform a lot of magic to convert types.\nIt will perform auto-referencing, auto-dereferencing, and coercion until types\nmatch.\nThe detailed mechanics of method lookup are defined <a href=\"https://rustc-dev-guide.rust-lang.org/method-lookup.html\">here</a>,\nbut here is a brief overview that outlines the main steps.</p>\n<p>Suppose we have a function <code class=\"hljs\">foo</code> that has a receiver (a <code class=\"hljs\">self</code>, <code class=\"hljs\">&amp;self</code> or\n<code class=\"hljs\">&amp;mut self</code> parameter).\nIf we call <code class=\"hljs\">value.foo()</code>, the compiler needs to determine what type <code class=\"hljs\">Self</code> is before\nit can call the correct implementation of the function.\nFor this example, we will say that <code class=\"hljs\">value</code> has type <code class=\"hljs\">T</code>.</p>\n<p>We will use <a href=\"../book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\">fully-qualified syntax</a> to be more clear about exactly which\ntype we are calling a function on.</p>\n<ul>\n<li>First, the compiler checks if it can call <code class=\"hljs\">T::foo(value)</code> directly.\nThis is called a \"by value\" method call.</li>\n<li>If it can't call this function (for example, if the function has the wrong type\nor a trait isn't implemented for <code class=\"hljs\">Self</code>), then the compiler tries to add in an\nautomatic reference.\nThis means that the compiler tries <code class=\"hljs\">&lt;&amp;T&gt;::foo(value)</code> and <code class=\"hljs\">&lt;&amp;mut T&gt;::foo(value)</code>.\nThis is called an \"autoref\" method call.</li>\n<li>If none of these candidates worked, it dereferences <code class=\"hljs\">T</code> and tries again.\nThis uses the <code class=\"hljs\">Deref</code> trait - if <code class=\"hljs\">T: Deref&lt;Target = U&gt;</code> then it tries again with\ntype <code class=\"hljs\">U</code> instead of <code class=\"hljs\">T</code>.\nIf it can't dereference <code class=\"hljs\">T</code>, it can also try <em>unsizing</em> <code class=\"hljs\">T</code>.\nThis just means that if <code class=\"hljs\">T</code> has a size parameter known at compile time, it \"forgets\"\nit for the purpose of resolving methods.\nFor instance, this unsizing step can convert <code class=\"hljs\">[i32; 2]</code> into <code class=\"hljs\">[i32]</code> by \"forgetting\"\nthe size of the array.</li>\n</ul>\n<p>Here is an example of the method lookup algorithm:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> array: Rc&lt;<span class=\"hljs-built_in\">Box</span>&lt;[T; <span class=\"hljs-number\">3</span>]&gt;&gt; = ...;\n<span class=\"hljs-keyword\">let</span> first_entry = array[<span class=\"hljs-number\">0</span>];</code></pre>\n<p>How does the compiler actually compute <code class=\"hljs\">array[0]</code> when the array is behind so\nmany indirections?\nFirst, <code class=\"hljs\">array[0]</code> is really just syntax sugar for the <a href=\"../std/ops/trait.Index.html\"><code class=\"hljs\">Index</code></a> trait -\nthe compiler will convert <code class=\"hljs\">array[0]</code> into <code class=\"hljs\">array.index(0)</code>.\nNow, the compiler checks to see if <code class=\"hljs\">array</code> implements <code class=\"hljs\">Index</code>, so that it can call\nthe function.</p>\n<p>Then, the compiler checks if <code class=\"hljs\">Rc&lt;Box&lt;[T; 3]&gt;&gt;</code> implements <code class=\"hljs\">Index</code>, but it\ndoes not, and neither do <code class=\"hljs\">&amp;Rc&lt;Box&lt;[T; 3]&gt;&gt;</code> or <code class=\"hljs\">&amp;mut Rc&lt;Box&lt;[T; 3]&gt;&gt;</code>.\nSince none of these worked, the compiler dereferences the <code class=\"hljs\">Rc&lt;Box&lt;[T; 3]&gt;&gt;</code> into\n<code class=\"hljs\">Box&lt;[T; 3]&gt;</code> and tries again.\n<code class=\"hljs\">Box&lt;[T; 3]&gt;</code>, <code class=\"hljs\">&amp;Box&lt;[T; 3]&gt;</code>, and <code class=\"hljs\">&amp;mut Box&lt;[T; 3]&gt;</code> do not implement <code class=\"hljs\">Index</code>,\nso it dereferences again.\n<code class=\"hljs\">[T; 3]</code> and its autorefs also do not implement <code class=\"hljs\">Index</code>.\nIt can't dereference <code class=\"hljs\">[T; 3]</code>, so the compiler unsizes it, giving <code class=\"hljs\">[T]</code>.\nFinally, <code class=\"hljs\">[T]</code> implements <code class=\"hljs\">Index</code>, so it can now call the actual <code class=\"hljs\">index</code> function.</p>\n<p>Consider the following more complicated example of the dot operator at work:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_stuff</span></span>&lt;T: <span class=\"hljs-built_in\">Clone</span>&gt;(value: &amp;T) {\n    <span class=\"hljs-keyword\">let</span> cloned = value.clone();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>What type is <code class=\"hljs\">cloned</code>?\nFirst, the compiler checks if it can call by value.\nThe type of <code class=\"hljs\">value</code> is <code class=\"hljs\">&amp;T</code>, and so the <code class=\"hljs\">clone</code> function has signature\n<code class=\"hljs\">fn clone(&amp;T) -&gt; T</code>.\nIt knows that <code class=\"hljs\">T: Clone</code>, so the compiler finds that <code class=\"hljs\">cloned: T</code>.</p>\n<p>What would happen if the <code class=\"hljs\">T: Clone</code> restriction was removed? It would not be able\nto call by value, since there is no implementation of <code class=\"hljs\">Clone</code> for <code class=\"hljs\">T</code>.\nSo the compiler tries to call by autoref.\nIn this case, the function has the signature <code class=\"hljs\">fn clone(&amp;&amp;T) -&gt; &amp;T</code> since\n<code class=\"hljs\">Self = &amp;T</code>.\nThe compiler sees that <code class=\"hljs\">&amp;T: Clone</code>, and then deduces that <code class=\"hljs\">cloned: &amp;T</code>.</p>\n<p>Here is another example where the autoref behavior is used to create some subtle\neffects:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::sync::Arc;\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[derive(Clone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Container</span></span>&lt;T&gt;(Arc&lt;T&gt;);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">clone_containers</span></span>&lt;T&gt;(foo: &amp;Container&lt;<span class=\"hljs-built_in\">i32</span>&gt;, bar: &amp;Container&lt;T&gt;) {\n    <span class=\"hljs-keyword\">let</span> foo_cloned = foo.clone();\n    <span class=\"hljs-keyword\">let</span> bar_cloned = bar.clone();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>What types are <code class=\"hljs\">foo_cloned</code> and <code class=\"hljs\">bar_cloned</code>?\nWe know that <code class=\"hljs\">Container&lt;i32&gt;: Clone</code>, so the compiler calls <code class=\"hljs\">clone</code> by value to give\n<code class=\"hljs\">foo_cloned: Container&lt;i32&gt;</code>.\nHowever, <code class=\"hljs\">bar_cloned</code> actually has type <code class=\"hljs\">&amp;Container&lt;T&gt;</code>.\nSurely this doesn't make sense - we added <code class=\"hljs\">#[derive(Clone)]</code> to <code class=\"hljs\">Container</code>, so it\nmust implement <code class=\"hljs\">Clone</code>!\nLooking closer, the code generated by the <code class=\"hljs\">derive</code> macro is (roughly):</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Clone</span> <span class=\"hljs-keyword\">for</span> Container&lt;T&gt; <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-built_in\">Clone</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">clone</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span>(Arc::clone(&amp;<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>))\n    }\n}</code></pre>\n<p>The derived <code class=\"hljs\">Clone</code> implementation is <a href=\"../std/clone/trait.Clone.html#derivable\">only defined where <code class=\"hljs\">T: Clone</code></a>,\nso there is no implementation for <code class=\"hljs\">Container&lt;T&gt;: Clone</code> for a generic <code class=\"hljs\">T</code>.\nThe compiler then looks to see if <code class=\"hljs\">&amp;Container&lt;T&gt;</code> implements <code class=\"hljs\">Clone</code>, which it does.\nSo it deduces that <code class=\"hljs\">clone</code> is called by autoref, and so <code class=\"hljs\">bar_cloned</code> has type\n<code class=\"hljs\">&amp;Container&lt;T&gt;</code>.</p>\n<p>We can fix this by implementing <code class=\"hljs\">Clone</code> manually without requiring <code class=\"hljs\">T: Clone</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Clone</span> <span class=\"hljs-keyword\">for</span> Container&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">clone</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span>(Arc::clone(&amp;<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>))\n    }\n}</code></pre>\n<p>Now, the type checker deduces that <code class=\"hljs\">bar_cloned: Container&lt;T&gt;</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"casts\"><a class=\"header\" href=\"#casts\">Casts</a></h1>\n<p>Casts are a superset of coercions: every coercion can be explicitly invoked via a cast.\nHowever some conversions require a cast.\nWhile coercions are pervasive and largely harmless, these \"true casts\" are rare and potentially dangerous.\nAs such, casts must be explicitly invoked using the <code class=\"hljs\">as</code> keyword: <code class=\"hljs\">expr as Type</code>.</p>\n<p>You can find an exhaustive list of <a href=\"../reference/expressions/operator-expr.html#type-cast-expressions\">all the true casts</a> and <a href=\"../reference/expressions/operator-expr.html#semantics\">casting semantics</a> on the reference.</p>\n<h2 id=\"safety-of-casting\"><a class=\"header\" href=\"#safety-of-casting\">Safety of casting</a></h2>\n<p>True casts generally revolve around raw pointers and the primitive numeric types.\nEven though they're dangerous, these casts are infallible at runtime.\nIf a cast triggers some subtle corner case no indication will be given that this occurred.\nThe cast will simply succeed.\nThat said, casts must be valid at the type level, or else they will be prevented statically.\nFor instance, <code class=\"hljs\">7u8 as bool</code> will not compile.</p>\n<p>That said, casts aren't <code class=\"hljs\">unsafe</code> because they generally can't violate memory safety <em>on their own</em>.\nFor instance, converting an integer to a raw pointer can very easily lead to terrible things.\nHowever the act of creating the pointer itself is safe, because actually using a raw pointer is already marked as <code class=\"hljs\">unsafe</code>.</p>\n<h2 id=\"some-notes-about-casting\"><a class=\"header\" href=\"#some-notes-about-casting\">Some notes about casting</a></h2>\n<h3 id=\"lengths-when-casting-raw-slices\"><a class=\"header\" href=\"#lengths-when-casting-raw-slices\">Lengths when casting raw slices</a></h3>\n<p>Note that lengths are not adjusted when casting raw slices; <code class=\"hljs\">*const [u16] as *const [u8]</code> creates a slice that only includes half of the original memory.</p>\n<h3 id=\"transitivity\"><a class=\"header\" href=\"#transitivity\">Transitivity</a></h3>\n<p>Casting is not transitive, that is, even if <code class=\"hljs\">e as U1 as U2</code> is a valid expression, <code class=\"hljs\">e as U2</code> is not necessarily so.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"transmutes\"><a class=\"header\" href=\"#transmutes\">Transmutes</a></h1>\n<p>Get out of our way type system! We're going to reinterpret these bits or die\ntrying! Even though this book is all about doing things that are unsafe, I\nreally can't emphasize enough that you should deeply think about finding Another Way\nthan the operations covered in this section. This is really, truly, the most\nhorribly unsafe thing you can do in Rust. The guardrails here are dental floss.</p>\n<p><a href=\"../std/mem/fn.transmute.html\"><code class=\"hljs\">mem::transmute&lt;T, U&gt;</code></a> takes a value of type <code class=\"hljs\">T</code> and reinterprets\nit to have type <code class=\"hljs\">U</code>. The only restriction is that the <code class=\"hljs\">T</code> and <code class=\"hljs\">U</code> are verified\nto have the same size. The ways to cause Undefined Behavior with this are mind\nboggling.</p>\n<ul>\n<li>\n<p>First and foremost, creating an instance of <em>any</em> type with an invalid state\nis going to cause arbitrary chaos that can't really be predicted. Do not\ntransmute <code class=\"hljs\">3</code> to <code class=\"hljs\">bool</code>. Even if you never <em>do</em> anything with the <code class=\"hljs\">bool</code>. Just\ndon't.</p>\n</li>\n<li>\n<p>Transmute has an overloaded return type. If you do not specify the return type\nit may produce a surprising type to satisfy inference.</p>\n</li>\n<li>\n<p>Transmuting an <code class=\"hljs\">&amp;</code> to <code class=\"hljs\">&amp;mut</code> is Undefined Behavior. While certain usages may\n<em>appear</em> safe, note that the Rust optimizer is free to assume that a shared\nreference won't change through its lifetime and thus such transmutation will\nrun afoul of those assumptions. So:</p>\n<ul>\n<li>Transmuting an <code class=\"hljs\">&amp;</code> to <code class=\"hljs\">&amp;mut</code> is <em>always</em> Undefined Behavior.</li>\n<li>No you can't do it.</li>\n<li>No you're not special.</li>\n</ul>\n</li>\n<li>\n<p>Transmuting to a reference without an explicitly provided lifetime\nproduces an <a href=\"./unbounded-lifetimes.html\">unbounded lifetime</a>.</p>\n</li>\n<li>\n<p>When transmuting between different compound types, you have to make sure they\nare laid out the same way! If layouts differ, the wrong fields are going to\nget filled with the wrong data, which will make you unhappy and can also be\nUndefined Behavior (see above).</p>\n<p>So how do you know if the layouts are the same? For <code class=\"hljs\">repr(C)</code> types and\n<code class=\"hljs\">repr(transparent)</code> types, layout is precisely defined. But for your\nrun-of-the-mill <code class=\"hljs\">repr(Rust)</code>, it is not. Even different instances of the same\ngeneric type can have wildly different layout. <code class=\"hljs\">Vec&lt;i32&gt;</code> and <code class=\"hljs\">Vec&lt;u32&gt;</code>\n<em>might</em> have their fields in the same order, or they might not. The details of\nwhat exactly is and is not guaranteed for data layout are still being worked\nout over <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout.html\">at the UCG WG</a>.</p>\n</li>\n</ul>\n<p><a href=\"../std/mem/fn.transmute_copy.html\"><code class=\"hljs\">mem::transmute_copy&lt;T, U&gt;</code></a> somehow manages to be <em>even more</em>\nwildly unsafe than this. It copies <code class=\"hljs\">size_of&lt;U&gt;</code> bytes out of an <code class=\"hljs\">&amp;T</code> and\ninterprets them as a <code class=\"hljs\">U</code>.  The size check that <code class=\"hljs\">mem::transmute</code> has is gone (as\nit may be valid to copy out a prefix), though it is Undefined Behavior for <code class=\"hljs\">U</code>\nto be larger than <code class=\"hljs\">T</code>.</p>\n<p>Also of course you can get all of the functionality of these functions using raw\npointer casts or <code class=\"hljs\">union</code>s, but without any of the lints or other basic sanity\nchecks. Raw pointer casts and <code class=\"hljs\">union</code>s do not magically avoid the above rules.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"working-with-uninitialized-memory\"><a class=\"header\" href=\"#working-with-uninitialized-memory\">Working With Uninitialized Memory</a></h1>\n<p>All runtime-allocated memory in a Rust program begins its life as\n<em>uninitialized</em>. In this state the value of the memory is an indeterminate pile\nof bits that may or may not even reflect a valid state for the type that is\nsupposed to inhabit that location of memory. Attempting to interpret this memory\nas a value of <em>any</em> type will cause Undefined Behavior. Do Not Do This.</p>\n<p>Rust provides mechanisms to work with uninitialized memory in checked (safe) and\nunchecked (unsafe) ways.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"checked-uninitialized-memory\"><a class=\"header\" href=\"#checked-uninitialized-memory\">Checked Uninitialized Memory</a></h1>\n<p>Like C, all stack variables in Rust are uninitialized until a value is\nexplicitly assigned to them. Unlike C, Rust statically prevents you from ever\nreading them until you do:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">  |\n3 |     println!(\"{}\", x);\n  |                    ^ use of possibly uninitialized `x`\n</code></pre>\n<p>This is based off of a basic branch analysis: every branch must assign a value\nto <code class=\"hljs\">x</code> before it is first used. For short, we also say that \"<code class=\"hljs\">x</code> is init\" or\n\"<code class=\"hljs\">x</code> is uninit\".</p>\n<p>Interestingly, Rust doesn't require the variable\nto be mutable to perform a delayed initialization if every branch assigns\nexactly once. However the analysis does not take advantage of constant analysis\nor anything like that. So this compiles:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span>;\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">true</span> {\n        x = <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        x = <span class=\"hljs-number\">2</span>;\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n}</code></pre></pre>\n<p>but this doesn't:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">true</span> {\n        x = <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">  |\n6 |     println!(\"{}\", x);\n  |                    ^ use of possibly uninitialized `x`\n</code></pre>\n<p>while this does:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">true</span> {\n        x = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n    }\n    <span class=\"hljs-comment\">// Don't care that there are branches where it's not initialized</span>\n    <span class=\"hljs-comment\">// since we don't use the value in those branches</span>\n}</code></pre></pre>\n<p>Of course, while the analysis doesn't consider actual values, it does\nhave a relatively sophisticated understanding of dependencies and control\nflow. For instance, this works:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span>;\n\n<span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-comment\">// Rust doesn't understand that this branch will be taken unconditionally,</span>\n    <span class=\"hljs-comment\">// because it relies on actual values.</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">true</span> {\n        <span class=\"hljs-comment\">// But it does understand that it will only be taken once because</span>\n        <span class=\"hljs-comment\">// we unconditionally break out of it. Therefore `x` doesn't</span>\n        <span class=\"hljs-comment\">// need to be marked as mutable.</span>\n        x = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">break</span>;\n    }\n}\n<span class=\"hljs-comment\">// It also knows that it's impossible to get here without reaching the break.</span>\n<span class=\"hljs-comment\">// And therefore that `x` must be initialized here!</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If a value is moved out of a variable, that variable becomes logically\nuninitialized if the type of the value isn't Copy. That is:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">let</span> z1 = x; <span class=\"hljs-comment\">// x is still valid because i32 is Copy</span>\n    <span class=\"hljs-keyword\">let</span> z2 = y; <span class=\"hljs-comment\">// y is now logically uninitialized because Box isn't Copy</span>\n}</code></pre></pre>\n<p>However reassigning <code class=\"hljs\">y</code> in this example <em>would</em> require <code class=\"hljs\">y</code> to be marked as\nmutable, as a Safe Rust program could observe that the value of <code class=\"hljs\">y</code> changed:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> y = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">let</span> z = y; <span class=\"hljs-comment\">// y is now logically uninitialized because Box isn't Copy</span>\n    y = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// reinitialize y</span>\n}</code></pre></pre>\n<p>Otherwise it's like <code class=\"hljs\">y</code> is a brand new variable.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"drop-flags\"><a class=\"header\" href=\"#drop-flags\">Drop Flags</a></h1>\n<p>The examples in the previous section introduce an interesting problem for Rust.\nWe have seen that it's possible to conditionally initialize, deinitialize, and\nreinitialize locations of memory totally safely. For Copy types, this isn't\nparticularly notable since they're just a random pile of bits. However types\nwith destructors are a different story: Rust needs to know whether to call a\ndestructor whenever a variable is assigned to, or a variable goes out of scope.\nHow can it do this with conditional initialization?</p>\n<p>Note that this is not a problem that all assignments need worry about. In\nparticular, assigning through a dereference unconditionally drops, and assigning\nin a <code class=\"hljs\">let</code> unconditionally doesn't drop:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// let makes a fresh variable, so never need to drop</span>\n<span class=\"hljs-keyword\">let</span> y = &amp;<span class=\"hljs-keyword\">mut</span> x;\n*y = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Deref assumes the referent is initialized, so always drops</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This is only a problem when overwriting a previously initialized variable or\none of its subfields.</p>\n<p>It turns out that Rust actually tracks whether a type should be dropped or not\n<em>at runtime</em>. As a variable becomes initialized and uninitialized, a <em>drop flag</em>\nfor that variable is toggled. When a variable might need to be dropped, this\nflag is evaluated to determine if it should be dropped.</p>\n<p>Of course, it is often the case that a value's initialization state can be\nstatically known at every point in the program. If this is the case, then the\ncompiler can theoretically generate more efficient code! For instance, straight-\nline code has such <em>static drop semantics</em>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// x was uninit; just overwrite.</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> y = x;           <span class=\"hljs-comment\">// y was uninit; just overwrite and make x uninit.</span>\nx = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>);         <span class=\"hljs-comment\">// x was uninit; just overwrite.</span>\ny = x;                   <span class=\"hljs-comment\">// y was init; Drop y, overwrite it, and make x uninit!</span>\n                         <span class=\"hljs-comment\">// y goes out of scope; y was init; Drop y!</span>\n                         <span class=\"hljs-comment\">// x goes out of scope; x was uninit; do nothing.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Similarly, branched code where all branches have the same behavior with respect\nto initialization has static drop semantics:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> condition = <span class=\"hljs-literal\">true</span>;\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>);    <span class=\"hljs-comment\">// x was uninit; just overwrite.</span>\n<span class=\"hljs-keyword\">if</span> condition {\n    <span class=\"hljs-built_in\">drop</span>(x)                 <span class=\"hljs-comment\">// x gets moved out; make x uninit.</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n    <span class=\"hljs-built_in\">drop</span>(x)                 <span class=\"hljs-comment\">// x gets moved out; make x uninit.</span>\n}\nx = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>);            <span class=\"hljs-comment\">// x was uninit; just overwrite.</span>\n                            <span class=\"hljs-comment\">// x goes out of scope; x was init; Drop x!</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However code like this <em>requires</em> runtime information to correctly Drop:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> condition = <span class=\"hljs-literal\">true</span>;\n</span><span class=\"hljs-keyword\">let</span> x;\n<span class=\"hljs-keyword\">if</span> condition {\n    x = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>);        <span class=\"hljs-comment\">// x was uninit; just overwrite.</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n}\n                            <span class=\"hljs-comment\">// x goes out of scope; x might be uninit;</span>\n                            <span class=\"hljs-comment\">// check the flag!</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Of course, in this case it's trivial to retrieve static drop semantics:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> condition = <span class=\"hljs-literal\">true</span>;\n</span><span class=\"hljs-keyword\">if</span> condition {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The drop flags are tracked on the stack.\nIn old Rust versions, drop flags were stashed in a hidden field of types that implement <code class=\"hljs\">Drop</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unchecked-uninitialized-memory\"><a class=\"header\" href=\"#unchecked-uninitialized-memory\">Unchecked Uninitialized Memory</a></h1>\n<p>One interesting exception to this rule is working with arrays. Safe Rust doesn't\npermit you to partially initialize an array. When you initialize an array, you\ncan either set every value to the same thing with <code class=\"hljs\">let x = [val; N]</code>, or you can\nspecify each member individually with <code class=\"hljs\">let x = [val1, val2, val3]</code>.\nUnfortunately this is pretty rigid, especially if you need to initialize your\narray in a more incremental or dynamic way.</p>\n<p>Unsafe Rust gives us a powerful tool to handle this problem:\n<a href=\"../core/mem/union.MaybeUninit.html\"><code class=\"hljs\">MaybeUninit</code></a>. This type can be used to handle memory that has not been fully\ninitialized yet.</p>\n<p>With <code class=\"hljs\">MaybeUninit</code>, we can initialize an array element by element as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::mem::{<span class=\"hljs-keyword\">self</span>, MaybeUninit};\n\n<span class=\"hljs-comment\">// Size of the array is hard-coded but easy to change (meaning, changing just</span>\n<span class=\"hljs-comment\">// the constant is sufficient). This means we can't use [a, b, c] syntax to</span>\n<span class=\"hljs-comment\">// initialize the array, though, as we would have to keep that in sync</span>\n<span class=\"hljs-comment\">// with `SIZE`!</span>\n<span class=\"hljs-keyword\">const</span> SIZE: <span class=\"hljs-built_in\">usize</span> = <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-keyword\">let</span> x = {\n    <span class=\"hljs-comment\">// Create an uninitialized array of `MaybeUninit`. The `assume_init` is</span>\n    <span class=\"hljs-comment\">// safe because the type we are claiming to have initialized here is a</span>\n    <span class=\"hljs-comment\">// bunch of `MaybeUninit`s, which do not require initialization.</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x: [MaybeUninit&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-built_in\">u32</span>&gt;&gt;; SIZE] = <span class=\"hljs-keyword\">unsafe</span> {\n        MaybeUninit::uninit().assume_init()\n    };\n\n    <span class=\"hljs-comment\">// Dropping a `MaybeUninit` does nothing. Thus using raw pointer</span>\n    <span class=\"hljs-comment\">// assignment instead of `ptr::write` does not cause the old</span>\n    <span class=\"hljs-comment\">// uninitialized value to be dropped.</span>\n    <span class=\"hljs-comment\">// Exception safety is not a concern because Box can't panic</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..SIZE {\n        x[i] = MaybeUninit::new(<span class=\"hljs-built_in\">Box</span>::new(i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u32</span>));\n    }\n\n    <span class=\"hljs-comment\">// Everything is initialized. Transmute the array to the</span>\n    <span class=\"hljs-comment\">// initialized type.</span>\n    <span class=\"hljs-keyword\">unsafe</span> { mem::transmute::&lt;_, [<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-built_in\">u32</span>&gt;; SIZE]&gt;(x) }\n};\n\ndbg!(x);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code proceeds in three steps:</p>\n<ol>\n<li>\n<p>Create an array of <code class=\"hljs\">MaybeUninit&lt;T&gt;</code>. With current stable Rust, we have to use\nunsafe code for this: we take some uninitialized piece of memory\n(<code class=\"hljs\">MaybeUninit::uninit()</code>) and claim we have fully initialized it\n(<a href=\"../core/mem/union.MaybeUninit.html#method.assume_init\"><code class=\"hljs\">assume_init()</code></a>). This seems ridiculous, because we didn't!\nThe reason this is correct is that the array consists itself entirely of\n<code class=\"hljs\">MaybeUninit</code>, which do not actually require initialization. For most other\ntypes, doing <code class=\"hljs\">MaybeUninit::uninit().assume_init()</code> produces an invalid\ninstance of said type, so you got yourself some Undefined Behavior.</p>\n</li>\n<li>\n<p>Initialize the array. The subtle aspect of this is that usually, when we use\n<code class=\"hljs\">=</code> to assign to a value that the Rust type checker considers to already be\ninitialized (like <code class=\"hljs\">x[i]</code>), the old value stored on the left-hand side gets\ndropped. This would be a disaster. However, in this case, the type of the\nleft-hand side is <code class=\"hljs\">MaybeUninit&lt;Box&lt;u32&gt;&gt;</code>, and dropping that does not do\nanything! See below for some more discussion of this <code class=\"hljs\">drop</code> issue.</p>\n</li>\n<li>\n<p>Finally, we have to change the type of our array to remove the\n<code class=\"hljs\">MaybeUninit</code>. With current stable Rust, this requires a <code class=\"hljs\">transmute</code>.\nThis transmute is legal because in memory, <code class=\"hljs\">MaybeUninit&lt;T&gt;</code> looks the same as <code class=\"hljs\">T</code>.</p>\n<p>However, note that in general, <code class=\"hljs\">Container&lt;MaybeUninit&lt;T&gt;&gt;&gt;</code> does <em>not</em> look\nthe same as <code class=\"hljs\">Container&lt;T&gt;</code>! Imagine if <code class=\"hljs\">Container</code> was <code class=\"hljs\">Option</code>, and <code class=\"hljs\">T</code> was\n<code class=\"hljs\">bool</code>, then <code class=\"hljs\">Option&lt;bool&gt;</code> exploits that <code class=\"hljs\">bool</code> only has two valid values,\nbut <code class=\"hljs\">Option&lt;MaybeUninit&lt;bool&gt;&gt;</code> cannot do that because the <code class=\"hljs\">bool</code> does not\nhave to be initialized.</p>\n<p>So, it depends on <code class=\"hljs\">Container</code> whether transmuting away the <code class=\"hljs\">MaybeUninit</code> is\nallowed. For arrays, it is (and eventually the standard library will\nacknowledge that by providing appropriate methods).</p>\n</li>\n</ol>\n<p>It's worth spending a bit more time on the loop in the middle, and in particular\nthe assignment operator and its interaction with <code class=\"hljs\">drop</code>. If we wrote something like:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">*x[i].as_mut_ptr() = <span class=\"hljs-built_in\">Box</span>::new(i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u32</span>); <span class=\"hljs-comment\">// WRONG!</span></code></pre>\n<p>we would actually overwrite a <code class=\"hljs\">Box&lt;u32&gt;</code>, leading to <code class=\"hljs\">drop</code> of uninitialized\ndata, which would cause much sadness and pain.</p>\n<p>The correct alternative, if for some reason we cannot use <code class=\"hljs\">MaybeUninit::new</code>, is\nto use the <a href=\"../core/ptr/index.html\"><code class=\"hljs\">ptr</code></a> module. In particular, it provides three functions that allow\nus to assign bytes to a location in memory without dropping the old value:\n<a href=\"../core/ptr/fn.write.html\"><code class=\"hljs\">write</code></a>, <a href=\"../std/ptr/fn.copy.html\"><code class=\"hljs\">copy</code></a>, and <a href=\"../std/ptr/fn.copy_nonoverlapping.html\"><code class=\"hljs\">copy_nonoverlapping</code></a>.</p>\n<ul>\n<li><code class=\"hljs\">ptr::write(ptr, val)</code> takes a <code class=\"hljs\">val</code> and moves it into the address pointed\nto by <code class=\"hljs\">ptr</code>.</li>\n<li><code class=\"hljs\">ptr::copy(src, dest, count)</code> copies the bits that <code class=\"hljs\">count</code> T items would occupy\nfrom src to dest. (this is equivalent to C's memmove -- note that the argument\norder is reversed!)</li>\n<li><code class=\"hljs\">ptr::copy_nonoverlapping(src, dest, count)</code> does what <code class=\"hljs\">copy</code> does, but a\nlittle faster on the assumption that the two ranges of memory don't overlap.\n(this is equivalent to C's memcpy -- note that the argument order is reversed!)</li>\n</ul>\n<p>It should go without saying that these functions, if misused, will cause serious\nhavoc or just straight up Undefined Behavior. The only requirement of these\nfunctions <em>themselves</em> is that the locations you want to read and write\nare allocated and properly aligned. However, the ways writing arbitrary bits to\narbitrary locations of memory can break things are basically uncountable!</p>\n<p>It's worth noting that you don't need to worry about <code class=\"hljs\">ptr::write</code>-style\nshenanigans with types which don't implement <code class=\"hljs\">Drop</code> or contain <code class=\"hljs\">Drop</code> types,\nbecause Rust knows not to try to drop them. This is what we relied on in the\nabove example.</p>\n<p>However when working with uninitialized memory you need to be ever-vigilant for\nRust trying to drop values you make like this before they're fully initialized.\nEvery control path through that variable's scope must initialize the value\nbefore it ends, if it has a destructor.\n<em><a href=\"unwinding.html\">This includes code panicking</a></em>. <code class=\"hljs\">MaybeUninit</code> helps a bit\nhere, because it does not implicitly drop its content - but all this really\nmeans in case of a panic is that instead of a double-free of the not yet\ninitialized parts, you end up with a memory leak of the already initialized\nparts.</p>\n<p>Note that, to use the <code class=\"hljs\">ptr</code> methods, you need to first obtain a <em>raw pointer</em> to\nthe data you want to initialize. It is illegal to construct a <em>reference</em> to\nuninitialized data, which implies that you have to be careful when obtaining\nsaid raw pointer:</p>\n<ul>\n<li>For an array of <code class=\"hljs\">T</code>, you can use <code class=\"hljs\">base_ptr.add(idx)</code> where <code class=\"hljs\">base_ptr: *mut T</code>\nto compute the address of array index <code class=\"hljs\">idx</code>. This relies on\nhow arrays are laid out in memory.</li>\n<li>For a struct, however, in general we do not know how it is laid out, and we\nalso cannot use <code class=\"hljs\">&amp;mut base_ptr.field</code> as that would be creating a\nreference. So, you must carefully use the <a href=\"../core/ptr/macro.addr_of_mut.html\"><code class=\"hljs\">addr_of_mut</code></a> macro. This creates\na raw pointer to the field without creating an intermediate reference:</li>\n</ul>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::{ptr, mem::MaybeUninit};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Demo</span></span> {\n    field: <span class=\"hljs-built_in\">bool</span>,\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> uninit = MaybeUninit::&lt;Demo&gt;::uninit();\n<span class=\"hljs-comment\">// `&amp;uninit.as_mut().field` would create a reference to an uninitialized `bool`,</span>\n<span class=\"hljs-comment\">// and thus be Undefined Behavior!</span>\n<span class=\"hljs-keyword\">let</span> f1_ptr = <span class=\"hljs-keyword\">unsafe</span> { ptr::addr_of_mut!((*uninit.as_mut_ptr()).field) };\n<span class=\"hljs-keyword\">unsafe</span> { f1_ptr.write(<span class=\"hljs-literal\">true</span>); }\n\n<span class=\"hljs-keyword\">let</span> init = <span class=\"hljs-keyword\">unsafe</span> { uninit.assume_init() };\n<span class=\"boring\">}</span></code></pre></pre>\n<p>One last remark: when reading old Rust code, you might stumble upon the\ndeprecated <code class=\"hljs\">mem::uninitialized</code> function.  That function used to be the only way\nto deal with uninitialized memory on the stack, but it turned out to be\nimpossible to properly integrate with the rest of the language.  Always use\n<code class=\"hljs\">MaybeUninit</code> instead in new code, and port old code over when you get the\nopportunity.</p>\n<p>And that's about it for working with uninitialized memory! Basically nothing\nanywhere expects to be handed uninitialized memory, so if you're going to pass\nit around at all, be sure to be <em>really</em> careful.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"the-perils-of-ownership-based-resource-management-obrm\"><a class=\"header\" href=\"#the-perils-of-ownership-based-resource-management-obrm\">The Perils Of Ownership Based Resource Management (OBRM)</a></h1>\n<p>OBRM (AKA RAII: Resource Acquisition Is Initialization) is something you'll\ninteract with a lot in Rust. Especially if you use the standard library.</p>\n<p>Roughly speaking the pattern is as follows: to acquire a resource, you create an\nobject that manages it. To release the resource, you simply destroy the object,\nand it cleans up the resource for you. The most common \"resource\" this pattern\nmanages is simply <em>memory</em>. <code class=\"hljs\">Box</code>, <code class=\"hljs\">Rc</code>, and basically everything in\n<code class=\"hljs\">std::collections</code> is a convenience to enable correctly managing memory. This is\nparticularly important in Rust because we have no pervasive GC to rely on for\nmemory management. Which is the point, really: Rust is about control. However we\nare not limited to just memory. Pretty much every other system resource like a\nthread, file, or socket is exposed through this kind of API.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"constructors\"><a class=\"header\" href=\"#constructors\">Constructors</a></h1>\n<p>There is exactly one way to create an instance of a user-defined type: name it,\nand initialize all its fields at once:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    a: <span class=\"hljs-built_in\">u8</span>,\n    b: <span class=\"hljs-built_in\">u32</span>,\n    c: <span class=\"hljs-built_in\">bool</span>,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Bar</span></span> {\n    X(<span class=\"hljs-built_in\">u32</span>),\n    Y(<span class=\"hljs-built_in\">bool</span>),\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Unit</span></span>;\n\n<span class=\"hljs-keyword\">let</span> foo = Foo { a: <span class=\"hljs-number\">0</span>, b: <span class=\"hljs-number\">1</span>, c: <span class=\"hljs-literal\">false</span> };\n<span class=\"hljs-keyword\">let</span> bar = Bar::X(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">let</span> empty = Unit;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>That's it. Every other way you make an instance of a type is just calling a\ntotally vanilla function that does some stuff and eventually bottoms out to The\nOne True Constructor.</p>\n<p>Unlike C++, Rust does not come with a slew of built-in kinds of constructor.\nThere are no Copy, Default, Assignment, Move, or whatever constructors. The\nreasons for this are varied, but it largely boils down to Rust's philosophy of\n<em>being explicit</em>.</p>\n<p>Move constructors are meaningless in Rust because we don't enable types to\n\"care\" about their location in memory. Every type must be ready for it to be\nblindly memcopied to somewhere else in memory. This means pure on-the-stack-but-\nstill-movable intrusive linked lists are simply not happening in Rust (safely).</p>\n<p>Assignment and copy constructors similarly don't exist because move semantics\nare the only semantics in Rust. At most <code class=\"hljs\">x = y</code> just moves the bits of y into\nthe x variable. Rust does provide two facilities for providing C++'s copy-\noriented semantics: <code class=\"hljs\">Copy</code> and <code class=\"hljs\">Clone</code>. Clone is our moral equivalent of a copy\nconstructor, but it's never implicitly invoked. You have to explicitly call\n<code class=\"hljs\">clone</code> on an element you want to be cloned. Copy is a special case of Clone\nwhere the implementation is just \"copy the bits\". Copy types <em>are</em> implicitly\ncloned whenever they're moved, but because of the definition of Copy this just\nmeans not treating the old copy as uninitialized -- a no-op.</p>\n<p>While Rust provides a <code class=\"hljs\">Default</code> trait for specifying the moral equivalent of a\ndefault constructor, it's incredibly rare for this trait to be used. This is\nbecause variables <a href=\"uninitialized.html\">aren't implicitly initialized</a>. Default is basically\nonly useful for generic programming. In concrete contexts, a type will provide a\nstatic <code class=\"hljs\">new</code> method for any kind of \"default\" constructor. This has no relation\nto <code class=\"hljs\">new</code> in other languages and has no special meaning. It's just a naming\nconvention.</p>\n<p>TODO: talk about \"placement new\"?</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"destructors\"><a class=\"header\" href=\"#destructors\">Destructors</a></h1>\n<p>What the language <em>does</em> provide is full-blown automatic destructors through the\n<code class=\"hljs\">Drop</code> trait, which provides the following method:</p>\n<!-- ignore: function header -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>);</code></pre>\n<p>This method gives the type time to somehow finish what it was doing.</p>\n<p><strong>After <code class=\"hljs\">drop</code> is run, Rust will recursively try to drop all of the fields\nof <code class=\"hljs\">self</code>.</strong></p>\n<p>This is a convenience feature so that you don't have to write \"destructor\nboilerplate\" to drop children. If a struct has no special logic for being\ndropped other than dropping its children, then it means <code class=\"hljs\">Drop</code> doesn't need to\nbe implemented at all!</p>\n<p><strong>There is no stable way to prevent this behavior in Rust 1.0.</strong></p>\n<p>Note that taking <code class=\"hljs\">&amp;mut self</code> means that even if you could suppress recursive\nDrop, Rust will prevent you from e.g. moving fields out of self. For most types,\nthis is totally fine.</p>\n<p>For instance, a custom implementation of <code class=\"hljs\">Box</code> might write <code class=\"hljs\">Drop</code> like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-meta\">#![feature(ptr_internals, allocator_api)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::alloc::{Allocator, Global, GlobalAlloc, Layout};\n<span class=\"hljs-keyword\">use</span> std::mem;\n<span class=\"hljs-keyword\">use</span> std::ptr::{drop_in_place, NonNull, Unique};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Box</span></span>&lt;T&gt;{ ptr: Unique&lt;T&gt; }\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Box</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            drop_in_place(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr());\n            <span class=\"hljs-keyword\">let</span> c: NonNull&lt;T&gt; = <span class=\"hljs-keyword\">self</span>.ptr.into();\n            Global.deallocate(c.cast(), Layout::new::&lt;T&gt;())\n        }\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>and this works fine because when Rust goes to drop the <code class=\"hljs\">ptr</code> field it just sees\na <a href=\"phantom-data.html\">Unique</a> that has no actual <code class=\"hljs\">Drop</code> implementation. Similarly nothing can\nuse-after-free the <code class=\"hljs\">ptr</code> because when drop exits, it becomes inaccessible.</p>\n<p>However this wouldn't work:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-meta\">#![feature(allocator_api, ptr_internals)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::alloc::{Allocator, Global, GlobalAlloc, Layout};\n<span class=\"hljs-keyword\">use</span> std::ptr::{drop_in_place, Unique, NonNull};\n<span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Box</span></span>&lt;T&gt;{ ptr: Unique&lt;T&gt; }\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Box</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            drop_in_place(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr());\n            <span class=\"hljs-keyword\">let</span> c: NonNull&lt;T&gt; = <span class=\"hljs-keyword\">self</span>.ptr.into();\n            Global.deallocate(c.cast(), Layout::new::&lt;T&gt;());\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SuperBox</span></span>&lt;T&gt; { my_box: <span class=\"hljs-built_in\">Box</span>&lt;T&gt; }\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> SuperBox&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-comment\">// Hyper-optimized: deallocate the box's contents for it</span>\n            <span class=\"hljs-comment\">// without `drop`ing the contents</span>\n            <span class=\"hljs-keyword\">let</span> c: NonNull&lt;T&gt; = <span class=\"hljs-keyword\">self</span>.my_box.ptr.into();\n            Global.deallocate(c.cast::&lt;<span class=\"hljs-built_in\">u8</span>&gt;(), Layout::new::&lt;T&gt;());\n        }\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>After we deallocate the <code class=\"hljs\">box</code>'s ptr in SuperBox's destructor, Rust will\nhappily proceed to tell the box to Drop itself and everything will blow up with\nuse-after-frees and double-frees.</p>\n<p>Note that the recursive drop behavior applies to all structs and enums\nregardless of whether they implement Drop. Therefore something like</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Boxy</span></span>&lt;T&gt; {\n    data1: <span class=\"hljs-built_in\">Box</span>&lt;T&gt;,\n    data2: <span class=\"hljs-built_in\">Box</span>&lt;T&gt;,\n    info: <span class=\"hljs-built_in\">u32</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>will have its data1 and data2's fields destructors whenever it \"would\" be\ndropped, even though it itself doesn't implement Drop. We say that such a type\n<em>needs Drop</em>, even though it is not itself Drop.</p>\n<p>Similarly,</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Link</span></span> {\n    Next(<span class=\"hljs-built_in\">Box</span>&lt;Link&gt;),\n    <span class=\"hljs-literal\">None</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>will have its inner Box field dropped if and only if an instance stores the\nNext variant.</p>\n<p>In general this works really nicely because you don't need to worry about\nadding/removing drops when you refactor your data layout. Still there's\ncertainly many valid use cases for needing to do trickier things with\ndestructors.</p>\n<p>The classic safe solution to overriding recursive drop and allowing moving out\nof Self during <code class=\"hljs\">drop</code> is to use an Option:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-meta\">#![feature(allocator_api, ptr_internals)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::alloc::{Allocator, GlobalAlloc, Global, Layout};\n<span class=\"hljs-keyword\">use</span> std::ptr::{drop_in_place, Unique, NonNull};\n<span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Box</span></span>&lt;T&gt;{ ptr: Unique&lt;T&gt; }\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Box</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            drop_in_place(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr());\n            <span class=\"hljs-keyword\">let</span> c: NonNull&lt;T&gt; = <span class=\"hljs-keyword\">self</span>.ptr.into();\n            Global.deallocate(c.cast(), Layout::new::&lt;T&gt;());\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SuperBox</span></span>&lt;T&gt; { my_box: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;T&gt;&gt; }\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> SuperBox&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-comment\">// Hyper-optimized: deallocate the box's contents for it</span>\n            <span class=\"hljs-comment\">// without `drop`ing the contents. Need to set the `box`</span>\n            <span class=\"hljs-comment\">// field as `None` to prevent Rust from trying to Drop it.</span>\n            <span class=\"hljs-keyword\">let</span> my_box = <span class=\"hljs-keyword\">self</span>.my_box.take().unwrap();\n            <span class=\"hljs-keyword\">let</span> c: NonNull&lt;T&gt; = my_box.ptr.into();\n            Global.deallocate(c.cast(), Layout::new::&lt;T&gt;());\n            mem::forget(my_box);\n        }\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>However this has fairly odd semantics: you're saying that a field that <em>should</em>\nalways be Some <em>may</em> be None, just because that happens in the destructor. Of\ncourse this conversely makes a lot of sense: you can call arbitrary methods on\nself during the destructor, and this should prevent you from ever doing so after\ndeinitializing the field. Not that it will prevent you from producing any other\narbitrarily invalid state in there.</p>\n<p>On balance this is an ok choice. Certainly what you should reach for by default.\nHowever, in the future we expect there to be a first-class way to announce that\na field shouldn't be automatically dropped.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"leaking\"><a class=\"header\" href=\"#leaking\">Leaking</a></h1>\n<p>Ownership-based resource management is intended to simplify composition. You\nacquire resources when you create the object, and you release the resources when\nit gets destroyed. Since destruction is handled for you, it means you can't\nforget to release the resources, and it happens as soon as possible! Surely this\nis perfect and all of our problems are solved.</p>\n<p>Everything is terrible and we have new and exotic problems to try to solve.</p>\n<p>Many people like to believe that Rust eliminates resource leaks. In practice,\nthis is basically true. You would be surprised to see a Safe Rust program\nleak resources in an uncontrolled way.</p>\n<p>However from a theoretical perspective this is absolutely not the case, no\nmatter how you look at it. In the strictest sense, \"leaking\" is so abstract as\nto be unpreventable. It's quite trivial to initialize a collection at the start\nof a program, fill it with tons of objects with destructors, and then enter an\ninfinite event loop that never refers to it. The collection will sit around\nuselessly, holding on to its precious resources until the program terminates (at\nwhich point all those resources would have been reclaimed by the OS anyway).</p>\n<p>We may consider a more restricted form of leak: failing to drop a value that is\nunreachable. Rust also doesn't prevent this. In fact Rust <em>has a function for\ndoing this</em>: <code class=\"hljs\">mem::forget</code>. This function consumes the value it is passed <em>and\nthen doesn't run its destructor</em>.</p>\n<p>In the past <code class=\"hljs\">mem::forget</code> was marked as unsafe as a sort of lint against using\nit, since failing to call a destructor is generally not a well-behaved thing to\ndo (though useful for some special unsafe code). However this was generally\ndetermined to be an untenable stance to take: there are many ways to fail to\ncall a destructor in safe code. The most famous example is creating a cycle of\nreference-counted pointers using interior mutability.</p>\n<p>It is reasonable for safe code to assume that destructor leaks do not happen, as\nany program that leaks destructors is probably wrong. However <em>unsafe</em> code\ncannot rely on destructors to be run in order to be safe. For most types this\ndoesn't matter: if you leak the destructor then the type is by definition\ninaccessible, so it doesn't matter, right? For instance, if you leak a <code class=\"hljs\">Box&lt;u8&gt;</code>\nthen you waste some memory but that's hardly going to violate memory-safety.</p>\n<p>However where we must be careful with destructor leaks are <em>proxy</em> types. These\nare types which manage access to a distinct object, but don't actually own it.\nProxy objects are quite rare. Proxy objects you'll need to care about are even\nrarer. However we'll focus on three interesting examples in the standard\nlibrary:</p>\n<ul>\n<li><code class=\"hljs\">vec::Drain</code></li>\n<li><code class=\"hljs\">Rc</code></li>\n<li><code class=\"hljs\">thread::scoped::JoinGuard</code></li>\n</ul>\n<h2 id=\"drain\"><a class=\"header\" href=\"#drain\">Drain</a></h2>\n<p><code class=\"hljs\">drain</code> is a collections API that moves data out of the container without\nconsuming the container. This enables us to reuse the allocation of a <code class=\"hljs\">Vec</code>\nafter claiming ownership over all of its contents. It produces an iterator\n(Drain) that returns the contents of the Vec by-value.</p>\n<p>Now, consider Drain in the middle of iteration: some values have been moved out,\nand others haven't. This means that part of the Vec is now full of logically\nuninitialized data! We could backshift all the elements in the Vec every time we\nremove a value, but this would have pretty catastrophic performance\nconsequences.</p>\n<p>Instead, we would like Drain to fix the Vec's backing storage when it is\ndropped. It should run itself to completion, backshift any elements that weren't\nremoved (drain supports subranges), and then fix Vec's <code class=\"hljs\">len</code>. It's even\nunwinding-safe! Easy!</p>\n<p>Now consider the following:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> vec = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>); <span class=\"hljs-number\">4</span>];\n\n{\n    <span class=\"hljs-comment\">// start draining, vec can no longer be accessed</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> drainer = vec.drain(..);\n\n    <span class=\"hljs-comment\">// pull out two elements and immediately drop them</span>\n    drainer.next();\n    drainer.next();\n\n    <span class=\"hljs-comment\">// get rid of drainer, but don't call its destructor</span>\n    mem::forget(drainer);\n}\n\n<span class=\"hljs-comment\">// Oops, vec[0] was dropped, we're reading a pointer into free'd memory!</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, vec[<span class=\"hljs-number\">0</span>]);</code></pre>\n<p>This is pretty clearly Not Good. Unfortunately, we're kind of stuck between a\nrock and a hard place: maintaining consistent state at every step has an\nenormous cost (and would negate any benefits of the API). Failing to maintain\nconsistent state gives us Undefined Behavior in safe code (making the API\nunsound).</p>\n<p>So what can we do? Well, we can pick a trivially consistent state: set the Vec's\nlen to be 0 when we start the iteration, and fix it up if necessary in the\ndestructor. That way, if everything executes like normal we get the desired\nbehavior with minimal overhead. But if someone has the <em>audacity</em> to\nmem::forget us in the middle of the iteration, all that does is <em>leak even more</em>\n(and possibly leave the Vec in an unexpected but otherwise consistent state).\nSince we've accepted that mem::forget is safe, this is definitely safe. We call\nleaks causing more leaks a <em>leak amplification</em>.</p>\n<h2 id=\"rc\"><a class=\"header\" href=\"#rc\">Rc</a></h2>\n<p>Rc is an interesting case because at first glance it doesn't appear to be a\nproxy value at all. After all, it manages the data it points to, and dropping\nall the Rcs for a value will drop that value. Leaking an Rc doesn't seem like it\nwould be particularly dangerous. It will leave the refcount permanently\nincremented and prevent the data from being freed or dropped, but that seems\njust like Box, right?</p>\n<p>Nope.</p>\n<p>Let's consider a simplified implementation of Rc:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rc</span></span>&lt;T&gt; {\n    ptr: *<span class=\"hljs-keyword\">mut</span> RcBox&lt;T&gt;,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">RcBox</span></span>&lt;T&gt; {\n    data: T,\n    ref_count: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Rc&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(data: T) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-comment\">// Wouldn't it be nice if heap::allocate worked like this?</span>\n            <span class=\"hljs-keyword\">let</span> ptr = heap::allocate::&lt;RcBox&lt;T&gt;&gt;();\n            ptr::write(ptr, RcBox {\n                data,\n                ref_count: <span class=\"hljs-number\">1</span>,\n            });\n            Rc { ptr }\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">clone</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            (*<span class=\"hljs-keyword\">self</span>.ptr).ref_count += <span class=\"hljs-number\">1</span>;\n        }\n        Rc { ptr: <span class=\"hljs-keyword\">self</span>.ptr }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Rc&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            (*<span class=\"hljs-keyword\">self</span>.ptr).ref_count -= <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">if</span> (*<span class=\"hljs-keyword\">self</span>.ptr).ref_count == <span class=\"hljs-number\">0</span> {\n                <span class=\"hljs-comment\">// drop the data and then free it</span>\n                ptr::read(<span class=\"hljs-keyword\">self</span>.ptr);\n                heap::deallocate(<span class=\"hljs-keyword\">self</span>.ptr);\n            }\n        }\n    }\n}</code></pre>\n<p>This code contains an implicit and subtle assumption: <code class=\"hljs\">ref_count</code> can fit in a\n<code class=\"hljs\">usize</code>, because there can't be more than <code class=\"hljs\">usize::MAX</code> Rcs in memory. However\nthis itself assumes that the <code class=\"hljs\">ref_count</code> accurately reflects the number of Rcs\nin memory, which we know is false with <code class=\"hljs\">mem::forget</code>. Using <code class=\"hljs\">mem::forget</code> we can\noverflow the <code class=\"hljs\">ref_count</code>, and then get it down to 0 with outstanding Rcs. Then\nwe can happily use-after-free the inner data. Bad Bad Not Good.</p>\n<p>This can be solved by just checking the <code class=\"hljs\">ref_count</code> and doing <em>something</em>. The\nstandard library's stance is to just abort, because your program has become\nhorribly degenerate. Also <em>oh my gosh</em> it's such a ridiculous corner case.</p>\n<h2 id=\"threadscopedjoinguard\"><a class=\"header\" href=\"#threadscopedjoinguard\">thread::scoped::JoinGuard</a></h2>\n<blockquote>\n<p>Note: This API has already been removed from std, for more information\nyou may refer <a href=\"https://github.com/rust-lang/rust/issues/24292\">issue #24292</a>.</p>\n<p>This section remains here because we think this example is still\nimportant, regardless of whether it is part of std or not.</p>\n</blockquote>\n<p>The thread::scoped API intended to allow threads to be spawned that reference\ndata on their parent's stack without any synchronization over that data by\nensuring the parent joins the thread before any of the shared data goes out\nof scope.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">scoped</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, F&gt;(f: F) -&gt; JoinGuard&lt;<span class=\"hljs-symbol\">'a</span>&gt;\n    <span class=\"hljs-keyword\">where</span> F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'a</span></code></pre>\n<p>Here <code class=\"hljs\">f</code> is some closure for the other thread to execute. Saying that\n<code class=\"hljs\">F: Send + 'a</code> is saying that it closes over data that lives for <code class=\"hljs\">'a</code>, and it\neither owns that data or the data was Sync (implying <code class=\"hljs\">&amp;data</code> is Send).</p>\n<p>Because JoinGuard has a lifetime, it keeps all the data it closes over\nborrowed in the parent thread. This means the JoinGuard can't outlive\nthe data that the other thread is working on. When the JoinGuard <em>does</em> get\ndropped it blocks the parent thread, ensuring the child terminates before any\nof the closed-over data goes out of scope in the parent.</p>\n<p>Usage looked like:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> data = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>];\n{\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guards = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> data {\n        <span class=\"hljs-comment\">// Move the mutable reference into the closure, and execute</span>\n        <span class=\"hljs-comment\">// it on a different thread. The closure has a lifetime bound</span>\n        <span class=\"hljs-comment\">// by the lifetime of the mutable reference `x` we store in it.</span>\n        <span class=\"hljs-comment\">// The guard that is returned is in turn assigned the lifetime</span>\n        <span class=\"hljs-comment\">// of the closure, so it also mutably borrows `data` as `x` did.</span>\n        <span class=\"hljs-comment\">// This means we cannot access `data` until the guard goes away.</span>\n        <span class=\"hljs-keyword\">let</span> guard = thread::scoped(<span class=\"hljs-keyword\">move</span> || {\n            *x *= <span class=\"hljs-number\">2</span>;\n        });\n        <span class=\"hljs-comment\">// store the thread's guard for later</span>\n        guards.push(guard);\n    }\n    <span class=\"hljs-comment\">// All guards are dropped here, forcing the threads to join</span>\n    <span class=\"hljs-comment\">// (this thread blocks here until the others terminate).</span>\n    <span class=\"hljs-comment\">// Once the threads join, the borrow expires and the data becomes</span>\n    <span class=\"hljs-comment\">// accessible again in this thread.</span>\n}\n<span class=\"hljs-comment\">// data is definitely mutated here.</span></code></pre>\n<p>In principle, this totally works! Rust's ownership system perfectly ensures it!\n...except it relies on a destructor being called to be safe.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> data = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">0</span>);\n{\n    <span class=\"hljs-keyword\">let</span> guard = thread::scoped(|| {\n        <span class=\"hljs-comment\">// This is at best a data race. At worst, it's also a use-after-free.</span>\n        *data += <span class=\"hljs-number\">1</span>;\n    });\n    <span class=\"hljs-comment\">// Because the guard is forgotten, expiring the loan without blocking this</span>\n    <span class=\"hljs-comment\">// thread.</span>\n    mem::forget(guard);\n}\n<span class=\"hljs-comment\">// So the Box is dropped here while the scoped thread may or may not be trying</span>\n<span class=\"hljs-comment\">// to access it.</span></code></pre>\n<p>Dang. Here the destructor running was pretty fundamental to the API, and it had\nto be scrapped in favor of a completely different design.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"unwinding\"><a class=\"header\" href=\"#unwinding\">Unwinding</a></h1>\n<p>Rust has a <em>tiered</em> error-handling scheme:</p>\n<ul>\n<li>If something might reasonably be absent, Option is used.</li>\n<li>If something goes wrong and can reasonably be handled, Result is used.</li>\n<li>If something goes wrong and cannot reasonably be handled, the thread panics.</li>\n<li>If something catastrophic happens, the program aborts.</li>\n</ul>\n<p>Option and Result are overwhelmingly preferred in most situations, especially\nsince they can be promoted into a panic or abort at the API user's discretion.\nPanics cause the thread to halt normal execution and unwind its stack, calling\ndestructors as if every function instantly returned.</p>\n<p>As of 1.0, Rust is of two minds when it comes to panics. In the long-long-ago,\nRust was much more like Erlang. Like Erlang, Rust had lightweight tasks,\nand tasks were intended to kill themselves with a panic when they reached an\nuntenable state. Unlike an exception in Java or C++, a panic could not be\ncaught at any time. Panics could only be caught by the owner of the task, at which\npoint they had to be handled or <em>that</em> task would itself panic.</p>\n<p>Unwinding was important to this story because if a task's\ndestructors weren't called, it would cause memory and other system resources to\nleak. Since tasks were expected to die during normal execution, this would make\nRust very poor for long-running systems!</p>\n<p>As the Rust we know today came to be, this style of programming grew out of\nfashion in the push for less-and-less abstraction. Light-weight tasks were\nkilled in the name of heavy-weight OS threads. Still, on stable Rust as of 1.0\npanics can only be caught by the parent thread. This means catching a panic\nrequires spinning up an entire OS thread! This unfortunately stands in conflict\nto Rust's philosophy of zero-cost abstractions.</p>\n<p>There is an API called <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\"><code class=\"hljs\">catch_unwind</code></a> that enables catching a panic\nwithout spawning a thread. Still, we would encourage you to only do this\nsparingly. In particular, Rust's current unwinding implementation is heavily\noptimized for the \"doesn't unwind\" case. If a program doesn't unwind, there\nshould be no runtime cost for the program being <em>ready</em> to unwind. As a\nconsequence, actually unwinding will be more expensive than in e.g. Java.\nDon't build your programs to unwind under normal circumstances. Ideally, you\nshould only panic for programming errors or <em>extreme</em> problems.</p>\n<p>Rust's unwinding strategy is not specified to be fundamentally compatible\nwith any other language's unwinding. As such, unwinding into Rust from another\nlanguage, or unwinding into another language from Rust is Undefined Behavior.\nYou must <em>absolutely</em> catch any panics at the FFI boundary! What you do at that\npoint is up to you, but <em>something</em> must be done. If you fail to do this,\nat best, your application will crash and burn. At worst, your application <em>won't</em>\ncrash and burn, and will proceed with completely clobbered state.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"exception-safety\"><a class=\"header\" href=\"#exception-safety\">Exception Safety</a></h1>\n<p>Although programs should use unwinding sparingly, there's a lot of code that\n<em>can</em> panic. If you unwrap a None, index out of bounds, or divide by 0, your\nprogram will panic. On debug builds, every arithmetic operation can panic\nif it overflows. Unless you are very careful and tightly control what code runs,\npretty much everything can unwind, and you need to be ready for it.</p>\n<p>Being ready for unwinding is often referred to as <em>exception safety</em>\nin the broader programming world. In Rust, there are two levels of exception\nsafety that one may concern themselves with:</p>\n<ul>\n<li>\n<p>In unsafe code, we <em>must</em> be exception safe to the point of not violating\nmemory safety. We'll call this <em>minimal</em> exception safety.</p>\n</li>\n<li>\n<p>In safe code, it is <em>good</em> to be exception safe to the point of your program\ndoing the right thing. We'll call this <em>maximal</em> exception safety.</p>\n</li>\n</ul>\n<p>As is the case in many places in Rust, Unsafe code must be ready to deal with\nbad Safe code when it comes to unwinding. Code that transiently creates\nunsound states must be careful that a panic does not cause that state to be\nused. Generally this means ensuring that only non-panicking code is run while\nthese states exist, or making a guard that cleans up the state in the case of\na panic. This does not necessarily mean that the state a panic witnesses is a\nfully coherent state. We need only guarantee that it's a <em>safe</em> state.</p>\n<p>Most Unsafe code is leaf-like, and therefore fairly easy to make exception-safe.\nIt controls all the code that runs, and most of that code can't panic. However\nit is not uncommon for Unsafe code to work with arrays of temporarily\nuninitialized data while repeatedly invoking caller-provided code. Such code\nneeds to be careful and consider exception safety.</p>\n<h2 id=\"vecpush_all\"><a class=\"header\" href=\"#vecpush_all\">Vec::push_all</a></h2>\n<p><code class=\"hljs\">Vec::push_all</code> is a temporary hack to get extending a Vec by a slice reliably\nefficient without specialization. Here's a simple implementation:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Clone</span>&gt; <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">push_all</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, to_push: &amp;[T]) {\n        <span class=\"hljs-keyword\">self</span>.reserve(to_push.len());\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-comment\">// can't overflow because we just reserved this</span>\n            <span class=\"hljs-keyword\">self</span>.set_len(<span class=\"hljs-keyword\">self</span>.len() + to_push.len());\n\n            <span class=\"hljs-keyword\">for</span> (i, x) <span class=\"hljs-keyword\">in</span> to_push.iter().enumerate() {\n                <span class=\"hljs-keyword\">self</span>.ptr().add(i).write(x.clone());\n            }\n        }\n    }\n}</code></pre>\n<p>We bypass <code class=\"hljs\">push</code> in order to avoid redundant capacity and <code class=\"hljs\">len</code> checks on the\nVec that we definitely know has capacity. The logic is totally correct, except\nthere's a subtle problem with our code: it's not exception-safe! <code class=\"hljs\">set_len</code>,\n<code class=\"hljs\">add</code>, and <code class=\"hljs\">write</code> are all fine; <code class=\"hljs\">clone</code> is the panic bomb we over-looked.</p>\n<p>Clone is completely out of our control, and is totally free to panic. If it\ndoes, our function will exit early with the length of the Vec set too large. If\nthe Vec is looked at or dropped, uninitialized memory will be read!</p>\n<p>The fix in this case is fairly simple. If we want to guarantee that the values\nwe <em>did</em> clone are dropped, we can set the <code class=\"hljs\">len</code> every loop iteration. If we\njust want to guarantee that uninitialized memory can't be observed, we can set\nthe <code class=\"hljs\">len</code> after the loop.</p>\n<h2 id=\"binaryheapsift_up\"><a class=\"header\" href=\"#binaryheapsift_up\">BinaryHeap::sift_up</a></h2>\n<p>Bubbling an element up a heap is a bit more complicated than extending a Vec.\nThe pseudocode is as follows:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">bubble_up(heap, index):\n    while index != 0 &amp;&amp; heap[index] &lt; heap[parent(index)]:\n        heap.swap(index, parent(index))\n        index = parent(index)\n</code></pre>\n<p>A literal transcription of this code to Rust is totally fine, but has an annoying\nperformance characteristic: the <code class=\"hljs\">self</code> element is swapped over and over again\nuselessly. We would rather have the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">bubble_up(heap, index):\n    let elem = heap[index]\n    while index != 0 &amp;&amp; elem &lt; heap[parent(index)]:\n        heap[index] = heap[parent(index)]\n        index = parent(index)\n    heap[index] = elem\n</code></pre>\n<p>This code ensures that each element is copied as little as possible (it is in\nfact necessary that elem be copied twice in general). However it now exposes\nsome exception safety trouble! At all times, there exists two copies of one\nvalue. If we panic in this function something will be double-dropped.\nUnfortunately, we also don't have full control of the code: that comparison is\nuser-defined!</p>\n<p>Unlike Vec, the fix isn't as easy here. One option is to break the user-defined\ncode and the unsafe code into two separate phases:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">bubble_up(heap, index):\n    let end_index = index;\n    while end_index != 0 &amp;&amp; heap[end_index] &lt; heap[parent(end_index)]:\n        end_index = parent(end_index)\n\n    let elem = heap[index]\n    while index != end_index:\n        heap[index] = heap[parent(index)]\n        index = parent(index)\n    heap[index] = elem\n</code></pre>\n<p>If the user-defined code blows up, that's no problem anymore, because we haven't\nactually touched the state of the heap yet. Once we do start messing with the\nheap, we're working with only data and functions that we trust, so there's no\nconcern of panics.</p>\n<p>Perhaps you're not happy with this design. Surely it's cheating! And we have\nto do the complex heap traversal <em>twice</em>! Alright, let's bite the bullet. Let's\nintermix untrusted and unsafe code <em>for reals</em>.</p>\n<p>If Rust had <code class=\"hljs\">try</code> and <code class=\"hljs\">finally</code> like in Java, we could do the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">bubble_up(heap, index):\n    let elem = heap[index]\n    try:\n &nbsp; &nbsp; &nbsp; &nbsp;while index != 0 &amp;&amp; elem &lt; heap[parent(index)]:\n            heap[index] = heap[parent(index)]\n            index = parent(index)\n    finally:\n        heap[index] = elem\n</code></pre>\n<p>The basic idea is simple: if the comparison panics, we just toss the loose\nelement in the logically uninitialized index and bail out. Anyone who observes\nthe heap will see a potentially <em>inconsistent</em> heap, but at least it won't\ncause any double-drops! If the algorithm terminates normally, then this\noperation happens to coincide precisely with how we finish up regardless.</p>\n<p>Sadly, Rust has no such construct, so we're going to need to roll our own! The\nway to do this is to store the algorithm's state in a separate struct with a\ndestructor for the \"finally\" logic. Whether we panic or not, that destructor\nwill run and clean up after us.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Hole</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    data: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> [T],\n    <span class=\"hljs-comment\">/// `elt` is always `Some` from new until drop.</span>\n    elt: <span class=\"hljs-built_in\">Option</span>&lt;T&gt;,\n    pos: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; Hole&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(data: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> [T], pos: <span class=\"hljs-built_in\">usize</span>) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> elt = ptr::read(&amp;data[pos]);\n            Hole {\n                data,\n                elt: <span class=\"hljs-literal\">Some</span>(elt),\n                pos,\n            }\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">pos</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">usize</span> { <span class=\"hljs-keyword\">self</span>.pos }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">removed</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;T { <span class=\"hljs-keyword\">self</span>.elt.as_ref().unwrap() }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, index: <span class=\"hljs-built_in\">usize</span>) -&gt; &amp;T { &amp;<span class=\"hljs-keyword\">self</span>.data[index] }\n\n    <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">move_to</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, index: <span class=\"hljs-built_in\">usize</span>) {\n        <span class=\"hljs-keyword\">let</span> index_ptr: *<span class=\"hljs-keyword\">const</span> _ = &amp;<span class=\"hljs-keyword\">self</span>.data[index];\n        <span class=\"hljs-keyword\">let</span> hole_ptr = &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.data[<span class=\"hljs-keyword\">self</span>.pos];\n        ptr::copy_nonoverlapping(index_ptr, hole_ptr, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">self</span>.pos = index;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Hole&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// fill the hole again</span>\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> pos = <span class=\"hljs-keyword\">self</span>.pos;\n            ptr::write(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.data[pos], <span class=\"hljs-keyword\">self</span>.elt.take().unwrap());\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; BinaryHeap&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">sift_up</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, pos: <span class=\"hljs-built_in\">usize</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-comment\">// Take out the value at `pos` and create a hole.</span>\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> hole = Hole::new(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.data, pos);\n\n            <span class=\"hljs-keyword\">while</span> hole.pos() != <span class=\"hljs-number\">0</span> {\n                <span class=\"hljs-keyword\">let</span> parent = parent(hole.pos());\n                <span class=\"hljs-keyword\">if</span> hole.removed() &lt;= hole.get(parent) { <span class=\"hljs-keyword\">break</span> }\n                hole.move_to(parent);\n            }\n            <span class=\"hljs-comment\">// Hole will be unconditionally filled here; panic or not!</span>\n        }\n    }\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"poisoning\"><a class=\"header\" href=\"#poisoning\">Poisoning</a></h1>\n<p>Although all unsafe code <em>must</em> ensure it has minimal exception safety, not all\ntypes ensure <em>maximal</em> exception safety. Even if the type does, your code may\nascribe additional meaning to it. For instance, an integer is certainly\nexception-safe, but has no semantics on its own. It's possible that code that\npanics could fail to correctly update the integer, producing an inconsistent\nprogram state.</p>\n<p>This is <em>usually</em> fine, because anything that witnesses an exception is about\nto get destroyed. For instance, if you send a Vec to another thread and that\nthread panics, it doesn't matter if the Vec is in a weird state. It will be\ndropped and go away forever. However some types are especially good at smuggling\nvalues across the panic boundary.</p>\n<p>These types may choose to explicitly <em>poison</em> themselves if they witness a panic.\nPoisoning doesn't entail anything in particular. Generally it just means\npreventing normal usage from proceeding. The most notable example of this is the\nstandard library's Mutex type. A Mutex will poison itself if one of its\nMutexGuards (the thing it returns when a lock is obtained) is dropped during a\npanic. Any future attempts to lock the Mutex will return an <code class=\"hljs\">Err</code> or panic.</p>\n<p>Mutex poisons not for true safety in the sense that Rust normally cares about. It\npoisons as a safety-guard against blindly using the data that comes out of a Mutex\nthat has witnessed a panic while locked. The data in such a Mutex was likely in the\nmiddle of being modified, and as such may be in an inconsistent or incomplete state.\nIt is important to note that one cannot violate memory safety with such a type\nif it is correctly written. After all, it must be minimally exception-safe!</p>\n<p>However if the Mutex contained, say, a BinaryHeap that does not actually have the\nheap property, it's unlikely that any code that uses it will do\nwhat the author intended. As such, the program should not proceed normally.\nStill, if you're double-plus-sure that you can do <em>something</em> with the value,\nthe Mutex exposes a method to get the lock anyway. It <em>is</em> safe, after all.\nJust maybe nonsense.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"concurrency-and-parallelism\"><a class=\"header\" href=\"#concurrency-and-parallelism\">Concurrency and Parallelism</a></h1>\n<p>Rust as a language doesn't <em>really</em> have an opinion on how to do concurrency or\nparallelism. The standard library exposes OS threads and blocking sys-calls\nbecause everyone has those, and they're uniform enough that you can provide\nan abstraction over them in a relatively uncontroversial way. Message passing,\ngreen threads, and async APIs are all diverse enough that any abstraction over\nthem tends to involve trade-offs that we weren't willing to commit to for 1.0.</p>\n<p>However the way Rust models concurrency makes it relatively easy to design your own\nconcurrency paradigm as a library and have everyone else's code Just Work\nwith yours. Just require the right lifetimes and Send and Sync where appropriate\nand you're off to the races. Or rather, off to the... not... having... races.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"data-races-and-race-conditions\"><a class=\"header\" href=\"#data-races-and-race-conditions\">Data Races and Race Conditions</a></h1>\n<p>Safe Rust guarantees an absence of data races, which are defined as:</p>\n<ul>\n<li>two or more threads concurrently accessing a location of memory</li>\n<li>one or more of them is a write</li>\n<li>one or more of them is unsynchronized</li>\n</ul>\n<p>A data race has Undefined Behavior, and is therefore impossible to perform in\nSafe Rust. Data races are <em>mostly</em> prevented through Rust's ownership system:\nit's impossible to alias a mutable reference, so it's impossible to perform a\ndata race. Interior mutability makes this more complicated, which is largely why\nwe have the Send and Sync traits (see the next section for more on this).</p>\n<p><strong>However Rust does not prevent general race conditions.</strong></p>\n<p>This is mathematically impossible in situations where you do not control the\nscheduler, which is true for the normal OS environment. If you do control\npreemption, it <em>can be</em> possible to prevent general races - this technique is\nused by frameworks such as <a href=\"https://github.com/rtic-rs/rtic\">RTIC</a>. However,\nactually having control over scheduling is a very uncommon case.</p>\n<p>For this reason, it is considered \"safe\" for Rust to get deadlocked or do\nsomething nonsensical with incorrect synchronization: this is known as a general\nrace condition or resource race. Obviously such a program isn't very good, but\nRust of course cannot prevent all logic errors.</p>\n<p>In any case, a race condition cannot violate memory safety in a Rust program on\nits own. Only in conjunction with some other unsafe code can a race condition\nactually violate memory safety. For instance, a correct program looks like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::thread;\n<span class=\"hljs-keyword\">use</span> std::sync::atomic::{AtomicUsize, Ordering};\n<span class=\"hljs-keyword\">use</span> std::sync::Arc;\n\n<span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-comment\">// Arc so that the memory the AtomicUsize is stored in still exists for</span>\n<span class=\"hljs-comment\">// the other thread to increment, even if we completely finish executing</span>\n<span class=\"hljs-comment\">// before it. Rust won't compile the program without it, because of the</span>\n<span class=\"hljs-comment\">// lifetime requirements of thread::spawn!</span>\n<span class=\"hljs-keyword\">let</span> idx = Arc::new(AtomicUsize::new(<span class=\"hljs-number\">0</span>));\n<span class=\"hljs-keyword\">let</span> other_idx = idx.clone();\n\n<span class=\"hljs-comment\">// `move` captures other_idx by-value, moving it into this thread</span>\nthread::spawn(<span class=\"hljs-keyword\">move</span> || {\n    <span class=\"hljs-comment\">// It's ok to mutate idx because this value</span>\n    <span class=\"hljs-comment\">// is an atomic, so it can't cause a Data Race.</span>\n    other_idx.fetch_add(<span class=\"hljs-number\">10</span>, Ordering::SeqCst);\n});\n\n<span class=\"hljs-comment\">// Index with the value loaded from the atomic. This is safe because we</span>\n<span class=\"hljs-comment\">// read the atomic memory only once, and then pass a copy of that value</span>\n<span class=\"hljs-comment\">// to the Vec's indexing implementation. This indexing will be correctly</span>\n<span class=\"hljs-comment\">// bounds checked, and there's no chance of the value getting changed</span>\n<span class=\"hljs-comment\">// in the middle. However our program may panic if the thread we spawned</span>\n<span class=\"hljs-comment\">// managed to increment before this ran. A race condition because correct</span>\n<span class=\"hljs-comment\">// program execution (panicking is rarely correct) depends on order of</span>\n<span class=\"hljs-comment\">// thread execution.</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, data[idx.load(Ordering::SeqCst)]);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We can cause a data race if we instead do the bound check in advance, and then\nunsafely access the data with an unchecked value:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::thread;\n<span class=\"hljs-keyword\">use</span> std::sync::atomic::{AtomicUsize, Ordering};\n<span class=\"hljs-keyword\">use</span> std::sync::Arc;\n\n<span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\n<span class=\"hljs-keyword\">let</span> idx = Arc::new(AtomicUsize::new(<span class=\"hljs-number\">0</span>));\n<span class=\"hljs-keyword\">let</span> other_idx = idx.clone();\n\n<span class=\"hljs-comment\">// `move` captures other_idx by-value, moving it into this thread</span>\nthread::spawn(<span class=\"hljs-keyword\">move</span> || {\n    <span class=\"hljs-comment\">// It's ok to mutate idx because this value</span>\n    <span class=\"hljs-comment\">// is an atomic, so it can't cause a Data Race.</span>\n    other_idx.fetch_add(<span class=\"hljs-number\">10</span>, Ordering::SeqCst);\n});\n\n<span class=\"hljs-keyword\">if</span> idx.load(Ordering::SeqCst) &lt; data.len() {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-comment\">// Incorrectly loading the idx after we did the bounds check.</span>\n        <span class=\"hljs-comment\">// It could have changed. This is a race condition, *and dangerous*</span>\n        <span class=\"hljs-comment\">// because we decided to do `get_unchecked`, which is `unsafe`.</span>\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, data.get_unchecked(idx.load(Ordering::SeqCst)));\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"send-and-sync\"><a class=\"header\" href=\"#send-and-sync\">Send and Sync</a></h1>\n<p>Not everything obeys inherited mutability, though. Some types allow you to\nhave multiple aliases of a location in memory while mutating it. Unless these types use\nsynchronization to manage this access, they are absolutely not thread-safe. Rust\ncaptures this through the <code class=\"hljs\">Send</code> and <code class=\"hljs\">Sync</code> traits.</p>\n<ul>\n<li>A type is Send if it is safe to send it to another thread.</li>\n<li>A type is Sync if it is safe to share between threads (T is Sync if and only if <code class=\"hljs\">&amp;T</code> is Send).</li>\n</ul>\n<p>Send and Sync are fundamental to Rust's concurrency story. As such, a\nsubstantial amount of special tooling exists to make them work right. First and\nforemost, they're <a href=\"safe-unsafe-meaning.html\">unsafe traits</a>. This means that they are unsafe to\nimplement, and other unsafe code can assume that they are correctly\nimplemented. Since they're <em>marker traits</em> (they have no associated items like\nmethods), correctly implemented simply means that they have the intrinsic\nproperties an implementor should have. Incorrectly implementing Send or Sync can\ncause Undefined Behavior.</p>\n<p>Send and Sync are also automatically derived traits. This means that, unlike\nevery other trait, if a type is composed entirely of Send or Sync types, then it\nis Send or Sync. Almost all primitives are Send and Sync, and as a consequence\npretty much all types you'll ever interact with are Send and Sync.</p>\n<p>Major exceptions include:</p>\n<ul>\n<li>raw pointers are neither Send nor Sync (because they have no safety guards).</li>\n<li><code class=\"hljs\">UnsafeCell</code> isn't Sync (and therefore <code class=\"hljs\">Cell</code> and <code class=\"hljs\">RefCell</code> aren't).</li>\n<li><code class=\"hljs\">Rc</code> isn't Send or Sync (because the refcount is shared and unsynchronized).</li>\n</ul>\n<p><code class=\"hljs\">Rc</code> and <code class=\"hljs\">UnsafeCell</code> are very fundamentally not thread-safe: they enable\nunsynchronized shared mutable state. However raw pointers are, strictly\nspeaking, marked as thread-unsafe as more of a <em>lint</em>. Doing anything useful\nwith a raw pointer requires dereferencing it, which is already unsafe. In that\nsense, one could argue that it would be \"fine\" for them to be marked as thread\nsafe.</p>\n<p>However it's important that they aren't thread-safe to prevent types that\ncontain them from being automatically marked as thread-safe. These types have\nnon-trivial untracked ownership, and it's unlikely that their author was\nnecessarily thinking hard about thread safety. In the case of <code class=\"hljs\">Rc</code>, we have a nice\nexample of a type that contains a <code class=\"hljs\">*mut</code> that is definitely not thread-safe.</p>\n<p>Types that aren't automatically derived can simply implement them if desired:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyBox</span></span>(*<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>);\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> MyBox {}\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Sync</span> <span class=\"hljs-keyword\">for</span> MyBox {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In the <em>incredibly rare</em> case that a type is inappropriately automatically\nderived to be Send or Sync, then one can also unimplement Send and Sync:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![feature(negative_impls)]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// I have some magic semantics for some synchronization primitive!</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SpecialThreadToken</span></span>(<span class=\"hljs-built_in\">u8</span>);\n\n<span class=\"hljs-keyword\">impl</span> !<span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> SpecialThreadToken {}\n<span class=\"hljs-keyword\">impl</span> !<span class=\"hljs-built_in\">Sync</span> <span class=\"hljs-keyword\">for</span> SpecialThreadToken {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that <em>in and of itself</em> it is impossible to incorrectly derive Send and\nSync. Only types that are ascribed special meaning by other unsafe code can\npossibly cause trouble by being incorrectly Send or Sync.</p>\n<p>Most uses of raw pointers should be encapsulated behind a sufficient abstraction\nthat Send and Sync can be derived. For instance all of Rust's standard\ncollections are Send and Sync (when they contain Send and Sync types) in spite\nof their pervasive use of raw pointers to manage allocations and complex ownership.\nSimilarly, most iterators into these collections are Send and Sync because they\nlargely behave like an <code class=\"hljs\">&amp;</code> or <code class=\"hljs\">&amp;mut</code> into the collection.</p>\n<h2 id=\"example\"><a class=\"header\" href=\"#example\">Example</a></h2>\n<p><a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html\"><code class=\"hljs\">Box</code></a> is implemented as its own special intrinsic type by the\ncompiler for <a href=\"https://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/\">various reasons</a>, but we can implement something\nwith similar-ish behavior ourselves to see an example of when it is sound to\nimplement Send and Sync. Let's call it a <code class=\"hljs\">Carton</code>.</p>\n<p>We start by writing code to take a value allocated on the stack and transfer it\nto the heap.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> libc {\n</span><span class=\"boring\">   <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> ::std::os::raw::{c_int, c_void};\n</span><span class=\"boring\">   <span class=\"hljs-meta\">#[allow(non_camel_case_types)]</span>\n</span><span class=\"boring\">   <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">size_t</span></span> = <span class=\"hljs-built_in\">usize</span>;\n</span><span class=\"boring\">   <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> { <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">posix_memalign</span></span>(memptr: *<span class=\"hljs-keyword\">mut</span> *<span class=\"hljs-keyword\">mut</span> c_void, align: size_t, size: size_t) -&gt; c_int; }\n</span><span class=\"boring\">}\n</span><span class=\"hljs-keyword\">use</span> std::{\n    mem::{align_of, size_of},\n    ptr,\n    cmp::max,\n};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Carton</span></span>&lt;T&gt;(ptr::NonNull&lt;T&gt;);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Carton&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(value: T) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-comment\">// Allocate enough memory on the heap to store one T.</span>\n        <span class=\"hljs-built_in\">assert_ne!</span>(size_of::&lt;T&gt;(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"Zero-sized types are out of the scope of this example\"</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> memptr: *<span class=\"hljs-keyword\">mut</span> T = ptr::null_mut();\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> ret = libc::posix_memalign(\n                (&amp;<span class=\"hljs-keyword\">mut</span> memptr <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> *<span class=\"hljs-keyword\">mut</span> T).cast(),\n                max(align_of::&lt;T&gt;(), size_of::&lt;<span class=\"hljs-built_in\">usize</span>&gt;()),\n                size_of::&lt;T&gt;()\n            );\n            <span class=\"hljs-built_in\">assert_eq!</span>(ret, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"Failed to allocate or invalid alignment\"</span>);\n        };\n\n        <span class=\"hljs-comment\">// NonNull is just a wrapper that enforces that the pointer isn't null.</span>\n        <span class=\"hljs-keyword\">let</span> ptr = {\n            <span class=\"hljs-comment\">// Safety: memptr is dereferenceable because we created it from a</span>\n            <span class=\"hljs-comment\">// reference and have exclusive access.</span>\n            ptr::NonNull::new(memptr)\n                .expect(<span class=\"hljs-string\">\"Guaranteed non-null if posix_memalign returns 0\"</span>)\n        };\n\n        <span class=\"hljs-comment\">// Move value from the stack to the location we allocated on the heap.</span>\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-comment\">// Safety: If non-null, posix_memalign gives us a ptr that is valid</span>\n            <span class=\"hljs-comment\">// for writes and properly aligned.</span>\n            ptr.as_ptr().write(value);\n        }\n\n        <span class=\"hljs-keyword\">Self</span>(ptr)\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This isn't very useful, because once our users give us a value they have no way\nto access it. <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html\"><code class=\"hljs\">Box</code></a> implements <a href=\"https://doc.rust-lang.org/core/ops/trait.Deref.html\"><code class=\"hljs\">Deref</code></a> and\n<a href=\"https://doc.rust-lang.org/core/ops/trait.DerefMut.html\"><code class=\"hljs\">DerefMut</code></a> so that you can access the inner value. Let's do\nthat.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::ops::{Deref, DerefMut};\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Carton</span></span>&lt;T&gt;(std::ptr::NonNull&lt;T&gt;);\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Deref <span class=\"hljs-keyword\">for</span> Carton&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = T;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;Self::Target {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-comment\">// Safety: The pointer is aligned, initialized, and dereferenceable</span>\n            <span class=\"hljs-comment\">//   by the logic in [`Self::new`]. We require readers to borrow the</span>\n            <span class=\"hljs-comment\">//   Carton, and the lifetime of the return value is elided to the</span>\n            <span class=\"hljs-comment\">//   lifetime of the input. This means the borrow checker will</span>\n            <span class=\"hljs-comment\">//   enforce that no one can mutate the contents of the Carton until</span>\n            <span class=\"hljs-comment\">//   the reference returned is dropped.</span>\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.as_ref()\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; DerefMut <span class=\"hljs-keyword\">for</span> Carton&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-keyword\">mut</span> Self::Target {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-comment\">// Safety: The pointer is aligned, initialized, and dereferenceable</span>\n            <span class=\"hljs-comment\">//   by the logic in [`Self::new`]. We require writers to mutably</span>\n            <span class=\"hljs-comment\">//   borrow the Carton, and the lifetime of the return value is</span>\n            <span class=\"hljs-comment\">//   elided to the lifetime of the input. This means the borrow</span>\n            <span class=\"hljs-comment\">//   checker will enforce that no one else can access the contents</span>\n            <span class=\"hljs-comment\">//   of the Carton until the mutable reference returned is dropped.</span>\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.as_mut()\n        }\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Finally, let's think about whether our <code class=\"hljs\">Carton</code> is Send and Sync. Something can\nsafely be Send unless it shares mutable state with something else without\nenforcing exclusive access to it. Each <code class=\"hljs\">Carton</code> has a unique pointer, so\nwe're good.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Carton</span></span>&lt;T&gt;(std::ptr::NonNull&lt;T&gt;);\n</span><span class=\"hljs-comment\">// Safety: No one besides us has the raw pointer, so we can safely transfer the</span>\n<span class=\"hljs-comment\">// Carton to another thread if T can be safely transferred.</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> Carton&lt;T&gt; <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-built_in\">Send</span> {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>What about Sync? For <code class=\"hljs\">Carton</code> to be Sync we have to enforce that you can't\nwrite to something stored in a <code class=\"hljs\">&amp;Carton</code> while that same something could be read\nor written to from another <code class=\"hljs\">&amp;Carton</code>. Since you need an <code class=\"hljs\">&amp;mut Carton</code> to\nwrite to the pointer, and the borrow checker enforces that mutable\nreferences must be exclusive, there are no soundness issues making <code class=\"hljs\">Carton</code>\nsync either.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Carton</span></span>&lt;T&gt;(std::ptr::NonNull&lt;T&gt;);\n</span><span class=\"hljs-comment\">// Safety: Since there exists a public way to go from a `&amp;Carton&lt;T&gt;` to a `&amp;T`</span>\n<span class=\"hljs-comment\">// in an unsynchronized fashion (such as `Deref`), then `Carton&lt;T&gt;` can't be</span>\n<span class=\"hljs-comment\">// `Sync` if `T` isn't.</span>\n<span class=\"hljs-comment\">// Conversely, `Carton` itself does not use any interior mutability whatsoever:</span>\n<span class=\"hljs-comment\">// all the mutations are performed through an exclusive reference (`&amp;mut`). This</span>\n<span class=\"hljs-comment\">// means it suffices that `T` be `Sync` for `Carton&lt;T&gt;` to be `Sync`:</span>\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Sync</span> <span class=\"hljs-keyword\">for</span> Carton&lt;T&gt; <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-built_in\">Sync</span>  {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When we assert our type is Send and Sync we usually need to enforce that every\ncontained type is Send and Sync. When writing custom types that behave like\nstandard library types we can assert that we have the same requirements.\nFor example, the following code asserts that a Carton is Send if the same\nsort of Box would be Send, which in this case is the same as saying T is Send.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Carton</span></span>&lt;T&gt;(std::ptr::NonNull&lt;T&gt;);\n</span><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> Carton&lt;T&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-built_in\">Box</span>&lt;T&gt;: <span class=\"hljs-built_in\">Send</span> {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Right now <code class=\"hljs\">Carton&lt;T&gt;</code> has a memory leak, as it never frees the memory it allocates.\nOnce we fix that we have a new requirement we have to ensure we meet to be Send:\nwe need to know <code class=\"hljs\">free</code> can be called on a pointer that was yielded by an\nallocation done on another thread. We can check this is true in the docs for\n<a href=\"https://linux.die.net/man/3/free\"><code class=\"hljs\">libc::free</code></a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Carton</span></span>&lt;T&gt;(std::ptr::NonNull&lt;T&gt;);\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> libc {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> ::std::os::raw::c_void;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> { <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">free</span></span>(p: *<span class=\"hljs-keyword\">mut</span> c_void); }\n</span><span class=\"boring\">}\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Carton&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            libc::free(<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.as_ptr().cast());\n        }\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A nice example where this does not happen is with a MutexGuard: notice how\n<a href=\"https://doc.rust-lang.org/std/sync/struct.MutexGuard.html#impl-Send\">it is not Send</a>. The implementation of MutexGuard\n<a href=\"https://github.com/rust-lang/rust/issues/23465#issuecomment-82730326\">uses libraries</a> that require you to ensure you\ndon't try to free a lock that you acquired in a different thread. If you were\nable to Send a MutexGuard to another thread the destructor would run in the\nthread you sent it to, violating the requirement. MutexGuard can still be Sync\nbecause all you can send to another thread is an <code class=\"hljs\">&amp;MutexGuard</code> and dropping a\nreference does nothing.</p>\n<p>TODO: better explain what can or can't be Send or Sync. Sufficient to appeal\nonly to data races?</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"atomics\"><a class=\"header\" href=\"#atomics\">Atomics</a></h1>\n<p>Rust pretty blatantly just inherits the memory model for atomics from C++20. This is not\ndue to this model being particularly excellent or easy to understand. Indeed,\nthis model is quite complex and known to have <a href=\"http://plv.mpi-sws.org/c11comp/popl15.pdf\">several flaws</a>.\nRather, it is a pragmatic concession to the fact that <em>everyone</em> is pretty bad\nat modeling atomics. At very least, we can benefit from existing tooling and\nresearch around the C/C++ memory model.\n(You'll often see this model referred to as \"C/C++11\" or just \"C11\". C just copies\nthe C++ memory model; and C++11 was the first version of the model but it has\nreceived some bugfixes since then.)</p>\n<p>Trying to fully explain the model in this book is fairly hopeless. It's defined\nin terms of madness-inducing causality graphs that require a full book to\nproperly understand in a practical way. If you want all the nitty-gritty\ndetails, you should check out the <a href=\"https://en.cppreference.com/w/cpp/atomic/memory_order\">C++ specification</a>.\nStill, we'll try to cover the basics and some of the problems Rust developers\nface.</p>\n<p>The C++ memory model is fundamentally about trying to bridge the gap between the\nsemantics we want, the optimizations compilers want, and the inconsistent chaos\nour hardware wants. <em>We</em> would like to just write programs and have them do\nexactly what we said but, you know, fast. Wouldn't that be great?</p>\n<h2 id=\"compiler-reordering\"><a class=\"header\" href=\"#compiler-reordering\">Compiler Reordering</a></h2>\n<p>Compilers fundamentally want to be able to do all sorts of complicated\ntransformations to reduce data dependencies and eliminate dead code. In\nparticular, they may radically change the actual order of events, or make events\nnever occur! If we write something like:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">x = <span class=\"hljs-number\">1</span>;\ny = <span class=\"hljs-number\">3</span>;\nx = <span class=\"hljs-number\">2</span>;</code></pre>\n<p>The compiler may conclude that it would be best if your program did:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">x = <span class=\"hljs-number\">2</span>;\ny = <span class=\"hljs-number\">3</span>;</code></pre>\n<p>This has inverted the order of events and completely eliminated one event.\nFrom a single-threaded perspective this is completely unobservable: after all\nthe statements have executed we are in exactly the same state. But if our\nprogram is multi-threaded, we may have been relying on <code class=\"hljs\">x</code> to actually be\nassigned to 1 before <code class=\"hljs\">y</code> was assigned. We would like the compiler to be\nable to make these kinds of optimizations, because they can seriously improve\nperformance. On the other hand, we'd also like to be able to depend on our\nprogram <em>doing the thing we said</em>.</p>\n<h2 id=\"hardware-reordering\"><a class=\"header\" href=\"#hardware-reordering\">Hardware Reordering</a></h2>\n<p>On the other hand, even if the compiler totally understood what we wanted and\nrespected our wishes, our hardware might instead get us in trouble. Trouble\ncomes from CPUs in the form of memory hierarchies. There is indeed a global\nshared memory space somewhere in your hardware, but from the perspective of each\nCPU core it is <em>so very far away</em> and <em>so very slow</em>. Each CPU would rather work\nwith its local cache of the data and only go through all the anguish of\ntalking to shared memory only when it doesn't actually have that memory in\ncache.</p>\n<p>After all, that's the whole point of the cache, right? If every read from the\ncache had to run back to shared memory to double check that it hadn't changed,\nwhat would the point be? The end result is that the hardware doesn't guarantee\nthat events that occur in some order on <em>one</em> thread, occur in the same\norder on <em>another</em> thread. To guarantee this, we must issue special instructions\nto the CPU telling it to be a bit less smart.</p>\n<p>For instance, say we convince the compiler to emit this logic:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">initial state: x = 0, y = 1\n\nTHREAD 1        THREAD 2\ny = 3;          if x == 1 {\nx = 1;              y *= 2;\n                }\n</code></pre>\n<p>Ideally this program has 2 possible final states:</p>\n<ul>\n<li><code class=\"hljs\">y = 3</code>: (thread 2 did the check before thread 1 completed)</li>\n<li><code class=\"hljs\">y = 6</code>: (thread 2 did the check after thread 1 completed)</li>\n</ul>\n<p>However there's a third potential state that the hardware enables:</p>\n<ul>\n<li><code class=\"hljs\">y = 2</code>: (thread 2 saw <code class=\"hljs\">x = 1</code>, but not <code class=\"hljs\">y = 3</code>, and then overwrote <code class=\"hljs\">y = 3</code>)</li>\n</ul>\n<p>It's worth noting that different kinds of CPU provide different guarantees. It\nis common to separate hardware into two categories: strongly-ordered and weakly-ordered.\nMost notably x86/64 provides strong ordering guarantees, while ARM\nprovides weak ordering guarantees. This has two consequences for concurrent\nprogramming:</p>\n<ul>\n<li>\n<p>Asking for stronger guarantees on strongly-ordered hardware may be cheap or\neven free because they already provide strong guarantees unconditionally.\nWeaker guarantees may only yield performance wins on weakly-ordered hardware.</p>\n</li>\n<li>\n<p>Asking for guarantees that are too weak on strongly-ordered hardware is\nmore likely to <em>happen</em> to work, even though your program is strictly\nincorrect. If possible, concurrent algorithms should be tested on\nweakly-ordered hardware.</p>\n</li>\n</ul>\n<h2 id=\"data-accesses\"><a class=\"header\" href=\"#data-accesses\">Data Accesses</a></h2>\n<p>The C++ memory model attempts to bridge the gap by allowing us to talk about the\n<em>causality</em> of our program. Generally, this is by establishing a <em>happens\nbefore</em> relationship between parts of the program and the threads that are\nrunning them. This gives the hardware and compiler room to optimize the program\nmore aggressively where a strict happens-before relationship isn't established,\nbut forces them to be more careful where one is established. The way we\ncommunicate these relationships are through <em>data accesses</em> and <em>atomic\naccesses</em>.</p>\n<p>Data accesses are the bread-and-butter of the programming world. They are\nfundamentally unsynchronized and compilers are free to aggressively optimize\nthem. In particular, data accesses are free to be reordered by the compiler on\nthe assumption that the program is single-threaded. The hardware is also free to\npropagate the changes made in data accesses to other threads as lazily and\ninconsistently as it wants. Most critically, data accesses are how data races\nhappen. Data accesses are very friendly to the hardware and compiler, but as\nwe've seen they offer <em>awful</em> semantics to try to write synchronized code with.\nActually, that's too weak.</p>\n<p><strong>It is literally impossible to write correct synchronized code using only data\naccesses.</strong></p>\n<p>Atomic accesses are how we tell the hardware and compiler that our program is\nmulti-threaded. Each atomic access can be marked with an <em>ordering</em> that\nspecifies what kind of relationship it establishes with other accesses. In\npractice, this boils down to telling the compiler and hardware certain things\nthey <em>can't</em> do. For the compiler, this largely revolves around re-ordering of\ninstructions. For the hardware, this largely revolves around how writes are\npropagated to other threads. The set of orderings Rust exposes are:</p>\n<ul>\n<li>Sequentially Consistent (SeqCst)</li>\n<li>Release</li>\n<li>Acquire</li>\n<li>Relaxed</li>\n</ul>\n<p>(Note: We explicitly do not expose the C++ <em>consume</em> ordering)</p>\n<p>TODO: negative reasoning vs positive reasoning? TODO: \"can't forget to\nsynchronize\"</p>\n<h2 id=\"sequentially-consistent\"><a class=\"header\" href=\"#sequentially-consistent\">Sequentially Consistent</a></h2>\n<p>Sequentially Consistent is the most powerful of all, implying the restrictions\nof all other orderings. Intuitively, a sequentially consistent operation\ncannot be reordered: all accesses on one thread that happen before and after a\nSeqCst access stay before and after it. A data-race-free program that uses\nonly sequentially consistent atomics and data accesses has the very nice\nproperty that there is a single global execution of the program's instructions\nthat all threads agree on. This execution is also particularly nice to reason\nabout: it's just an interleaving of each thread's individual executions. This\ndoes not hold if you start using the weaker atomic orderings.</p>\n<p>The relative developer-friendliness of sequential consistency doesn't come for\nfree. Even on strongly-ordered platforms sequential consistency involves\nemitting memory fences.</p>\n<p>In practice, sequential consistency is rarely necessary for program correctness.\nHowever sequential consistency is definitely the right choice if you're not\nconfident about the other memory orders. Having your program run a bit slower\nthan it needs to is certainly better than it running incorrectly! It's also\nmechanically trivial to downgrade atomic operations to have a weaker\nconsistency later on. Just change <code class=\"hljs\">SeqCst</code> to <code class=\"hljs\">Relaxed</code> and you're done! Of\ncourse, proving that this transformation is <em>correct</em> is a whole other matter.</p>\n<h2 id=\"acquire-release\"><a class=\"header\" href=\"#acquire-release\">Acquire-Release</a></h2>\n<p>Acquire and Release are largely intended to be paired. Their names hint at their\nuse case: they're perfectly suited for acquiring and releasing locks, and\nensuring that critical sections don't overlap.</p>\n<p>Intuitively, an acquire access ensures that every access after it stays after\nit. However operations that occur before an acquire are free to be reordered to\noccur after it. Similarly, a release access ensures that every access before it\nstays before it. However operations that occur after a release are free to be\nreordered to occur before it.</p>\n<p>When thread A releases a location in memory and then thread B subsequently\nacquires <em>the same</em> location in memory, causality is established. Every write\n(including non-atomic and relaxed atomic writes) that happened before A's\nrelease will be observed by B after its acquisition. However no causality is\nestablished with any other threads. Similarly, no causality is established\nif A and B access <em>different</em> locations in memory.</p>\n<p>Basic use of release-acquire is therefore simple: you acquire a location of\nmemory to begin the critical section, and then release that location to end it.\nFor instance, a simple spinlock might look like:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">use</span> std::sync::Arc;\n<span class=\"hljs-keyword\">use</span> std::sync::atomic::{AtomicBool, Ordering};\n<span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> lock = Arc::new(AtomicBool::new(<span class=\"hljs-literal\">false</span>)); <span class=\"hljs-comment\">// value answers \"am I locked?\"</span>\n\n    <span class=\"hljs-comment\">// ... distribute lock to threads somehow ...</span>\n\n    <span class=\"hljs-comment\">// Try to acquire the lock by setting it to true</span>\n    <span class=\"hljs-keyword\">while</span> lock.compare_and_swap(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, Ordering::Acquire) { }\n    <span class=\"hljs-comment\">// broke out of the loop, so we successfully acquired the lock!</span>\n\n    <span class=\"hljs-comment\">// ... scary data accesses ...</span>\n\n    <span class=\"hljs-comment\">// ok we're done, release the lock</span>\n    lock.store(<span class=\"hljs-literal\">false</span>, Ordering::Release);\n}</code></pre></pre>\n<p>On strongly-ordered platforms most accesses have release or acquire semantics,\nmaking release and acquire often totally free. This is not the case on\nweakly-ordered platforms.</p>\n<h2 id=\"relaxed\"><a class=\"header\" href=\"#relaxed\">Relaxed</a></h2>\n<p>Relaxed accesses are the absolute weakest. They can be freely re-ordered and\nprovide no happens-before relationship. Still, relaxed operations are still\natomic. That is, they don't count as data accesses and any read-modify-write\noperations done to them occur atomically. Relaxed operations are appropriate for\nthings that you definitely want to happen, but don't particularly otherwise care\nabout. For instance, incrementing a counter can be safely done by multiple\nthreads using a relaxed <code class=\"hljs\">fetch_add</code> if you're not using the counter to\nsynchronize any other accesses.</p>\n<p>There's rarely a benefit in making an operation relaxed on strongly-ordered\nplatforms, since they usually provide release-acquire semantics anyway. However\nrelaxed operations can be cheaper on weakly-ordered platforms.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"example-implementing-vec\"><a class=\"header\" href=\"#example-implementing-vec\">Example: Implementing Vec</a></h1>\n<p>To bring everything together, we're going to write <code class=\"hljs\">std::Vec</code> from scratch.\nWe will limit ourselves to stable Rust. In particular we won't use any\nintrinsics that could make our code a little bit nicer or efficient because\nintrinsics are permanently unstable. Although many intrinsics <em>do</em> become\nstabilized elsewhere (<code class=\"hljs\">std::ptr</code> and <code class=\"hljs\">std::mem</code> consist of many intrinsics).</p>\n<p>Ultimately this means our implementation may not take advantage of all\npossible optimizations, though it will be by no means <em>naive</em>. We will\ndefinitely get into the weeds over nitty-gritty details, even\nwhen the problem doesn't <em>really</em> merit it.</p>\n<p>You wanted advanced. We're gonna go advanced.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"layout\"><a class=\"header\" href=\"#layout\">Layout</a></h1>\n<p>First off, we need to come up with the struct layout. A Vec has three parts:\na pointer to the allocation, the size of the allocation, and the number of\nelements that have been initialized.</p>\n<p>Naively, this means we just want this design:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    ptr: *<span class=\"hljs-keyword\">mut</span> T,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n    len: <span class=\"hljs-built_in\">usize</span>,\n}</code></pre>\n<p>And indeed this would compile. Unfortunately, it would be too strict. The\ncompiler will give us too strict variance. So a <code class=\"hljs\">&amp;Vec&lt;&amp;'static str&gt;</code>\ncouldn't be used where a <code class=\"hljs\">&amp;Vec&lt;&amp;'a str&gt;</code> was expected. See <a href=\"vec/../ownership.html\">the chapter\non ownership and lifetimes</a> for all the details on variance.</p>\n<p>As we saw in the ownership chapter, the standard library uses <code class=\"hljs\">Unique&lt;T&gt;</code> in place of\n<code class=\"hljs\">*mut T</code> when it has a raw pointer to an allocation that it owns. Unique is unstable,\nso we'd like to not use it if possible, though.</p>\n<p>As a recap, Unique is a wrapper around a raw pointer that declares that:</p>\n<ul>\n<li>We are covariant over <code class=\"hljs\">T</code></li>\n<li>We may own a value of type <code class=\"hljs\">T</code> (this is not relevant for our example here, but see\n<a href=\"vec/../phantom-data.html\">the chapter on PhantomData</a> on why the real <code class=\"hljs\">std::vec::Vec&lt;T&gt;</code> needs this)</li>\n<li>We are Send/Sync if <code class=\"hljs\">T</code> is Send/Sync</li>\n<li>Our pointer is never null (so <code class=\"hljs\">Option&lt;Vec&lt;T&gt;&gt;</code> is null-pointer-optimized)</li>\n</ul>\n<p>We can implement all of the above requirements in stable Rust. To do this, instead\nof using <code class=\"hljs\">Unique&lt;T&gt;</code> we will use <a href=\"vec/../../std/ptr/struct.NonNull.html\"><code class=\"hljs\">NonNull&lt;T&gt;</code></a>, another wrapper around a\nraw pointer, which gives us two of the above properties, namely it is covariant\nover <code class=\"hljs\">T</code> and is declared to never be null. By implementing Send/Sync if <code class=\"hljs\">T</code> is,\nwe get the same results as using <code class=\"hljs\">Unique&lt;T&gt;</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::ptr::NonNull;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    ptr: NonNull&lt;T&gt;,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n    len: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Send</span>&gt; <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {}\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Sync</span>&gt; <span class=\"hljs-built_in\">Sync</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"allocating-memory\"><a class=\"header\" href=\"#allocating-memory\">Allocating Memory</a></h1>\n<p>Using <code class=\"hljs\">NonNull</code> throws a wrench in an important feature of Vec (and indeed all of\nthe std collections): creating an empty Vec doesn't actually allocate at all. This\nis not the same as allocating a zero-sized memory block, which is not allowed by\nthe global allocator (it results in undefined behavior!). So if we can't allocate,\nbut also can't put a null pointer in <code class=\"hljs\">ptr</code>, what do we do in <code class=\"hljs\">Vec::new</code>? Well, we\njust put some other garbage in there!</p>\n<p>This is perfectly fine because we already have <code class=\"hljs\">cap == 0</code> as our sentinel for no\nallocation. We don't even need to handle it specially in almost any code because\nwe usually need to check if <code class=\"hljs\">cap &gt; len</code> or <code class=\"hljs\">len &gt; 0</code> anyway. The recommended\nRust value to put here is <code class=\"hljs\">mem::align_of::&lt;T&gt;()</code>. <code class=\"hljs\">NonNull</code> provides a convenience\nfor this: <code class=\"hljs\">NonNull::dangling()</code>. There are quite a few places where we'll\nwant to use <code class=\"hljs\">dangling</code> because there's no real allocation to talk about but\n<code class=\"hljs\">null</code> would make the compiler do bad things.</p>\n<p>So:</p>\n<!-- ignore: explanation code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-built_in\">assert!</span>(mem::size_of::&lt;T&gt;() != <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"We're not ready to handle ZSTs\"</span>);\n        <span class=\"hljs-built_in\">Vec</span> {\n            ptr: NonNull::dangling(),\n            len: <span class=\"hljs-number\">0</span>,\n            cap: <span class=\"hljs-number\">0</span>,\n        }\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<p>I slipped in that assert there because zero-sized types will require some\nspecial handling throughout our code, and I want to defer the issue for now.\nWithout this assert, some of our early drafts will do some Very Bad Things.</p>\n<p>Next we need to figure out what to actually do when we <em>do</em> want space. For that,\nwe use the global allocation functions <a href=\"vec/../../alloc/alloc/fn.alloc.html\"><code class=\"hljs\">alloc</code></a>, <a href=\"vec/../../alloc/alloc/fn.realloc.html\"><code class=\"hljs\">realloc</code></a>,\nand <a href=\"vec/../../alloc/alloc/fn.dealloc.html\"><code class=\"hljs\">dealloc</code></a> which are available in stable Rust in\n<a href=\"vec/../../alloc/alloc/index.html\"><code class=\"hljs\">std::alloc</code></a>. These functions are expected to become deprecated in\nfavor of the methods of <a href=\"vec/../../std/alloc/struct.Global.html\"><code class=\"hljs\">std::alloc::Global</code></a> after this type is stabilized.</p>\n<p>We'll also need a way to handle out-of-memory (OOM) conditions. The standard\nlibrary provides a function <a href=\"vec/../../alloc/alloc/fn.handle_alloc_error.html\"><code class=\"hljs\">alloc::handle_alloc_error</code></a>,\nwhich will abort the program in a platform-specific manner.\nThe reason we abort and don't panic is because unwinding can cause allocations\nto happen, and that seems like a bad thing to do when your allocator just came\nback with \"hey I don't have any more memory\".</p>\n<p>Of course, this is a bit silly since most platforms don't actually run out of\nmemory in a conventional way. Your operating system will probably kill the\napplication by another means if you legitimately start using up all the memory.\nThe most likely way we'll trigger OOM is by just asking for ludicrous quantities\nof memory at once (e.g. half the theoretical address space). As such it's\n<em>probably</em> fine to panic and nothing bad will happen. Still, we're trying to be\nlike the standard library as much as possible, so we'll just kill the whole\nprogram.</p>\n<p>Okay, now we can write growing. Roughly, we want to have this logic:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">if cap == 0:\n    allocate()\n    cap = 1\nelse:\n    reallocate()\n    cap *= 2\n</code></pre>\n<p>But Rust's only supported allocator API is so low level that we'll need to do a\nfair bit of extra work. We also need to guard against some special\nconditions that can occur with really large allocations or empty allocations.</p>\n<p>In particular, <code class=\"hljs\">ptr::offset</code> will cause us a lot of trouble, because it has\nthe semantics of LLVM's GEP inbounds instruction. If you're fortunate enough to\nnot have dealt with this instruction, here's the basic story with GEP: alias\nanalysis, alias analysis, alias analysis. It's super important to an optimizing\ncompiler to be able to reason about data dependencies and aliasing.</p>\n<p>As a simple example, consider the following fragment of code:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">*x *= <span class=\"hljs-number\">7</span>;\n*y *= <span class=\"hljs-number\">3</span>;</code></pre>\n<p>If the compiler can prove that <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> point to different locations in\nmemory, the two operations can in theory be executed in parallel (by e.g.\nloading them into different registers and working on them independently).\nHowever the compiler can't do this in general because if x and y point to\nthe same location in memory, the operations need to be done to the same value,\nand they can't just be merged afterwards.</p>\n<p>When you use GEP inbounds, you are specifically telling LLVM that the offsets\nyou're about to do are within the bounds of a single \"allocated\" entity. The\nultimate payoff being that LLVM can assume that if two pointers are known to\npoint to two disjoint objects, all the offsets of those pointers are <em>also</em>\nknown to not alias (because you won't just end up in some random place in\nmemory). LLVM is heavily optimized to work with GEP offsets, and inbounds\noffsets are the best of all, so it's important that we use them as much as\npossible.</p>\n<p>So that's what GEP's about, how can it cause us trouble?</p>\n<p>The first problem is that we index into arrays with unsigned integers, but\nGEP (and as a consequence <code class=\"hljs\">ptr::offset</code>) takes a signed integer. This means\nthat half of the seemingly valid indices into an array will overflow GEP and\nactually go in the wrong direction! As such we must limit all allocations to\n<code class=\"hljs\">isize::MAX</code> elements. This actually means we only need to worry about\nbyte-sized objects, because e.g. <code class=\"hljs\">&gt; isize::MAX</code> <code class=\"hljs\">u16</code>s will truly exhaust all of\nthe system's memory. However in order to avoid subtle corner cases where someone\nreinterprets some array of <code class=\"hljs\">&lt; isize::MAX</code> objects as bytes, std limits all\nallocations to <code class=\"hljs\">isize::MAX</code> bytes.</p>\n<p>On all 64-bit targets that Rust currently supports we're artificially limited\nto significantly less than all 64 bits of the address space (modern x64\nplatforms only expose 48-bit addressing), so we can rely on just running out of\nmemory first. However on 32-bit targets, particularly those with extensions to\nuse more of the address space (PAE x86 or x32), it's theoretically possible to\nsuccessfully allocate more than <code class=\"hljs\">isize::MAX</code> bytes of memory.</p>\n<p>However since this is a tutorial, we're not going to be particularly optimal\nhere, and just unconditionally check, rather than use clever platform-specific\n<code class=\"hljs\">cfg</code>s.</p>\n<p>The other corner-case we need to worry about is empty allocations. There will\nbe two kinds of empty allocations we need to worry about: <code class=\"hljs\">cap = 0</code> for all T,\nand <code class=\"hljs\">cap &gt; 0</code> for zero-sized types.</p>\n<p>These cases are tricky because they come\ndown to what LLVM means by \"allocated\". LLVM's notion of an\nallocation is significantly more abstract than how we usually use it. Because\nLLVM needs to work with different languages' semantics and custom allocators,\nit can't really intimately understand allocation. Instead, the main idea behind\nallocation is \"doesn't overlap with other stuff\". That is, heap allocations,\nstack allocations, and globals don't randomly overlap. Yep, it's about alias\nanalysis. As such, Rust can technically play a bit fast and loose with the notion of\nan allocation as long as it's <em>consistent</em>.</p>\n<p>Getting back to the empty allocation case, there are a couple of places where\nwe want to offset by 0 as a consequence of generic code. The question is then:\nis it consistent to do so? For zero-sized types, we have concluded that it is\nindeed consistent to do a GEP inbounds offset by an arbitrary number of\nelements. This is a runtime no-op because every element takes up no space,\nand it's fine to pretend that there's infinite zero-sized types allocated\nat <code class=\"hljs\">0x01</code>. No allocator will ever allocate that address, because they won't\nallocate <code class=\"hljs\">0x00</code> and they generally allocate to some minimal alignment higher\nthan a byte. Also generally the whole first page of memory is\nprotected from being allocated anyway (a whole 4k, on many platforms).</p>\n<p>However what about for positive-sized types? That one's a bit trickier. In\nprinciple, you can argue that offsetting by 0 gives LLVM no information: either\nthere's an element before the address or after it, but it can't know which.\nHowever we've chosen to conservatively assume that it may do bad things. As\nsuch we will guard against this case explicitly.</p>\n<p><em>Phew</em></p>\n<p>Ok with all the nonsense out of the way, let's actually allocate some memory:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::alloc::{<span class=\"hljs-keyword\">self</span>, Layout};\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">grow</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> (new_cap, new_layout) = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap == <span class=\"hljs-number\">0</span> {\n            (<span class=\"hljs-number\">1</span>, Layout::array::&lt;T&gt;(<span class=\"hljs-number\">1</span>).unwrap())\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// This can't overflow since self.cap &lt;= isize::MAX.</span>\n            <span class=\"hljs-keyword\">let</span> new_cap = <span class=\"hljs-number\">2</span> * <span class=\"hljs-keyword\">self</span>.cap;\n\n            <span class=\"hljs-comment\">// `Layout::array` checks that the number of bytes is &lt;= usize::MAX,</span>\n            <span class=\"hljs-comment\">// but this is redundant since old_layout.size() &lt;= isize::MAX,</span>\n            <span class=\"hljs-comment\">// so the `unwrap` should never fail.</span>\n            <span class=\"hljs-keyword\">let</span> new_layout = Layout::array::&lt;T&gt;(new_cap).unwrap();\n            (new_cap, new_layout)\n        };\n\n        <span class=\"hljs-comment\">// Ensure that the new allocation doesn't exceed `isize::MAX` bytes.</span>\n        <span class=\"hljs-built_in\">assert!</span>(new_layout.size() &lt;= <span class=\"hljs-built_in\">isize</span>::MAX <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-string\">\"Allocation too large\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> new_ptr = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap == <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">unsafe</span> { alloc::alloc(new_layout) }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">let</span> old_layout = Layout::array::&lt;T&gt;(<span class=\"hljs-keyword\">self</span>.cap).unwrap();\n            <span class=\"hljs-keyword\">let</span> old_ptr = <span class=\"hljs-keyword\">self</span>.ptr.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>;\n            <span class=\"hljs-keyword\">unsafe</span> { alloc::realloc(old_ptr, old_layout, new_layout.size()) }\n        };\n\n        <span class=\"hljs-comment\">// If allocation fails, `new_ptr` will be null, in which case we abort.</span>\n        <span class=\"hljs-keyword\">self</span>.ptr = <span class=\"hljs-keyword\">match</span> NonNull::new(new_ptr <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> T) {\n            <span class=\"hljs-literal\">Some</span>(p) =&gt; p,\n            <span class=\"hljs-literal\">None</span> =&gt; alloc::handle_alloc_error(new_layout),\n        };\n        <span class=\"hljs-keyword\">self</span>.cap = new_cap;\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"push-and-pop\"><a class=\"header\" href=\"#push-and-pop\">Push and Pop</a></h1>\n<p>Alright. We can initialize. We can allocate. Let's actually implement some\nfunctionality! Let's start with <code class=\"hljs\">push</code>. All it needs to do is check if we're\nfull to grow, unconditionally write to the next index, and then increment our\nlength.</p>\n<p>To do the write we have to be careful not to evaluate the memory we want to write\nto. At worst, it's truly uninitialized memory from the allocator. At best it's the\nbits of some old value we popped off. Either way, we can't just index to the memory\nand dereference it, because that will evaluate the memory as a valid instance of\nT. Worse, <code class=\"hljs\">foo[idx] = x</code> will try to call <code class=\"hljs\">drop</code> on the old value of <code class=\"hljs\">foo[idx]</code>!</p>\n<p>The correct way to do this is with <code class=\"hljs\">ptr::write</code>, which just blindly overwrites the\ntarget address with the bits of the value we provide. No evaluation involved.</p>\n<p>For <code class=\"hljs\">push</code>, if the old len (before push was called) is 0, then we want to write\nto the 0th index. So we should offset by the old len.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">push</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, elem: T) {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.len == <span class=\"hljs-keyword\">self</span>.cap { <span class=\"hljs-keyword\">self</span>.grow(); }\n\n    <span class=\"hljs-keyword\">unsafe</span> {\n        ptr::write(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr().add(<span class=\"hljs-keyword\">self</span>.len), elem);\n    }\n\n    <span class=\"hljs-comment\">// Can't fail, we'll OOM first.</span>\n    <span class=\"hljs-keyword\">self</span>.len += <span class=\"hljs-number\">1</span>;\n}</code></pre>\n<p>Easy! How about <code class=\"hljs\">pop</code>? Although this time the index we want to access is\ninitialized, Rust won't just let us dereference the location of memory to move\nthe value out, because that would leave the memory uninitialized! For this we\nneed <code class=\"hljs\">ptr::read</code>, which just copies out the bits from the target address and\ninterprets it as a value of type T. This will leave the memory at this address\nlogically uninitialized, even though there is in fact a perfectly good instance\nof T there.</p>\n<p>For <code class=\"hljs\">pop</code>, if the old len is 1, for example, we want to read out of the 0th\nindex. So we should offset by the new len.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">pop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.len == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-literal\">None</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">self</span>.len -= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-literal\">Some</span>(ptr::read(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr().add(<span class=\"hljs-keyword\">self</span>.len)))\n        }\n    }\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"deallocating\"><a class=\"header\" href=\"#deallocating\">Deallocating</a></h1>\n<p>Next we should implement Drop so that we don't massively leak tons of resources.\nThe easiest way is to just call <code class=\"hljs\">pop</code> until it yields None, and then deallocate\nour buffer. Note that calling <code class=\"hljs\">pop</code> is unneeded if <code class=\"hljs\">T: !Drop</code>. In theory we can\nask Rust if <code class=\"hljs\">T</code> <code class=\"hljs\">needs_drop</code> and omit the calls to <code class=\"hljs\">pop</code>. However in practice\nLLVM is <em>really</em> good at removing simple side-effect free code like this, so I\nwouldn't bother unless you notice it's not being stripped (in this case it is).</p>\n<p>We must not call <code class=\"hljs\">alloc::dealloc</code> when <code class=\"hljs\">self.cap == 0</code>, as in this case we\nhaven't actually allocated any memory.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap != <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(_) = <span class=\"hljs-keyword\">self</span>.pop() { }\n            <span class=\"hljs-keyword\">let</span> layout = Layout::array::&lt;T&gt;(<span class=\"hljs-keyword\">self</span>.cap).unwrap();\n            <span class=\"hljs-keyword\">unsafe</span> {\n                alloc::dealloc(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>, layout);\n            }\n        }\n    }\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"deref\"><a class=\"header\" href=\"#deref\">Deref</a></h1>\n<p>Alright! We've got a decent minimal stack implemented. We can push, we can\npop, and we can clean up after ourselves. However there's a whole mess of\nfunctionality we'd reasonably want. In particular, we have a proper array, but\nnone of the slice functionality. That's actually pretty easy to solve: we can\nimplement <code class=\"hljs\">Deref&lt;Target=[T]&gt;</code>. This will magically make our Vec coerce to, and\nbehave like, a slice in all sorts of conditions.</p>\n<p>All we need is <code class=\"hljs\">slice::from_raw_parts</code>. It will correctly handle empty slices\nfor us. Later once we set up zero-sized type support it will also Just Work\nfor those too.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::ops::Deref;\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Deref <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = [T];\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;[T] {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            std::slice::from_raw_parts(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr(), <span class=\"hljs-keyword\">self</span>.len)\n        }\n    }\n}</code></pre>\n<p>And let's do DerefMut too:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::ops::DerefMut;\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; DerefMut <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-keyword\">mut</span> [T] {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            std::slice::from_raw_parts_mut(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr(), <span class=\"hljs-keyword\">self</span>.len)\n        }\n    }\n}</code></pre>\n<p>Now we have <code class=\"hljs\">len</code>, <code class=\"hljs\">first</code>, <code class=\"hljs\">last</code>, indexing, slicing, sorting, <code class=\"hljs\">iter</code>,\n<code class=\"hljs\">iter_mut</code>, and all other sorts of bells and whistles provided by slice. Sweet!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"insert-and-remove\"><a class=\"header\" href=\"#insert-and-remove\">Insert and Remove</a></h1>\n<p>Something <em>not</em> provided by slice is <code class=\"hljs\">insert</code> and <code class=\"hljs\">remove</code>, so let's do those\nnext.</p>\n<p>Insert needs to shift all the elements at the target index to the right by one.\nTo do this we need to use <code class=\"hljs\">ptr::copy</code>, which is our version of C's <code class=\"hljs\">memmove</code>.\nThis copies some chunk of memory from one location to another, correctly\nhandling the case where the source and destination overlap (which will\ndefinitely happen here).</p>\n<p>If we insert at index <code class=\"hljs\">i</code>, we want to shift the <code class=\"hljs\">[i .. len]</code> to <code class=\"hljs\">[i+1 .. len+1]</code>\nusing the old len.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">insert</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, index: <span class=\"hljs-built_in\">usize</span>, elem: T) {\n    <span class=\"hljs-comment\">// Note: `&lt;=` because it's valid to insert after everything</span>\n    <span class=\"hljs-comment\">// which would be equivalent to push.</span>\n    <span class=\"hljs-built_in\">assert!</span>(index &lt;= <span class=\"hljs-keyword\">self</span>.len, <span class=\"hljs-string\">\"index out of bounds\"</span>);\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.len == <span class=\"hljs-keyword\">self</span>.cap { <span class=\"hljs-keyword\">self</span>.grow(); }\n\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-comment\">// ptr::copy(src, dest, len): \"copy from src to dest len elems\"</span>\n        ptr::copy(\n            <span class=\"hljs-keyword\">self</span>.ptr.as_ptr().add(index),\n            <span class=\"hljs-keyword\">self</span>.ptr.as_ptr().add(index + <span class=\"hljs-number\">1</span>),\n            <span class=\"hljs-keyword\">self</span>.len - index,\n        );\n        ptr::write(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr().add(index), elem);\n    }\n\n    <span class=\"hljs-keyword\">self</span>.len += <span class=\"hljs-number\">1</span>;\n}</code></pre>\n<p>Remove behaves in the opposite manner. We need to shift all the elements from\n<code class=\"hljs\">[i+1 .. len + 1]</code> to <code class=\"hljs\">[i .. len]</code> using the <em>new</em> len.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">remove</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, index: <span class=\"hljs-built_in\">usize</span>) -&gt; T {\n    <span class=\"hljs-comment\">// Note: `&lt;` because it's *not* valid to remove after everything</span>\n    <span class=\"hljs-built_in\">assert!</span>(index &lt; <span class=\"hljs-keyword\">self</span>.len, <span class=\"hljs-string\">\"index out of bounds\"</span>);\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-keyword\">self</span>.len -= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> result = ptr::read(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr().add(index));\n        ptr::copy(\n            <span class=\"hljs-keyword\">self</span>.ptr.as_ptr().add(index + <span class=\"hljs-number\">1</span>),\n            <span class=\"hljs-keyword\">self</span>.ptr.as_ptr().add(index),\n            <span class=\"hljs-keyword\">self</span>.len - index,\n        );\n        result\n    }\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"intoiter\"><a class=\"header\" href=\"#intoiter\">IntoIter</a></h1>\n<p>Let's move on to writing iterators. <code class=\"hljs\">iter</code> and <code class=\"hljs\">iter_mut</code> have already been\nwritten for us thanks to The Magic of Deref. However there's two interesting\niterators that Vec provides that slices can't: <code class=\"hljs\">into_iter</code> and <code class=\"hljs\">drain</code>.</p>\n<p>IntoIter consumes the Vec by-value, and can consequently yield its elements\nby-value. In order to enable this, IntoIter needs to take control of Vec's\nallocation.</p>\n<p>IntoIter needs to be DoubleEnded as well, to enable reading from both ends.\nReading from the back could just be implemented as calling <code class=\"hljs\">pop</code>, but reading\nfrom the front is harder. We could call <code class=\"hljs\">remove(0)</code> but that would be insanely\nexpensive. Instead we're going to just use ptr::read to copy values out of\neither end of the Vec without mutating the buffer at all.</p>\n<p>To do this we're going to use a very common C idiom for array iteration. We'll\nmake two pointers; one that points to the start of the array, and one that\npoints to one-element past the end. When we want an element from one end, we'll\nread out the value pointed to at that end and move the pointer over by one. When\nthe two pointers are equal, we know we're done.</p>\n<p>Note that the order of read and offset are reversed for <code class=\"hljs\">next</code> and <code class=\"hljs\">next_back</code>\nFor <code class=\"hljs\">next_back</code> the pointer is always after the element it wants to read next,\nwhile for <code class=\"hljs\">next</code> the pointer is always at the element it wants to read next.\nTo see why this is, consider the case where every element but one has been\nyielded.</p>\n<p>The array looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">          S  E\n[X, X, X, O, X, X, X]\n</code></pre>\n<p>If E pointed directly at the element it wanted to yield next, it would be\nindistinguishable from the case where there are no more elements to yield.</p>\n<p>Although we don't actually care about it during iteration, we also need to hold\nonto the Vec's allocation information in order to free it once IntoIter is\ndropped.</p>\n<p>So we're going to use the following struct:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IntoIter</span></span>&lt;T&gt; {\n    buf: NonNull&lt;T&gt;,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n    start: *<span class=\"hljs-keyword\">const</span> T,\n    end: *<span class=\"hljs-keyword\">const</span> T,\n}</code></pre>\n<p>And this is what we end up with for initialization:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">IntoIterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">IntoIter</span></span> = IntoIter&lt;T&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">into_iter</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; IntoIter&lt;T&gt; {\n        <span class=\"hljs-comment\">// Make sure not to drop Vec since that would free the buffer</span>\n        <span class=\"hljs-keyword\">let</span> vec = ManuallyDrop::new(<span class=\"hljs-keyword\">self</span>);\n\n        <span class=\"hljs-comment\">// Can't destructure Vec since it's Drop</span>\n        <span class=\"hljs-keyword\">let</span> ptr = vec.ptr;\n        <span class=\"hljs-keyword\">let</span> cap = vec.cap;\n        <span class=\"hljs-keyword\">let</span> len = vec.len;\n\n        IntoIter {\n            buf: ptr,\n            cap,\n            start: ptr.as_ptr(),\n            end: <span class=\"hljs-keyword\">if</span> cap == <span class=\"hljs-number\">0</span> {\n                <span class=\"hljs-comment\">// can't offset off this pointer, it's not allocated!</span>\n                ptr.as_ptr()\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">unsafe</span> { ptr.as_ptr().add(len) }\n            },\n        }\n    }\n}</code></pre>\n<p>Here's iterating forward:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.start == <span class=\"hljs-keyword\">self</span>.end {\n            <span class=\"hljs-literal\">None</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">unsafe</span> {\n                <span class=\"hljs-keyword\">let</span> result = ptr::read(<span class=\"hljs-keyword\">self</span>.start);\n                <span class=\"hljs-keyword\">self</span>.start = <span class=\"hljs-keyword\">self</span>.start.offset(<span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-literal\">Some</span>(result)\n            }\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">size_hint</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; (<span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;) {\n        <span class=\"hljs-keyword\">let</span> len = (<span class=\"hljs-keyword\">self</span>.end <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> - <span class=\"hljs-keyword\">self</span>.start <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>)\n                  / mem::size_of::&lt;T&gt;();\n        (len, <span class=\"hljs-literal\">Some</span>(len))\n    }\n}</code></pre>\n<p>And here's iterating backwards.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.start == <span class=\"hljs-keyword\">self</span>.end {\n            <span class=\"hljs-literal\">None</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">unsafe</span> {\n                <span class=\"hljs-keyword\">self</span>.end = <span class=\"hljs-keyword\">self</span>.end.offset(-<span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-literal\">Some</span>(ptr::read(<span class=\"hljs-keyword\">self</span>.end))\n            }\n        }\n    }\n}</code></pre>\n<p>Because IntoIter takes ownership of its allocation, it needs to implement Drop\nto free it. However it also wants to implement Drop to drop any elements it\ncontains that weren't yielded.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap != <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-comment\">// drop any remaining elements</span>\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> *<span class=\"hljs-keyword\">self</span> {}\n            <span class=\"hljs-keyword\">let</span> layout = Layout::array::&lt;T&gt;(<span class=\"hljs-keyword\">self</span>.cap).unwrap();\n            <span class=\"hljs-keyword\">unsafe</span> {\n                alloc::dealloc(<span class=\"hljs-keyword\">self</span>.buf.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>, layout);\n            }\n        }\n    }\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"rawvec\"><a class=\"header\" href=\"#rawvec\">RawVec</a></h1>\n<p>We've actually reached an interesting situation here: we've duplicated the logic\nfor specifying a buffer and freeing its memory in Vec and IntoIter. Now that\nwe've implemented it and identified <em>actual</em> logic duplication, this is a good\ntime to perform some logic compression.</p>\n<p>We're going to abstract out the <code class=\"hljs\">(ptr, cap)</code> pair and give them the logic for\nallocating, growing, and freeing:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">RawVec</span></span>&lt;T&gt; {\n    ptr: NonNull&lt;T&gt;,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Send</span>&gt; <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> RawVec&lt;T&gt; {}\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Sync</span>&gt; <span class=\"hljs-built_in\">Sync</span> <span class=\"hljs-keyword\">for</span> RawVec&lt;T&gt; {}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; RawVec&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-built_in\">assert!</span>(mem::size_of::&lt;T&gt;() != <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"TODO: implement ZST support\"</span>);\n        RawVec {\n            ptr: NonNull::dangling(),\n            cap: <span class=\"hljs-number\">0</span>,\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">grow</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// This can't overflow because we ensure self.cap &lt;= isize::MAX.</span>\n        <span class=\"hljs-keyword\">let</span> new_cap = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap == <span class=\"hljs-number\">0</span> { <span class=\"hljs-number\">1</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-number\">2</span> * <span class=\"hljs-keyword\">self</span>.cap };\n\n        <span class=\"hljs-comment\">// Layout::array checks that the number of bytes is &lt;= usize::MAX,</span>\n        <span class=\"hljs-comment\">// but this is redundant since old_layout.size() &lt;= isize::MAX,</span>\n        <span class=\"hljs-comment\">// so the `unwrap` should never fail.</span>\n        <span class=\"hljs-keyword\">let</span> new_layout = Layout::array::&lt;T&gt;(new_cap).unwrap();\n\n        <span class=\"hljs-comment\">// Ensure that the new allocation doesn't exceed `isize::MAX` bytes.</span>\n        <span class=\"hljs-built_in\">assert!</span>(new_layout.size() &lt;= <span class=\"hljs-built_in\">isize</span>::MAX <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-string\">\"Allocation too large\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> new_ptr = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap == <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">unsafe</span> { alloc::alloc(new_layout) }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">let</span> old_layout = Layout::array::&lt;T&gt;(<span class=\"hljs-keyword\">self</span>.cap).unwrap();\n            <span class=\"hljs-keyword\">let</span> old_ptr = <span class=\"hljs-keyword\">self</span>.ptr.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>;\n            <span class=\"hljs-keyword\">unsafe</span> { alloc::realloc(old_ptr, old_layout, new_layout.size()) }\n        };\n\n        <span class=\"hljs-comment\">// If allocation fails, `new_ptr` will be null, in which case we abort.</span>\n        <span class=\"hljs-keyword\">self</span>.ptr = <span class=\"hljs-keyword\">match</span> NonNull::new(new_ptr <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> T) {\n            <span class=\"hljs-literal\">Some</span>(p) =&gt; p,\n            <span class=\"hljs-literal\">None</span> =&gt; alloc::handle_alloc_error(new_layout),\n        };\n        <span class=\"hljs-keyword\">self</span>.cap = new_cap;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> RawVec&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap != <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">let</span> layout = Layout::array::&lt;T&gt;(<span class=\"hljs-keyword\">self</span>.cap).unwrap();\n            <span class=\"hljs-keyword\">unsafe</span> {\n                alloc::dealloc(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>, layout);\n            }\n        }\n    }\n}</code></pre>\n<p>And change Vec as follows:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    buf: RawVec&lt;T&gt;,\n    len: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">ptr</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; *<span class=\"hljs-keyword\">mut</span> T {\n        <span class=\"hljs-keyword\">self</span>.buf.ptr.as_ptr()\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">cap</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n        <span class=\"hljs-keyword\">self</span>.buf.cap\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-built_in\">Vec</span> {\n            buf: RawVec::new(),\n            len: <span class=\"hljs-number\">0</span>,\n        }\n    }\n\n    <span class=\"hljs-comment\">// push/pop/insert/remove largely unchanged:</span>\n    <span class=\"hljs-comment\">// * `self.ptr.as_ptr() -&gt; self.ptr()`</span>\n    <span class=\"hljs-comment\">// * `self.cap -&gt; self.cap()`</span>\n    <span class=\"hljs-comment\">// * `self.grow() -&gt; self.buf.grow()`</span>\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(_) = <span class=\"hljs-keyword\">self</span>.pop() {}\n        <span class=\"hljs-comment\">// deallocation is handled by RawVec</span>\n    }\n}</code></pre>\n<p>And finally we can really simplify IntoIter:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IntoIter</span></span>&lt;T&gt; {\n    _buf: RawVec&lt;T&gt;, <span class=\"hljs-comment\">// we don't actually care about this. Just need it to live.</span>\n    start: *<span class=\"hljs-keyword\">const</span> T,\n    end: *<span class=\"hljs-keyword\">const</span> T,\n}\n\n<span class=\"hljs-comment\">// next and next_back literally unchanged since they never referred to the buf</span>\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// only need to ensure all our elements are read;</span>\n        <span class=\"hljs-comment\">// buffer will clean itself up afterwards.</span>\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> *<span class=\"hljs-keyword\">self</span> {}\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">IntoIterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">IntoIter</span></span> = IntoIter&lt;T&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">into_iter</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; IntoIter&lt;T&gt; {\n        <span class=\"hljs-comment\">// need to use ptr::read to unsafely move the buf out since it's</span>\n        <span class=\"hljs-comment\">// not Copy, and Vec implements Drop (so we can't destructure it).</span>\n        <span class=\"hljs-keyword\">let</span> buf = <span class=\"hljs-keyword\">unsafe</span> { ptr::read(&amp;<span class=\"hljs-keyword\">self</span>.buf) };\n        <span class=\"hljs-keyword\">let</span> len = <span class=\"hljs-keyword\">self</span>.len;\n        mem::forget(<span class=\"hljs-keyword\">self</span>);\n\n        IntoIter {\n            start: buf.ptr.as_ptr(),\n            end: <span class=\"hljs-keyword\">if</span> buf.cap == <span class=\"hljs-number\">0</span> {\n                <span class=\"hljs-comment\">// can't offset off of a pointer unless it's part of an allocation</span>\n                buf.ptr.as_ptr()\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">unsafe</span> { buf.ptr.as_ptr().add(len) }\n            },\n            _buf: buf,\n        }\n    }\n}</code></pre>\n<p>Much better.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"drain-1\"><a class=\"header\" href=\"#drain-1\">Drain</a></h1>\n<p>Let's move on to Drain. Drain is largely the same as IntoIter, except that\ninstead of consuming the Vec, it borrows the Vec and leaves its allocation\nuntouched. For now we'll only implement the \"basic\" full-range version.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::marker::PhantomData;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Drain</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    <span class=\"hljs-comment\">// Need to bound the lifetime here, so we do it with `&amp;'a mut Vec&lt;T&gt;`</span>\n    <span class=\"hljs-comment\">// because that's semantically what we contain. We're \"just\" calling</span>\n    <span class=\"hljs-comment\">// `pop()` and `remove(0)`.</span>\n    vec: PhantomData&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt;&gt;,\n    start: *<span class=\"hljs-keyword\">const</span> T,\n    end: *<span class=\"hljs-keyword\">const</span> T,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> Drain&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.start == <span class=\"hljs-keyword\">self</span>.end {\n            <span class=\"hljs-literal\">None</span></code></pre>\n<p>-- wait, this is seeming familiar. Let's do some more compression. Both\nIntoIter and Drain have the exact same structure, let's just factor it out.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">RawValIter</span></span>&lt;T&gt; {\n    start: *<span class=\"hljs-keyword\">const</span> T,\n    end: *<span class=\"hljs-keyword\">const</span> T,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; RawValIter&lt;T&gt; {\n    <span class=\"hljs-comment\">// unsafe to construct because it has no associated lifetimes.</span>\n    <span class=\"hljs-comment\">// This is necessary to store a RawValIter in the same struct as</span>\n    <span class=\"hljs-comment\">// its actual allocation. OK since it's a private implementation</span>\n    <span class=\"hljs-comment\">// detail.</span>\n    <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(slice: &amp;[T]) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        RawValIter {\n            start: slice.as_ptr(),\n            end: <span class=\"hljs-keyword\">if</span> slice.len() == <span class=\"hljs-number\">0</span> {\n                <span class=\"hljs-comment\">// if `len = 0`, then this is not actually allocated memory.</span>\n                <span class=\"hljs-comment\">// Need to avoid offsetting because that will give wrong</span>\n                <span class=\"hljs-comment\">// information to LLVM via GEP.</span>\n                slice.as_ptr()\n            } <span class=\"hljs-keyword\">else</span> {\n                slice.as_ptr().add(slice.len())\n            }\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// Iterator and DoubleEndedIterator impls identical to IntoIter.</span></code></pre>\n<p>And IntoIter becomes the following:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IntoIter</span></span>&lt;T&gt; {\n    _buf: RawVec&lt;T&gt;, <span class=\"hljs-comment\">// we don't actually care about this. Just need it to live.</span>\n    iter: RawValIter&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; { <span class=\"hljs-keyword\">self</span>.iter.next() }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">size_hint</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; (<span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;) { <span class=\"hljs-keyword\">self</span>.iter.size_hint() }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; { <span class=\"hljs-keyword\">self</span>.iter.next_back() }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> *<span class=\"hljs-keyword\">self</span> {}\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">IntoIterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">IntoIter</span></span> = IntoIter&lt;T&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">into_iter</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; IntoIter&lt;T&gt; {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> iter = RawValIter::new(&amp;<span class=\"hljs-keyword\">self</span>);\n\n            <span class=\"hljs-keyword\">let</span> buf = ptr::read(&amp;<span class=\"hljs-keyword\">self</span>.buf);\n            mem::forget(<span class=\"hljs-keyword\">self</span>);\n\n            IntoIter {\n                iter,\n                _buf: buf,\n            }\n        }\n    }\n}</code></pre>\n<p>Note that I've left a few quirks in this design to make upgrading Drain to work\nwith arbitrary subranges a bit easier. In particular we <em>could</em> have RawValIter\ndrain itself on drop, but that won't work right for a more complex Drain.\nWe also take a slice to simplify Drain initialization.</p>\n<p>Alright, now Drain is really easy:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::marker::PhantomData;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Drain</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    vec: PhantomData&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt;&gt;,\n    iter: RawValIter&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> Drain&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; { <span class=\"hljs-keyword\">self</span>.iter.next() }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">size_hint</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; (<span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;) { <span class=\"hljs-keyword\">self</span>.iter.size_hint() }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> Drain&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; { <span class=\"hljs-keyword\">self</span>.iter.next_back() }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Drain&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> *<span class=\"hljs-keyword\">self</span> {}\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drain</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; Drain&lt;T&gt; {\n        <span class=\"hljs-keyword\">let</span> iter = <span class=\"hljs-keyword\">unsafe</span> { RawValIter::new(&amp;<span class=\"hljs-keyword\">self</span>) };\n\n        <span class=\"hljs-comment\">// this is a mem::forget safety thing. If Drain is forgotten, we just</span>\n        <span class=\"hljs-comment\">// leak the whole Vec's contents. Also we need to do this *eventually*</span>\n        <span class=\"hljs-comment\">// anyway, so why not do it now?</span>\n        <span class=\"hljs-keyword\">self</span>.len = <span class=\"hljs-number\">0</span>;\n\n        Drain {\n            iter,\n            vec: PhantomData,\n        }\n    }\n}</code></pre>\n<p>For more details on the <code class=\"hljs\">mem::forget</code> problem, see the\n<a href=\"vec/../leaking.html\">section on leaks</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"handling-zero-sized-types\"><a class=\"header\" href=\"#handling-zero-sized-types\">Handling Zero-Sized Types</a></h1>\n<p>It's time. We're going to fight the specter that is zero-sized types. Safe Rust\n<em>never</em> needs to care about this, but Vec is very intensive on raw pointers and\nraw allocations, which are exactly the two things that care about\nzero-sized types. We need to be careful of two things:</p>\n<ul>\n<li>The raw allocator API has undefined behavior if you pass in 0 for an\nallocation size.</li>\n<li>raw pointer offsets are no-ops for zero-sized types, which will break our\nC-style pointer iterator.</li>\n</ul>\n<p>Thankfully we abstracted out pointer-iterators and allocating handling into\n<code class=\"hljs\">RawValIter</code> and <code class=\"hljs\">RawVec</code> respectively. How mysteriously convenient.</p>\n<h2 id=\"allocating-zero-sized-types\"><a class=\"header\" href=\"#allocating-zero-sized-types\">Allocating Zero-Sized Types</a></h2>\n<p>So if the allocator API doesn't support zero-sized allocations, what on earth\ndo we store as our allocation? <code class=\"hljs\">NonNull::dangling()</code> of course! Almost every operation\nwith a ZST is a no-op since ZSTs have exactly one value, and therefore no state needs\nto be considered to store or load them. This actually extends to <code class=\"hljs\">ptr::read</code> and\n<code class=\"hljs\">ptr::write</code>: they won't actually look at the pointer at all. As such we never need\nto change the pointer.</p>\n<p>Note however that our previous reliance on running out of memory before overflow is\nno longer valid with zero-sized types. We must explicitly guard against capacity\noverflow for zero-sized types.</p>\n<p>Due to our current architecture, all this means is writing 3 guards, one in each\nmethod of <code class=\"hljs\">RawVec</code>.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; RawVec&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-comment\">// This branch should be stripped at compile time.</span>\n        <span class=\"hljs-keyword\">let</span> cap = <span class=\"hljs-keyword\">if</span> mem::size_of::&lt;T&gt;() == <span class=\"hljs-number\">0</span> { <span class=\"hljs-built_in\">usize</span>::MAX } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-number\">0</span> };\n\n        <span class=\"hljs-comment\">// `NonNull::dangling()` doubles as \"unallocated\" and \"zero-sized allocation\"</span>\n        RawVec {\n            ptr: NonNull::dangling(),\n            cap,\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">grow</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// since we set the capacity to usize::MAX when T has size 0,</span>\n        <span class=\"hljs-comment\">// getting to here necessarily means the Vec is overfull.</span>\n        <span class=\"hljs-built_in\">assert!</span>(mem::size_of::&lt;T&gt;() != <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"capacity overflow\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> (new_cap, new_layout) = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap == <span class=\"hljs-number\">0</span> {\n            (<span class=\"hljs-number\">1</span>, Layout::array::&lt;T&gt;(<span class=\"hljs-number\">1</span>).unwrap())\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// This can't overflow because we ensure self.cap &lt;= isize::MAX.</span>\n            <span class=\"hljs-keyword\">let</span> new_cap = <span class=\"hljs-number\">2</span> * <span class=\"hljs-keyword\">self</span>.cap;\n\n            <span class=\"hljs-comment\">// `Layout::array` checks that the number of bytes is &lt;= usize::MAX,</span>\n            <span class=\"hljs-comment\">// but this is redundant since old_layout.size() &lt;= isize::MAX,</span>\n            <span class=\"hljs-comment\">// so the `unwrap` should never fail.</span>\n            <span class=\"hljs-keyword\">let</span> new_layout = Layout::array::&lt;T&gt;(new_cap).unwrap();\n            (new_cap, new_layout)\n        };\n\n        <span class=\"hljs-comment\">// Ensure that the new allocation doesn't exceed `isize::MAX` bytes.</span>\n        <span class=\"hljs-built_in\">assert!</span>(new_layout.size() &lt;= <span class=\"hljs-built_in\">isize</span>::MAX <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-string\">\"Allocation too large\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> new_ptr = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap == <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">unsafe</span> { alloc::alloc(new_layout) }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">let</span> old_layout = Layout::array::&lt;T&gt;(<span class=\"hljs-keyword\">self</span>.cap).unwrap();\n            <span class=\"hljs-keyword\">let</span> old_ptr = <span class=\"hljs-keyword\">self</span>.ptr.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>;\n            <span class=\"hljs-keyword\">unsafe</span> { alloc::realloc(old_ptr, old_layout, new_layout.size()) }\n        };\n\n        <span class=\"hljs-comment\">// If allocation fails, `new_ptr` will be null, in which case we abort.</span>\n        <span class=\"hljs-keyword\">self</span>.ptr = <span class=\"hljs-keyword\">match</span> NonNull::new(new_ptr <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> T) {\n            <span class=\"hljs-literal\">Some</span>(p) =&gt; p,\n            <span class=\"hljs-literal\">None</span> =&gt; alloc::handle_alloc_error(new_layout),\n        };\n        <span class=\"hljs-keyword\">self</span>.cap = new_cap;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> RawVec&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> elem_size = mem::size_of::&lt;T&gt;();\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap != <span class=\"hljs-number\">0</span> &amp;&amp; elem_size != <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">unsafe</span> {\n                alloc::dealloc(\n                    <span class=\"hljs-keyword\">self</span>.ptr.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>,\n                    Layout::array::&lt;T&gt;(<span class=\"hljs-keyword\">self</span>.cap).unwrap(),\n                );\n            }\n        }\n    }\n}</code></pre>\n<p>That's it. We support pushing and popping zero-sized types now. Our iterators\n(that aren't provided by slice Deref) are still busted, though.</p>\n<h2 id=\"iterating-zero-sized-types\"><a class=\"header\" href=\"#iterating-zero-sized-types\">Iterating Zero-Sized Types</a></h2>\n<p>Zero-sized offsets are no-ops. This means that our current design will always\ninitialize <code class=\"hljs\">start</code> and <code class=\"hljs\">end</code> as the same value, and our iterators will yield\nnothing. The current solution to this is to cast the pointers to integers,\nincrement, and then cast them back:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; RawValIter&lt;T&gt; {\n    <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(slice: &amp;[T]) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        RawValIter {\n            start: slice.as_ptr(),\n            end: <span class=\"hljs-keyword\">if</span> mem::size_of::&lt;T&gt;() == <span class=\"hljs-number\">0</span> {\n                ((slice.as_ptr() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>) + slice.len()) <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> _\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> slice.len() == <span class=\"hljs-number\">0</span> {\n                slice.as_ptr()\n            } <span class=\"hljs-keyword\">else</span> {\n                slice.as_ptr().add(slice.len())\n            },\n        }\n    }\n}</code></pre>\n<p>Now we have a different bug. Instead of our iterators not running at all, our\niterators now run <em>forever</em>. We need to do the same trick in our iterator impls.\nAlso, our size_hint computation code will divide by 0 for ZSTs. Since we'll\nbasically be treating the two pointers as if they point to bytes, we'll just\nmap size 0 to divide by 1. Here's what <code class=\"hljs\">next</code> will be:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.start == <span class=\"hljs-keyword\">self</span>.end {\n        <span class=\"hljs-literal\">None</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> result = ptr::read(<span class=\"hljs-keyword\">self</span>.start);\n            <span class=\"hljs-keyword\">self</span>.start = <span class=\"hljs-keyword\">if</span> mem::size_of::&lt;T&gt;() == <span class=\"hljs-number\">0</span> {\n                (<span class=\"hljs-keyword\">self</span>.start <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> _\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">self</span>.start.offset(<span class=\"hljs-number\">1</span>)\n            };\n            <span class=\"hljs-literal\">Some</span>(result)\n        }\n    }\n}</code></pre>\n<p>Do you see the \"bug\"? No one else did! The original author only noticed the\nproblem when linking to this page years later. This code is kind of dubious\nbecause abusing the iterator pointers to be <em>counters</em> makes them unaligned!\nOur <em>one job</em> when using ZSTs is to keep pointers aligned! <em>forehead slap</em></p>\n<p>Raw pointers don't need to be aligned at all times, so the basic trick of\nusing pointers as counters is <em>fine</em>, but they <em>should</em> definitely be aligned\nwhen passed to <code class=\"hljs\">ptr::read</code>! This is <em>possibly</em> needless pedantry\nbecause <code class=\"hljs\">ptr::read</code> is a noop for a ZST, but let's be a <em>little</em> more\nresponsible and read from <code class=\"hljs\">NonNull::dangling</code> on the ZST path.</p>\n<p>(Alternatively you could call <code class=\"hljs\">read_unaligned</code> on the ZST path. Either is fine,\nbecause either way we're making up a value from nothing and it all compiles\nto doing nothing.)</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> RawValIter&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.start == <span class=\"hljs-keyword\">self</span>.end {\n            <span class=\"hljs-literal\">None</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">unsafe</span> {\n                <span class=\"hljs-keyword\">if</span> mem::size_of::&lt;T&gt;() == <span class=\"hljs-number\">0</span> {\n                    <span class=\"hljs-keyword\">self</span>.start = (<span class=\"hljs-keyword\">self</span>.start <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> _;\n                    <span class=\"hljs-literal\">Some</span>(ptr::read(NonNull::&lt;T&gt;::dangling().as_ptr()))\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">let</span> old_ptr = <span class=\"hljs-keyword\">self</span>.start;\n                    <span class=\"hljs-keyword\">self</span>.start = <span class=\"hljs-keyword\">self</span>.start.offset(<span class=\"hljs-number\">1</span>);\n                    <span class=\"hljs-literal\">Some</span>(ptr::read(old_ptr))\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">size_hint</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; (<span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;) {\n        <span class=\"hljs-keyword\">let</span> elem_size = mem::size_of::&lt;T&gt;();\n        <span class=\"hljs-keyword\">let</span> len = (<span class=\"hljs-keyword\">self</span>.end <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> - <span class=\"hljs-keyword\">self</span>.start <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>)\n                  / <span class=\"hljs-keyword\">if</span> elem_size == <span class=\"hljs-number\">0</span> { <span class=\"hljs-number\">1</span> } <span class=\"hljs-keyword\">else</span> { elem_size };\n        (len, <span class=\"hljs-literal\">Some</span>(len))\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> RawValIter&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.start == <span class=\"hljs-keyword\">self</span>.end {\n            <span class=\"hljs-literal\">None</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">unsafe</span> {\n                <span class=\"hljs-keyword\">if</span> mem::size_of::&lt;T&gt;() == <span class=\"hljs-number\">0</span> {\n                    <span class=\"hljs-keyword\">self</span>.end = (<span class=\"hljs-keyword\">self</span>.end <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> _;\n                    <span class=\"hljs-literal\">Some</span>(ptr::read(NonNull::&lt;T&gt;::dangling().as_ptr()))\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">self</span>.end = <span class=\"hljs-keyword\">self</span>.end.offset(-<span class=\"hljs-number\">1</span>);\n                    <span class=\"hljs-literal\">Some</span>(ptr::read(<span class=\"hljs-keyword\">self</span>.end))\n                }\n            }\n        }\n    }\n}</code></pre>\n<p>And that's it. Iteration works!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"the-final-code\"><a class=\"header\" href=\"#the-final-code\">The Final Code</a></h1>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::alloc::{<span class=\"hljs-keyword\">self</span>, Layout};\n<span class=\"hljs-keyword\">use</span> std::marker::PhantomData;\n<span class=\"hljs-keyword\">use</span> std::mem;\n<span class=\"hljs-keyword\">use</span> std::ops::{Deref, DerefMut};\n<span class=\"hljs-keyword\">use</span> std::ptr::{<span class=\"hljs-keyword\">self</span>, NonNull};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">RawVec</span></span>&lt;T&gt; {\n    ptr: NonNull&lt;T&gt;,\n    cap: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Send</span>&gt; <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> RawVec&lt;T&gt; {}\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Sync</span>&gt; <span class=\"hljs-built_in\">Sync</span> <span class=\"hljs-keyword\">for</span> RawVec&lt;T&gt; {}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; RawVec&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-comment\">// !0 is usize::MAX. This branch should be stripped at compile time.</span>\n        <span class=\"hljs-keyword\">let</span> cap = <span class=\"hljs-keyword\">if</span> mem::size_of::&lt;T&gt;() == <span class=\"hljs-number\">0</span> { !<span class=\"hljs-number\">0</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-number\">0</span> };\n\n        <span class=\"hljs-comment\">// `NonNull::dangling()` doubles as \"unallocated\" and \"zero-sized allocation\"</span>\n        RawVec {\n            ptr: NonNull::dangling(),\n            cap,\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">grow</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// since we set the capacity to usize::MAX when T has size 0,</span>\n        <span class=\"hljs-comment\">// getting to here necessarily means the Vec is overfull.</span>\n        <span class=\"hljs-built_in\">assert!</span>(mem::size_of::&lt;T&gt;() != <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"capacity overflow\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> (new_cap, new_layout) = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap == <span class=\"hljs-number\">0</span> {\n            (<span class=\"hljs-number\">1</span>, Layout::array::&lt;T&gt;(<span class=\"hljs-number\">1</span>).unwrap())\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// This can't overflow because we ensure self.cap &lt;= isize::MAX.</span>\n            <span class=\"hljs-keyword\">let</span> new_cap = <span class=\"hljs-number\">2</span> * <span class=\"hljs-keyword\">self</span>.cap;\n\n            <span class=\"hljs-comment\">// `Layout::array` checks that the number of bytes is &lt;= usize::MAX,</span>\n            <span class=\"hljs-comment\">// but this is redundant since old_layout.size() &lt;= isize::MAX,</span>\n            <span class=\"hljs-comment\">// so the `unwrap` should never fail.</span>\n            <span class=\"hljs-keyword\">let</span> new_layout = Layout::array::&lt;T&gt;(new_cap).unwrap();\n            (new_cap, new_layout)\n        };\n\n        <span class=\"hljs-comment\">// Ensure that the new allocation doesn't exceed `isize::MAX` bytes.</span>\n        <span class=\"hljs-built_in\">assert!</span>(\n            new_layout.size() &lt;= <span class=\"hljs-built_in\">isize</span>::MAX <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>,\n            <span class=\"hljs-string\">\"Allocation too large\"</span>\n        );\n\n        <span class=\"hljs-keyword\">let</span> new_ptr = <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap == <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">unsafe</span> { alloc::alloc(new_layout) }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">let</span> old_layout = Layout::array::&lt;T&gt;(<span class=\"hljs-keyword\">self</span>.cap).unwrap();\n            <span class=\"hljs-keyword\">let</span> old_ptr = <span class=\"hljs-keyword\">self</span>.ptr.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>;\n            <span class=\"hljs-keyword\">unsafe</span> { alloc::realloc(old_ptr, old_layout, new_layout.size()) }\n        };\n\n        <span class=\"hljs-comment\">// If allocation fails, `new_ptr` will be null, in which case we abort.</span>\n        <span class=\"hljs-keyword\">self</span>.ptr = <span class=\"hljs-keyword\">match</span> NonNull::new(new_ptr <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> T) {\n            <span class=\"hljs-literal\">Some</span>(p) =&gt; p,\n            <span class=\"hljs-literal\">None</span> =&gt; alloc::handle_alloc_error(new_layout),\n        };\n        <span class=\"hljs-keyword\">self</span>.cap = new_cap;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> RawVec&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> elem_size = mem::size_of::&lt;T&gt;();\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.cap != <span class=\"hljs-number\">0</span> &amp;&amp; elem_size != <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-keyword\">unsafe</span> {\n                alloc::dealloc(\n                    <span class=\"hljs-keyword\">self</span>.ptr.as_ptr() <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>,\n                    Layout::array::&lt;T&gt;(<span class=\"hljs-keyword\">self</span>.cap).unwrap(),\n                );\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Vec</span></span>&lt;T&gt; {\n    buf: RawVec&lt;T&gt;,\n    len: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">ptr</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; *<span class=\"hljs-keyword\">mut</span> T {\n        <span class=\"hljs-keyword\">self</span>.buf.ptr.as_ptr()\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">cap</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n        <span class=\"hljs-keyword\">self</span>.buf.cap\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-built_in\">Vec</span> {\n            buf: RawVec::new(),\n            len: <span class=\"hljs-number\">0</span>,\n        }\n    }\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">push</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, elem: T) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.len == <span class=\"hljs-keyword\">self</span>.cap() {\n            <span class=\"hljs-keyword\">self</span>.buf.grow();\n        }\n\n        <span class=\"hljs-keyword\">unsafe</span> {\n            ptr::write(<span class=\"hljs-keyword\">self</span>.ptr().add(<span class=\"hljs-keyword\">self</span>.len), elem);\n        }\n\n        <span class=\"hljs-comment\">// Can't overflow, we'll OOM first.</span>\n        <span class=\"hljs-keyword\">self</span>.len += <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">pop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.len == <span class=\"hljs-number\">0</span> {\n            <span class=\"hljs-literal\">None</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">self</span>.len -= <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-literal\">Some</span>(ptr::read(<span class=\"hljs-keyword\">self</span>.ptr().add(<span class=\"hljs-keyword\">self</span>.len))) }\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">insert</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, index: <span class=\"hljs-built_in\">usize</span>, elem: T) {\n        <span class=\"hljs-built_in\">assert!</span>(index &lt;= <span class=\"hljs-keyword\">self</span>.len, <span class=\"hljs-string\">\"index out of bounds\"</span>);\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.len == <span class=\"hljs-keyword\">self</span>.cap() {\n            <span class=\"hljs-keyword\">self</span>.buf.grow();\n        }\n\n        <span class=\"hljs-keyword\">unsafe</span> {\n            ptr::copy(\n                <span class=\"hljs-keyword\">self</span>.ptr().add(index),\n                <span class=\"hljs-keyword\">self</span>.ptr().add(index + <span class=\"hljs-number\">1</span>),\n                <span class=\"hljs-keyword\">self</span>.len - index,\n            );\n            ptr::write(<span class=\"hljs-keyword\">self</span>.ptr().add(index), elem);\n        }\n\n        <span class=\"hljs-keyword\">self</span>.len += <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">remove</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, index: <span class=\"hljs-built_in\">usize</span>) -&gt; T {\n        <span class=\"hljs-built_in\">assert!</span>(index &lt; <span class=\"hljs-keyword\">self</span>.len, <span class=\"hljs-string\">\"index out of bounds\"</span>);\n\n        <span class=\"hljs-keyword\">self</span>.len -= <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">unsafe</span> {\n            <span class=\"hljs-keyword\">let</span> result = ptr::read(<span class=\"hljs-keyword\">self</span>.ptr().add(index));\n            ptr::copy(\n                <span class=\"hljs-keyword\">self</span>.ptr().add(index + <span class=\"hljs-number\">1</span>),\n                <span class=\"hljs-keyword\">self</span>.ptr().add(index),\n                <span class=\"hljs-keyword\">self</span>.len - index,\n            );\n            result\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drain</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; Drain&lt;T&gt; {\n        <span class=\"hljs-keyword\">let</span> iter = <span class=\"hljs-keyword\">unsafe</span> { RawValIter::new(&amp;<span class=\"hljs-keyword\">self</span>) };\n\n        <span class=\"hljs-comment\">// this is a mem::forget safety thing. If Drain is forgotten, we just</span>\n        <span class=\"hljs-comment\">// leak the whole Vec's contents. Also we need to do this *eventually*</span>\n        <span class=\"hljs-comment\">// anyway, so why not do it now?</span>\n        <span class=\"hljs-keyword\">self</span>.len = <span class=\"hljs-number\">0</span>;\n\n        Drain {\n            iter,\n            vec: PhantomData,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(_) = <span class=\"hljs-keyword\">self</span>.pop() {}\n        <span class=\"hljs-comment\">// deallocation is handled by RawVec</span>\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Deref <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = [T];\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;[T] {\n        <span class=\"hljs-keyword\">unsafe</span> { std::slice::from_raw_parts(<span class=\"hljs-keyword\">self</span>.ptr(), <span class=\"hljs-keyword\">self</span>.len) }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; DerefMut <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-keyword\">mut</span> [T] {\n        <span class=\"hljs-keyword\">unsafe</span> { std::slice::from_raw_parts_mut(<span class=\"hljs-keyword\">self</span>.ptr(), <span class=\"hljs-keyword\">self</span>.len) }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">IntoIterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">IntoIter</span></span> = IntoIter&lt;T&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">into_iter</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; IntoIter&lt;T&gt; {\n        <span class=\"hljs-keyword\">let</span> (iter, buf) = <span class=\"hljs-keyword\">unsafe</span> {\n            (RawValIter::new(&amp;<span class=\"hljs-keyword\">self</span>), ptr::read(&amp;<span class=\"hljs-keyword\">self</span>.buf))\n        };\n\n        mem::forget(<span class=\"hljs-keyword\">self</span>);\n\n        IntoIter {\n            iter,\n            _buf: buf,\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">RawValIter</span></span>&lt;T&gt; {\n    start: *<span class=\"hljs-keyword\">const</span> T,\n    end: *<span class=\"hljs-keyword\">const</span> T,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; RawValIter&lt;T&gt; {\n    <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(slice: &amp;[T]) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        RawValIter {\n            start: slice.as_ptr(),\n            end: <span class=\"hljs-keyword\">if</span> mem::size_of::&lt;T&gt;() == <span class=\"hljs-number\">0</span> {\n                ((slice.as_ptr() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>) + slice.len()) <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> _\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> slice.len() == <span class=\"hljs-number\">0</span> {\n                slice.as_ptr()\n            } <span class=\"hljs-keyword\">else</span> {\n                slice.as_ptr().add(slice.len())\n            },\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> RawValIter&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.start == <span class=\"hljs-keyword\">self</span>.end {\n            <span class=\"hljs-literal\">None</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">unsafe</span> {\n                <span class=\"hljs-keyword\">if</span> mem::size_of::&lt;T&gt;() == <span class=\"hljs-number\">0</span> {\n                    <span class=\"hljs-keyword\">self</span>.start = (<span class=\"hljs-keyword\">self</span>.start <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> _;\n                    <span class=\"hljs-literal\">Some</span>(ptr::read(NonNull::&lt;T&gt;::dangling().as_ptr()))\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">let</span> old_ptr = <span class=\"hljs-keyword\">self</span>.start;\n                    <span class=\"hljs-keyword\">self</span>.start = <span class=\"hljs-keyword\">self</span>.start.offset(<span class=\"hljs-number\">1</span>);\n                    <span class=\"hljs-literal\">Some</span>(ptr::read(old_ptr))\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">size_hint</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; (<span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;) {\n        <span class=\"hljs-keyword\">let</span> elem_size = mem::size_of::&lt;T&gt;();\n        <span class=\"hljs-keyword\">let</span> len = (<span class=\"hljs-keyword\">self</span>.end <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> - <span class=\"hljs-keyword\">self</span>.start <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>)\n                  / <span class=\"hljs-keyword\">if</span> elem_size == <span class=\"hljs-number\">0</span> { <span class=\"hljs-number\">1</span> } <span class=\"hljs-keyword\">else</span> { elem_size };\n        (len, <span class=\"hljs-literal\">Some</span>(len))\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> RawValIter&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.start == <span class=\"hljs-keyword\">self</span>.end {\n            <span class=\"hljs-literal\">None</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">unsafe</span> {\n                <span class=\"hljs-keyword\">if</span> mem::size_of::&lt;T&gt;() == <span class=\"hljs-number\">0</span> {\n                    <span class=\"hljs-keyword\">self</span>.end = (<span class=\"hljs-keyword\">self</span>.end <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> _;\n                    <span class=\"hljs-literal\">Some</span>(ptr::read(NonNull::&lt;T&gt;::dangling().as_ptr()))\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">self</span>.end = <span class=\"hljs-keyword\">self</span>.end.offset(-<span class=\"hljs-number\">1</span>);\n                    <span class=\"hljs-literal\">Some</span>(ptr::read(<span class=\"hljs-keyword\">self</span>.end))\n                }\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IntoIter</span></span>&lt;T&gt; {\n    _buf: RawVec&lt;T&gt;, <span class=\"hljs-comment\">// we don't actually care about this. Just need it to live.</span>\n    iter: RawValIter&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">self</span>.iter.next()\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">size_hint</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; (<span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;) {\n        <span class=\"hljs-keyword\">self</span>.iter.size_hint()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">self</span>.iter.next_back()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> IntoIter&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> *<span class=\"hljs-keyword\">self</span> {}\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Drain</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    vec: PhantomData&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt;&gt;,\n    iter: RawValIter&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> Drain&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">self</span>.iter.next()\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">size_hint</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; (<span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;) {\n        <span class=\"hljs-keyword\">self</span>.iter.size_hint()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> Drain&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">self</span>.iter.next_back()\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Drain&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// pre-drain the iter</span>\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> *<span class=\"hljs-keyword\">self</span> {}\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    tests::create_push_pop();\n</span><span class=\"boring\">    tests::iter_test();\n</span><span class=\"boring\">    tests::test_drain();\n</span><span class=\"boring\">    tests::test_zst();\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"All tests finished OK\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">create_push_pop</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">        v.push(<span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, v.len());\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, v[<span class=\"hljs-number\">0</span>]);\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> v.iter_mut() {\n</span><span class=\"boring\">            *i += <span class=\"hljs-number\">1</span>;\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        v.insert(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>);\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> x = v.pop();\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">2</span>), x);\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, v.len());\n</span><span class=\"boring\">        v.push(<span class=\"hljs-number\">10</span>);\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> x = v.remove(<span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, x);\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, v.len());\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter_test</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span> {\n</span><span class=\"boring\">            v.push(<span class=\"hljs-built_in\">Box</span>::new(i))\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> iter = v.into_iter();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> first = iter.next().unwrap();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> last = iter.next_back().unwrap();\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">drop</span>(iter);\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, *first);\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">9</span>, *last);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">test_drain</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span> {\n</span><span class=\"boring\">            v.push(<span class=\"hljs-built_in\">Box</span>::new(i))\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> drain = v.drain();\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">let</span> first = drain.next().unwrap();\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">let</span> last = drain.next_back().unwrap();\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, *first);\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">9</span>, *last);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, v.len());\n</span><span class=\"boring\">        v.push(<span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">1</span>));\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, *v.pop().unwrap());\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">test_zst</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> _i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span> {\n</span><span class=\"boring\">            v.push(())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> count = <span class=\"hljs-number\">0</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> v.into_iter() {\n</span><span class=\"boring\">            count += <span class=\"hljs-number\">1</span>\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">10</span>, count);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"implementing-arc-and-mutex\"><a class=\"header\" href=\"#implementing-arc-and-mutex\">Implementing Arc and Mutex</a></h1>\n<p>Knowing the theory is all fine and good, but the <em>best</em> way to understand\nsomething is to use it. To better understand atomics and interior mutability,\nwe'll be implementing versions of the standard library's <code class=\"hljs\">Arc</code> and <code class=\"hljs\">Mutex</code> types.</p>\n<p>TODO: Write <code class=\"hljs\">Mutex</code> chapters.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"implementing-arc\"><a class=\"header\" href=\"#implementing-arc\">Implementing Arc</a></h1>\n<p>In this section, we'll be implementing a simpler version of <code class=\"hljs\">std::sync::Arc</code>.\nSimilarly to <a href=\"arc-mutex/../vec/vec.html\">the implementation of <code class=\"hljs\">Vec</code> we made earlier</a>, we won't be\ntaking advantage of as many optimizations, intrinsics, or unstable code as the\nstandard library may.</p>\n<p>This implementation is loosely based on the standard library's implementation\n(technically taken from <code class=\"hljs\">alloc::sync</code> in 1.49, as that's where it's actually\nimplemented), but it will not support weak references at the moment as they\nmake the implementation slightly more complex.</p>\n<p>Please note that this section is very work-in-progress at the moment.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"layout-1\"><a class=\"header\" href=\"#layout-1\">Layout</a></h1>\n<p>Let's start by making the layout for our implementation of <code class=\"hljs\">Arc</code>.</p>\n<p>An <code class=\"hljs\">Arc&lt;T&gt;</code> provides thread-safe shared ownership of a value of type <code class=\"hljs\">T</code>,\nallocated in the heap. Sharing implies immutability in Rust, so we don't need to\ndesign anything that manages access to that value, right? Although interior\nmutability types like Mutex allow Arc's users to create shared mutability, Arc\nitself doesn't need to concern itself with these issues.</p>\n<p>However there <em>is</em> one place where Arc needs to concern itself with mutation:\ndestruction. When all the owners of the Arc go away, we need to be able to\n<code class=\"hljs\">drop</code> its contents and free its allocation. So we need a way for an owner to\nknow if it's the <em>last</em> owner, and the simplest way to do that is with a count\nof the owners -- Reference Counting.</p>\n<p>Unfortunately, this reference count is inherently shared mutable state, so Arc\n<em>does</em> need to think about synchronization. We <em>could</em> use a Mutex for this, but\nthat's overkill. Instead, we'll use atomics. And since everyone already needs a\npointer to the T's allocation, we might as well put the reference count in that\nsame allocation.</p>\n<p>Naively, it would look something like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::sync::atomic;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Arc</span></span>&lt;T&gt; {\n    ptr: *<span class=\"hljs-keyword\">mut</span> ArcInner&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcInner</span></span>&lt;T&gt; {\n    rc: atomic::AtomicUsize,\n    data: T,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This would compile, however it would be incorrect. First of all, the compiler\nwill give us too strict variance. For example, an <code class=\"hljs\">Arc&lt;&amp;'static str&gt;</code> couldn't\nbe used where an <code class=\"hljs\">Arc&lt;&amp;'a str&gt;</code> was expected. More importantly, it will give\nincorrect ownership information to the drop checker, as it will assume we don't\nown any values of type <code class=\"hljs\">T</code>. As this is a structure providing shared ownership of\na value, at some point there will be an instance of this structure that entirely\nowns its data. See <a href=\"arc-mutex/../ownership.html\">the chapter on ownership and lifetimes</a> for\nall the details on variance and drop check.</p>\n<p>To fix the first problem, we can use <code class=\"hljs\">NonNull&lt;T&gt;</code>. Note that <code class=\"hljs\">NonNull&lt;T&gt;</code> is a\nwrapper around a raw pointer that declares that:</p>\n<ul>\n<li>We are covariant over <code class=\"hljs\">T</code></li>\n<li>Our pointer is never null</li>\n</ul>\n<p>To fix the second problem, we can include a <code class=\"hljs\">PhantomData</code> marker containing an\n<code class=\"hljs\">ArcInner&lt;T&gt;</code>. This will tell the drop checker that we have some notion of\nownership of a value of <code class=\"hljs\">ArcInner&lt;T&gt;</code> (which itself contains some <code class=\"hljs\">T</code>).</p>\n<p>With these changes we get our final structure:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::marker::PhantomData;\n<span class=\"hljs-keyword\">use</span> std::ptr::NonNull;\n<span class=\"hljs-keyword\">use</span> std::sync::atomic::AtomicUsize;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Arc</span></span>&lt;T&gt; {\n    ptr: NonNull&lt;ArcInner&lt;T&gt;&gt;,\n    phantom: PhantomData&lt;ArcInner&lt;T&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcInner</span></span>&lt;T&gt; {\n    rc: AtomicUsize,\n    data: T,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"base-code\"><a class=\"header\" href=\"#base-code\">Base Code</a></h1>\n<p>Now that we've decided the layout for our implementation of <code class=\"hljs\">Arc</code>, let's create\nsome basic code.</p>\n<h2 id=\"constructing-the-arc\"><a class=\"header\" href=\"#constructing-the-arc\">Constructing the Arc</a></h2>\n<p>We'll first need a way to construct an <code class=\"hljs\">Arc&lt;T&gt;</code>.</p>\n<p>This is pretty simple, as we just need to box the <code class=\"hljs\">ArcInner&lt;T&gt;</code> and get a\n<code class=\"hljs\">NonNull&lt;T&gt;</code> pointer to it.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Arc&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(data: T) -&gt; Arc&lt;T&gt; {\n        <span class=\"hljs-comment\">// We start the reference count at 1, as that first reference is the</span>\n        <span class=\"hljs-comment\">// current pointer.</span>\n        <span class=\"hljs-keyword\">let</span> boxed = <span class=\"hljs-built_in\">Box</span>::new(ArcInner {\n            rc: AtomicUsize::new(<span class=\"hljs-number\">1</span>),\n            data,\n        });\n        Arc {\n            <span class=\"hljs-comment\">// It is okay to call `.unwrap()` here as we get a pointer from</span>\n            <span class=\"hljs-comment\">// `Box::into_raw` which is guaranteed to not be null.</span>\n            ptr: NonNull::new(<span class=\"hljs-built_in\">Box</span>::into_raw(boxed)).unwrap(),\n            phantom: PhantomData,\n        }\n    }\n}</code></pre>\n<h2 id=\"send-and-sync-1\"><a class=\"header\" href=\"#send-and-sync-1\">Send and Sync</a></h2>\n<p>Since we're building a concurrency primitive, we'll need to be able to send it\nacross threads. Thus, we can implement the <code class=\"hljs\">Send</code> and <code class=\"hljs\">Sync</code> marker traits. For\nmore information on these, see <a href=\"arc-mutex/../send-and-sync.html\">the section on <code class=\"hljs\">Send</code> and\n<code class=\"hljs\">Sync</code></a>.</p>\n<p>This is okay because:</p>\n<ul>\n<li>You can only get a mutable reference to the value inside an <code class=\"hljs\">Arc</code> if and only\nif it is the only <code class=\"hljs\">Arc</code> referencing that data (which only happens in <code class=\"hljs\">Drop</code>)</li>\n<li>We use atomics for the shared mutable reference counting</li>\n</ul>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Sync</span> + <span class=\"hljs-built_in\">Send</span>&gt; <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {}\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Sync</span> + <span class=\"hljs-built_in\">Send</span>&gt; <span class=\"hljs-built_in\">Sync</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {}</code></pre>\n<p>We need to have the bound <code class=\"hljs\">T: Sync + Send</code> because if we did not provide those\nbounds, it would be possible to share values that are thread-unsafe across a\nthread boundary via an <code class=\"hljs\">Arc</code>, which could possibly cause data races or\nunsoundness.</p>\n<p>For example, if those bounds were not present, <code class=\"hljs\">Arc&lt;Rc&lt;u32&gt;&gt;</code> would be <code class=\"hljs\">Sync</code> or\n<code class=\"hljs\">Send</code>, meaning that you could clone the <code class=\"hljs\">Rc</code> out of the <code class=\"hljs\">Arc</code> to send it across\na thread (without creating an entirely new <code class=\"hljs\">Rc</code>), which would create data races\nas <code class=\"hljs\">Rc</code> is not thread-safe.</p>\n<h2 id=\"getting-the-arcinner\"><a class=\"header\" href=\"#getting-the-arcinner\">Getting the <code>ArcInner</code></a></h2>\n<p>To dereference the <code class=\"hljs\">NonNull&lt;T&gt;</code> pointer into a <code class=\"hljs\">&amp;T</code>, we can call\n<code class=\"hljs\">NonNull::as_ref</code>. This is unsafe, unlike the typical <code class=\"hljs\">as_ref</code> function, so we\nmust call it like this:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() }</code></pre>\n<p>We'll be using this snippet a few times in this code (usually with an associated\n<code class=\"hljs\">let</code> binding).</p>\n<p>This unsafety is okay because while this <code class=\"hljs\">Arc</code> is alive, we're guaranteed that\nthe inner pointer is valid.</p>\n<h2 id=\"deref-1\"><a class=\"header\" href=\"#deref-1\">Deref</a></h2>\n<p>Alright. Now we can make <code class=\"hljs\">Arc</code>s (and soon will be able to clone and destroy them correctly), but how do we get\nto the data inside?</p>\n<p>What we need now is an implementation of <code class=\"hljs\">Deref</code>.</p>\n<p>We'll need to import the trait:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::ops::Deref;</code></pre>\n<p>And here's the implementation:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Deref <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = T;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;T {\n        <span class=\"hljs-keyword\">let</span> inner = <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() };\n        &amp;inner.data\n    }\n}</code></pre>\n<p>Pretty simple, eh? This simply dereferences the <code class=\"hljs\">NonNull</code> pointer to the\n<code class=\"hljs\">ArcInner&lt;T&gt;</code>, then gets a reference to the data inside.</p>\n<h2 id=\"code\"><a class=\"header\" href=\"#code\">Code</a></h2>\n<p>Here's all the code from this section:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::ops::Deref;\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Arc&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(data: T) -&gt; Arc&lt;T&gt; {\n        <span class=\"hljs-comment\">// We start the reference count at 1, as that first reference is the</span>\n        <span class=\"hljs-comment\">// current pointer.</span>\n        <span class=\"hljs-keyword\">let</span> boxed = <span class=\"hljs-built_in\">Box</span>::new(ArcInner {\n            rc: AtomicUsize::new(<span class=\"hljs-number\">1</span>),\n            data,\n        });\n        Arc {\n            <span class=\"hljs-comment\">// It is okay to call `.unwrap()` here as we get a pointer from</span>\n            <span class=\"hljs-comment\">// `Box::into_raw` which is guaranteed to not be null.</span>\n            ptr: NonNull::new(<span class=\"hljs-built_in\">Box</span>::into_raw(boxed)).unwrap(),\n            phantom: PhantomData,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Sync</span> + <span class=\"hljs-built_in\">Send</span>&gt; <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {}\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Sync</span> + <span class=\"hljs-built_in\">Send</span>&gt; <span class=\"hljs-built_in\">Sync</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {}\n\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Deref <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = T;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;T {\n        <span class=\"hljs-keyword\">let</span> inner = <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() };\n        &amp;inner.data\n    }\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"cloning\"><a class=\"header\" href=\"#cloning\">Cloning</a></h1>\n<p>Now that we've got some basic code set up, we'll need a way to clone the <code class=\"hljs\">Arc</code>.</p>\n<p>Basically, we need to:</p>\n<ol>\n<li>Increment the atomic reference count</li>\n<li>Construct a new instance of the <code class=\"hljs\">Arc</code> from the inner pointer</li>\n</ol>\n<p>First, we need to get access to the <code class=\"hljs\">ArcInner</code>:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> inner = <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() };</code></pre>\n<p>We can update the atomic reference count as follows:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> old_rc = inner.rc.fetch_add(<span class=\"hljs-number\">1</span>, Ordering::???);</code></pre>\n<p>But what ordering should we use here? We don't really have any code that will\nneed atomic synchronization when cloning, as we do not modify the internal value\nwhile cloning. Thus, we can use a Relaxed ordering here, which implies no\nhappens-before relationship but is atomic. When <code class=\"hljs\">Drop</code>ping the Arc, however,\nwe'll need to atomically synchronize when decrementing the reference count. This\nis described more in <a href=\"arc-mutex/arc-drop.html\">the section on the <code class=\"hljs\">Drop</code> implementation for\n<code class=\"hljs\">Arc</code></a>. For more information on atomic relationships and Relaxed\nordering, see <a href=\"arc-mutex/../atomics.html\">the section on atomics</a>.</p>\n<p>Thus, the code becomes this:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> old_rc = inner.rc.fetch_add(<span class=\"hljs-number\">1</span>, Ordering::Relaxed);</code></pre>\n<p>We'll need to add another import to use <code class=\"hljs\">Ordering</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::sync::atomic::Ordering;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However, we have one problem with this implementation right now. What if someone\ndecides to <code class=\"hljs\">mem::forget</code> a bunch of Arcs? The code we have written so far (and\nwill write) assumes that the reference count accurately portrays how many Arcs\nare in memory, but with <code class=\"hljs\">mem::forget</code> this is false. Thus, when more and more\nArcs are cloned from this one without them being <code class=\"hljs\">Drop</code>ped and the reference\ncount being decremented, we can overflow! This will cause use-after-free which\nis <strong>INCREDIBLY BAD!</strong></p>\n<p>To handle this, we need to check that the reference count does not go over some\narbitrary value (below <code class=\"hljs\">usize::MAX</code>, as we're storing the reference count as an\n<code class=\"hljs\">AtomicUsize</code>), and do <em>something</em>.</p>\n<p>The standard library's implementation decides to just abort the program (as it\nis an incredibly unlikely case in normal code and if it happens, the program is\nprobably incredibly degenerate) if the reference count reaches <code class=\"hljs\">isize::MAX</code>\n(about half of <code class=\"hljs\">usize::MAX</code>) on any thread, on the assumption that there are\nprobably not about 2 billion threads (or about <strong>9 quintillion</strong> on some 64-bit\nmachines) incrementing the reference count at once. This is what we'll do.</p>\n<p>It's pretty simple to implement this behavior:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">if</span> old_rc &gt;= <span class=\"hljs-built_in\">isize</span>::MAX <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> {\n    std::process::abort();\n}</code></pre>\n<p>Then, we need to return a new instance of the <code class=\"hljs\">Arc</code>:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">Self</span> {\n    ptr: <span class=\"hljs-keyword\">self</span>.ptr,\n    phantom: PhantomData\n}</code></pre>\n<p>Now, let's wrap this all up inside the <code class=\"hljs\">Clone</code> implementation:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::sync::atomic::Ordering;\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Clone</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">clone</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Arc&lt;T&gt; {\n        <span class=\"hljs-keyword\">let</span> inner = <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() };\n        <span class=\"hljs-comment\">// Using a relaxed ordering is alright here as we don't need any atomic</span>\n        <span class=\"hljs-comment\">// synchronization here as we're not modifying or accessing the inner</span>\n        <span class=\"hljs-comment\">// data.</span>\n        <span class=\"hljs-keyword\">let</span> old_rc = inner.rc.fetch_add(<span class=\"hljs-number\">1</span>, Ordering::Relaxed);\n\n        <span class=\"hljs-keyword\">if</span> old_rc &gt;= <span class=\"hljs-built_in\">isize</span>::MAX <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> {\n            std::process::abort();\n        }\n\n        <span class=\"hljs-keyword\">Self</span> {\n            ptr: <span class=\"hljs-keyword\">self</span>.ptr,\n            phantom: PhantomData,\n        }\n    }\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"dropping\"><a class=\"header\" href=\"#dropping\">Dropping</a></h1>\n<p>We now need a way to decrease the reference count and drop the data once it is\nlow enough, otherwise the data will live forever on the heap.</p>\n<p>To do this, we can implement <code class=\"hljs\">Drop</code>.</p>\n<p>Basically, we need to:</p>\n<ol>\n<li>Decrement the reference count</li>\n<li>If there is only one reference remaining to the data, then:</li>\n<li>Atomically fence the data to prevent reordering of the use and deletion of\nthe data</li>\n<li>Drop the inner data</li>\n</ol>\n<p>First, we'll need to get access to the <code class=\"hljs\">ArcInner</code>:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> inner = <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() };</code></pre>\n<p>Now, we need to decrement the reference count. To streamline our code, we can\nalso return if the returned value from <code class=\"hljs\">fetch_sub</code> (the value of the reference\ncount before decrementing it) is not equal to <code class=\"hljs\">1</code> (which happens when we are not\nthe last reference to the data).</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">if</span> inner.rc.fetch_sub(<span class=\"hljs-number\">1</span>, Ordering::Release) != <span class=\"hljs-number\">1</span> {\n    <span class=\"hljs-keyword\">return</span>;\n}</code></pre>\n<p>We then need to create an atomic fence to prevent reordering of the use of the\ndata and deletion of the data. As described in <a href=\"https://github.com/rust-lang/rust/blob/e1884a8e3c3e813aada8254edfa120e85bf5ffca/library/alloc/src/sync.rs#L1440-L1467\">the standard library's\nimplementation of <code class=\"hljs\">Arc</code></a>:</p>\n<blockquote>\n<p>This fence is needed to prevent reordering of use of the data and deletion of\nthe data. Because it is marked <code class=\"hljs\">Release</code>, the decreasing of the reference\ncount synchronizes with this <code class=\"hljs\">Acquire</code> fence. This means that use of the data\nhappens before decreasing the reference count, which happens before this\nfence, which happens before the deletion of the data.</p>\n<p>As explained in the <a href=\"https://www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html\">Boost documentation</a>,</p>\n<blockquote>\n<p>It is important to enforce any possible access to the object in one\nthread (through an existing reference) to <em>happen before</em> deleting\nthe object in a different thread. This is achieved by a \"release\"\noperation after dropping a reference (any access to the object\nthrough this reference must obviously happened before), and an\n\"acquire\" operation before deleting the object.</p>\n</blockquote>\n<p>In particular, while the contents of an Arc are usually immutable, it's\npossible to have interior writes to something like a Mutex<t>. Since a Mutex\nis not acquired when it is deleted, we can't rely on its synchronization logic\nto make writes in thread A visible to a destructor running in thread B.</t></p>\n<p>Also note that the Acquire fence here could probably be replaced with an\nAcquire load, which could improve performance in highly-contended situations.\nSee <a href=\"https://github.com/rust-lang/rust/pull/41714\">2</a>.</p>\n</blockquote>\n<p>To do this, we do the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::sync::atomic::Ordering;\n</span><span class=\"hljs-keyword\">use</span> std::sync::atomic;\natomic::fence(Ordering::Acquire);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Finally, we can drop the data itself. We use <code class=\"hljs\">Box::from_raw</code> to drop the boxed\n<code class=\"hljs\">ArcInner&lt;T&gt;</code> and its data. This takes a <code class=\"hljs\">*mut T</code> and not a <code class=\"hljs\">NonNull&lt;T&gt;</code>, so we\nmust convert using <code class=\"hljs\">NonNull::as_ptr</code>.</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-built_in\">Box</span>::from_raw(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr()); }</code></pre>\n<p>This is safe as we know we have the last pointer to the <code class=\"hljs\">ArcInner</code> and that its\npointer is valid.</p>\n<p>Now, let's wrap this all up inside the <code class=\"hljs\">Drop</code> implementation:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> inner = <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() };\n        <span class=\"hljs-keyword\">if</span> inner.rc.fetch_sub(<span class=\"hljs-number\">1</span>, Ordering::Release) != <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-comment\">// This fence is needed to prevent reordering of the use and deletion</span>\n        <span class=\"hljs-comment\">// of the data.</span>\n        atomic::fence(Ordering::Acquire);\n        <span class=\"hljs-comment\">// This is safe as we know we have the last pointer to the `ArcInner`</span>\n        <span class=\"hljs-comment\">// and that its pointer is valid.</span>\n        <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-built_in\">Box</span>::from_raw(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr()); }\n    }\n}</code></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"final-code\"><a class=\"header\" href=\"#final-code\">Final Code</a></h1>\n<p>Here's the final code, with some added comments and re-ordered imports:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::marker::PhantomData;\n<span class=\"hljs-keyword\">use</span> std::ops::Deref;\n<span class=\"hljs-keyword\">use</span> std::ptr::NonNull;\n<span class=\"hljs-keyword\">use</span> std::sync::atomic::{<span class=\"hljs-keyword\">self</span>, AtomicUsize, Ordering};\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Arc</span></span>&lt;T&gt; {\n    ptr: NonNull&lt;ArcInner&lt;T&gt;&gt;,\n    phantom: PhantomData&lt;ArcInner&lt;T&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ArcInner</span></span>&lt;T&gt; {\n    rc: AtomicUsize,\n    data: T,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Arc&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(data: T) -&gt; Arc&lt;T&gt; {\n        <span class=\"hljs-comment\">// We start the reference count at 1, as that first reference is the</span>\n        <span class=\"hljs-comment\">// current pointer.</span>\n        <span class=\"hljs-keyword\">let</span> boxed = <span class=\"hljs-built_in\">Box</span>::new(ArcInner {\n            rc: AtomicUsize::new(<span class=\"hljs-number\">1</span>),\n            data,\n        });\n        Arc {\n            <span class=\"hljs-comment\">// It is okay to call `.unwrap()` here as we get a pointer from</span>\n            <span class=\"hljs-comment\">// `Box::into_raw` which is guaranteed to not be null.</span>\n            ptr: NonNull::new(<span class=\"hljs-built_in\">Box</span>::into_raw(boxed)).unwrap(),\n            phantom: PhantomData,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Sync</span> + <span class=\"hljs-built_in\">Send</span>&gt; <span class=\"hljs-built_in\">Send</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {}\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Sync</span> + <span class=\"hljs-built_in\">Send</span>&gt; <span class=\"hljs-built_in\">Sync</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Deref <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = T;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;T {\n        <span class=\"hljs-keyword\">let</span> inner = <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() };\n        &amp;inner.data\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Clone</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">clone</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Arc&lt;T&gt; {\n        <span class=\"hljs-keyword\">let</span> inner = <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() };\n        <span class=\"hljs-comment\">// Using a relaxed ordering is alright here as we don't need any atomic</span>\n        <span class=\"hljs-comment\">// synchronization here as we're not modifying or accessing the inner</span>\n        <span class=\"hljs-comment\">// data.</span>\n        <span class=\"hljs-keyword\">let</span> old_rc = inner.rc.fetch_add(<span class=\"hljs-number\">1</span>, Ordering::Relaxed);\n\n        <span class=\"hljs-keyword\">if</span> old_rc &gt;= <span class=\"hljs-built_in\">isize</span>::MAX <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span> {\n            std::process::abort();\n        }\n\n        <span class=\"hljs-keyword\">Self</span> {\n            ptr: <span class=\"hljs-keyword\">self</span>.ptr,\n            phantom: PhantomData,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> Arc&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> inner = <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-keyword\">self</span>.ptr.as_ref() };\n        <span class=\"hljs-keyword\">if</span> inner.rc.fetch_sub(<span class=\"hljs-number\">1</span>, Ordering::Release) != <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-comment\">// This fence is needed to prevent reordering of the use and deletion</span>\n        <span class=\"hljs-comment\">// of the data.</span>\n        atomic::fence(Ordering::Acquire);\n        <span class=\"hljs-comment\">// This is safe as we know we have the last pointer to the `ArcInner`</span>\n        <span class=\"hljs-comment\">// and that its pointer is valid.</span>\n        <span class=\"hljs-keyword\">unsafe</span> { <span class=\"hljs-built_in\">Box</span>::from_raw(<span class=\"hljs-keyword\">self</span>.ptr.as_ptr()); }\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"foreign-function-interface\"><a class=\"header\" href=\"#foreign-function-interface\">Foreign Function Interface</a></h1>\n<h2 id=\"introduction\"><a class=\"header\" href=\"#introduction\">Introduction</a></h2>\n<p>This guide will use the <a href=\"https://github.com/google/snappy\">snappy</a>\ncompression/decompression library as an introduction to writing bindings for\nforeign code. Rust is currently unable to call directly into a C++ library, but\nsnappy includes a C interface (documented in\n<a href=\"https://github.com/google/snappy/blob/master/snappy-c.h\"><code class=\"hljs\">snappy-c.h</code></a>).</p>\n<h2 id=\"a-note-about-libc\"><a class=\"header\" href=\"#a-note-about-libc\">A note about libc</a></h2>\n<p>Many of these examples use <a href=\"https://crates.io/crates/libc\">the <code class=\"hljs\">libc</code> crate</a>, which provides various\ntype definitions for C types, among other things. If you’re trying these\nexamples yourself, you’ll need to add <code class=\"hljs\">libc</code> to your <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">libc</span> = <span class=\"hljs-string\">\"0.2.0\"</span>\n</code></pre>\n<h2 id=\"calling-foreign-functions\"><a class=\"header\" href=\"#calling-foreign-functions\">Calling foreign functions</a></h2>\n<p>The following is a minimal example of calling a foreign function which will\ncompile if snappy is installed:</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> libc::size_t;\n\n<span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"snappy\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_max_compressed_length</span></span>(source_length: size_t) -&gt; size_t;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-keyword\">unsafe</span> { snappy_max_compressed_length(<span class=\"hljs-number\">100</span>) };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"max compressed length of a 100 byte buffer: {}\"</span>, x);\n}</code></pre>\n<p>The <code class=\"hljs\">extern</code> block is a list of function signatures in a foreign library, in\nthis case with the platform's C ABI. The <code class=\"hljs\">#[link(...)]</code> attribute is used to\ninstruct the linker to link against the snappy library so the symbols are\nresolved.</p>\n<p>Foreign functions are assumed to be unsafe so calls to them need to be wrapped\nwith <code class=\"hljs\">unsafe {}</code> as a promise to the compiler that everything contained within\ntruly is safe. C libraries often expose interfaces that aren't thread-safe, and\nalmost any function that takes a pointer argument isn't valid for all possible\ninputs since the pointer could be dangling, and raw pointers fall outside of\nRust's safe memory model.</p>\n<p>When declaring the argument types to a foreign function, the Rust compiler\ncannot check if the declaration is correct, so specifying it correctly is part\nof keeping the binding correct at runtime.</p>\n<p>The <code class=\"hljs\">extern</code> block can be extended to cover the entire snappy API:</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> libc::{c_int, size_t};\n\n<span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"snappy\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_compress</span></span>(input: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n                       input_length: size_t,\n                       compressed: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>,\n                       compressed_length: *<span class=\"hljs-keyword\">mut</span> size_t) -&gt; c_int;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_uncompress</span></span>(compressed: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n                         compressed_length: size_t,\n                         uncompressed: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>,\n                         uncompressed_length: *<span class=\"hljs-keyword\">mut</span> size_t) -&gt; c_int;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_max_compressed_length</span></span>(source_length: size_t) -&gt; size_t;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_uncompressed_length</span></span>(compressed: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n                                  compressed_length: size_t,\n                                  result: *<span class=\"hljs-keyword\">mut</span> size_t) -&gt; c_int;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_validate_compressed_buffer</span></span>(compressed: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n                                         compressed_length: size_t) -&gt; c_int;\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<h2 id=\"creating-a-safe-interface\"><a class=\"header\" href=\"#creating-a-safe-interface\">Creating a safe interface</a></h2>\n<p>The raw C API needs to be wrapped to provide memory safety and make use of higher-level concepts\nlike vectors. A library can choose to expose only the safe, high-level interface and hide the unsafe\ninternal details.</p>\n<p>Wrapping the functions which expect buffers involves using the <code class=\"hljs\">slice::raw</code> module to manipulate Rust\nvectors as pointers to memory. Rust's vectors are guaranteed to be a contiguous block of memory. The\nlength is the number of elements currently contained, and the capacity is the total size in elements of\nthe allocated memory. The length is less than or equal to the capacity.</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> libc::{c_int, size_t};\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_validate_compressed_buffer</span></span>(_: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, _: size_t) -&gt; c_int { <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">validate_compressed_buffer</span></span>(src: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">bool</span> {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        snappy_validate_compressed_buffer(src.as_ptr(), src.len() <span class=\"hljs-keyword\">as</span> size_t) == <span class=\"hljs-number\">0</span>\n    }\n}</code></pre>\n<p>The <code class=\"hljs\">validate_compressed_buffer</code> wrapper above makes use of an <code class=\"hljs\">unsafe</code> block, but it makes the\nguarantee that calling it is safe for all inputs by leaving off <code class=\"hljs\">unsafe</code> from the function\nsignature.</p>\n<p>The <code class=\"hljs\">snappy_compress</code> and <code class=\"hljs\">snappy_uncompress</code> functions are more complex, since a buffer has to be\nallocated to hold the output too.</p>\n<p>The <code class=\"hljs\">snappy_max_compressed_length</code> function can be used to allocate a vector with the maximum\nrequired capacity to hold the compressed output. The vector can then be passed to the\n<code class=\"hljs\">snappy_compress</code> function as an output parameter. An output parameter is also passed to retrieve\nthe true length after compression for setting the length.</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> libc::{size_t, c_int};\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_compress</span></span>(a: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, b: size_t, c: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                          d: *<span class=\"hljs-keyword\">mut</span> size_t) -&gt; c_int { <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_max_compressed_length</span></span>(a: size_t) -&gt; size_t { a }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">compress</span></span>(src: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt; {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-keyword\">let</span> srclen = src.len() <span class=\"hljs-keyword\">as</span> size_t;\n        <span class=\"hljs-keyword\">let</span> psrc = src.as_ptr();\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> dstlen = snappy_max_compressed_length(srclen);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> dst = <span class=\"hljs-built_in\">Vec</span>::with_capacity(dstlen <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>);\n        <span class=\"hljs-keyword\">let</span> pdst = dst.as_mut_ptr();\n\n        snappy_compress(psrc, srclen, pdst, &amp;<span class=\"hljs-keyword\">mut</span> dstlen);\n        dst.set_len(dstlen <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>);\n        dst\n    }\n}</code></pre>\n<p>Decompression is similar, because snappy stores the uncompressed size as part of the compression\nformat and <code class=\"hljs\">snappy_uncompressed_length</code> will retrieve the exact buffer size required.</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> libc::{size_t, c_int};\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_uncompress</span></span>(compressed: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                            compressed_length: size_t,\n</span><span class=\"boring\">                            uncompressed: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                            uncompressed_length: *<span class=\"hljs-keyword\">mut</span> size_t) -&gt; c_int { <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_uncompressed_length</span></span>(compressed: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                                     compressed_length: size_t,\n</span><span class=\"boring\">                                     result: *<span class=\"hljs-keyword\">mut</span> size_t) -&gt; c_int { <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">uncompress</span></span>(src: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">u8</span>&gt;&gt; {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-keyword\">let</span> srclen = src.len() <span class=\"hljs-keyword\">as</span> size_t;\n        <span class=\"hljs-keyword\">let</span> psrc = src.as_ptr();\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> dstlen: size_t = <span class=\"hljs-number\">0</span>;\n        snappy_uncompressed_length(psrc, srclen, &amp;<span class=\"hljs-keyword\">mut</span> dstlen);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> dst = <span class=\"hljs-built_in\">Vec</span>::with_capacity(dstlen <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>);\n        <span class=\"hljs-keyword\">let</span> pdst = dst.as_mut_ptr();\n\n        <span class=\"hljs-keyword\">if</span> snappy_uncompress(psrc, srclen, pdst, &amp;<span class=\"hljs-keyword\">mut</span> dstlen) == <span class=\"hljs-number\">0</span> {\n            dst.set_len(dstlen <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">usize</span>);\n            <span class=\"hljs-literal\">Some</span>(dst)\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-literal\">None</span> <span class=\"hljs-comment\">// SNAPPY_INVALID_INPUT</span>\n        }\n    }\n}</code></pre>\n<p>Then, we can add some tests to show how to use them.</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> libc::{c_int, size_t};\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_compress</span></span>(input: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                          input_length: size_t,\n</span><span class=\"boring\">                          compressed: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                          compressed_length: *<span class=\"hljs-keyword\">mut</span> size_t)\n</span><span class=\"boring\">                          -&gt; c_int { <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_uncompress</span></span>(compressed: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                            compressed_length: size_t,\n</span><span class=\"boring\">                            uncompressed: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                            uncompressed_length: *<span class=\"hljs-keyword\">mut</span> size_t)\n</span><span class=\"boring\">                            -&gt; c_int { <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_max_compressed_length</span></span>(source_length: size_t) -&gt; size_t { <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_uncompressed_length</span></span>(compressed: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                                     compressed_length: size_t,\n</span><span class=\"boring\">                                     result: *<span class=\"hljs-keyword\">mut</span> size_t)\n</span><span class=\"boring\">                                     -&gt; c_int { <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">snappy_validate_compressed_buffer</span></span>(compressed: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>,\n</span><span class=\"boring\">                                            compressed_length: size_t)\n</span><span class=\"boring\">                                            -&gt; c_int { <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() { }\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">valid</span></span>() {\n        <span class=\"hljs-keyword\">let</span> d = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0xde</span>, <span class=\"hljs-number\">0xad</span>, <span class=\"hljs-number\">0xd0</span>, <span class=\"hljs-number\">0x0d</span>];\n        <span class=\"hljs-keyword\">let</span> c: &amp;[<span class=\"hljs-built_in\">u8</span>] = &amp;compress(&amp;d);\n        <span class=\"hljs-built_in\">assert!</span>(validate_compressed_buffer(c));\n        <span class=\"hljs-built_in\">assert!</span>(uncompress(c) == <span class=\"hljs-literal\">Some</span>(d));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">invalid</span></span>() {\n        <span class=\"hljs-keyword\">let</span> d = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-built_in\">assert!</span>(!validate_compressed_buffer(&amp;d));\n        <span class=\"hljs-built_in\">assert!</span>(uncompress(&amp;d).is_none());\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">empty</span></span>() {\n        <span class=\"hljs-keyword\">let</span> d = <span class=\"hljs-built_in\">vec!</span>[];\n        <span class=\"hljs-built_in\">assert!</span>(!validate_compressed_buffer(&amp;d));\n        <span class=\"hljs-built_in\">assert!</span>(uncompress(&amp;d).is_none());\n        <span class=\"hljs-keyword\">let</span> c = compress(&amp;d);\n        <span class=\"hljs-built_in\">assert!</span>(validate_compressed_buffer(&amp;c));\n        <span class=\"hljs-built_in\">assert!</span>(uncompress(&amp;c) == <span class=\"hljs-literal\">Some</span>(d));\n    }\n}</code></pre>\n<h2 id=\"destructors-1\"><a class=\"header\" href=\"#destructors-1\">Destructors</a></h2>\n<p>Foreign libraries often hand off ownership of resources to the calling code.\nWhen this occurs, we must use Rust's destructors to provide safety and guarantee\nthe release of these resources (especially in the case of panic).</p>\n<p>For more about destructors, see the <a href=\"../std/ops/trait.Drop.html\">Drop trait</a>.</p>\n<h2 id=\"calling-rust-code-from-c\"><a class=\"header\" href=\"#calling-rust-code-from-c\">Calling Rust code from C</a></h2>\n<p>You may wish to compile Rust code in a way so that it can be called from C.\nThis is fairly easy, but requires a few things.</p>\n<h3 id=\"rust-side\"><a class=\"header\" href=\"#rust-side\">Rust side</a></h3>\n<p>First, we assume you have a lib crate named as <code class=\"hljs\">rust_from_c</code>.\n<code class=\"hljs\">lib.rs</code> should have Rust code as following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello_from_rust</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello from Rust!\"</span>);\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>The <code class=\"hljs\">extern \"C\"</code> makes this function adhere to the C calling convention, as discussed below in \"<a href=\"ffi.html#foreign-calling-conventions\">Foreign Calling Conventions</a>\".\nThe <code class=\"hljs\">no_mangle</code> attribute turns off Rust's name mangling, so that it has a well defined symbol to link to.</p>\n<p>Then, to compile Rust code as a shared library that can be called from C, add the following to your <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lib]</span>\n<span class=\"hljs-attr\">crate-type</span> = [<span class=\"hljs-string\">\"cdylib\"</span>]\n</code></pre>\n<p>(NOTE: We could also use the <code class=\"hljs\">staticlib</code> crate type but it needs to tweak some linking flags.)</p>\n<p>Run <code class=\"hljs\">cargo build</code> and you're ready to go on the Rust side.</p>\n<h3 id=\"c-side\"><a class=\"header\" href=\"#c-side\">C side</a></h3>\n<p>We'll create a C file to call the <code class=\"hljs\">hello_from_rust</code> function and compile it by <code class=\"hljs\">gcc</code>.</p>\n<p>C file should look like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-c hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">hello_from_rust</span><span class=\"hljs-params\">()</span></span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n    hello_from_rust();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>We name the file as <code class=\"hljs\">call_rust.c</code> and place it on the crate root.\nRun the following to compile:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">gcc call_rust.c -o call_rust -lrust_from_c -L./target/debug\n</code></pre>\n<p><code class=\"hljs\">-l</code> and <code class=\"hljs\">-L</code> tell gcc to find our Rust library.</p>\n<p>Finally, we can call Rust code from C with <code class=\"hljs\">LD_LIBRARY_PATH</code> specified:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">$ LD_LIBRARY_PATH=./target/debug ./call_rust\nHello from Rust!\n</code></pre>\n<p>That's it!\nFor more realistic example, check the <a href=\"https://github.com/eqrion/cbindgen\"><code class=\"hljs\">cbindgen</code></a>.</p>\n<h2 id=\"callbacks-from-c-code-to-rust-functions\"><a class=\"header\" href=\"#callbacks-from-c-code-to-rust-functions\">Callbacks from C code to Rust functions</a></h2>\n<p>Some external libraries require the usage of callbacks to report back their\ncurrent state or intermediate data to the caller.\nIt is possible to pass functions defined in Rust to an external library.\nThe requirement for this is that the callback function is marked as <code class=\"hljs\">extern</code>\nwith the correct calling convention to make it callable from C code.</p>\n<p>The callback function can then be sent through a registration call\nto the C library and afterwards be invoked from there.</p>\n<p>A basic example is:</p>\n<p>Rust code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust no_run edition2021 hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">callback</span></span>(a: <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I'm called from C with value {0}\"</span>, a);\n}\n\n<span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"extlib\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">register_callback</span></span>(cb: <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>)) -&gt; <span class=\"hljs-built_in\">i32</span>;\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">trigger_callback</span></span>();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        register_callback(callback);\n        trigger_callback(); <span class=\"hljs-comment\">// Triggers the callback.</span>\n    }\n}</code></pre></pre>\n<p>C code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-c hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-title\">void</span> <span class=\"hljs-params\">(*rust_callback)</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int32_t</span>)</span></span>;\nrust_callback cb;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int32_t</span> <span class=\"hljs-title\">register_callback</span><span class=\"hljs-params\">(rust_callback callback)</span> </span>{\n    cb = callback;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">trigger_callback</span><span class=\"hljs-params\">()</span> </span>{\n  cb(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// Will call callback(7) in Rust.</span>\n}\n</code></pre>\n<p>In this example Rust's <code class=\"hljs\">main()</code> will call <code class=\"hljs\">trigger_callback()</code> in C,\nwhich would, in turn, call back to <code class=\"hljs\">callback()</code> in Rust.</p>\n<h2 id=\"targeting-callbacks-to-rust-objects\"><a class=\"header\" href=\"#targeting-callbacks-to-rust-objects\">Targeting callbacks to Rust objects</a></h2>\n<p>The former example showed how a global function can be called from C code.\nHowever it is often desired that the callback is targeted to a special\nRust object. This could be the object that represents the wrapper for the\nrespective C object.</p>\n<p>This can be achieved by passing a raw pointer to the object down to the\nC library. The C library can then include the pointer to the Rust object in\nthe notification. This will allow the callback to unsafely access the\nreferenced Rust object.</p>\n<p>Rust code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust no_run edition2021 hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">RustObject</span></span> {\n    a: <span class=\"hljs-built_in\">i32</span>,\n    <span class=\"hljs-comment\">// Other members...</span>\n}\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">callback</span></span>(target: *<span class=\"hljs-keyword\">mut</span> RustObject, a: <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I'm called from C with value {0}\"</span>, a);\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-comment\">// Update the value in RustObject with the value received from the callback:</span>\n        (*target).a = a;\n    }\n}\n\n<span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"extlib\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">register_callback</span></span>(target: *<span class=\"hljs-keyword\">mut</span> RustObject,\n                        cb: <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(*<span class=\"hljs-keyword\">mut</span> RustObject, <span class=\"hljs-built_in\">i32</span>)) -&gt; <span class=\"hljs-built_in\">i32</span>;\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">trigger_callback</span></span>();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Create the object that will be referenced in the callback:</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> rust_object = <span class=\"hljs-built_in\">Box</span>::new(RustObject { a: <span class=\"hljs-number\">5</span> });\n\n    <span class=\"hljs-keyword\">unsafe</span> {\n        register_callback(&amp;<span class=\"hljs-keyword\">mut</span> *rust_object, callback);\n        trigger_callback();\n    }\n}</code></pre></pre>\n<p>C code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-c hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-title\">void</span> <span class=\"hljs-params\">(*rust_callback)</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>*, <span class=\"hljs-keyword\">int32_t</span>)</span></span>;\n<span class=\"hljs-keyword\">void</span>* cb_target;\nrust_callback cb;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int32_t</span> <span class=\"hljs-title\">register_callback</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>* callback_target, rust_callback callback)</span> </span>{\n    cb_target = callback_target;\n    cb = callback;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">trigger_callback</span><span class=\"hljs-params\">()</span> </span>{\n  cb(cb_target, <span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// Will call callback(&amp;rustObject, 7) in Rust.</span>\n}\n</code></pre>\n<h2 id=\"asynchronous-callbacks\"><a class=\"header\" href=\"#asynchronous-callbacks\">Asynchronous callbacks</a></h2>\n<p>In the previously given examples the callbacks are invoked as a direct reaction\nto a function call to the external C library.\nThe control over the current thread is switched from Rust to C to Rust for the\nexecution of the callback, but in the end the callback is executed on the\nsame thread that called the function which triggered the callback.</p>\n<p>Things get more complicated when the external library spawns its own threads\nand invokes callbacks from there.\nIn these cases access to Rust data structures inside the callbacks is\nespecially unsafe and proper synchronization mechanisms must be used.\nBesides classical synchronization mechanisms like mutexes, one possibility in\nRust is to use channels (in <code class=\"hljs\">std::sync::mpsc</code>) to forward data from the C\nthread that invoked the callback into a Rust thread.</p>\n<p>If an asynchronous callback targets a special object in the Rust address space\nit is also absolutely necessary that no more callbacks are performed by the\nC library after the respective Rust object gets destroyed.\nThis can be achieved by unregistering the callback in the object's\ndestructor and designing the library in a way that guarantees that no\ncallback will be performed after deregistration.</p>\n<h2 id=\"linking\"><a class=\"header\" href=\"#linking\">Linking</a></h2>\n<p>The <code class=\"hljs\">link</code> attribute on <code class=\"hljs\">extern</code> blocks provides the basic building block for\ninstructing rustc how it will link to native libraries. There are two accepted\nforms of the link attribute today:</p>\n<ul>\n<li><code class=\"hljs\">#[link(name = \"foo\")]</code></li>\n<li><code class=\"hljs\">#[link(name = \"foo\", kind = \"bar\")]</code></li>\n</ul>\n<p>In both of these cases, <code class=\"hljs\">foo</code> is the name of the native library that we're\nlinking to, and in the second case <code class=\"hljs\">bar</code> is the type of native library that the\ncompiler is linking to. There are currently three known types of native\nlibraries:</p>\n<ul>\n<li>Dynamic - <code class=\"hljs\">#[link(name = \"readline\")]</code></li>\n<li>Static - <code class=\"hljs\">#[link(name = \"my_build_dependency\", kind = \"static\")]</code></li>\n<li>Frameworks - <code class=\"hljs\">#[link(name = \"CoreFoundation\", kind = \"framework\")]</code></li>\n</ul>\n<p>Note that frameworks are only available on macOS targets.</p>\n<p>The different <code class=\"hljs\">kind</code> values are meant to differentiate how the native library\nparticipates in linkage. From a linkage perspective, the Rust compiler creates\ntwo flavors of artifacts: partial (rlib/staticlib) and final (dylib/binary).\nNative dynamic library and framework dependencies are propagated to the final\nartifact boundary, while static library dependencies are not propagated at\nall, because the static libraries are integrated directly into the subsequent\nartifact.</p>\n<p>A few examples of how this model can be used are:</p>\n<ul>\n<li>\n<p>A native build dependency. Sometimes some C/C++ glue is needed when writing\nsome Rust code, but distribution of the C/C++ code in a library format is\na burden. In this case, the code will be archived into <code class=\"hljs\">libfoo.a</code> and then the\nRust crate would declare a dependency via <code class=\"hljs\">#[link(name = \"foo\", kind = \"static\")]</code>.</p>\n<p>Regardless of the flavor of output for the crate, the native static library\nwill be included in the output, meaning that distribution of the native static\nlibrary is not necessary.</p>\n</li>\n<li>\n<p>A normal dynamic dependency. Common system libraries (like <code class=\"hljs\">readline</code>) are\navailable on a large number of systems, and often a static copy of these\nlibraries cannot be found. When this dependency is included in a Rust crate,\npartial targets (like rlibs) will not link to the library, but when the rlib\nis included in a final target (like a binary), the native library will be\nlinked in.</p>\n</li>\n</ul>\n<p>On macOS, frameworks behave with the same semantics as a dynamic library.</p>\n<h2 id=\"unsafe-blocks\"><a class=\"header\" href=\"#unsafe-blocks\">Unsafe blocks</a></h2>\n<p>Some operations, like dereferencing raw pointers or calling functions that have been marked\nunsafe are only allowed inside unsafe blocks. Unsafe blocks isolate unsafety and are a promise to\nthe compiler that the unsafety does not leak out of the block.</p>\n<p>Unsafe functions, on the other hand, advertise it to the world. An unsafe function is written like\nthis:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">kaboom</span></span>(ptr: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> { *ptr }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This function can only be called from an <code class=\"hljs\">unsafe</code> block or another <code class=\"hljs\">unsafe</code> function.</p>\n<h2 id=\"accessing-foreign-globals\"><a class=\"header\" href=\"#accessing-foreign-globals\">Accessing foreign globals</a></h2>\n<p>Foreign APIs often export a global variable which could do something like track\nglobal state. In order to access these variables, you declare them in <code class=\"hljs\">extern</code>\nblocks with the <code class=\"hljs\">static</code> keyword:</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"readline\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-keyword\">static</span> rl_readline_version: libc::c_int;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You have readline version {} installed.\"</span>,\n             <span class=\"hljs-keyword\">unsafe</span> { rl_readline_version <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">i32</span> });\n}</code></pre>\n<p>Alternatively, you may need to alter global state provided by a foreign\ninterface. To do this, statics can be declared with <code class=\"hljs\">mut</code> so we can mutate\nthem.</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::ffi::CString;\n<span class=\"hljs-keyword\">use</span> std::ptr;\n\n<span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"readline\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">mut</span> rl_prompt: *<span class=\"hljs-keyword\">const</span> libc::c_char;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> prompt = CString::new(<span class=\"hljs-string\">\"[my-awesome-shell] $\"</span>).unwrap();\n    <span class=\"hljs-keyword\">unsafe</span> {\n        rl_prompt = prompt.as_ptr();\n\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, rl_prompt);\n\n        rl_prompt = ptr::null();\n    }\n}</code></pre>\n<p>Note that all interaction with a <code class=\"hljs\">static mut</code> is unsafe, both reading and\nwriting. Dealing with global mutable state requires a great deal of care.</p>\n<h2 id=\"foreign-calling-conventions\"><a class=\"header\" href=\"#foreign-calling-conventions\">Foreign calling conventions</a></h2>\n<p>Most foreign code exposes a C ABI, and Rust uses the platform's C calling convention by default when\ncalling foreign functions. Some foreign functions, most notably the Windows API, use other calling\nconventions. Rust provides a way to tell the compiler which convention to use:</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-meta\">#[cfg(all(target_os = <span class=\"hljs-meta-string\">\"win32\"</span>, target_arch = <span class=\"hljs-meta-string\">\"x86\"</span>))]</span>\n<span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"kernel32\"</span>)]</span>\n<span class=\"hljs-meta\">#[allow(non_snake_case)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"stdcall\"</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">SetEnvironmentVariableA</span></span>(n: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, v: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) -&gt; libc::c_int;\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() { }</span></code></pre>\n<p>This applies to the entire <code class=\"hljs\">extern</code> block. The list of supported ABI constraints\nare:</p>\n<ul>\n<li><code class=\"hljs\">stdcall</code></li>\n<li><code class=\"hljs\">aapcs</code></li>\n<li><code class=\"hljs\">cdecl</code></li>\n<li><code class=\"hljs\">fastcall</code></li>\n<li><code class=\"hljs\">thiscall</code></li>\n<li><code class=\"hljs\">vectorcall</code>\nThis is currently hidden behind the <code class=\"hljs\">abi_vectorcall</code> gate and is subject to change.</li>\n<li><code class=\"hljs\">Rust</code></li>\n<li><code class=\"hljs\">rust-intrinsic</code></li>\n<li><code class=\"hljs\">system</code></li>\n<li><code class=\"hljs\">C</code></li>\n<li><code class=\"hljs\">win64</code></li>\n<li><code class=\"hljs\">sysv64</code></li>\n</ul>\n<p>Most of the abis in this list are self-explanatory, but the <code class=\"hljs\">system</code> abi may\nseem a little odd. This constraint selects whatever the appropriate ABI is for\ninteroperating with the target's libraries. For example, on win32 with a x86\narchitecture, this means that the abi used would be <code class=\"hljs\">stdcall</code>. On x86_64,\nhowever, windows uses the <code class=\"hljs\">C</code> calling convention, so <code class=\"hljs\">C</code> would be used. This\nmeans that in our previous example, we could have used <code class=\"hljs\">extern \"system\" { ... }</code>\nto define a block for all windows systems, not only x86 ones.</p>\n<h2 id=\"interoperability-with-foreign-code\"><a class=\"header\" href=\"#interoperability-with-foreign-code\">Interoperability with foreign code</a></h2>\n<p>Rust guarantees that the layout of a <code class=\"hljs\">struct</code> is compatible with the platform's\nrepresentation in C only if the <code class=\"hljs\">#[repr(C)]</code> attribute is applied to it.\n<code class=\"hljs\">#[repr(C, packed)]</code> can be used to lay out struct members without padding.\n<code class=\"hljs\">#[repr(C)]</code> can also be applied to an enum.</p>\n<p>Rust's owned boxes (<code class=\"hljs\">Box&lt;T&gt;</code>) use non-nullable pointers as handles which point\nto the contained object. However, they should not be manually created because\nthey are managed by internal allocators. References can safely be assumed to be\nnon-nullable pointers directly to the type.  However, breaking the borrow\nchecking or mutability rules is not guaranteed to be safe, so prefer using raw\npointers (<code class=\"hljs\">*</code>) if that's needed because the compiler can't make as many\nassumptions about them.</p>\n<p>Vectors and strings share the same basic memory layout, and utilities are\navailable in the <code class=\"hljs\">vec</code> and <code class=\"hljs\">str</code> modules for working with C APIs. However,\nstrings are not terminated with <code class=\"hljs\">\\0</code>. If you need a NUL-terminated string for\ninteroperability with C, you should use the <code class=\"hljs\">CString</code> type in the <code class=\"hljs\">std::ffi</code>\nmodule.</p>\n<p>The <a href=\"https://crates.io/crates/libc\"><code class=\"hljs\">libc</code> crate on crates.io</a> includes type aliases and function\ndefinitions for the C standard library in the <code class=\"hljs\">libc</code> module, and Rust links\nagainst <code class=\"hljs\">libc</code> and <code class=\"hljs\">libm</code> by default.</p>\n<h2 id=\"variadic-functions\"><a class=\"header\" href=\"#variadic-functions\">Variadic functions</a></h2>\n<p>In C, functions can be 'variadic', meaning they accept a variable number of arguments. This can\nbe achieved in Rust by specifying <code class=\"hljs\">...</code> within the argument list of a foreign function declaration:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-no_run hljs\">extern {\n    fn foo(x: i32, ...);\n}\n\nfn main() {\n    unsafe {\n        foo(10, 20, 30, 40, 50);\n    }\n}\n</code></pre>\n<p>Normal Rust functions can <em>not</em> be variadic:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This will not compile</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(x: <span class=\"hljs-built_in\">i32</span>, ...) {}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"the-nullable-pointer-optimization\"><a class=\"header\" href=\"#the-nullable-pointer-optimization\">The \"nullable pointer optimization\"</a></h2>\n<p>Certain Rust types are defined to never be <code class=\"hljs\">null</code>. This includes references (<code class=\"hljs\">&amp;T</code>,\n<code class=\"hljs\">&amp;mut T</code>), boxes (<code class=\"hljs\">Box&lt;T&gt;</code>), and function pointers (<code class=\"hljs\">extern \"abi\" fn()</code>). When\ninterfacing with C, pointers that might be <code class=\"hljs\">null</code> are often used, which would seem to\nrequire some messy <code class=\"hljs\">transmute</code>s and/or unsafe code to handle conversions to/from Rust types.\nHowever, trying to construct/work with these invalid values <strong>is undefined behavior</strong>,\nso you should use the following workaround instead.</p>\n<p>As a special case, an <code class=\"hljs\">enum</code> is eligible for the \"nullable pointer optimization\" if it contains\nexactly two variants, one of which contains no data and the other contains a field of one of the\nnon-nullable types listed above.  This means no extra space is required for a discriminant; rather,\nthe empty variant is represented by putting a <code class=\"hljs\">null</code> value into the non-nullable field. This is\ncalled an \"optimization\", but unlike other optimizations it is guaranteed to apply to eligible\ntypes.</p>\n<p>The most common type that takes advantage of the nullable pointer optimization is <code class=\"hljs\">Option&lt;T&gt;</code>,\nwhere <code class=\"hljs\">None</code> corresponds to <code class=\"hljs\">null</code>. So <code class=\"hljs\">Option&lt;extern \"C\" fn(c_int) -&gt; c_int&gt;</code> is a correct way\nto represent a nullable function pointer using the C ABI (corresponding to the C type\n<code class=\"hljs\">int (*)(int)</code>).</p>\n<p>Here is a contrived example. Let's say some C library has a facility for registering a\ncallback, which gets called in certain situations. The callback is passed a function pointer\nand an integer and it is supposed to run the function with the integer as a parameter. So\nwe have function pointers flying across the FFI boundary in both directions.</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> libc::c_int;\n\n<span class=\"boring\"><span class=\"hljs-meta\">#[cfg(hidden)]</span>\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-comment\">/// Registers the callback.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">register</span></span>(cb: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(c_int) -&gt; c_int&gt;, c_int) -&gt; c_int&gt;);\n}\n<span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">register</span></span>(_: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(c_int) -&gt; c_int&gt;,\n</span><span class=\"boring\">                                           c_int) -&gt; c_int&gt;)\n</span><span class=\"boring\">{}\n</span>\n<span class=\"hljs-comment\">/// This fairly useless function receives a function pointer and an integer</span>\n<span class=\"hljs-comment\">/// from C, and returns the result of calling the function with the integer.</span>\n<span class=\"hljs-comment\">/// In case no function is provided, it squares the integer by default.</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">apply</span></span>(process: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(c_int) -&gt; c_int&gt;, int: c_int) -&gt; c_int {\n    <span class=\"hljs-keyword\">match</span> process {\n        <span class=\"hljs-literal\">Some</span>(f) =&gt; f(int),\n        <span class=\"hljs-literal\">None</span>    =&gt; int * int\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        register(<span class=\"hljs-literal\">Some</span>(apply));\n    }\n}</code></pre>\n<p>And the code on the C side looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-c hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> (*f)(<span class=\"hljs-keyword\">int</span> (*)(<span class=\"hljs-keyword\">int</span>), <span class=\"hljs-keyword\">int</span>))</span> </span>{\n    ...\n}\n</code></pre>\n<p>No <code class=\"hljs\">transmute</code> required!</p>\n<h2 id=\"ffi-and-unwinding\"><a class=\"header\" href=\"#ffi-and-unwinding\">FFI and unwinding</a></h2>\n<p>It’s important to be mindful of unwinding when working with FFI. Most\nABI strings come in two variants, one with an <code class=\"hljs\">-unwind</code> suffix and one without.\nThe <code class=\"hljs\">Rust</code> ABI always permits unwinding, so there is no <code class=\"hljs\">Rust-unwind</code> ABI.</p>\n<p>If you expect Rust <code class=\"hljs\">panic</code>s or foreign (e.g. C++) exceptions to cross an FFI\nboundary, that boundary must use the appropriate <code class=\"hljs\">-unwind</code> ABI string.\nConversely, if you do not expect unwinding to cross an ABI boundary, use one of\nthe non-<code class=\"hljs\">unwind</code> ABI strings.</p>\n<blockquote>\n<p>Note: Compiling with <code class=\"hljs\">panic=abort</code> will still cause <code class=\"hljs\">panic!</code> to immediately\nabort the process, regardless of which ABI is specified by the function that\n<code class=\"hljs\">panic</code>s.</p>\n</blockquote>\n<p>If an unwinding operation does encounter an ABI boundary that is\nnot permitted to unwind, the behavior depends on the source of the unwinding\n(Rust <code class=\"hljs\">panic</code> or a foreign exception):</p>\n<ul>\n<li><code class=\"hljs\">panic</code> will cause the process to safely abort.</li>\n<li>A foreign exception entering Rust will cause undefined behavior.</li>\n</ul>\n<p>Note that the interaction of <code class=\"hljs\">catch_unwind</code> with foreign exceptions <strong>is\nundefined</strong>, as is the interaction of <code class=\"hljs\">panic</code> with foreign exception-catching\nmechanisms (notably C++'s <code class=\"hljs\">try</code>/<code class=\"hljs\">catch</code>).</p>\n<h3 id=\"rust-panic-with-c-unwind\"><a class=\"header\" href=\"#rust-panic-with-c-unwind\">Rust <code>panic</code> with <code>\"C-unwind\"</code></a></h3>\n<!-- ignore: using unstable feature -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C-unwind\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>() {\n    <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Uh oh\"</span>);\n}</code></pre>\n<p>This function (when compiled with <code class=\"hljs\">panic=unwind</code>) is permitted to unwind C++\nstack frames.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">[Rust function with `catch_unwind`, which stops the unwinding]\n      |\n     ...\n      |\n[C++ frames]\n      |                           ^\n      | (calls)                   | (unwinding\n      v                           |  goes this\n[Rust function `example`]         |  way)\n      |                           |\n      +--- rust function panics --+\n</code></pre>\n<p>If the C++ frames have objects, their destructors will be called.</p>\n<h3 id=\"c-throw-with-c-unwind\"><a class=\"header\" href=\"#c-throw-with-c-unwind\">C++ <code>throw</code> with <code>\"C-unwind\"</code></a></h3>\n<!-- ignore: using unstable feature -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[link(...)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C-unwind\"</span> {\n    <span class=\"hljs-comment\">// A C++ function that may throw an exception</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">may_throw</span></span>();\n}\n\n<span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C-unwind\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">rust_passthrough</span></span>() {\n    <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">unsafe</span> { may_throw(); }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, &amp;b);\n}</code></pre>\n<p>A C++ function with a <code class=\"hljs\">try</code> block may invoke <code class=\"hljs\">rust_passthrough</code> and <code class=\"hljs\">catch</code> an\nexception thrown by <code class=\"hljs\">may_throw</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">[C++ function with `try` block that invokes `rust_passthrough`]\n      |\n     ...\n      |\n[Rust function `rust_passthrough`]\n      |                            ^\n      | (calls)                    | (unwinding\n      v                            |  goes this\n[C++ function `may_throw`]         |  way)\n      |                            |\n      +--- C++ function throws ----+\n</code></pre>\n<p>If <code class=\"hljs\">may_throw</code> does throw an exception, <code class=\"hljs\">b</code> will be dropped. Otherwise, <code class=\"hljs\">5</code>\nwill be printed.</p>\n<h3 id=\"panic-can-be-stopped-at-an-abi-boundary\"><a class=\"header\" href=\"#panic-can-be-stopped-at-an-abi-boundary\"><code>panic</code> can be stopped at an ABI boundary</a></h3>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">assert_nonzero</span></span>(input: <span class=\"hljs-built_in\">u32</span>) {\n    <span class=\"hljs-built_in\">assert!</span>(input != <span class=\"hljs-number\">0</span>)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If <code class=\"hljs\">assert_nonzero</code> is called with the argument <code class=\"hljs\">0</code>, the runtime is guaranteed\nto (safely) abort the process, whether or not compiled with <code class=\"hljs\">panic=abort</code>.</p>\n<h3 id=\"catching-panic-preemptively\"><a class=\"header\" href=\"#catching-panic-preemptively\">Catching <code>panic</code> preemptively</a></h3>\n<p>If you are writing Rust code that may panic, and you don't wish to abort the\nprocess if it panics, you must use <a href=\"../std/panic/fn.catch_unwind.html\"><code class=\"hljs\">catch_unwind</code></a>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">use</span> std::panic::catch_unwind;\n\n<span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">oh_no</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-keyword\">let</span> result = catch_unwind(|| {\n        <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Oops!\"</span>);\n    });\n    <span class=\"hljs-keyword\">match</span> result {\n        <span class=\"hljs-literal\">Ok</span>(_) =&gt; <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-number\">1</span>,\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</code></pre></pre>\n<p>Please note that <a href=\"../std/panic/fn.catch_unwind.html\"><code class=\"hljs\">catch_unwind</code></a> will only catch unwinding panics, not\nthose that abort the process. See the documentation of <a href=\"../std/panic/fn.catch_unwind.html\"><code class=\"hljs\">catch_unwind</code></a>\nfor more information.</p>\n<h2 id=\"representing-opaque-structs\"><a class=\"header\" href=\"#representing-opaque-structs\">Representing opaque structs</a></h2>\n<p>Sometimes, a C library wants to provide a pointer to something, but not let you know the internal details of the thing it wants.\nA stable and simple way is to use a <code class=\"hljs\">void *</code> argument:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-c hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *arg)</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *arg)</span></span>;\n</code></pre>\n<p>We can represent this in Rust with the <code class=\"hljs\">c_void</code> type:</p>\n<!-- ignore: requires libc crate -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(arg: *<span class=\"hljs-keyword\">mut</span> libc::c_void);\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(arg: *<span class=\"hljs-keyword\">mut</span> libc::c_void);\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<p>This is a perfectly valid way of handling the situation. However, we can do a bit\nbetter. To solve this, some C libraries will instead create a <code class=\"hljs\">struct</code>, where\nthe details and memory layout of the struct are private. This gives some amount\nof type safety. These structures are called ‘opaque’. Here’s an example, in C:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-c hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span>;</span> <span class=\"hljs-comment\">/* Foo is a structure, but its contents are not part of the public interface */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span>;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(struct Foo *arg)</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">(struct Bar *arg)</span></span>;\n</code></pre>\n<p>To do this in Rust, let’s create our own opaque types:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    _data: [<span class=\"hljs-built_in\">u8</span>; <span class=\"hljs-number\">0</span>],\n    _marker:\n        core::marker::PhantomData&lt;(*<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>, core::marker::PhantomPinned)&gt;,\n}\n<span class=\"hljs-meta\">#[repr(C)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span> {\n    _data: [<span class=\"hljs-built_in\">u8</span>; <span class=\"hljs-number\">0</span>],\n    _marker:\n        core::marker::PhantomData&lt;(*<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">u8</span>, core::marker::PhantomPinned)&gt;,\n}\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(arg: *<span class=\"hljs-keyword\">mut</span> Foo);\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(arg: *<span class=\"hljs-keyword\">mut</span> Bar);\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>By including at least one private field and no constructor,\nwe create an opaque type that we can't instantiate outside of this module.\n(A struct with no field could be instantiated by anyone.)\nWe also want to use this type in FFI, so we have to add <code class=\"hljs\">#[repr(C)]</code>.\nThe marker ensures the compiler does not mark the struct as <code class=\"hljs\">Send</code>, <code class=\"hljs\">Sync</code> and <code class=\"hljs\">Unpin</code> are\nnot applied to the struct. (<code class=\"hljs\">*mut u8</code> is not <code class=\"hljs\">Send</code> or <code class=\"hljs\">Sync</code>, <code class=\"hljs\">PhantomPinned</code> is not <code class=\"hljs\">Unpin</code>)</p>\n<p>But because our <code class=\"hljs\">Foo</code> and <code class=\"hljs\">Bar</code> types are\ndifferent, we’ll get type safety between the two of them, so we cannot\naccidentally pass a pointer to <code class=\"hljs\">Foo</code> to <code class=\"hljs\">bar()</code>.</p>\n<p>Notice that it is a really bad idea to use an empty enum as FFI type.\nThe compiler relies on empty enums being uninhabited, so handling values of type\n<code class=\"hljs\">&amp;Empty</code> is a huge footgun and can lead to buggy program behavior (by triggering\nundefined behavior).</p>\n<blockquote>\n<p><strong>NOTE:</strong> The simplest way would use \"extern types\".\nBut it's currently (as of June 2021) unstable and has some unresolved questions, see the <a href=\"https://rust-lang.github.io/rfcs/1861-extern-types.html\">RFC page</a> and the <a href=\"https://github.com/rust-lang/rust/issues/43467\">tracking issue</a> for more details.</p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"beneath-std\"><a class=\"header\" href=\"#beneath-std\">Beneath <code>std</code></a></h1>\n<p>This section documents features that are normally provided by the <code class=\"hljs\">std</code> crate and\nthat <code class=\"hljs\">#![no_std]</code> developers have to deal with (i.e. provide) to build\n<code class=\"hljs\">#![no_std]</code> binary crates.</p>\n<h2 id=\"using-libc\"><a class=\"header\" href=\"#using-libc\">Using <code>libc</code></a></h2>\n<p>In order to build a <code class=\"hljs\">#[no_std]</code> executable we will need <code class=\"hljs\">libc</code> as a dependency.\nWe can specify this using our <code class=\"hljs\">Cargo.toml</code> file:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">libc</span> = { version = <span class=\"hljs-string\">\"0.2.146\"</span>, default-features = <span class=\"hljs-literal\">false</span> }\n</code></pre>\n<p>Note that the default features have been disabled. This is a critical step -\n<strong>the default features of <code class=\"hljs\">libc</code> include the <code class=\"hljs\">std</code> crate and so must be\ndisabled.</strong></p>\n<p>Alternatively, we can use the unstable <code class=\"hljs\">rustc_private</code> private feature together\nwith an <code class=\"hljs\">extern crate libc;</code> declaration as shown in the examples below. Note that\nwindows-msvc targets do not require a libc, and correspondingly there is no <code class=\"hljs\">libc</code>\ncrate in their sysroot. We do not need the <code class=\"hljs\">extern crate libc;</code> below, and having it\non a windows-msvc target would be a compile error.</p>\n<h2 id=\"writing-an-executable-without-std\"><a class=\"header\" href=\"#writing-an-executable-without-std\">Writing an executable without <code>std</code></a></h2>\n<p>We will probably need a nightly version of the compiler to produce\na <code class=\"hljs\">#![no_std]</code> executable because on many platforms, we have to provide the\n<code class=\"hljs\">eh_personality</code> <a href=\"https://doc.rust-lang.org/nightly/unstable-book/language-features/lang-items.html\">lang item</a>, which is unstable.</p>\n<p>Controlling the entry point is possible in two ways: the <code class=\"hljs\">#[start]</code> attribute,\nor overriding the default shim for the C <code class=\"hljs\">main</code> function with your own.\nAdditionally, it's required to define a <a href=\"panic-handler.html\">panic handler function</a>.</p>\n<p>The function marked <code class=\"hljs\">#[start]</code> is passed the command line parameters\nin the same format as C (aside from the exact integer types being used):</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-meta\">#![feature(start, lang_items, core_intrinsics, rustc_private)]</span>\n<span class=\"hljs-meta\">#![allow(internal_features)]</span>\n<span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"hljs-comment\">// Necessary for `panic = \"unwind\"` builds on cfg(unix) platforms.</span>\n<span class=\"hljs-meta\">#![feature(panic_unwind)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> unwind;\n\n<span class=\"hljs-comment\">// Pull in the system libc library for what crt0.o likely requires.</span>\n<span class=\"hljs-meta\">#[cfg(not(windows))]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> libc;\n\n<span class=\"hljs-keyword\">use</span> core::panic::PanicInfo;\n\n<span class=\"hljs-comment\">// Entry point for this program.</span>\n<span class=\"hljs-meta\">#[start]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>(_argc: <span class=\"hljs-built_in\">isize</span>, _argv: *<span class=\"hljs-keyword\">const</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) -&gt; <span class=\"hljs-built_in\">isize</span> {\n    <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-comment\">// These functions are used by the compiler, but not for an empty program like this.</span>\n<span class=\"hljs-comment\">// They are normally provided by `std`.</span>\n<span class=\"hljs-meta\">#[lang = <span class=\"hljs-meta-string\">\"eh_personality\"</span>]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">rust_eh_personality</span></span>() {}\n<span class=\"hljs-meta\">#[panic_handler]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">panic_handler</span></span>(_info: &amp;PanicInfo) -&gt; ! { core::intrinsics::abort() }</code></pre></pre>\n<p>To override the compiler-inserted <code class=\"hljs\">main</code> shim, we have to disable it\nwith <code class=\"hljs\">#![no_main]</code> and then create the appropriate symbol with the\ncorrect ABI and the correct name, which requires overriding the\ncompiler's name mangling too:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-meta\">#![feature(lang_items, core_intrinsics, rustc_private)]</span>\n<span class=\"hljs-meta\">#![allow(internal_features)]</span>\n<span class=\"hljs-meta\">#![no_std]</span>\n<span class=\"hljs-meta\">#![no_main]</span>\n\n<span class=\"hljs-comment\">// Necessary for `panic = \"unwind\"` builds on cfg(unix) platforms.</span>\n<span class=\"hljs-meta\">#![feature(panic_unwind)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> unwind;\n\n<span class=\"hljs-comment\">// Pull in the system libc library for what crt0.o likely requires.</span>\n<span class=\"hljs-meta\">#[cfg(not(windows))]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> libc;\n\n<span class=\"hljs-keyword\">use</span> core::ffi::{c_char, c_int};\n<span class=\"hljs-keyword\">use</span> core::panic::PanicInfo;\n\n<span class=\"hljs-comment\">// Entry point for this program.</span>\n<span class=\"hljs-meta\">#[no_mangle]</span> <span class=\"hljs-comment\">// ensure that this symbol is included in the output as `main`</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>(_argc: c_int, _argv: *<span class=\"hljs-keyword\">const</span> *<span class=\"hljs-keyword\">const</span> c_char) -&gt; c_int {\n    <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-comment\">// These functions are used by the compiler, but not for an empty program like this.</span>\n<span class=\"hljs-comment\">// They are normally provided by `std`.</span>\n<span class=\"hljs-meta\">#[lang = <span class=\"hljs-meta-string\">\"eh_personality\"</span>]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">rust_eh_personality</span></span>() {}\n<span class=\"hljs-meta\">#[panic_handler]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">panic_handler</span></span>(_info: &amp;PanicInfo) -&gt; ! { core::intrinsics::abort() }</code></pre></pre>\n<p>If you are working with a target that doesn't have binary releases of the\nstandard library available via rustup (this probably means you are building the\n<code class=\"hljs\">core</code> crate yourself) and need compiler-rt intrinsics (i.e. you are probably\ngetting linker errors when building an executable:\n<code class=\"hljs\">undefined reference to `__aeabi_memcpy'</code>), you need to manually link to the\n<a href=\"https://crates.io/crates/compiler_builtins\"><code class=\"hljs\">compiler_builtins</code> crate</a> to get those intrinsics and solve the linker errors.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"panic_handler\"><a class=\"header\" href=\"#panic_handler\">#[panic_handler]</a></h1>\n<p><code class=\"hljs\">#[panic_handler]</code> is used to define the behavior of <code class=\"hljs\">panic!</code> in <code class=\"hljs\">#![no_std]</code> applications.\nThe <code class=\"hljs\">#[panic_handler]</code> attribute must be applied to a function with signature <code class=\"hljs\">fn(&amp;PanicInfo) -&gt; !</code> and such function must appear <em>once</em> in the dependency graph of a binary / dylib / cdylib\ncrate. The API of <code class=\"hljs\">PanicInfo</code> can be found in the <a href=\"../core/panic/struct.PanicInfo.html\">API docs</a>.</p>\n<p>Given that <code class=\"hljs\">#![no_std]</code> applications have no <em>standard</em> output and that some <code class=\"hljs\">#![no_std]</code>\napplications, e.g. embedded applications, need different panicking behaviors for development and for\nrelease it can be helpful to have panic crates, crate that only contain a <code class=\"hljs\">#[panic_handler]</code>.\nThis way applications can easily swap the panicking behavior by simply linking to a different panic\ncrate.</p>\n<p>Below is shown an example where an application has a different panicking behavior depending on\nwhether is compiled using the dev profile (<code class=\"hljs\">cargo build</code>) or using the release profile (<code class=\"hljs\">cargo build --release</code>).</p>\n<p><code class=\"hljs\">panic-semihosting</code> crate -- log panic messages to the host stderr using semihosting:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"hljs-keyword\">use</span> core::fmt::{Write, <span class=\"hljs-keyword\">self</span>};\n<span class=\"hljs-keyword\">use</span> core::panic::PanicInfo;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">HStderr</span></span> {\n    <span class=\"hljs-comment\">// ..</span>\n<span class=\"boring\">    _0: (),\n</span>}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> HStderr {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; HStderr { HStderr { _0: () } }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> fmt::Write <span class=\"hljs-keyword\">for</span> HStderr {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_str</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, _: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; fmt::<span class=\"hljs-built_in\">Result</span> { <span class=\"hljs-literal\">Ok</span>(()) }\n</span><span class=\"boring\">}\n</span>\n<span class=\"hljs-meta\">#[panic_handler]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">panic</span></span>(info: &amp;PanicInfo) -&gt; ! {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> host_stderr = HStderr::new();\n\n    <span class=\"hljs-comment\">// logs \"panicked at '$reason', src/main.rs:27:4\" to the host stderr</span>\n    <span class=\"hljs-built_in\">writeln!</span>(host_stderr, <span class=\"hljs-string\">\"{}\"</span>, info).ok();\n\n    <span class=\"hljs-keyword\">loop</span> {}\n}</code></pre>\n<p><code class=\"hljs\">panic-halt</code> crate -- halt the thread on panic; messages are discarded:</p>\n<!-- ignore: simplified code -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"hljs-keyword\">use</span> core::panic::PanicInfo;\n\n<span class=\"hljs-meta\">#[panic_handler]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">panic</span></span>(_info: &amp;PanicInfo) -&gt; ! {\n    <span class=\"hljs-keyword\">loop</span> {}\n}</code></pre>\n<p><code class=\"hljs\">app</code> crate:</p>\n<!-- ignore: requires the above crates -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"hljs-comment\">// dev profile</span>\n<span class=\"hljs-meta\">#[cfg(debug_assertions)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> panic_semihosting;\n\n<span class=\"hljs-comment\">// release profile</span>\n<span class=\"hljs-meta\">#[cfg(not(debug_assertions))]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> panic_halt;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// ..</span>\n}</code></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n        <script>\n        window.addEventListener('load', function() {\n            window.setTimeout(window.print, 100);\n        });\n        </script>\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:14:16.611Z"
}