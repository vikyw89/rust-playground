{
	"title": "Request in std::error - Rust",
	"url": "https://doc.rust-lang.org/stable/std/error/struct.Request.html",
	"markdown": "# Request in std::error - Rust\n\n```\npub struct Request<'a>(/* private fields */);\n```\n\nðŸ”¬This is a nightly-only experimental API. (`error_generic_member_access`Â [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nExpand description\n\n`Request` supports generic, type-driven access to data. Its use is currently restricted to the standard library in cases where trait authors wish to allow trait implementors to share generic information across trait boundaries. The motivating and prototypical use case is `core::error::Error` which would otherwise require a method per concrete type (eg. `std::backtrace::Backtrace` instance that implementors want to expose to users).\n\n## [Â§](#data-flow)Data flow\n\nTo describe the intended data flow for Request objects, letâ€™s consider two conceptual users separated by API boundaries:\n\n-   Consumer - the consumer requests objects using a Request instance; eg a crate that offers fancy `Error`/`Result` reporting to users wants to request a Backtrace from a given `dyn Error`.\n    \n-   Producer - the producer provides objects when requested via Request; eg. a library with an an `Error` implementation that automatically captures backtraces at the time instances are created.\n    \n\nThe consumer only needs to know where to submit their request and are expected to handle the request not being fulfilled by the use of `Option<T>` in the responses offered by the producer.\n\n-   A Producer initializes the value of one of its fields of a specific type. (or is otherwise prepared to generate a value requested). eg, `backtrace::Backtrace` or `std::backtrace::Backtrace`\n-   A Consumer requests an object of a specific type (say `std::backtrace::Backtrace`). In the case of a `dyn Error` trait object (the Producer), there are functions called `request_ref` and `request_value` to simplify obtaining an `Option<T>` for a given type.\n-   The Producer, when requested, populates the given Request object which is given as a mutable reference.\n-   The Consumer extracts a value or reference to the requested type from the `Request` object wrapped in an `Option<T>`; in the case of `dyn Error` the aforementioned `request_ref` and `request_value` methods mean that `dyn Error` users donâ€™t have to deal with the `Request` type at all (but `Error` implementors do). The `None` case of the `Option` suggests only that the Producer cannot currently offer an instance of the requested type, not it canâ€™t or never will.\n\n## [Â§](#examples)Examples\n\nThe best way to demonstrate this is using an example implementation of `Error`â€™s `provide` trait method:\n\n```\n#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\nuse core::fmt;\nuse core::error::Request;\nuse core::error::request_ref;\n\n#[derive(Debug)]\nenum MyLittleTeaPot {\n    Empty,\n}\n\n#[derive(Debug)]\nstruct MyBacktrace {\n    // ...\n}\n\nimpl MyBacktrace {\n    fn new() -> MyBacktrace {\n        // ...\n    }\n}\n\n#[derive(Debug)]\nstruct Error {\n    backtrace: MyBacktrace,\n}\n\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"Example Error\")\n    }\n}\n\nimpl std::error::Error for Error {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        request\n            .provide_ref::<MyBacktrace>(&self.backtrace);\n    }\n}\n\nfn main() {\n    let backtrace = MyBacktrace::new();\n    let error = Error { backtrace };\n    let dyn_error = &error as &dyn std::error::Error;\n    let backtrace_ref = request_ref::<MyBacktrace>(dyn_error).unwrap();\n\n    assert!(core::ptr::eq(&error.backtrace, backtrace_ref));\n    assert!(request_ref::<MyLittleTeaPot>(dyn_error).is_none());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0Ause+core::fmt;%0Ause+core::error::Request;%0Ause+core::error::request_ref;%0A%0A%23%5Bderive(Debug)%5D%0Aenum+MyLittleTeaPot+%7B%0A++++Empty,%0A%7D%0A%0A%23%5Bderive(Debug)%5D%0Astruct+MyBacktrace+%7B%0A++++//+...%0A%7D%0A%0Aimpl+MyBacktrace+%7B%0A++++fn+new()+-%3E+MyBacktrace+%7B%0A++++++++//+...%0AMyBacktrace+%7B%7D%0A++++%7D%0A%7D%0A%0A%23%5Bderive(Debug)%5D%0Astruct+Error+%7B%0A++++backtrace:+MyBacktrace,%0A%7D%0A%0Aimpl+fmt::Display+for+Error+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22Example+Error%22)%0A++++%7D%0A%7D%0A%0Aimpl+std::error::Error+for+Error+%7B%0A++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++request%0A++++++++++++.provide_ref::%3CMyBacktrace%3E(%26self.backtrace);%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+backtrace+=+MyBacktrace::new();%0A++++let+error+=+Error+%7B+backtrace+%7D;%0A++++let+dyn_error+=+%26error+as+%26dyn+std::error::Error;%0A++++let+backtrace_ref+=+request_ref::%3CMyBacktrace%3E(dyn_error).unwrap();%0A%0A++++assert!(core::ptr::eq(%26error.backtrace,+backtrace_ref));%0A++++assert!(request_ref::%3CMyLittleTeaPot%3E(dyn_error).is_none());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#516)[Â§](#impl-Request%3C'a%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#552-554)\n\nðŸ”¬This is a nightly-only experimental API. (`error_generic_member_access`Â [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nProvide a value or other type with only static lifetimes.\n\n##### [Â§](#examples-1)Examples\n\nProvides an `u8`.\n\n```\n#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\nuse core::error::Request;\n\n#[derive(Debug)]\nstruct SomeConcreteType { field: u8 }\n\nimpl std::fmt::Display for SomeConcreteType {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{} failed\", self.field)\n    }\n}\n\nimpl std::error::Error for SomeConcreteType {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        request.provide_value::<u8>(self.field);\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SomeConcreteType+%7B+field:+u8+%7D%0A++++%0A++++impl+std::fmt::Display+for+SomeConcreteType+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C%27_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed%22,+self.field)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+SomeConcreteType+%7B%0A++++++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++++++request.provide_value::%3Cu8%3E(self.field);%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#587-589)\n\nðŸ”¬This is a nightly-only experimental API. (`error_generic_member_access`Â [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nProvide a value or other type with only static lifetimes computed using a closure.\n\n##### [Â§](#examples-2)Examples\n\nProvides a `String` by cloning.\n\n```\n#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\nuse core::error::Request;\n\n#[derive(Debug)]\nstruct SomeConcreteType { field: String }\n\nimpl std::fmt::Display for SomeConcreteType {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{} failed\", self.field)\n    }\n}\n\nimpl std::error::Error for SomeConcreteType {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        request.provide_value_with::<String>(|| self.field.clone());\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SomeConcreteType+%7B+field:+String+%7D%0A++++%0A++++impl+std::fmt::Display+for+SomeConcreteType+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C%27_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed%22,+self.field)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+SomeConcreteType+%7B%0A++++++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++++++request.provide_value_with::%3CString%3E(%7C%7C+self.field.clone());%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#623)\n\nðŸ”¬This is a nightly-only experimental API. (`error_generic_member_access`Â [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nProvide a reference. The referee type must be bounded by `'static`, but may be unsized.\n\n##### [Â§](#examples-3)Examples\n\nProvides a reference to a field as a `&str`.\n\n```\n#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\nuse core::error::Request;\n\n#[derive(Debug)]\nstruct SomeConcreteType { field: String }\n\nimpl std::fmt::Display for SomeConcreteType {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{} failed\", self.field)\n    }\n}\n\nimpl std::error::Error for SomeConcreteType {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        request.provide_ref::<str>(&self.field);\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SomeConcreteType+%7B+field:+String+%7D%0A++++%0A++++impl+std::fmt::Display+for+SomeConcreteType+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C%27_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed%22,+self.field)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+SomeConcreteType+%7B%0A++++++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++++++request.provide_ref::%3Cstr%3E(%26self.field);%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#663-666)\n\nðŸ”¬This is a nightly-only experimental API. (`error_generic_member_access`Â [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nProvide a reference computed using a closure. The referee type must be bounded by `'static`, but may be unsized.\n\n##### [Â§](#examples-4)Examples\n\nProvides a reference to a field as a `&str`.\n\n```\n#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\nuse core::error::Request;\n\n#[derive(Debug)]\nstruct SomeConcreteType { business: String, party: String }\nfn today_is_a_weekday() -> bool { true }\n\nimpl std::fmt::Display for SomeConcreteType {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{} failed\", self.business)\n    }\n}\n\nimpl std::error::Error for SomeConcreteType {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        request.provide_ref_with::<str>(|| {\n            if today_is_a_weekday() {\n                &self.business\n            } else {\n                &self.party\n            }\n        });\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SomeConcreteType+%7B+business:+String,+party:+String+%7D%0A++++fn+today_is_a_weekday()+-%3E+bool+%7B+true+%7D%0A++++%0A++++impl+std::fmt::Display+for+SomeConcreteType+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C%27_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed%22,+self.business)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+SomeConcreteType+%7B%0A++++++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++++++request.provide_ref_with::%3Cstr%3E(%7C%7C+%7B%0A++++++++++++++++if+today_is_a_weekday()+%7B%0A++++++++++++++++++++%26self.business%0A++++++++++++++++%7D+else+%7B%0A++++++++++++++++++++%26self.party%0A++++++++++++++++%7D%0A++++++++++++%7D);%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#773-775)\n\nðŸ”¬This is a nightly-only experimental API. (`error_generic_member_access`Â [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nCheck if the `Request` would be satisfied if provided with a value of the specified type. If the type does not match or has already been provided, returns false.\n\n##### [Â§](#examples-5)Examples\n\nCheck if an `u8` still needs to be provided and then provides it.\n\n```\n#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\nuse core::error::Request;\nuse core::error::request_value;\n\n#[derive(Debug)]\nstruct Parent(Option<u8>);\n\nimpl std::fmt::Display for Parent {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"a parent failed\")\n    }\n}\n\nimpl std::error::Error for Parent {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        if let Some(v) = self.0 {\n            request.provide_value::<u8>(v);\n        }\n    }\n}\n\n#[derive(Debug)]\nstruct Child {\n    parent: Parent,\n}\n\nimpl Child {\n    // Pretend that this takes a lot of resources to evaluate.\n    fn an_expensive_computation(&self) -> Option<u8> {\n        Some(99)\n    }\n}\n\nimpl std::fmt::Display for Child {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"child failed: \\n  because of parent: {}\", self.parent)\n    }\n}\n\nimpl std::error::Error for Child {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        // In general, we don't know if this call will provide\n        // an `u8` value or not...\n        self.parent.provide(request);\n\n        // ...so we check to see if the `u8` is needed before\n        // we run our expensive computation.\n        if request.would_be_satisfied_by_value_of::<u8>() {\n            if let Some(v) = self.an_expensive_computation() {\n                request.provide_value::<u8>(v);\n            }\n        }\n\n        // The request will be satisfied now, regardless of if\n        // the parent provided the value or we did.\n        assert!(!request.would_be_satisfied_by_value_of::<u8>());\n    }\n}\n\nlet parent = Parent(Some(42));\nlet child = Child { parent };\nassert_eq!(Some(42), request_value::<u8>(&child));\n\nlet parent = Parent(None);\nlet child = Child { parent };\nassert_eq!(Some(99), request_value::<u8>(&child));\n\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++use+core::error::request_value;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+Parent(Option%3Cu8%3E);%0A++++%0A++++impl+std::fmt::Display+for+Parent+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C%27_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22a+parent+failed%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+Parent+%7B%0A++++++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++++++if+let+Some(v)+=+self.0+%7B%0A++++++++++++++++request.provide_value::%3Cu8%3E(v);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+Child+%7B%0A++++++++parent:+Parent,%0A++++%7D%0A++++%0A++++impl+Child+%7B%0A++++++++//+Pretend+that+this+takes+a+lot+of+resources+to+evaluate.%0A++++++++fn+an_expensive_computation(%26self)+-%3E+Option%3Cu8%3E+%7B%0A++++++++++++Some(99)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::fmt::Display+for+Child+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C%27_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22child+failed:+%5Cn++because+of+parent:+%7B%7D%22,+self.parent)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+Child+%7B%0A++++++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++++++//+In+general,+we+don%27t+know+if+this+call+will+provide%0A++++++++++++//+an+%60u8%60+value+or+not...%0A++++++++++++self.parent.provide(request);%0A++++%0A++++++++++++//+...so+we+check+to+see+if+the+%60u8%60+is+needed+before%0A++++++++++++//+we+run+our+expensive+computation.%0A++++++++++++if+request.would_be_satisfied_by_value_of::%3Cu8%3E()+%7B%0A++++++++++++++++if+let+Some(v)+=+self.an_expensive_computation()+%7B%0A++++++++++++++++++++request.provide_value::%3Cu8%3E(v);%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++%0A++++++++++++//+The+request+will+be+satisfied+now,+regardless+of+if%0A++++++++++++//+the+parent+provided+the+value+or+we+did.%0A++++++++++++assert!(!request.would_be_satisfied_by_value_of::%3Cu8%3E());%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+parent+=+Parent(Some(42));%0A++++let+child+=+Child+%7B+parent+%7D;%0A++++assert_eq!(Some(42),+request_value::%3Cu8%3E(%26child));%0A++++%0A++++let+parent+=+Parent(None);%0A++++let+child+=+Child+%7B+parent+%7D;%0A++++assert_eq!(Some(99),+request_value::%3Cu8%3E(%26child));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#861-863)\n\nðŸ”¬This is a nightly-only experimental API. (`error_generic_member_access`Â [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nCheck if the `Request` would be satisfied if provided with a reference to a value of the specified type. If the type does not match or has already been provided, returns false.\n\n##### [Â§](#examples-6)Examples\n\nCheck if a `&str` still needs to be provided and then provides it.\n\n```\n#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\nuse core::error::Request;\nuse core::error::request_ref;\n\n#[derive(Debug)]\nstruct Parent(Option<String>);\n\nimpl std::fmt::Display for Parent {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"a parent failed\")\n    }\n}\n\nimpl std::error::Error for Parent {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        if let Some(v) = &self.0 {\n            request.provide_ref::<str>(v);\n        }\n    }\n}\n\n#[derive(Debug)]\nstruct Child {\n    parent: Parent,\n    name: String,\n}\n\nimpl Child {\n    // Pretend that this takes a lot of resources to evaluate.\n    fn an_expensive_computation(&self) -> Option<&str> {\n        Some(&self.name)\n    }\n}\n\nimpl std::fmt::Display for Child {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{} failed: \\n  {}\", self.name, self.parent)\n    }\n}\n\nimpl std::error::Error for Child {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        // In general, we don't know if this call will provide\n        // a `str` reference or not...\n        self.parent.provide(request);\n\n        // ...so we check to see if the `&str` is needed before\n        // we run our expensive computation.\n        if request.would_be_satisfied_by_ref_of::<str>() {\n            if let Some(v) = self.an_expensive_computation() {\n                request.provide_ref::<str>(v);\n            }\n        }\n\n        // The request will be satisfied now, regardless of if\n        // the parent provided the reference or we did.\n        assert!(!request.would_be_satisfied_by_ref_of::<str>());\n    }\n}\n\nlet parent = Parent(Some(\"parent\".into()));\nlet child = Child { parent, name: \"child\".into() };\nassert_eq!(Some(\"parent\"), request_ref::<str>(&child));\n\nlet parent = Parent(None);\nlet child = Child { parent, name: \"child\".into() };\nassert_eq!(Some(\"child\"), request_ref::<str>(&child));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++use+core::error::request_ref;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+Parent(Option%3CString%3E);%0A++++%0A++++impl+std::fmt::Display+for+Parent+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C%27_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22a+parent+failed%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+Parent+%7B%0A++++++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++++++if+let+Some(v)+=+%26self.0+%7B%0A++++++++++++++++request.provide_ref::%3Cstr%3E(v);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+Child+%7B%0A++++++++parent:+Parent,%0A++++++++name:+String,%0A++++%7D%0A++++%0A++++impl+Child+%7B%0A++++++++//+Pretend+that+this+takes+a+lot+of+resources+to+evaluate.%0A++++++++fn+an_expensive_computation(%26self)+-%3E+Option%3C%26str%3E+%7B%0A++++++++++++Some(%26self.name)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::fmt::Display+for+Child+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C%27_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed:+%5Cn++%7B%7D%22,+self.name,+self.parent)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+Child+%7B%0A++++++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++++++//+In+general,+we+don%27t+know+if+this+call+will+provide%0A++++++++++++//+a+%60str%60+reference+or+not...%0A++++++++++++self.parent.provide(request);%0A++++%0A++++++++++++//+...so+we+check+to+see+if+the+%60%26str%60+is+needed+before%0A++++++++++++//+we+run+our+expensive+computation.%0A++++++++++++if+request.would_be_satisfied_by_ref_of::%3Cstr%3E()+%7B%0A++++++++++++++++if+let+Some(v)+=+self.an_expensive_computation()+%7B%0A++++++++++++++++++++request.provide_ref::%3Cstr%3E(v);%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++%0A++++++++++++//+The+request+will+be+satisfied+now,+regardless+of+if%0A++++++++++++//+the+parent+provided+the+reference+or+we+did.%0A++++++++++++assert!(!request.would_be_satisfied_by_ref_of::%3Cstr%3E());%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+parent+=+Parent(Some(%22parent%22.into()));%0A++++let+child+=+Child+%7B+parent,+name:+%22child%22.into()+%7D;%0A++++assert_eq!(Some(%22parent%22),+request_ref::%3Cstr%3E(%26child));%0A++++%0A++++let+parent+=+Parent(None);%0A++++let+child+=+Child+%7B+parent,+name:+%22child%22.into()+%7D;%0A++++assert_eq!(Some(%22child%22),+request_ref::%3Cstr%3E(%26child));%0A%7D&version=nightly&edition=2021)\n\n[Â§](#impl-Freeze-for-Request%3C'a%3E)\n\n[Â§](#impl-RefUnwindSafe-for-Request%3C'a%3E)\n\n[Â§](#impl-Send-for-Request%3C'a%3E)\n\n[Â§](#impl-Sized-for-Request%3C'a%3E)\n\n[Â§](#impl-Sync-for-Request%3C'a%3E)\n\n[Â§](#impl-Unpin-for-Request%3C'a%3E)\n\n[Â§](#impl-UnwindSafe-for-Request%3C'a%3E)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"`Request` supports generic, type-driven access to data. Its use is currently restricted to the standard library in cases where trait authors wish to allow trait implementors to share generic information across trait boundaries. The motivating and prototypical use case is `core::error::Error` which would otherwise require a method per concrete type (eg. `std::backtrace::Backtrace` instance that implementors want to expose to users).\"><title>Request in std::error - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Request</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Request</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.provide_ref\">provide_ref</a></li><li><a href=\"#method.provide_ref_with\">provide_ref_with</a></li><li><a href=\"#method.provide_value\">provide_value</a></li><li><a href=\"#method.provide_value_with\">provide_value_with</a></li><li><a href=\"#method.would_be_satisfied_by_ref_of\">would_be_satisfied_by_ref_of</a></li><li><a href=\"#method.would_be_satisfied_by_value_of\">would_be_satisfied_by_value_of</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-Request%3C'a%3E\">Debug</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Request%3C'a%3E\">!Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Request%3C'a%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Request%3C'a%3E\">!Send</a></li><li><a href=\"#impl-Sized-for-Request%3C'a%3E\">!Sized</a></li><li><a href=\"#impl-Sync-for-Request%3C'a%3E\">!Sync</a></li><li><a href=\"#impl-Unpin-for-Request%3C'a%3E\">!Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Request%3C'a%3E\">!UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::error</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Report.html\">Report</a></li><li><a href=\"struct.Request.html\">Request</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Error.html\">Error</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.request_ref.html\">request_ref</a></li><li><a href=\"fn.request_value.html\">request_value</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">error</a>::<wbr><a class=\"struct\" href=\"#\">Request</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#514\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Request&lt;'a&gt;(<span class=\"comment\">/* private fields */</span>);</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p><code>Request</code> supports generic, type-driven access to data. Its use is currently restricted to the\nstandard library in cases where trait authors wish to allow trait implementors to share generic\ninformation across trait boundaries. The motivating and prototypical use case is\n<code>core::error::Error</code> which would otherwise require a method per concrete type (eg.\n<code>std::backtrace::Backtrace</code> instance that implementors want to expose to users).</p>\n<h2 id=\"data-flow\"><a class=\"doc-anchor\" href=\"#data-flow\">Â§</a>Data flow</h2>\n<p>To describe the intended data flow for Request objects, letâ€™s consider two conceptual users\nseparated by API boundaries:</p>\n<ul>\n<li>\n<p>Consumer - the consumer requests objects using a Request instance; eg a crate that offers\nfancy <code>Error</code>/<code>Result</code> reporting to users wants to request a Backtrace from a given <code>dyn Error</code>.</p>\n</li>\n<li>\n<p>Producer - the producer provides objects when requested via Request; eg. a library with an\nan <code>Error</code> implementation that automatically captures backtraces at the time instances are\ncreated.</p>\n</li>\n</ul>\n<p>The consumer only needs to know where to submit their request and are expected to handle the\nrequest not being fulfilled by the use of <code>Option&lt;T&gt;</code> in the responses offered by the producer.</p>\n<ul>\n<li>A Producer initializes the value of one of its fields of a specific type. (or is otherwise\nprepared to generate a value requested). eg, <code>backtrace::Backtrace</code> or\n<code>std::backtrace::Backtrace</code></li>\n<li>A Consumer requests an object of a specific type (say <code>std::backtrace::Backtrace</code>). In the\ncase of a <code>dyn Error</code> trait object (the Producer), there are functions called <code>request_ref</code> and\n<code>request_value</code> to simplify obtaining an <code>Option&lt;T&gt;</code> for a given type.</li>\n<li>The Producer, when requested, populates the given Request object which is given as a mutable\nreference.</li>\n<li>The Consumer extracts a value or reference to the requested type from the <code>Request</code> object\nwrapped in an <code>Option&lt;T&gt;</code>; in the case of <code>dyn Error</code> the aforementioned <code>request_ref</code> and <code> request_value</code> methods mean that <code>dyn Error</code> users donâ€™t have to deal with the <code>Request</code> type at\nall (but <code>Error</code> implementors do). The <code>None</code> case of the <code>Option</code> suggests only that the\nProducer cannot currently offer an instance of the requested type, not it canâ€™t or never will.</li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<p>The best way to demonstrate this is using an example implementation of <code>Error</code>â€™s <code>provide</code> trait\nmethod:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n</span><span class=\"kw\">use </span>core::fmt;\n<span class=\"kw\">use </span>core::error::Request;\n<span class=\"kw\">use </span>core::error::request_ref;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">enum </span>MyLittleTeaPot {\n    Empty,\n}\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>MyBacktrace {\n    <span class=\"comment\">// ...\n</span>}\n\n<span class=\"kw\">impl </span>MyBacktrace {\n    <span class=\"kw\">fn </span>new() -&gt; MyBacktrace {\n        <span class=\"comment\">// ...\n    </span>}\n}\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>Error {\n    backtrace: MyBacktrace,\n}\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Error {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"Example Error\"</span>)\n    }\n}\n\n<span class=\"kw\">impl </span>std::error::Error <span class=\"kw\">for </span>Error {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        request\n            .provide_ref::&lt;MyBacktrace&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.backtrace);\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>backtrace = MyBacktrace::new();\n    <span class=\"kw\">let </span>error = Error { backtrace };\n    <span class=\"kw\">let </span>dyn_error = <span class=\"kw-2\">&amp;</span>error <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>std::error::Error;\n    <span class=\"kw\">let </span>backtrace_ref = request_ref::&lt;MyBacktrace&gt;(dyn_error).unwrap();\n\n    <span class=\"macro\">assert!</span>(core::ptr::eq(<span class=\"kw-2\">&amp;</span>error.backtrace, backtrace_ref));\n    <span class=\"macro\">assert!</span>(request_ref::&lt;MyLittleTeaPot&gt;(dyn_error).is_none());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0Ause+core::fmt;%0Ause+core::error::Request;%0Ause+core::error::request_ref;%0A%0A%23%5Bderive(Debug)%5D%0Aenum+MyLittleTeaPot+%7B%0A++++Empty,%0A%7D%0A%0A%23%5Bderive(Debug)%5D%0Astruct+MyBacktrace+%7B%0A++++//+...%0A%7D%0A%0Aimpl+MyBacktrace+%7B%0A++++fn+new()+-%3E+MyBacktrace+%7B%0A++++++++//+...%0AMyBacktrace+%7B%7D%0A++++%7D%0A%7D%0A%0A%23%5Bderive(Debug)%5D%0Astruct+Error+%7B%0A++++backtrace:+MyBacktrace,%0A%7D%0A%0Aimpl+fmt::Display+for+Error+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22Example+Error%22)%0A++++%7D%0A%7D%0A%0Aimpl+std::error::Error+for+Error+%7B%0A++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++request%0A++++++++++++.provide_ref::%3CMyBacktrace%3E(%26self.backtrace);%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+backtrace+=+MyBacktrace::new();%0A++++let+error+=+Error+%7B+backtrace+%7D;%0A++++let+dyn_error+=+%26error+as+%26dyn+std::error::Error;%0A++++let+backtrace_ref+=+request_ref::%3CMyBacktrace%3E(dyn_error).unwrap();%0A%0A++++assert!(core::ptr::eq(%26error.backtrace,+backtrace_ref));%0A++++assert!(request_ref::%3CMyLittleTeaPot%3E(dyn_error).is_none());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Request%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#516\">source</a><a href=\"#impl-Request%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.provide_value\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#552-554\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.provide_value\" class=\"fn\">provide_value</a>&lt;T&gt;(&amp;mut self, value: T) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;<div class=\"where\">where\n    T: 'static,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span></summary><div class=\"docblock\"><p>Provide a value or other type with only static lifetimes.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<p>Provides an <code>u8</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\n</span><span class=\"kw\">use </span>core::error::Request;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>SomeConcreteType { field: u8 }\n\n<span class=\"kw\">impl </span>std::fmt::Display <span class=\"kw\">for </span>SomeConcreteType {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>std::fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; std::fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"{} failed\"</span>, <span class=\"self\">self</span>.field)\n    }\n}\n\n<span class=\"kw\">impl </span>std::error::Error <span class=\"kw\">for </span>SomeConcreteType {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        request.provide_value::&lt;u8&gt;(<span class=\"self\">self</span>.field);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SomeConcreteType+%7B+field:+u8+%7D%0A++++%0A++++impl+std::fmt::Display+for+SomeConcreteType+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C'_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed%22,+self.field)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+SomeConcreteType+%7B%0A++++++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++++++request.provide_value::%3Cu8%3E(self.field);%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.provide_value_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#587-589\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.provide_value_with\" class=\"fn\">provide_value_with</a>&lt;T&gt;(\n    &amp;mut self,\n    fulfil: impl <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,\n) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;<div class=\"where\">where\n    T: 'static,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span></summary><div class=\"docblock\"><p>Provide a value or other type with only static lifetimes computed using a closure.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<p>Provides a <code>String</code> by cloning.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\n</span><span class=\"kw\">use </span>core::error::Request;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>SomeConcreteType { field: String }\n\n<span class=\"kw\">impl </span>std::fmt::Display <span class=\"kw\">for </span>SomeConcreteType {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>std::fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; std::fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"{} failed\"</span>, <span class=\"self\">self</span>.field)\n    }\n}\n\n<span class=\"kw\">impl </span>std::error::Error <span class=\"kw\">for </span>SomeConcreteType {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        request.provide_value_with::&lt;String&gt;(|| <span class=\"self\">self</span>.field.clone());\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SomeConcreteType+%7B+field:+String+%7D%0A++++%0A++++impl+std::fmt::Display+for+SomeConcreteType+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C'_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed%22,+self.field)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+SomeConcreteType+%7B%0A++++++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++++++request.provide_value_with::%3CString%3E(%7C%7C+self.field.clone());%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.provide_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#623\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.provide_ref\" class=\"fn\">provide_ref</a>&lt;T&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span></summary><div class=\"docblock\"><p>Provide a reference. The referee type must be bounded by <code>'static</code>,\nbut may be unsized.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<p>Provides a reference to a field as a <code>&amp;str</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\n</span><span class=\"kw\">use </span>core::error::Request;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>SomeConcreteType { field: String }\n\n<span class=\"kw\">impl </span>std::fmt::Display <span class=\"kw\">for </span>SomeConcreteType {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>std::fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; std::fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"{} failed\"</span>, <span class=\"self\">self</span>.field)\n    }\n}\n\n<span class=\"kw\">impl </span>std::error::Error <span class=\"kw\">for </span>SomeConcreteType {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        request.provide_ref::&lt;str&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.field);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SomeConcreteType+%7B+field:+String+%7D%0A++++%0A++++impl+std::fmt::Display+for+SomeConcreteType+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C'_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed%22,+self.field)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+SomeConcreteType+%7B%0A++++++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++++++request.provide_ref::%3Cstr%3E(%26self.field);%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.provide_ref_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#663-666\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.provide_ref_with\" class=\"fn\">provide_ref_with</a>&lt;T&gt;(\n    &amp;mut self,\n    fulfil: impl <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>,\n) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span></summary><div class=\"docblock\"><p>Provide a reference computed using a closure. The referee type\nmust be bounded by <code>'static</code>, but may be unsized.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<p>Provides a reference to a field as a <code>&amp;str</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\n</span><span class=\"kw\">use </span>core::error::Request;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>SomeConcreteType { business: String, party: String }\n<span class=\"kw\">fn </span>today_is_a_weekday() -&gt; bool { <span class=\"bool-val\">true </span>}\n\n<span class=\"kw\">impl </span>std::fmt::Display <span class=\"kw\">for </span>SomeConcreteType {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>std::fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; std::fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"{} failed\"</span>, <span class=\"self\">self</span>.business)\n    }\n}\n\n<span class=\"kw\">impl </span>std::error::Error <span class=\"kw\">for </span>SomeConcreteType {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        request.provide_ref_with::&lt;str&gt;(|| {\n            <span class=\"kw\">if </span>today_is_a_weekday() {\n                <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.business\n            } <span class=\"kw\">else </span>{\n                <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.party\n            }\n        });\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SomeConcreteType+%7B+business:+String,+party:+String+%7D%0A++++fn+today_is_a_weekday()+-%3E+bool+%7B+true+%7D%0A++++%0A++++impl+std::fmt::Display+for+SomeConcreteType+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C'_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed%22,+self.business)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+SomeConcreteType+%7B%0A++++++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++++++request.provide_ref_with::%3Cstr%3E(%7C%7C+%7B%0A++++++++++++++++if+today_is_a_weekday()+%7B%0A++++++++++++++++++++%26self.business%0A++++++++++++++++%7D+else+%7B%0A++++++++++++++++++++%26self.party%0A++++++++++++++++%7D%0A++++++++++++%7D);%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.would_be_satisfied_by_value_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#773-775\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.would_be_satisfied_by_value_of\" class=\"fn\">would_be_satisfied_by_value_of</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: 'static,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span></summary><div class=\"docblock\"><p>Check if the <code>Request</code> would be satisfied if provided with a\nvalue of the specified type. If the type does not match or has\nalready been provided, returns false.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<p>Check if an <code>u8</code> still needs to be provided and then provides\nit.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\n</span><span class=\"kw\">use </span>core::error::Request;\n<span class=\"kw\">use </span>core::error::request_value;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>Parent(<span class=\"prelude-ty\">Option</span>&lt;u8&gt;);\n\n<span class=\"kw\">impl </span>std::fmt::Display <span class=\"kw\">for </span>Parent {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>std::fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; std::fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"a parent failed\"</span>)\n    }\n}\n\n<span class=\"kw\">impl </span>std::error::Error <span class=\"kw\">for </span>Parent {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(v) = <span class=\"self\">self</span>.<span class=\"number\">0 </span>{\n            request.provide_value::&lt;u8&gt;(v);\n        }\n    }\n}\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>Child {\n    parent: Parent,\n}\n\n<span class=\"kw\">impl </span>Child {\n    <span class=\"comment\">// Pretend that this takes a lot of resources to evaluate.\n    </span><span class=\"kw\">fn </span>an_expensive_computation(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;u8&gt; {\n        <span class=\"prelude-val\">Some</span>(<span class=\"number\">99</span>)\n    }\n}\n\n<span class=\"kw\">impl </span>std::fmt::Display <span class=\"kw\">for </span>Child {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>std::fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; std::fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"child failed: \\n  because of parent: {}\"</span>, <span class=\"self\">self</span>.parent)\n    }\n}\n\n<span class=\"kw\">impl </span>std::error::Error <span class=\"kw\">for </span>Child {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        <span class=\"comment\">// In general, we don't know if this call will provide\n        // an `u8` value or not...\n        </span><span class=\"self\">self</span>.parent.provide(request);\n\n        <span class=\"comment\">// ...so we check to see if the `u8` is needed before\n        // we run our expensive computation.\n        </span><span class=\"kw\">if </span>request.would_be_satisfied_by_value_of::&lt;u8&gt;() {\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(v) = <span class=\"self\">self</span>.an_expensive_computation() {\n                request.provide_value::&lt;u8&gt;(v);\n            }\n        }\n\n        <span class=\"comment\">// The request will be satisfied now, regardless of if\n        // the parent provided the value or we did.\n        </span><span class=\"macro\">assert!</span>(!request.would_be_satisfied_by_value_of::&lt;u8&gt;());\n    }\n}\n\n<span class=\"kw\">let </span>parent = Parent(<span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n<span class=\"kw\">let </span>child = Child { parent };\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>), request_value::&lt;u8&gt;(<span class=\"kw-2\">&amp;</span>child));\n\n<span class=\"kw\">let </span>parent = Parent(<span class=\"prelude-val\">None</span>);\n<span class=\"kw\">let </span>child = Child { parent };\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">99</span>), request_value::&lt;u8&gt;(<span class=\"kw-2\">&amp;</span>child));\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++use+core::error::request_value;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+Parent(Option%3Cu8%3E);%0A++++%0A++++impl+std::fmt::Display+for+Parent+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C'_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22a+parent+failed%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+Parent+%7B%0A++++++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++++++if+let+Some(v)+=+self.0+%7B%0A++++++++++++++++request.provide_value::%3Cu8%3E(v);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+Child+%7B%0A++++++++parent:+Parent,%0A++++%7D%0A++++%0A++++impl+Child+%7B%0A++++++++//+Pretend+that+this+takes+a+lot+of+resources+to+evaluate.%0A++++++++fn+an_expensive_computation(%26self)+-%3E+Option%3Cu8%3E+%7B%0A++++++++++++Some(99)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::fmt::Display+for+Child+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C'_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22child+failed:+%5Cn++because+of+parent:+%7B%7D%22,+self.parent)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+Child+%7B%0A++++++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++++++//+In+general,+we+don't+know+if+this+call+will+provide%0A++++++++++++//+an+%60u8%60+value+or+not...%0A++++++++++++self.parent.provide(request);%0A++++%0A++++++++++++//+...so+we+check+to+see+if+the+%60u8%60+is+needed+before%0A++++++++++++//+we+run+our+expensive+computation.%0A++++++++++++if+request.would_be_satisfied_by_value_of::%3Cu8%3E()+%7B%0A++++++++++++++++if+let+Some(v)+=+self.an_expensive_computation()+%7B%0A++++++++++++++++++++request.provide_value::%3Cu8%3E(v);%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++%0A++++++++++++//+The+request+will+be+satisfied+now,+regardless+of+if%0A++++++++++++//+the+parent+provided+the+value+or+we+did.%0A++++++++++++assert!(!request.would_be_satisfied_by_value_of::%3Cu8%3E());%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+parent+=+Parent(Some(42));%0A++++let+child+=+Child+%7B+parent+%7D;%0A++++assert_eq!(Some(42),+request_value::%3Cu8%3E(%26child));%0A++++%0A++++let+parent+=+Parent(None);%0A++++let+child+=+Child+%7B+parent+%7D;%0A++++assert_eq!(Some(99),+request_value::%3Cu8%3E(%26child));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.would_be_satisfied_by_ref_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#861-863\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.would_be_satisfied_by_ref_of\" class=\"fn\">would_be_satisfied_by_ref_of</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span></summary><div class=\"docblock\"><p>Check if the <code>Request</code> would be satisfied if provided with a\nreference to a value of the specified type. If the type does\nnot match or has already been provided, returns false.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<p>Check if a <code>&amp;str</code> still needs to be provided and then provides\nit.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_generic_member_access)]\n#![feature(error_in_core)]\n\n</span><span class=\"kw\">use </span>core::error::Request;\n<span class=\"kw\">use </span>core::error::request_ref;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>Parent(<span class=\"prelude-ty\">Option</span>&lt;String&gt;);\n\n<span class=\"kw\">impl </span>std::fmt::Display <span class=\"kw\">for </span>Parent {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>std::fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; std::fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"a parent failed\"</span>)\n    }\n}\n\n<span class=\"kw\">impl </span>std::error::Error <span class=\"kw\">for </span>Parent {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(v) = <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0 </span>{\n            request.provide_ref::&lt;str&gt;(v);\n        }\n    }\n}\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>Child {\n    parent: Parent,\n    name: String,\n}\n\n<span class=\"kw\">impl </span>Child {\n    <span class=\"comment\">// Pretend that this takes a lot of resources to evaluate.\n    </span><span class=\"kw\">fn </span>an_expensive_computation(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; {\n        <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.name)\n    }\n}\n\n<span class=\"kw\">impl </span>std::fmt::Display <span class=\"kw\">for </span>Child {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>std::fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; std::fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"{} failed: \\n  {}\"</span>, <span class=\"self\">self</span>.name, <span class=\"self\">self</span>.parent)\n    }\n}\n\n<span class=\"kw\">impl </span>std::error::Error <span class=\"kw\">for </span>Child {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        <span class=\"comment\">// In general, we don't know if this call will provide\n        // a `str` reference or not...\n        </span><span class=\"self\">self</span>.parent.provide(request);\n\n        <span class=\"comment\">// ...so we check to see if the `&amp;str` is needed before\n        // we run our expensive computation.\n        </span><span class=\"kw\">if </span>request.would_be_satisfied_by_ref_of::&lt;str&gt;() {\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(v) = <span class=\"self\">self</span>.an_expensive_computation() {\n                request.provide_ref::&lt;str&gt;(v);\n            }\n        }\n\n        <span class=\"comment\">// The request will be satisfied now, regardless of if\n        // the parent provided the reference or we did.\n        </span><span class=\"macro\">assert!</span>(!request.would_be_satisfied_by_ref_of::&lt;str&gt;());\n    }\n}\n\n<span class=\"kw\">let </span>parent = Parent(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"parent\"</span>.into()));\n<span class=\"kw\">let </span>child = Child { parent, name: <span class=\"string\">\"child\"</span>.into() };\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"parent\"</span>), request_ref::&lt;str&gt;(<span class=\"kw-2\">&amp;</span>child));\n\n<span class=\"kw\">let </span>parent = Parent(<span class=\"prelude-val\">None</span>);\n<span class=\"kw\">let </span>child = Child { parent, name: <span class=\"string\">\"child\"</span>.into() };\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"child\"</span>), request_ref::&lt;str&gt;(<span class=\"kw-2\">&amp;</span>child));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0A%23!%5Bfeature(error_in_core)%5D%0A%0Afn+main()+%7B%0A++++use+core::error::Request;%0A++++use+core::error::request_ref;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+Parent(Option%3CString%3E);%0A++++%0A++++impl+std::fmt::Display+for+Parent+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C'_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22a+parent+failed%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+Parent+%7B%0A++++++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++++++if+let+Some(v)+=+%26self.0+%7B%0A++++++++++++++++request.provide_ref::%3Cstr%3E(v);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+Child+%7B%0A++++++++parent:+Parent,%0A++++++++name:+String,%0A++++%7D%0A++++%0A++++impl+Child+%7B%0A++++++++//+Pretend+that+this+takes+a+lot+of+resources+to+evaluate.%0A++++++++fn+an_expensive_computation(%26self)+-%3E+Option%3C%26str%3E+%7B%0A++++++++++++Some(%26self.name)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::fmt::Display+for+Child+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+std::fmt::Formatter%3C'_%3E)+-%3E+std::fmt::Result+%7B%0A++++++++++++write!(f,+%22%7B%7D+failed:+%5Cn++%7B%7D%22,+self.name,+self.parent)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+std::error::Error+for+Child+%7B%0A++++++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++++++//+In+general,+we+don't+know+if+this+call+will+provide%0A++++++++++++//+a+%60str%60+reference+or+not...%0A++++++++++++self.parent.provide(request);%0A++++%0A++++++++++++//+...so+we+check+to+see+if+the+%60%26str%60+is+needed+before%0A++++++++++++//+we+run+our+expensive+computation.%0A++++++++++++if+request.would_be_satisfied_by_ref_of::%3Cstr%3E()+%7B%0A++++++++++++++++if+let+Some(v)+=+self.an_expensive_computation()+%7B%0A++++++++++++++++++++request.provide_ref::%3Cstr%3E(v);%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++%0A++++++++++++//+The+request+will+be+satisfied+now,+regardless+of+if%0A++++++++++++//+the+parent+provided+the+reference+or+we+did.%0A++++++++++++assert!(!request.would_be_satisfied_by_ref_of::%3Cstr%3E());%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+parent+=+Parent(Some(%22parent%22.into()));%0A++++let+child+=+Child+%7B+parent,+name:+%22child%22.into()+%7D;%0A++++assert_eq!(Some(%22parent%22),+request_ref::%3Cstr%3E(%26child));%0A++++%0A++++let+parent+=+Parent(None);%0A++++let+child+=+Child+%7B+parent,+name:+%22child%22.into()+%7D;%0A++++assert_eq!(Some(%22child%22),+request_ref::%3Cstr%3E(%26child));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Request%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#877\">source</a><a href=\"#impl-Debug-for-Request%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#878\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Request%3C'a%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Request%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-Request%3C'a%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Request%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;</h3></section><section id=\"impl-Send-for-Request%3C'a%3E\" class=\"impl\"><a href=\"#impl-Send-for-Request%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;</h3></section><section id=\"impl-Sized-for-Request%3C'a%3E\" class=\"impl\"><a href=\"#impl-Sized-for-Request%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> for <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;</h3></section><section id=\"impl-Sync-for-Request%3C'a%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Request%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;</h3></section><section id=\"impl-Unpin-for-Request%3C'a%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Request%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;</h3></section><section id=\"impl-UnwindSafe-for-Request%3C'a%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Request%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:43.142Z"
}