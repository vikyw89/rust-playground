{
	"title": "bool - Rust",
	"url": "https://doc.rust-lang.org/stable/std/primitive.bool.html",
	"markdown": "# bool - Rust\n\n## Primitive Type [bool](#)\n\n1.0.0 ·\n\nExpand description\n\nThe boolean type.\n\nThe `bool` represents a value, which could only be either [`true`](../std/keyword.true.html) or [`false`](../std/keyword.false.html). If you cast a `bool` into an integer, [`true`](../std/keyword.true.html) will be 1 and [`false`](../std/keyword.false.html) will be 0.\n\n## [§](#basic-usage)Basic usage\n\n`bool` implements various traits, such as [`BitAnd`](ops/trait.BitAnd.html \"trait std::ops::BitAnd\"), [`BitOr`](ops/trait.BitOr.html \"trait std::ops::BitOr\"), [`Not`](ops/trait.Not.html \"trait std::ops::Not\"), etc., which allow us to perform boolean operations using `&`, `|` and `!`.\n\n[`if`](../std/keyword.if.html) requires a `bool` value as its conditional. [`assert!`](macro.assert.html \"macro std::assert\"), which is an important macro in testing, checks whether an expression is [`true`](../std/keyword.true.html) and panics if it isn’t.\n\n```\nlet bool_val = true & false | false;\nassert!(!bool_val);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bool_val+=+true+%26+false+%7C+false;%0A++++assert!(!bool_val);%0A%7D&edition=2021)\n\n## [§](#examples)Examples\n\nA trivial example of the usage of `bool`:\n\n```\nlet praise_the_borrow_checker = true;\n\n// using the `if` conditional\nif praise_the_borrow_checker {\n    println!(\"oh, yeah!\");\n} else {\n    println!(\"what?!!\");\n}\n\n// ... or, a match pattern\nmatch praise_the_borrow_checker {\n    true => println!(\"keep praising!\"),\n    false => println!(\"you should praise!\"),\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+praise_the_borrow_checker+=+true;%0A++++%0A++++//+using+the+%60if%60+conditional%0A++++if+praise_the_borrow_checker+%7B%0A++++++++println!(%22oh,+yeah!%22);%0A++++%7D+else+%7B%0A++++++++println!(%22what?!!%22);%0A++++%7D%0A++++%0A++++//+...+or,+a+match+pattern%0A++++match+praise_the_borrow_checker+%7B%0A++++++++true+=%3E+println!(%22keep+praising!%22),%0A++++++++false+=%3E+println!(%22you+should+praise!%22),%0A++++%7D%0A%7D&edition=2021)\n\nAlso, since `bool` implements the [`Copy`](marker/trait.Copy.html \"trait std::marker::Copy\") trait, we don’t have to worry about the move semantics (just like the integer and float primitives).\n\nNow an example of `bool` cast to integer type:\n\n```\nassert_eq!(true as i32, 1);\nassert_eq!(false as i32, 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(true+as+i32,+1);%0A++++assert_eq!(false+as+i32,+0);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/bool.rs.html#3)[§](#impl-bool)\n\n1.62.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/bool.rs.html#33)\n\nReturns `Some(t)` if the `bool` is [`true`](../std/keyword.true.html), or `None` otherwise.\n\nArguments passed to `then_some` are eagerly evaluated; if you are passing the result of a function call, it is recommended to use [`then`](about:blank/primitive.bool.html#method.then \"method bool::then\"), which is lazily evaluated.\n\n##### [§](#examples-1)Examples\n\n```\nassert_eq!(false.then_some(0), None);\nassert_eq!(true.then_some(0), Some(0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(false.then_some(0),+None);%0A++++assert_eq!(true.then_some(0),+Some(0));%0A%7D&edition=2021)\n\n```\nlet mut a = 0;\nlet mut function_with_side_effects = || { a += 1; };\n\ntrue.then_some(function_with_side_effects());\nfalse.then_some(function_with_side_effects());\n\n// `a` is incremented twice because the value passed to `then_some` is\n// evaluated eagerly.\nassert_eq!(a, 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+0;%0A++++let+mut+function_with_side_effects+=+%7C%7C+%7B+a+%2B=+1;+%7D;%0A++++%0A++++true.then_some(function_with_side_effects());%0A++++false.then_some(function_with_side_effects());%0A++++%0A++++//+%60a%60+is+incremented+twice+because+the+value+passed+to+%60then_some%60+is%0A++++//+evaluated+eagerly.%0A++++assert_eq!(a,+2);%0A%7D&edition=2021)\n\n1.50.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/bool.rs.html#59)\n\nReturns `Some(f())` if the `bool` is [`true`](../std/keyword.true.html), or `None` otherwise.\n\n##### [§](#examples-2)Examples\n\n```\nassert_eq!(false.then(|| 0), None);\nassert_eq!(true.then(|| 0), Some(0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(false.then(%7C%7C+0),+None);%0A++++assert_eq!(true.then(%7C%7C+0),+Some(0));%0A%7D&edition=2021)\n\n```\nlet mut a = 0;\n\ntrue.then(|| { a += 1; });\nfalse.then(|| { a += 1; });\n\n// `a` is incremented once because the closure is evaluated lazily by\n// `then`.\nassert_eq!(a, 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+0;%0A++++%0A++++true.then(%7C%7C+%7B+a+%2B=+1;+%7D);%0A++++false.then(%7C%7C+%7B+a+%2B=+1;+%7D);%0A++++%0A++++//+%60a%60+is+incremented+once+because+the+closure+is+evaluated+lazily+by%0A++++//+%60then%60.%0A++++assert_eq!(a,+1);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178)[§](#impl-BitAnd%3C%26bool%3E-for-%26bool)\n\n[§](#associatedtype.Output-11)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178)[§](#method.bitand-5)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178)[§](#impl-BitAnd%3C%26bool%3E-for-bool)\n\n[§](#associatedtype.Output-9)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178)[§](#method.bitand-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#515-518)[§](#impl-BitAnd%3CMask%3CT,+N%3E%3E-for-bool)\n\n[§](#associatedtype.Output-8)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#523)[§](#method.bitand-2)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178)[§](#impl-BitAnd%3Cbool%3E-for-%26bool)\n\n[§](#associatedtype.Output-6)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178)[§](#method.bitand)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#502-505)[§](#impl-BitAnd%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-10)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#510)[§](#method.bitand-4)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178)[§](#impl-BitAnd-for-bool)\n\n[§](#associatedtype.Output-7)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178)[§](#method.bitand-1)\n\n1.22.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#726)[§](#impl-BitAndAssign%3C%26bool%3E-for-bool)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#630-633)[§](#impl-BitAndAssign%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n1.8.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#726)[§](#impl-BitAndAssign-for-bool)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278)[§](#impl-BitOr%3C%26bool%3E-for-%26bool)\n\n[§](#associatedtype.Output)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278)[§](#method.bitor)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278)[§](#impl-BitOr%3C%26bool%3E-for-bool)\n\n[§](#associatedtype.Output-3)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278)[§](#method.bitor-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#554-557)[§](#impl-BitOr%3CMask%3CT,+N%3E%3E-for-bool)\n\n[§](#associatedtype.Output-2)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#562)[§](#method.bitor-2)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278)[§](#impl-BitOr%3Cbool%3E-for-%26bool)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278)[§](#method.bitor-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#541-544)[§](#impl-BitOr%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-4)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#549)[§](#method.bitor-4)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278)[§](#impl-BitOr-for-bool)\n\n[§](#associatedtype.Output-5)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278)[§](#method.bitor-5)\n\n1.22.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#797)[§](#impl-BitOrAssign%3C%26bool%3E-for-bool)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#652-655)[§](#impl-BitOrAssign%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n1.8.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#797)[§](#impl-BitOrAssign-for-bool)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378)[§](#impl-BitXor%3C%26bool%3E-for-%26bool)\n\n[§](#associatedtype.Output-17)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378)[§](#method.bitxor-3)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378)[§](#impl-BitXor%3C%26bool%3E-for-bool)\n\n[§](#associatedtype.Output-15)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378)[§](#method.bitxor-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#593-596)[§](#impl-BitXor%3CMask%3CT,+N%3E%3E-for-bool)\n\n[§](#associatedtype.Output-16)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#601)[§](#method.bitxor-2)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378)[§](#impl-BitXor%3Cbool%3E-for-%26bool)\n\n[§](#associatedtype.Output-18)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378)[§](#method.bitxor-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#580-583)[§](#impl-BitXor%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-14)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#588)[§](#method.bitxor)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378)[§](#impl-BitXor-for-bool)\n\n[§](#associatedtype.Output-19)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378)[§](#method.bitxor-5)\n\n1.22.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#868)[§](#impl-BitXorAssign%3C%26bool%3E-for-bool)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#674-677)[§](#impl-BitXorAssign%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n1.8.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#868)[§](#impl-BitXorAssign-for-bool)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#227-232)[§](#impl-Clone-for-bool)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2383)[§](#impl-Debug-for-bool)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#163)[§](#impl-Default-for-bool)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#163)[§](#method.default)\n\nReturns the default value of `false`\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2391)[§](#impl-Display-for-bool)\n\n1.24.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#2067)[§](#impl-From%3Cbool%3E-for-AtomicBool)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#2078)[§](#method.from-5)\n\nConverts a `bool` into an `AtomicBool`.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::sync::atomic::AtomicBool;\nlet atomic_bool = AtomicBool::from(true);\nassert_eq!(format!(\"{atomic_bool:?}\"), \"true\")\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::AtomicBool;%0A++++let+atomic_bool+=+AtomicBool::from(true);%0A++++assert_eq!(format!(%22%7Batomic_bool:?%7D%22),+%22true%22)%0A%7D&edition=2021)\n\n1.68.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#201)[§](#impl-From%3Cbool%3E-for-f32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#201)[§](#method.from-12)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`f32`](primitive.f32.html \"primitive f32\") losslessly. The resulting value is positive `0.0` for `false` and `1.0` for `true` values.\n\n##### [§](#examples-15)Examples\n\n```\nlet x: f32 = false.into();\nassert_eq!(x, 0.0);\nassert!(x.is_sign_positive());\n\nlet y: f32 = true.into();\nassert_eq!(y, 1.0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+f32+=+false.into();%0A++++assert_eq!(x,+0.0);%0A++++assert!(x.is_sign_positive());%0A++++%0A++++let+y:+f32+=+true.into();%0A++++assert_eq!(y,+1.0);%0A%7D&edition=2021)\n\n1.68.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#202)[§](#impl-From%3Cbool%3E-for-f64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#202)[§](#method.from-10)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`f64`](primitive.f64.html \"primitive f64\") losslessly. The resulting value is positive `0.0` for `false` and `1.0` for `true` values.\n\n##### [§](#examples-13)Examples\n\n```\nlet x: f64 = false.into();\nassert_eq!(x, 0.0);\nassert!(x.is_sign_positive());\n\nlet y: f64 = true.into();\nassert_eq!(y, 1.0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+f64+=+false.into();%0A++++assert_eq!(x,+0.0);%0A++++assert!(x.is_sign_positive());%0A++++%0A++++let+y:+f64+=+true.into();%0A++++assert_eq!(y,+1.0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#95)[§](#impl-From%3Cbool%3E-for-i128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#95)[§](#method.from-13)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`i128`](primitive.i128.html \"primitive i128\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-16)Examples\n\n```\nassert_eq!(i128::from(true), 1);\nassert_eq!(i128::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i128::from(true),+1);%0A++++assert_eq!(i128::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#92)[§](#impl-From%3Cbool%3E-for-i16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#92)[§](#method.from-9)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`i16`](primitive.i16.html \"primitive i16\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-12)Examples\n\n```\nassert_eq!(i16::from(true), 1);\nassert_eq!(i16::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i16::from(true),+1);%0A++++assert_eq!(i16::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#93)[§](#impl-From%3Cbool%3E-for-i32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#93)[§](#method.from-1)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`i32`](primitive.i32.html \"primitive i32\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-4)Examples\n\n```\nassert_eq!(i32::from(true), 1);\nassert_eq!(i32::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i32::from(true),+1);%0A++++assert_eq!(i32::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#94)[§](#impl-From%3Cbool%3E-for-i64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#94)[§](#method.from-14)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`i64`](primitive.i64.html \"primitive i64\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-17)Examples\n\n```\nassert_eq!(i64::from(true), 1);\nassert_eq!(i64::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i64::from(true),+1);%0A++++assert_eq!(i64::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#91)[§](#impl-From%3Cbool%3E-for-i8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#91)[§](#method.from-7)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`i8`](primitive.i8.html \"primitive i8\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-10)Examples\n\n```\nassert_eq!(i8::from(true), 1);\nassert_eq!(i8::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i8::from(true),+1);%0A++++assert_eq!(i8::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#96)[§](#impl-From%3Cbool%3E-for-isize)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#96)[§](#method.from-4)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`isize`](primitive.isize.html \"primitive isize\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-7)Examples\n\n```\nassert_eq!(isize::from(true), 1);\nassert_eq!(isize::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(isize::from(true),+1);%0A++++assert_eq!(isize::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#89)[§](#impl-From%3Cbool%3E-for-u128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#89)[§](#method.from-6)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`u128`](primitive.u128.html \"primitive u128\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-9)Examples\n\n```\nassert_eq!(u128::from(true), 1);\nassert_eq!(u128::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u128::from(true),+1);%0A++++assert_eq!(u128::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#86)[§](#impl-From%3Cbool%3E-for-u16)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#86)[§](#method.from-11)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`u16`](primitive.u16.html \"primitive u16\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-14)Examples\n\n```\nassert_eq!(u16::from(true), 1);\nassert_eq!(u16::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u16::from(true),+1);%0A++++assert_eq!(u16::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#87)[§](#impl-From%3Cbool%3E-for-u32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#87)[§](#method.from-3)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`u32`](primitive.u32.html \"primitive u32\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-6)Examples\n\n```\nassert_eq!(u32::from(true), 1);\nassert_eq!(u32::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u32::from(true),+1);%0A++++assert_eq!(u32::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#88)[§](#impl-From%3Cbool%3E-for-u64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#88)[§](#method.from-8)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`u64`](primitive.u64.html \"primitive u64\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-11)Examples\n\n```\nassert_eq!(u64::from(true), 1);\nassert_eq!(u64::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u64::from(true),+1);%0A++++assert_eq!(u64::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#85)[§](#impl-From%3Cbool%3E-for-u8)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#85)[§](#method.from)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`u8`](primitive.u8.html \"primitive u8\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-3)Examples\n\n```\nassert_eq!(u8::from(true), 1);\nassert_eq!(u8::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u8::from(true),+1);%0A++++assert_eq!(u8::from(false),+0);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#90)[§](#impl-From%3Cbool%3E-for-usize)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#90)[§](#method.from-2)\n\nConverts a [`bool`](primitive.bool.html \"primitive bool\") to [`usize`](primitive.usize.html \"primitive usize\") losslessly. The resulting value is `0` for `false` and `1` for `true` values.\n\n##### [§](#examples-5)Examples\n\n```\nassert_eq!(usize::from(true), 1);\nassert_eq!(usize::from(false), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(usize::from(true),+1);%0A++++assert_eq!(usize::from(false),+0);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#641)[§](#impl-FromStr-for-bool)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#667)[§](#method.from_str)\n\nParse a `bool` from a string.\n\nThe only accepted values are `\"true\"` and `\"false\"`. Any other input will return an error.\n\n##### [§](#examples-18)Examples\n\n```\nuse std::str::FromStr;\n\nassert_eq!(FromStr::from_str(\"true\"), Ok(true));\nassert_eq!(FromStr::from_str(\"false\"), Ok(false));\nassert!(<bool as FromStr>::from_str(\"not even a boolean\").is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::str::FromStr;%0A++++%0A++++assert_eq!(FromStr::from_str(%22true%22),+Ok(true));%0A++++assert_eq!(FromStr::from_str(%22false%22),+Ok(false));%0A++++assert!(%3Cbool+as+FromStr%3E::from_str(%22not+even+a+boolean%22).is_err());%0A%7D&edition=2021)\n\nNote, in many cases, the `.parse()` method on `str` is more proper.\n\n```\nassert_eq!(\"true\".parse(), Ok(true));\nassert_eq!(\"false\".parse(), Ok(false));\nassert!(\"not even a boolean\".parse::<bool>().is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22true%22.parse(),+Ok(true));%0A++++assert_eq!(%22false%22.parse(),+Ok(false));%0A++++assert!(%22not+even+a+boolean%22.parse::%3Cbool%3E().is_err());%0A%7D&edition=2021)\n\n[§](#associatedtype.Err)\n\nThe associated error which can be returned from parsing.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#852)[§](#impl-Hash-for-bool)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#68)[§](#impl-Not-for-%26bool)\n\n[§](#associatedtype.Output-13)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#68)[§](#method.not-1)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#68)[§](#impl-Not-for-bool)\n\n[§](#associatedtype.Output-12)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#68)[§](#method.not)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1593)[§](#impl-Ord-for-bool)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/92391 \"Tracking issue for const_cmp\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502)[§](#impl-PartialEq-for-bool)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1547)[§](#impl-PartialOrd-for-bool)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1549)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#992-1003)[§](#impl-ConstParamTy-for-bool)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#420-430)[§](#impl-Copy-for-bool)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1511)[§](#impl-Eq-for-bool)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#214-226)[§](#impl-StructuralPartialEq-for-bool)\n\n[§](#impl-Freeze-for-bool)\n\n[§](#impl-RefUnwindSafe-for-bool)\n\n[§](#impl-Send-for-bool)\n\n[§](#impl-Sync-for-bool)\n\n[§](#impl-Unpin-for-bool)\n\n[§](#impl-UnwindSafe-for-bool)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The boolean type.\"><title>bool - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc primitive\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">bool</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">bool</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.then\">then</a></li><li><a href=\"#method.then_some\">then_some</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-BitAnd-for-bool\">BitAnd</a></li><li><a href=\"#impl-BitAnd%3C%26bool%3E-for-%26bool\">BitAnd&lt;&amp;bool&gt;</a></li><li><a href=\"#impl-BitAnd%3C%26bool%3E-for-bool\">BitAnd&lt;&amp;bool&gt;</a></li><li><a href=\"#impl-BitAnd%3CMask%3CT,+N%3E%3E-for-bool\">BitAnd&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitAnd%3Cbool%3E-for-%26bool\">BitAnd&lt;bool&gt;</a></li><li><a href=\"#impl-BitAnd%3Cbool%3E-for-Mask%3CT,+N%3E\">BitAnd&lt;bool&gt;</a></li><li><a href=\"#impl-BitAndAssign-for-bool\">BitAndAssign</a></li><li><a href=\"#impl-BitAndAssign%3C%26bool%3E-for-bool\">BitAndAssign&lt;&amp;bool&gt;</a></li><li><a href=\"#impl-BitAndAssign%3Cbool%3E-for-Mask%3CT,+N%3E\">BitAndAssign&lt;bool&gt;</a></li><li><a href=\"#impl-BitOr-for-bool\">BitOr</a></li><li><a href=\"#impl-BitOr%3C%26bool%3E-for-%26bool\">BitOr&lt;&amp;bool&gt;</a></li><li><a href=\"#impl-BitOr%3C%26bool%3E-for-bool\">BitOr&lt;&amp;bool&gt;</a></li><li><a href=\"#impl-BitOr%3CMask%3CT,+N%3E%3E-for-bool\">BitOr&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitOr%3Cbool%3E-for-%26bool\">BitOr&lt;bool&gt;</a></li><li><a href=\"#impl-BitOr%3Cbool%3E-for-Mask%3CT,+N%3E\">BitOr&lt;bool&gt;</a></li><li><a href=\"#impl-BitOrAssign-for-bool\">BitOrAssign</a></li><li><a href=\"#impl-BitOrAssign%3C%26bool%3E-for-bool\">BitOrAssign&lt;&amp;bool&gt;</a></li><li><a href=\"#impl-BitOrAssign%3Cbool%3E-for-Mask%3CT,+N%3E\">BitOrAssign&lt;bool&gt;</a></li><li><a href=\"#impl-BitXor-for-bool\">BitXor</a></li><li><a href=\"#impl-BitXor%3C%26bool%3E-for-%26bool\">BitXor&lt;&amp;bool&gt;</a></li><li><a href=\"#impl-BitXor%3C%26bool%3E-for-bool\">BitXor&lt;&amp;bool&gt;</a></li><li><a href=\"#impl-BitXor%3CMask%3CT,+N%3E%3E-for-bool\">BitXor&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitXor%3Cbool%3E-for-%26bool\">BitXor&lt;bool&gt;</a></li><li><a href=\"#impl-BitXor%3Cbool%3E-for-Mask%3CT,+N%3E\">BitXor&lt;bool&gt;</a></li><li><a href=\"#impl-BitXorAssign-for-bool\">BitXorAssign</a></li><li><a href=\"#impl-BitXorAssign%3C%26bool%3E-for-bool\">BitXorAssign&lt;&amp;bool&gt;</a></li><li><a href=\"#impl-BitXorAssign%3Cbool%3E-for-Mask%3CT,+N%3E\">BitXorAssign&lt;bool&gt;</a></li><li><a href=\"#impl-Clone-for-bool\">Clone</a></li><li><a href=\"#impl-ConstParamTy-for-bool\">ConstParamTy</a></li><li><a href=\"#impl-Copy-for-bool\">Copy</a></li><li><a href=\"#impl-Debug-for-bool\">Debug</a></li><li><a href=\"#impl-Default-for-bool\">Default</a></li><li><a href=\"#impl-Display-for-bool\">Display</a></li><li><a href=\"#impl-Eq-for-bool\">Eq</a></li><li><a href=\"#impl-From%3Cbool%3E-for-AtomicBool\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-f32\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-f64\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-i128\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-i16\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-i32\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-i64\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-i8\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-isize\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-u128\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-u16\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-u32\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-u64\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-u8\">From&lt;bool&gt;</a></li><li><a href=\"#impl-From%3Cbool%3E-for-usize\">From&lt;bool&gt;</a></li><li><a href=\"#impl-FromStr-for-bool\">FromStr</a></li><li><a href=\"#impl-Hash-for-bool\">Hash</a></li><li><a href=\"#impl-Not-for-%26bool\">Not</a></li><li><a href=\"#impl-Not-for-bool\">Not</a></li><li><a href=\"#impl-Ord-for-bool\">Ord</a></li><li><a href=\"#impl-PartialEq-for-bool\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-bool\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-bool\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-bool\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-bool\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-bool\">Send</a></li><li><a href=\"#impl-Sync-for-bool\">Sync</a></li><li><a href=\"#impl-Unpin-for-bool\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-bool\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In crate std</a></h2><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Primitive Type <a class=\"primitive\" href=\"#\">bool</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The boolean type.</p>\n<p>The <code>bool</code> represents a value, which could only be either <a href=\"../std/keyword.true.html\"><code>true</code></a> or <a href=\"../std/keyword.false.html\"><code>false</code></a>. If you cast\na <code>bool</code> into an integer, <a href=\"../std/keyword.true.html\"><code>true</code></a> will be 1 and <a href=\"../std/keyword.false.html\"><code>false</code></a> will be 0.</p>\n<h2 id=\"basic-usage\"><a class=\"doc-anchor\" href=\"#basic-usage\">§</a>Basic usage</h2>\n<p><code>bool</code> implements various traits, such as <a href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\"><code>BitAnd</code></a>, <a href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\"><code>BitOr</code></a>, <a href=\"ops/trait.Not.html\" title=\"trait std::ops::Not\"><code>Not</code></a>, etc.,\nwhich allow us to perform boolean operations using <code>&amp;</code>, <code>|</code> and <code>!</code>.</p>\n<p><a href=\"../std/keyword.if.html\"><code>if</code></a> requires a <code>bool</code> value as its conditional. <a href=\"macro.assert.html\" title=\"macro std::assert\"><code>assert!</code></a>, which is an\nimportant macro in testing, checks whether an expression is <a href=\"../std/keyword.true.html\"><code>true</code></a> and panics\nif it isn’t.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bool_val = <span class=\"bool-val\">true </span>&amp; <span class=\"bool-val\">false </span>| <span class=\"bool-val\">false</span>;\n<span class=\"macro\">assert!</span>(!bool_val);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+bool_val+=+true+%26+false+%7C+false;%0A++++assert!(!bool_val);%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>A trivial example of the usage of <code>bool</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>praise_the_borrow_checker = <span class=\"bool-val\">true</span>;\n\n<span class=\"comment\">// using the `if` conditional\n</span><span class=\"kw\">if </span>praise_the_borrow_checker {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"oh, yeah!\"</span>);\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"what?!!\"</span>);\n}\n\n<span class=\"comment\">// ... or, a match pattern\n</span><span class=\"kw\">match </span>praise_the_borrow_checker {\n    <span class=\"bool-val\">true </span>=&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"keep praising!\"</span>),\n    <span class=\"bool-val\">false </span>=&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"you should praise!\"</span>),\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+praise_the_borrow_checker+=+true;%0A++++%0A++++//+using+the+%60if%60+conditional%0A++++if+praise_the_borrow_checker+%7B%0A++++++++println!(%22oh,+yeah!%22);%0A++++%7D+else+%7B%0A++++++++println!(%22what?!!%22);%0A++++%7D%0A++++%0A++++//+...+or,+a+match+pattern%0A++++match+praise_the_borrow_checker+%7B%0A++++++++true+=%3E+println!(%22keep+praising!%22),%0A++++++++false+=%3E+println!(%22you+should+praise!%22),%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Also, since <code>bool</code> implements the <a href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a> trait, we don’t\nhave to worry about the move semantics (just like the integer and float primitives).</p>\n<p>Now an example of <code>bool</code> cast to integer type:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">true </span><span class=\"kw\">as </span>i32, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">false </span><span class=\"kw\">as </span>i32, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(true+as+i32,+1);%0A++++assert_eq!(false+as+i32,+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-bool\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/bool.rs.html#3\">source</a><a href=\"#impl-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.then_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.62.0\">1.62.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/bool.rs.html#33\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.then_some\" class=\"fn\">then_some</a>&lt;T&gt;(self, t: T) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>Some(t)</code> if the <code>bool</code> is <a href=\"../std/keyword.true.html\"><code>true</code></a>,\nor <code>None</code> otherwise.</p>\n<p>Arguments passed to <code>then_some</code> are eagerly evaluated; if you are\npassing the result of a function call, it is recommended to use\n<a href=\"primitive.bool.html#method.then\" title=\"method bool::then\"><code>then</code></a>, which is lazily evaluated.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">false</span>.then_some(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">true</span>.then_some(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(false.then_some(0),+None);%0A++++assert_eq!(true.then_some(0),+Some(0));%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>function_with_side_effects = || { a += <span class=\"number\">1</span>; };\n\n<span class=\"bool-val\">true</span>.then_some(function_with_side_effects());\n<span class=\"bool-val\">false</span>.then_some(function_with_side_effects());\n\n<span class=\"comment\">// `a` is incremented twice because the value passed to `then_some` is\n// evaluated eagerly.\n</span><span class=\"macro\">assert_eq!</span>(a, <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+0;%0A++++let+mut+function_with_side_effects+=+%7C%7C+%7B+a+%2B=+1;+%7D;%0A++++%0A++++true.then_some(function_with_side_effects());%0A++++false.then_some(function_with_side_effects());%0A++++%0A++++//+%60a%60+is+incremented+twice+because+the+value+passed+to+%60then_some%60+is%0A++++//+evaluated+eagerly.%0A++++assert_eq!(a,+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/bool.rs.html#59\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.then\" class=\"fn\">then</a>&lt;T, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>Some(f())</code> if the <code>bool</code> is <a href=\"../std/keyword.true.html\"><code>true</code></a>,\nor <code>None</code> otherwise.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">false</span>.then(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">true</span>.then(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(false.then(%7C%7C+0),+None);%0A++++assert_eq!(true.then(%7C%7C+0),+Some(0));%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = <span class=\"number\">0</span>;\n\n<span class=\"bool-val\">true</span>.then(|| { a += <span class=\"number\">1</span>; });\n<span class=\"bool-val\">false</span>.then(|| { a += <span class=\"number\">1</span>; });\n\n<span class=\"comment\">// `a` is incremented once because the closure is evaluated lazily by\n// `then`.\n</span><span class=\"macro\">assert_eq!</span>(a, <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+0;%0A++++%0A++++true.then(%7C%7C+%7B+a+%2B=+1;+%7D);%0A++++false.then(%7C%7C+%7B+a+%2B=+1;+%7D);%0A++++%0A++++//+%60a%60+is+incremented+once+because+the+closure+is+evaluated+lazily+by%0A++++//+%60then%60.%0A++++assert_eq!(a,+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3C%26bool%3E-for-%26bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26bool%3E-for-%26bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3C%26bool%3E-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26bool%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3CMask%3CT,+N%3E%3E-for-bool\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#515-518\">source</a><a href=\"#impl-BitAnd%3CMask%3CT,+N%3E%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt; for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#523\">source</a><a href=\"#method.bitand-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3Cbool%3E-for-%26bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Cbool%3E-for-%26bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for &amp;'a <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#502-505\">source</a><a href=\"#impl-BitAnd%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#510\">source</a><a href=\"#method.bitand-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAndAssign%3C%26bool%3E-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26bool%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;=</code> operation. <a href=\"ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAndAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#630-633\">source</a><a href=\"#impl-BitAndAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#636\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;=</code> operation. <a href=\"ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAndAssign-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;=</code> operation. <a href=\"ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3C%26bool%3E-for-%26bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26bool%3E-for-%26bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3C%26bool%3E-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26bool%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3CMask%3CT,+N%3E%3E-for-bool\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#554-557\">source</a><a href=\"#impl-BitOr%3CMask%3CT,+N%3E%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt; for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#562\">source</a><a href=\"#method.bitor-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3Cbool%3E-for-%26bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Cbool%3E-for-%26bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for &amp;'a <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#541-544\">source</a><a href=\"#impl-BitOr%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#549\">source</a><a href=\"#method.bitor-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign%3C%26bool%3E-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26bool%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#652-655\">source</a><a href=\"#impl-BitOrAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#658\">source</a><a href=\"#method.bitor_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3C%26bool%3E-for-%26bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26bool%3E-for-%26bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-17\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3C%26bool%3E-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26bool%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3CMask%3CT,+N%3E%3E-for-bool\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#593-596\">source</a><a href=\"#impl-BitXor%3CMask%3CT,+N%3E%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt; for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-16\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#601\">source</a><a href=\"#method.bitxor-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3Cbool%3E-for-%26bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Cbool%3E-for-%26bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for &amp;'a <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-18\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#580-583\">source</a><a href=\"#impl-BitXor%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-14\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#588\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt; as <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt;&gt;::<a class=\"associatedtype\" href=\"ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-19\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXorAssign%3C%26bool%3E-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26bool%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>^=</code> operation. <a href=\"ops/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXorAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#674-677\">source</a><a href=\"#impl-BitXorAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#680\">source</a><a href=\"#method.bitxor_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>^=</code> operation. <a href=\"ops/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXorAssign-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>^=</code> operation. <a href=\"ops/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#227-232\">source</a></span><a href=\"#impl-Clone-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#227-232\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2383\">source</a></span><a href=\"#impl-Debug-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2385\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#163\">source</a></span><a href=\"#impl-Default-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#163\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>false</code></p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2391\">source</a></span><a href=\"#impl-Display-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2392\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-AtomicBool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#2067\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-AtomicBool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"sync/atomic/struct.AtomicBool.html\" title=\"struct std::sync::atomic::AtomicBool\">AtomicBool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#2078\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(b: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"struct\" href=\"sync/atomic/struct.AtomicBool.html\" title=\"struct std::sync::atomic::AtomicBool\">AtomicBool</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> into an <code>AtomicBool</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::AtomicBool;\n<span class=\"kw\">let </span>atomic_bool = AtomicBool::from(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{atomic_bool:?}\"</span>), <span class=\"string\">\"true\"</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::atomic::AtomicBool;%0A++++let+atomic_bool+=+AtomicBool::from(true);%0A++++assert_eq!(format!(%22%7Batomic_bool:?%7D%22),+%22true%22)%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-f32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.68.0\">1.68.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#201\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-f32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.f32.html\">f32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#201\">source</a><a href=\"#method.from-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.f32.html\">f32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.f32.html\" title=\"primitive f32\"><code>f32</code></a> losslessly.\nThe resulting value is positive <code>0.0</code> for <code>false</code> and <code>1.0</code> for <code>true</code> values.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: f32 = <span class=\"bool-val\">false</span>.into();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">0.0</span>);\n<span class=\"macro\">assert!</span>(x.is_sign_positive());\n\n<span class=\"kw\">let </span>y: f32 = <span class=\"bool-val\">true</span>.into();\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"number\">1.0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+f32+=+false.into();%0A++++assert_eq!(x,+0.0);%0A++++assert!(x.is_sign_positive());%0A++++%0A++++let+y:+f32+=+true.into();%0A++++assert_eq!(y,+1.0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.68.0\">1.68.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#202\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#202\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.f64.html\" title=\"primitive f64\"><code>f64</code></a> losslessly.\nThe resulting value is positive <code>0.0</code> for <code>false</code> and <code>1.0</code> for <code>true</code> values.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: f64 = <span class=\"bool-val\">false</span>.into();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">0.0</span>);\n<span class=\"macro\">assert!</span>(x.is_sign_positive());\n\n<span class=\"kw\">let </span>y: f64 = <span class=\"bool-val\">true</span>.into();\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"number\">1.0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x:+f64+=+false.into();%0A++++assert_eq!(x,+0.0);%0A++++assert!(x.is_sign_positive());%0A++++%0A++++let+y:+f64+=+true.into();%0A++++assert_eq!(y,+1.0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-i128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#95\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i128.html\">i128</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#95\">source</a><a href=\"#method.from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i128.html\">i128</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.i128.html\" title=\"primitive i128\"><code>i128</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i128::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i128::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i128::from(true),+1);%0A++++assert_eq!(i128::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-i16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#92\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i16.html\">i16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#92\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i16.html\">i16</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.i16.html\" title=\"primitive i16\"><code>i16</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i16::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i16::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i16::from(true),+1);%0A++++assert_eq!(i16::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#93\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#93\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.i32.html\" title=\"primitive i32\"><code>i32</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i32::from(true),+1);%0A++++assert_eq!(i32::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#94\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#94\">source</a><a href=\"#method.from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.i64.html\" title=\"primitive i64\"><code>i64</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i64::from(true),+1);%0A++++assert_eq!(i64::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#91\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#91\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.i8.html\" title=\"primitive i8\"><code>i8</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i8::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(i8::from(true),+1);%0A++++assert_eq!(i8::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-isize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#96\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-isize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.isize.html\">isize</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#96\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.isize.html\" title=\"primitive isize\"><code>isize</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(isize::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(isize::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(isize::from(true),+1);%0A++++assert_eq!(isize::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-u128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#89\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u128.html\">u128</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#89\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.u128.html\" title=\"primitive u128\"><code>u128</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u128::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u128::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u128::from(true),+1);%0A++++assert_eq!(u128::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#86\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#86\">source</a><a href=\"#method.from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u16::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u16::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u16::from(true),+1);%0A++++assert_eq!(u16::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#87\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#87\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u32::from(true),+1);%0A++++assert_eq!(u32::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-u64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#88\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#88\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.u64.html\" title=\"primitive u64\"><code>u64</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u64::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u64::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u64::from(true),+1);%0A++++assert_eq!(u64::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#85\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u8.html\">u8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#85\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u8::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u8::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(u8::from(true),+1);%0A++++assert_eq!(u8::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cbool%3E-for-usize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#90\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-usize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#90\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(usize::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(usize::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(usize::from(true),+1);%0A++++assert_eq!(usize::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#641\">source</a></span><a href=\"#impl-FromStr-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#667\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"str/struct.ParseBoolError.html\" title=\"struct std::str::ParseBoolError\">ParseBoolError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parse a <code>bool</code> from a string.</p>\n<p>The only accepted values are <code>\"true\"</code> and <code>\"false\"</code>. Any other input\nwill return an error.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::str::FromStr;\n\n<span class=\"macro\">assert_eq!</span>(FromStr::from_str(<span class=\"string\">\"true\"</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>(FromStr::from_str(<span class=\"string\">\"false\"</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert!</span>(&lt;bool <span class=\"kw\">as </span>FromStr&gt;::from_str(<span class=\"string\">\"not even a boolean\"</span>).is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::str::FromStr;%0A++++%0A++++assert_eq!(FromStr::from_str(%22true%22),+Ok(true));%0A++++assert_eq!(FromStr::from_str(%22false%22),+Ok(false));%0A++++assert!(%3Cbool+as+FromStr%3E::from_str(%22not+even+a+boolean%22).is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note, in many cases, the <code>.parse()</code> method on <code>str</code> is more proper.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"true\"</span>.parse(), <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"false\"</span>.parse(), <span class=\"prelude-val\">Ok</span>(<span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert!</span>(<span class=\"string\">\"not even a boolean\"</span>.parse::&lt;bool&gt;().is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22true%22.parse(),+Ok(true));%0A++++assert_eq!(%22false%22.parse(),+Ok(false));%0A++++assert!(%22not+even+a+boolean%22.parse::%3Cbool%3E().is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"str/struct.ParseBoolError.html\" title=\"struct std::str::ParseBoolError\">ParseBoolError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#852\">source</a></span><a href=\"#impl-Hash-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#854\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-%26bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-%26bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-13\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1593\">source</a></span><a href=\"#impl-Ord-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1595\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1609\">source</a><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1614\">source</a><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1619\">source</a><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>, max: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/92391\" title=\"Tracking issue for const_cmp\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502\">source</a></span><a href=\"#impl-PartialEq-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">const fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">const fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1547\">source</a></span><a href=\"#impl-PartialOrd-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1549\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-ConstParamTy-for-bool\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#992-1003\">source</a><a href=\"#impl-ConstParamTy-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section><section id=\"impl-Copy-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#420-430\">source</a></span><a href=\"#impl-Copy-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section><section id=\"impl-Eq-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1511\">source</a></span><a href=\"#impl-Eq-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section><section id=\"impl-StructuralPartialEq-for-bool\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-bool\" class=\"impl\"><a href=\"#impl-Freeze-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section><section id=\"impl-RefUnwindSafe-for-bool\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section><section id=\"impl-Send-for-bool\" class=\"impl\"><a href=\"#impl-Send-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section><section id=\"impl-Sync-for-bool\" class=\"impl\"><a href=\"#impl-Sync-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section><section id=\"impl-Unpin-for-bool\" class=\"impl\"><a href=\"#impl-Unpin-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section><section id=\"impl-UnwindSafe-for-bool\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:09:34.063Z"
}