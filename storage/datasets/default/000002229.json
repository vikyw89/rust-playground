{
	"title": "IntoFuture in std::future - Rust",
	"url": "https://doc.rust-lang.org/stable/std/future/trait.IntoFuture.html",
	"markdown": "# IntoFuture in std::future - Rust\n\n```\npub trait IntoFuture {\n    type Output;\n    type IntoFuture: Future<Output = Self::Output>;\n\n    // Required method\n    fn into_future(self) -> Self::IntoFuture;\n}\n```\n\nExpand description\n\nConversion into a `Future`.\n\nBy implementing `IntoFuture` for a type, you define how it will be converted to a future.\n\n## [§](#await-desugaring)`.await` desugaring\n\nThe `.await` keyword desugars into a call to `IntoFuture::into_future` first before polling the future to completion. `IntoFuture` is implemented for all `T: Future` which means the `into_future` method will be available on all futures.\n\n```\nuse std::future::IntoFuture;\n\nlet v = async { \"meow\" };\nlet mut fut = v.into_future();\nassert_eq!(\"meow\", fut.await);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::IntoFuture;%0A++++%0A++++async+fn+foo()+%7B%0A++++let+v+=+async+%7B+%22meow%22+%7D;%0A++++let+mut+fut+=+v.into_future();%0A++++assert_eq!(%22meow%22,+fut.await);%0A++++%7D%0A%7D&edition=2021)\n\n## [§](#async-builders)Async builders\n\nWhen implementing futures manually there will often be a choice between implementing `Future` or `IntoFuture` for a type. Implementing `Future` is a good choice in most cases. But implementing `IntoFuture` is most useful when implementing “async builder” types, which allow their values to be modified multiple times before being `.await`ed.\n\n```\nuse std::future::{ready, Ready, IntoFuture};\n\n/// Eventually multiply two numbers\npub struct Multiply {\n    num: u16,\n    factor: u16,\n}\n\nimpl Multiply {\n    /// Construct a new instance of `Multiply`.\n    pub fn new(num: u16, factor: u16) -> Self {\n        Self { num, factor }\n    }\n\n    /// Set the number to multiply by the factor.\n    pub fn number(mut self, num: u16) -> Self {\n        self.num = num;\n        self\n    }\n\n    /// Set the factor to multiply the number with.\n    pub fn factor(mut self, factor: u16) -> Self {\n        self.factor = factor;\n        self\n    }\n}\n\nimpl IntoFuture for Multiply {\n    type Output = u16;\n    type IntoFuture = Ready<Self::Output>;\n\n    fn into_future(self) -> Self::IntoFuture {\n        ready(self.num * self.factor)\n    }\n}\n\n// NOTE: Rust does not yet have an `async fn main` function, that functionality\n// currently only exists in the ecosystem.\nasync fn run() {\n    let num = Multiply::new(0, 0)  // initialize the builder to number: 0, factor: 0\n        .number(2)                 // change the number to 2\n        .factor(2)                 // change the factor to 2\n        .await;                    // convert to future and .await\n\n    assert_eq!(num, 4);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::%7Bready,+Ready,+IntoFuture%7D;%0A++++%0A++++///+Eventually+multiply+two+numbers%0A++++pub+struct+Multiply+%7B%0A++++++++num:+u16,%0A++++++++factor:+u16,%0A++++%7D%0A++++%0A++++impl+Multiply+%7B%0A++++++++///+Construct+a+new+instance+of+%60Multiply%60.%0A++++++++pub+fn+new(num:+u16,+factor:+u16)+-%3E+Self+%7B%0A++++++++++++Self+%7B+num,+factor+%7D%0A++++++++%7D%0A++++%0A++++++++///+Set+the+number+to+multiply+by+the+factor.%0A++++++++pub+fn+number(mut+self,+num:+u16)+-%3E+Self+%7B%0A++++++++++++self.num+=+num;%0A++++++++++++self%0A++++++++%7D%0A++++%0A++++++++///+Set+the+factor+to+multiply+the+number+with.%0A++++++++pub+fn+factor(mut+self,+factor:+u16)+-%3E+Self+%7B%0A++++++++++++self.factor+=+factor;%0A++++++++++++self%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+IntoFuture+for+Multiply+%7B%0A++++++++type+Output+=+u16;%0A++++++++type+IntoFuture+=+Ready%3CSelf::Output%3E;%0A++++%0A++++++++fn+into_future(self)+-%3E+Self::IntoFuture+%7B%0A++++++++++++ready(self.num+*+self.factor)%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+NOTE:+Rust+does+not+yet+have+an+%60async+fn+main%60+function,+that+functionality%0A++++//+currently+only+exists+in+the+ecosystem.%0A++++async+fn+run()+%7B%0A++++++++let+num+=+Multiply::new(0,+0)++//+initialize+the+builder+to+number:+0,+factor:+0%0A++++++++++++.number(2)+++++++++++++++++//+change+the+number+to+2%0A++++++++++++.factor(2)+++++++++++++++++//+change+the+factor+to+2%0A++++++++++++.await;++++++++++++++++++++//+convert+to+future+and+.await%0A++++%0A++++++++assert_eq!(num,+4);%0A++++%7D%0A%7D&edition=2021)\n\n## [§](#usage-in-trait-bounds)Usage in trait bounds\n\nUsing `IntoFuture` in trait bounds allows a function to be generic over both `Future` and `IntoFuture`. This is convenient for users of the function, so when they are using it they don’t have to make an extra call to `IntoFuture::into_future` to obtain an instance of `Future`:\n\n```\nuse std::future::IntoFuture;\n\n/// Convert the output of a future to a string.\nasync fn fut_to_string<Fut>(fut: Fut) -> String\nwhere\n    Fut: IntoFuture,\n    Fut::Output: std::fmt::Debug,\n{\n    format!(\"{:?}\", fut.await)\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::IntoFuture;%0A++++%0A++++///+Convert+the+output+of+a+future+to+a+string.%0A++++async+fn+fut_to_string%3CFut%3E(fut:+Fut)+-%3E+String%0A++++where%0A++++++++Fut:+IntoFuture,%0A++++++++Fut::Output:+std::fmt::Debug,%0A++++%7B%0A++++++++format!(%22%7B:?%7D%22,+fut.await)%0A++++%7D%0A%7D&edition=2021)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#111)\n\nThe output that the future will produce on completion.\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#115)\n\nWhich kind of future are we turning this into?\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#134)\n\nCreates a future from a value.\n\n##### [§](#examples)Examples\n\nBasic usage:\n\n```\nuse std::future::IntoFuture;\n\nlet v = async { \"meow\" };\nlet mut fut = v.into_future();\nassert_eq!(\"meow\", fut.await);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::IntoFuture;%0A++++%0A++++async+fn+foo()+%7B%0A++++let+v+=+async+%7B+%22meow%22+%7D;%0A++++let+mut+fut+=+v.into_future();%0A++++assert_eq!(%22meow%22,+fut.await);%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Conversion into a `Future`.\"><title>IntoFuture in std::future - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">IntoFuture</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">IntoFuture</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.IntoFuture\">IntoFuture</a></li><li><a href=\"#associatedtype.Output\">Output</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.into_future\">into_future</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::future</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.join.html\">join</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AsyncDropInPlace.html\">AsyncDropInPlace</a></li><li><a href=\"struct.Pending.html\">Pending</a></li><li><a href=\"struct.PollFn.html\">PollFn</a></li><li><a href=\"struct.Ready.html\">Ready</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsyncDrop.html\">AsyncDrop</a></li><li><a href=\"trait.Future.html\">Future</a></li><li><a href=\"trait.IntoFuture.html\">IntoFuture</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.async_drop.html\">async_drop</a></li><li><a href=\"fn.async_drop_in_place.html\">async_drop_in_place</a></li><li><a href=\"fn.pending.html\">pending</a></li><li><a href=\"fn.poll_fn.html\">poll_fn</a></li><li><a href=\"fn.ready.html\">ready</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">future</a>::<wbr><a class=\"trait\" href=\"#\">IntoFuture</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#108\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait IntoFuture {\n    type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a>;\n    type <a href=\"#associatedtype.IntoFuture\" class=\"associatedtype\">IntoFuture</a>: <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"trait.IntoFuture.html#associatedtype.Output\" title=\"type std::future::IntoFuture::Output\">Output</a>&gt;;\n\n    // Required method\n    fn <a href=\"#tymethod.into_future\" class=\"fn\">into_future</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.IntoFuture.html#associatedtype.IntoFuture\" title=\"type std::future::IntoFuture::IntoFuture\">IntoFuture</a>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Conversion into a <code>Future</code>.</p>\n<p>By implementing <code>IntoFuture</code> for a type, you define how it will be\nconverted to a future.</p>\n<h2 id=\"await-desugaring\"><a class=\"doc-anchor\" href=\"#await-desugaring\">§</a><code>.await</code> desugaring</h2>\n<p>The <code>.await</code> keyword desugars into a call to <code>IntoFuture::into_future</code>\nfirst before polling the future to completion. <code>IntoFuture</code> is implemented\nfor all <code>T: Future</code> which means the <code>into_future</code> method will be available\non all futures.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::future::IntoFuture;\n\n<span class=\"kw\">let </span>v = <span class=\"kw\">async </span>{ <span class=\"string\">\"meow\" </span>};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fut = v.into_future();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"meow\"</span>, fut.<span class=\"kw\">await</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::IntoFuture;%0A++++%0A++++async+fn+foo()+%7B%0A++++let+v+=+async+%7B+%22meow%22+%7D;%0A++++let+mut+fut+=+v.into_future();%0A++++assert_eq!(%22meow%22,+fut.await);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"async-builders\"><a class=\"doc-anchor\" href=\"#async-builders\">§</a>Async builders</h2>\n<p>When implementing futures manually there will often be a choice between\nimplementing <code>Future</code> or <code>IntoFuture</code> for a type. Implementing <code>Future</code> is a\ngood choice in most cases. But implementing <code>IntoFuture</code> is most useful when\nimplementing “async builder” types, which allow their values to be modified\nmultiple times before being <code>.await</code>ed.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::future::{ready, Ready, IntoFuture};\n\n<span class=\"doccomment\">/// Eventually multiply two numbers\n</span><span class=\"kw\">pub struct </span>Multiply {\n    num: u16,\n    factor: u16,\n}\n\n<span class=\"kw\">impl </span>Multiply {\n    <span class=\"doccomment\">/// Construct a new instance of `Multiply`.\n    </span><span class=\"kw\">pub fn </span>new(num: u16, factor: u16) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ num, factor }\n    }\n\n    <span class=\"doccomment\">/// Set the number to multiply by the factor.\n    </span><span class=\"kw\">pub fn </span>number(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, num: u16) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.num = num;\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Set the factor to multiply the number with.\n    </span><span class=\"kw\">pub fn </span>factor(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, factor: u16) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.factor = factor;\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"kw\">impl </span>IntoFuture <span class=\"kw\">for </span>Multiply {\n    <span class=\"kw\">type </span>Output = u16;\n    <span class=\"kw\">type </span>IntoFuture = Ready&lt;<span class=\"self\">Self</span>::Output&gt;;\n\n    <span class=\"kw\">fn </span>into_future(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoFuture {\n        ready(<span class=\"self\">self</span>.num * <span class=\"self\">self</span>.factor)\n    }\n}\n\n<span class=\"comment\">// NOTE: Rust does not yet have an `async fn main` function, that functionality\n// currently only exists in the ecosystem.\n</span><span class=\"kw\">async fn </span>run() {\n    <span class=\"kw\">let </span>num = Multiply::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)  <span class=\"comment\">// initialize the builder to number: 0, factor: 0\n        </span>.number(<span class=\"number\">2</span>)                 <span class=\"comment\">// change the number to 2\n        </span>.factor(<span class=\"number\">2</span>)                 <span class=\"comment\">// change the factor to 2\n        </span>.<span class=\"kw\">await</span>;                    <span class=\"comment\">// convert to future and .await\n\n    </span><span class=\"macro\">assert_eq!</span>(num, <span class=\"number\">4</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::%7Bready,+Ready,+IntoFuture%7D;%0A++++%0A++++///+Eventually+multiply+two+numbers%0A++++pub+struct+Multiply+%7B%0A++++++++num:+u16,%0A++++++++factor:+u16,%0A++++%7D%0A++++%0A++++impl+Multiply+%7B%0A++++++++///+Construct+a+new+instance+of+%60Multiply%60.%0A++++++++pub+fn+new(num:+u16,+factor:+u16)+-%3E+Self+%7B%0A++++++++++++Self+%7B+num,+factor+%7D%0A++++++++%7D%0A++++%0A++++++++///+Set+the+number+to+multiply+by+the+factor.%0A++++++++pub+fn+number(mut+self,+num:+u16)+-%3E+Self+%7B%0A++++++++++++self.num+=+num;%0A++++++++++++self%0A++++++++%7D%0A++++%0A++++++++///+Set+the+factor+to+multiply+the+number+with.%0A++++++++pub+fn+factor(mut+self,+factor:+u16)+-%3E+Self+%7B%0A++++++++++++self.factor+=+factor;%0A++++++++++++self%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+IntoFuture+for+Multiply+%7B%0A++++++++type+Output+=+u16;%0A++++++++type+IntoFuture+=+Ready%3CSelf::Output%3E;%0A++++%0A++++++++fn+into_future(self)+-%3E+Self::IntoFuture+%7B%0A++++++++++++ready(self.num+*+self.factor)%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+NOTE:+Rust+does+not+yet+have+an+%60async+fn+main%60+function,+that+functionality%0A++++//+currently+only+exists+in+the+ecosystem.%0A++++async+fn+run()+%7B%0A++++++++let+num+=+Multiply::new(0,+0)++//+initialize+the+builder+to+number:+0,+factor:+0%0A++++++++++++.number(2)+++++++++++++++++//+change+the+number+to+2%0A++++++++++++.factor(2)+++++++++++++++++//+change+the+factor+to+2%0A++++++++++++.await;++++++++++++++++++++//+convert+to+future+and+.await%0A++++%0A++++++++assert_eq!(num,+4);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"usage-in-trait-bounds\"><a class=\"doc-anchor\" href=\"#usage-in-trait-bounds\">§</a>Usage in trait bounds</h2>\n<p>Using <code>IntoFuture</code> in trait bounds allows a function to be generic over both\n<code>Future</code> and <code>IntoFuture</code>. This is convenient for users of the function, so\nwhen they are using it they don’t have to make an extra call to\n<code>IntoFuture::into_future</code> to obtain an instance of <code>Future</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::future::IntoFuture;\n\n<span class=\"doccomment\">/// Convert the output of a future to a string.\n</span><span class=\"kw\">async fn </span>fut_to_string&lt;Fut&gt;(fut: Fut) -&gt; String\n<span class=\"kw\">where\n    </span>Fut: IntoFuture,\n    Fut::Output: std::fmt::Debug,\n{\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, fut.<span class=\"kw\">await</span>)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::IntoFuture;%0A++++%0A++++///+Convert+the+output+of+a+future+to+a+string.%0A++++async+fn+fut_to_string%3CFut%3E(fut:+Fut)+-%3E+String%0A++++where%0A++++++++Fut:+IntoFuture,%0A++++++++Fut::Output:+std::fmt::Debug,%0A++++%7B%0A++++++++format!(%22%7B:?%7D%22,+fut.await)%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#111\">source</a></span><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a></h4></section></summary><div class=\"docblock\"><p>The output that the future will produce on completion.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoFuture\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#115\">source</a></span><h4 class=\"code-header\">type <a href=\"#associatedtype.IntoFuture\" class=\"associatedtype\">IntoFuture</a>: <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"trait.IntoFuture.html#associatedtype.Output\" title=\"type std::future::IntoFuture::Output\">Output</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Which kind of future are we turning this into?</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.into_future\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#134\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.into_future\" class=\"fn\">into_future</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.IntoFuture.html#associatedtype.IntoFuture\" title=\"type std::future::IntoFuture::IntoFuture\">IntoFuture</a></h4></section></summary><div class=\"docblock\"><p>Creates a future from a value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::future::IntoFuture;\n\n<span class=\"kw\">let </span>v = <span class=\"kw\">async </span>{ <span class=\"string\">\"meow\" </span>};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fut = v.into_future();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"meow\"</span>, fut.<span class=\"kw\">await</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::future::IntoFuture;%0A++++%0A++++async+fn+foo()+%7B%0A++++let+v+=+async+%7B+%22meow%22+%7D;%0A++++let+mut+fut+=+v.into_future();%0A++++assert_eq!(%22meow%22,+fut.await);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-IntoFuture-for-F\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#138\">source</a></span><a href=\"#impl-IntoFuture-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"trait.IntoFuture.html\" title=\"trait std::future::IntoFuture\">IntoFuture</a> for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section><section id=\"associatedtype.IntoFuture-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoFuture-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.IntoFuture\" class=\"associatedtype\">IntoFuture</a> = F</h4></section></div></details></div><script src=\"../../trait.impl/core/future/into_future/trait.IntoFuture.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:16.243Z"
}