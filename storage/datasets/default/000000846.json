{
	"title": "std::collections::hash_map - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/hash_map/index.html",
	"markdown": "# std::collections::hash\\_map - Rust\n\nExpand description\n\nA hash map implemented with quadratic probing and SIMD lookup.\n\n-   A draining iterator over the entries of a `HashMap`.\n    \n-   A [hash map](about:blank/index.html#use-a-hashmap-when \"mod std::collections\") implemented with quadratic probing and SIMD lookup.\n    \n-   An owning iterator over the entries of a `HashMap`.\n    \n-   An owning iterator over the keys of a `HashMap`.\n    \n-   An owning iterator over the values of a `HashMap`.\n    \n-   An iterator over the entries of a `HashMap`.\n    \n-   A mutable iterator over the entries of a `HashMap`.\n    \n-   An iterator over the keys of a `HashMap`.\n    \n-   A view into an occupied entry in a `HashMap`. It is part of the [`Entry`](enum.Entry.html \"enum std::collections::hash_map::Entry\") enum.\n    \n-   `RandomState` is the default state for [`HashMap`](struct.HashMap.html \"struct std::collections::hash_map::HashMap\") types.\n    \n-   A view into a vacant entry in a `HashMap`. It is part of the [`Entry`](enum.Entry.html \"enum std::collections::hash_map::Entry\") enum.\n    \n-   An iterator over the values of a `HashMap`.\n    \n-   A mutable iterator over the values of a `HashMap`.\n    \n-   A draining, filtering iterator over the entries of a `HashMap`.\n    \n-   The error returned by [`try_insert`](about:blank/struct.HashMap.html#method.try_insert \"method std::collections::hash_map::HashMap::try_insert\") when the key already exists.\n    \n-   A builder for computing where in a HashMap a key-value pair would be stored.\n    \n-   A builder for computing where in a HashMap a key-value pair would be stored.\n    \n-   A view into an occupied entry in a `HashMap`. It is part of the [`RawEntryMut`](enum.RawEntryMut.html \"enum std::collections::hash_map::RawEntryMut\") enum.\n    \n-   A view into a vacant entry in a `HashMap`. It is part of the [`RawEntryMut`](enum.RawEntryMut.html \"enum std::collections::hash_map::RawEntryMut\") enum.\n    \n\n-   A view into a single entry in a map, which may either be vacant or occupied.\n    \n-   A view into a single entry in a map, which may either be vacant or occupied.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A hash map implemented with quadratic probing and SIMD lookup.\"><title>std::collections::hash_map - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module hash_map</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module hash_map</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#enums\">Enums</a></li></ul></section><h2><a href=\"../index.html\">In std::collections</a></h2><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../binary_heap/index.html\">binary_heap</a></li><li><a href=\"../btree_map/index.html\">btree_map</a></li><li><a href=\"../btree_set/index.html\">btree_set</a></li><li><a href=\"../hash_map/index.html\">hash_map</a></li><li><a href=\"../hash_set/index.html\">hash_set</a></li><li><a href=\"../linked_list/index.html\">linked_list</a></li><li><a href=\"../vec_deque/index.html\">vec_deque</a></li></ul><h3><a href=\"../index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"../struct.BTreeMap.html\">BTreeMap</a></li><li><a href=\"../struct.BTreeSet.html\">BTreeSet</a></li><li><a href=\"../struct.BinaryHeap.html\">BinaryHeap</a></li><li><a href=\"../struct.HashMap.html\">HashMap</a></li><li><a href=\"../struct.HashSet.html\">HashSet</a></li><li><a href=\"../struct.LinkedList.html\">LinkedList</a></li><li><a href=\"../struct.TryReserveError.html\">TryReserveError</a></li><li><a href=\"../struct.VecDeque.html\">VecDeque</a></li></ul><h3><a href=\"../index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"../enum.TryReserveErrorKind.html\">TryReserveErrorKind</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">collections</a>::<wbr><a class=\"mod\" href=\"#\">hash_map</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/collections/mod.rs.html#438\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A hash map implemented with quadratic probing and SIMD lookup.</p>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.DefaultHasher.html\" title=\"struct std::collections::hash_map::DefaultHasher\">DefaultHasher</a></div><div class=\"desc docblock-short\">The default <a href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a> used by <a href=\"struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\"><code>RandomState</code></a>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Drain.html\" title=\"struct std::collections::hash_map::Drain\">Drain</a></div><div class=\"desc docblock-short\">A draining iterator over the entries of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a></div><div class=\"desc docblock-short\">A <a href=\"../index.html#use-a-hashmap-when\" title=\"mod std::collections\">hash map</a> implemented with quadratic probing and SIMD lookup.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.IntoIter.html\" title=\"struct std::collections::hash_map::IntoIter\">IntoIter</a></div><div class=\"desc docblock-short\">An owning iterator over the entries of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.IntoKeys.html\" title=\"struct std::collections::hash_map::IntoKeys\">IntoKeys</a></div><div class=\"desc docblock-short\">An owning iterator over the keys of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.IntoValues.html\" title=\"struct std::collections::hash_map::IntoValues\">IntoValues</a></div><div class=\"desc docblock-short\">An owning iterator over the values of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::collections::hash_map::Iter\">Iter</a></div><div class=\"desc docblock-short\">An iterator over the entries of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::collections::hash_map::IterMut\">IterMut</a></div><div class=\"desc docblock-short\">A mutable iterator over the entries of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Keys.html\" title=\"struct std::collections::hash_map::Keys\">Keys</a></div><div class=\"desc docblock-short\">An iterator over the keys of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.OccupiedEntry.html\" title=\"struct std::collections::hash_map::OccupiedEntry\">OccupiedEntry</a></div><div class=\"desc docblock-short\">A view into an occupied entry in a <code>HashMap</code>.\nIt is part of the <a href=\"enum.Entry.html\" title=\"enum std::collections::hash_map::Entry\"><code>Entry</code></a> enum.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a></div><div class=\"desc docblock-short\"><code>RandomState</code> is the default state for <a href=\"struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\"><code>HashMap</code></a> types.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.VacantEntry.html\" title=\"struct std::collections::hash_map::VacantEntry\">VacantEntry</a></div><div class=\"desc docblock-short\">A view into a vacant entry in a <code>HashMap</code>.\nIt is part of the <a href=\"enum.Entry.html\" title=\"enum std::collections::hash_map::Entry\"><code>Entry</code></a> enum.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Values.html\" title=\"struct std::collections::hash_map::Values\">Values</a></div><div class=\"desc docblock-short\">An iterator over the values of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ValuesMut.html\" title=\"struct std::collections::hash_map::ValuesMut\">ValuesMut</a></div><div class=\"desc docblock-short\">A mutable iterator over the values of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ExtractIf.html\" title=\"struct std::collections::hash_map::ExtractIf\">ExtractIf</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A draining, filtering iterator over the entries of a <code>HashMap</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.OccupiedError.html\" title=\"struct std::collections::hash_map::OccupiedError\">OccupiedError</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">The error returned by <a href=\"struct.HashMap.html#method.try_insert\" title=\"method std::collections::hash_map::HashMap::try_insert\"><code>try_insert</code></a> when the key already exists.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RawEntryBuilder.html\" title=\"struct std::collections::hash_map::RawEntryBuilder\">RawEntryBuilder</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A builder for computing where in a HashMap a key-value pair would be stored.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A builder for computing where in a HashMap a key-value pair would be stored.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RawOccupiedEntryMut.html\" title=\"struct std::collections::hash_map::RawOccupiedEntryMut\">RawOccupiedEntryMut</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A view into an occupied entry in a <code>HashMap</code>.\nIt is part of the <a href=\"enum.RawEntryMut.html\" title=\"enum std::collections::hash_map::RawEntryMut\"><code>RawEntryMut</code></a> enum.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RawVacantEntryMut.html\" title=\"struct std::collections::hash_map::RawVacantEntryMut\">RawVacantEntryMut</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A view into a vacant entry in a <code>HashMap</code>.\nIt is part of the <a href=\"enum.RawEntryMut.html\" title=\"enum std::collections::hash_map::RawEntryMut\"><code>RawEntryMut</code></a> enum.</div></li></ul><h2 id=\"enums\" class=\"section-header\">Enums<a href=\"#enums\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.Entry.html\" title=\"enum std::collections::hash_map::Entry\">Entry</a></div><div class=\"desc docblock-short\">A view into a single entry in a map, which may either be vacant or occupied.</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.RawEntryMut.html\" title=\"enum std::collections::hash_map::RawEntryMut\">RawEntryMut</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A view into a single entry in a map, which may either be vacant or occupied.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:58.402Z"
}