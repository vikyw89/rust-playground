{
	"title": "Field in std::intrinsics::mir - Rust",
	"url": "https://doc.rust-lang.org/stable/std/intrinsics/mir/fn.Field.html",
	"markdown": "# Field in std::intrinsics::mir - Rust\n\n```\npub fn Field<F>(place: (), field: u32) -> F\n```\n\nðŸ”¬This is a nightly-only experimental API. (`custom_mir`)\n\nExpand description\n\nAccess the field with the given index of some place.\n\nThis only makes sense to use in conjunction with [`Variant`](fn.Variant.html \"fn std::intrinsics::mir::Variant\"). If the type you are looking to access the field of does not have variants, you can use normal field projection syntax.\n\nThere is no proper way to do a place projection to a variant in Rust, and so these two functions are a workaround. You can access a field of a variant via `Field(Variant(place, var_idx), field_idx)`, where `var_idx` and `field_idx` are appropriate literals. Some caveats:\n\n-   The return type of `Variant` is always `()`. Donâ€™t worry about that, the correct MIR will still be generated.\n-   In some situations, the return type of `Field` cannot be inferred. You may need to annotate it on the function in these cases.\n-   Since `Field` is a function call which is not a place expression, using this on the left hand side of an expression is rejected by the compiler. [`place!`](macro.place.html \"macro std::intrinsics::mir::place\") is a macro provided to work around that issue. Wrap the left hand side of an assignment in the macro to convince the compiler that itâ€™s ok.\n\n## [Â§](#examples)Examples\n\n```\n#![allow(internal_features)]\n#![feature(custom_mir, core_intrinsics)]\n\nuse core::intrinsics::mir::*;\n\n#[custom_mir(dialect = \"built\")]\nfn unwrap_deref(opt: Option<&i32>) -> i32 {\n    mir! {\n        {\n            RET = *Field::<&i32>(Variant(opt, 1), 0);\n            Return()\n        }\n    }\n}\n\n#[custom_mir(dialect = \"built\")]\nfn set(opt: &mut Option<i32>) {\n    mir! {\n        {\n            place!(Field(Variant(*opt, 1), 0)) = 5;\n            Return()\n        }\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(internal_features)%5D%0A%23!%5Bfeature(custom_mir,+core_intrinsics)%5D%0A%0Afn+main()+%7B%0A++++use+core::intrinsics::mir::*;%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++fn+unwrap_deref(opt:+Option%3C%26i32%3E)+-%3E+i32+%7B%0A++++++++mir!+%7B%0A++++++++++++%7B%0A++++++++++++++++RET+=+*Field::%3C%26i32%3E(Variant(opt,+1),+0);%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++fn+set(opt:+%26mut+Option%3Ci32%3E)+%7B%0A++++++++mir!+%7B%0A++++++++++++%7B%0A++++++++++++++++place!(Field(Variant(*opt,+1),+0))+=+5;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Access the field with the given index of some place.\"><title>Field in std::intrinsics::mir - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::intrinsics::mir</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.mir.html\">mir</a></li><li><a href=\"macro.place.html\">place</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ReturnToArg.html\">ReturnToArg</a></li><li><a href=\"struct.UnwindActionArg.html\">UnwindActionArg</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.BasicBlock.html\">BasicBlock</a></li><li><a href=\"enum.UnwindTerminateReason.html\">UnwindTerminateReason</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.Assume.html\">Assume</a></li><li><a href=\"fn.Call.html\">Call</a></li><li><a href=\"fn.CastTransmute.html\">CastTransmute</a></li><li><a href=\"fn.Checked.html\">Checked</a></li><li><a href=\"fn.CopyForDeref.html\">CopyForDeref</a></li><li><a href=\"fn.Deinit.html\">Deinit</a></li><li><a href=\"fn.Discriminant.html\">Discriminant</a></li><li><a href=\"fn.Drop.html\">Drop</a></li><li><a href=\"fn.Field.html\">Field</a></li><li><a href=\"fn.Goto.html\">Goto</a></li><li><a href=\"fn.Len.html\">Len</a></li><li><a href=\"fn.Move.html\">Move</a></li><li><a href=\"fn.Offset.html\">Offset</a></li><li><a href=\"fn.PtrMetadata.html\">PtrMetadata</a></li><li><a href=\"fn.Retag.html\">Retag</a></li><li><a href=\"fn.Return.html\">Return</a></li><li><a href=\"fn.ReturnTo.html\">ReturnTo</a></li><li><a href=\"fn.SetDiscriminant.html\">SetDiscriminant</a></li><li><a href=\"fn.Static.html\">Static</a></li><li><a href=\"fn.StaticMut.html\">StaticMut</a></li><li><a href=\"fn.StorageDead.html\">StorageDead</a></li><li><a href=\"fn.StorageLive.html\">StorageLive</a></li><li><a href=\"fn.Unreachable.html\">Unreachable</a></li><li><a href=\"fn.UnwindCleanup.html\">UnwindCleanup</a></li><li><a href=\"fn.UnwindContinue.html\">UnwindContinue</a></li><li><a href=\"fn.UnwindResume.html\">UnwindResume</a></li><li><a href=\"fn.UnwindTerminate.html\">UnwindTerminate</a></li><li><a href=\"fn.UnwindUnreachable.html\">UnwindUnreachable</a></li><li><a href=\"fn.Variant.html\">Variant</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">intrinsics</a>::<wbr><a href=\"index.html\">mir</a>::<wbr><a class=\"fn\" href=\"#\">Field</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/intrinsics/mir.rs.html#381-431\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn Field&lt;F&gt;(place: <a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, field: <a class=\"primitive\" href=\"../../primitive.u32.html\">u32</a>) -&gt; F</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>custom_mir</code>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Access the field with the given index of some place.</p>\n<p>This only makes sense to use in conjunction with <a href=\"fn.Variant.html\" title=\"fn std::intrinsics::mir::Variant\"><code>Variant</code></a>. If the type you are looking to\naccess the field of does not have variants, you can use normal field projection syntax.</p>\n<p>There is no proper way to do a place projection to a variant in Rust, and so these two\nfunctions are a workaround. You can access a field of a variant via <code>Field(Variant(place, var_idx), field_idx)</code>, where <code>var_idx</code> and <code>field_idx</code> are appropriate literals. Some\ncaveats:</p>\n<ul>\n<li>The return type of <code>Variant</code> is always <code>()</code>. Donâ€™t worry about that, the correct MIR will\nstill be generated.</li>\n<li>In some situations, the return type of <code>Field</code> cannot be inferred. You may need to\nannotate it on the function in these cases.</li>\n<li>Since <code>Field</code> is a function call which is not a place expression, using this on the left\nhand side of an expression is rejected by the compiler. <a href=\"macro.place.html\" title=\"macro std::intrinsics::mir::place\"><code>place!</code></a> is a macro provided to\nwork around that issue. Wrap the left hand side of an assignment in the macro to convince\nthe compiler that itâ€™s ok.</li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![allow(internal_features)]\n#![feature(custom_mir, core_intrinsics)]\n\n</span><span class=\"kw\">use </span>core::intrinsics::mir::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[custom_mir(dialect = <span class=\"string\">\"built\"</span>)]\n</span><span class=\"kw\">fn </span>unwrap_deref(opt: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>i32&gt;) -&gt; i32 {\n    <span class=\"macro\">mir!</span> {\n        {\n            RET = <span class=\"kw-2\">*</span>Field::&lt;<span class=\"kw-2\">&amp;</span>i32&gt;(Variant(opt, <span class=\"number\">1</span>), <span class=\"number\">0</span>);\n            Return()\n        }\n    }\n}\n\n<span class=\"attr\">#[custom_mir(dialect = <span class=\"string\">\"built\"</span>)]\n</span><span class=\"kw\">fn </span>set(opt: <span class=\"kw-2\">&amp;mut </span><span class=\"prelude-ty\">Option</span>&lt;i32&gt;) {\n    <span class=\"macro\">mir!</span> {\n        {\n            <span class=\"macro\">place!</span>(Field(Variant(<span class=\"kw-2\">*</span>opt, <span class=\"number\">1</span>), <span class=\"number\">0</span>)) = <span class=\"number\">5</span>;\n            Return()\n        }\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(internal_features)%5D%0A%23!%5Bfeature(custom_mir,+core_intrinsics)%5D%0A%0Afn+main()+%7B%0A++++use+core::intrinsics::mir::*;%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++fn+unwrap_deref(opt:+Option%3C%26i32%3E)+-%3E+i32+%7B%0A++++++++mir!+%7B%0A++++++++++++%7B%0A++++++++++++++++RET+=+*Field::%3C%26i32%3E(Variant(opt,+1),+0);%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++%23%5Bcustom_mir(dialect+=+%22built%22)%5D%0A++++fn+set(opt:+%26mut+Option%3Ci32%3E)+%7B%0A++++++++mir!+%7B%0A++++++++++++%7B%0A++++++++++++++++place!(Field(Variant(*opt,+1),+0))+=+5;%0A++++++++++++++++Return()%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:39.818Z"
}