{
	"title": "External Tools - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/external-tools.html",
	"markdown": "# External Tools - The Cargo Book\n\nOne of the goals of Cargo is simple integration with third-party tools, like IDEs and other build systems. To make integration easier, Cargo has several facilities:\n\n-   a [`cargo metadata`](../commands/cargo-metadata.html) command, which outputs package structure and dependencies information in JSON,\n    \n-   a `--message-format` flag, which outputs information about a particular build, and\n    \n-   support for custom subcommands.\n    \n\n## [Information about package structure](#information-about-package-structure)\n\nYou can use [`cargo metadata`](../commands/cargo-metadata.html) command to get information about package structure and dependencies. See the [`cargo metadata`](../commands/cargo-metadata.html) documentation for details on the format of the output.\n\nThe format is stable and versioned. When calling `cargo metadata`, you should pass `--format-version` flag explicitly to avoid forward incompatibility hazard.\n\nIf you are using Rust, the [cargo\\_metadata](https://crates.io/crates/cargo_metadata) crate can be used to parse the output.\n\n## [JSON messages](#json-messages)\n\nWhen passing `--message-format=json`, Cargo will output the following information during the build:\n\n-   compiler errors and warnings,\n    \n-   produced artifacts,\n    \n-   results of the build scripts (for example, native dependencies).\n    \n\nThe output goes to stdout in the JSON object per line format. The `reason` field distinguishes different kinds of messages. The `package_id` field is a unique identifier for referring to the package, and as the `--package` argument to many commands. The syntax grammar can be found in chapter [Package ID Specifications](./pkgid-spec.html).\n\nThe `--message-format` option can also take additional formatting values which alter the way the JSON messages are computed and rendered. See the description of the `--message-format` option in the [build command documentation](../commands/cargo-build.html) for more details.\n\nIf you are using Rust, the [cargo\\_metadata](https://crates.io/crates/cargo_metadata) crate can be used to parse these messages.\n\n### [Compiler messages](#compiler-messages)\n\nThe “compiler-message” message includes output from the compiler, such as warnings and errors. See the [rustc JSON chapter](../../rustc/json.html) for details on `rustc`’s message format, which is embedded in the following structure:\n\n```javascript\n{\n    /* The \"reason\" indicates the kind of message. */\n    \"reason\": \"compiler-message\",\n    /* The Package ID, a unique identifier for referring to the package. */\n    \"package_id\": \"file:///path/to/my-package#0.1.0\",\n    /* Absolute path to the package manifest. */\n    \"manifest_path\": \"/path/to/my-package/Cargo.toml\",\n    /* The Cargo target (lib, bin, example, etc.) that generated the message. */\n    \"target\": {\n        /* Array of target kinds.\n           - lib targets list the `crate-type` values from the\n             manifest such as \"lib\", \"rlib\", \"dylib\",\n             \"proc-macro\", etc. (default [\"lib\"])\n           - binary is [\"bin\"]\n           - example is [\"example\"]\n           - integration test is [\"test\"]\n           - benchmark is [\"bench\"]\n           - build script is [\"custom-build\"]\n        */\n        \"kind\": [\n            \"lib\"\n        ],\n        /* Array of crate types.\n           - lib and example libraries list the `crate-type` values\n             from the manifest such as \"lib\", \"rlib\", \"dylib\",\n             \"proc-macro\", etc. (default [\"lib\"])\n           - all other target kinds are [\"bin\"]\n        */\n        \"crate_types\": [\n            \"lib\"\n        ],\n        /* The name of the target.\n           For lib targets, dashes will be replaced with underscores.\n        */\n        \"name\": \"my_package\",\n        /* Absolute path to the root source file of the target. */\n        \"src_path\": \"/path/to/my-package/src/lib.rs\",\n        /* The Rust edition of the target.\n           Defaults to the package edition.\n        */\n        \"edition\": \"2018\",\n        /* Array of required features.\n           This property is not included if no required features are set.\n        */\n        \"required-features\": [\"feat1\"],\n        /* Whether the target should be documented by `cargo doc`. */\n        \"doc\": true,\n        /* Whether or not this target has doc tests enabled, and\n           the target is compatible with doc testing.\n        */\n        \"doctest\": true\n        /* Whether or not this target should be built and run with `--test`\n        */\n        \"test\": true\n    },\n    /* The message emitted by the compiler.\n\n    See https://doc.rust-lang.org/rustc/json.html for details.\n    */\n    \"message\": {\n        /* ... */\n    }\n}\n\n```\n\n### [Artifact messages](#artifact-messages)\n\nFor every compilation step, a “compiler-artifact” message is emitted with the following structure:\n\n```javascript\n{\n    /* The \"reason\" indicates the kind of message. */\n    \"reason\": \"compiler-artifact\",\n    /* The Package ID, a unique identifier for referring to the package. */\n    \"package_id\": \"file:///path/to/my-package#0.1.0\",\n    /* Absolute path to the package manifest. */\n    \"manifest_path\": \"/path/to/my-package/Cargo.toml\",\n    /* The Cargo target (lib, bin, example, etc.) that generated the artifacts.\n       See the definition above for `compiler-message` for details.\n    */\n    \"target\": {\n        \"kind\": [\n            \"lib\"\n        ],\n        \"crate_types\": [\n            \"lib\"\n        ],\n        \"name\": \"my_package\",\n        \"src_path\": \"/path/to/my-package/src/lib.rs\",\n        \"edition\": \"2018\",\n        \"doc\": true,\n        \"doctest\": true,\n        \"test\": true\n    },\n    /* The profile indicates which compiler settings were used. */\n    \"profile\": {\n        /* The optimization level. */\n        \"opt_level\": \"0\",\n        /* The debug level, an integer of 0, 1, or 2, or a string\n           \"line-directives-only\" or \"line-tables-only\". If `null`, it implies\n           rustc's default of 0.\n        */\n        \"debuginfo\": 2,\n        /* Whether or not debug assertions are enabled. */\n        \"debug_assertions\": true,\n        /* Whether or not overflow checks are enabled. */\n        \"overflow_checks\": true,\n        /* Whether or not the `--test` flag is used. */\n        \"test\": false\n    },\n    /* Array of features enabled. */\n    \"features\": [\"feat1\", \"feat2\"],\n    /* Array of files generated by this step. */\n    \"filenames\": [\n        \"/path/to/my-package/target/debug/libmy_package.rlib\",\n        \"/path/to/my-package/target/debug/deps/libmy_package-be9f3faac0a26ef0.rmeta\"\n    ],\n    /* A string of the path to the executable that was created, or null if\n       this step did not generate an executable.\n    */\n    \"executable\": null,\n    /* Whether or not this step was actually executed.\n       When `true`, this means that the pre-existing artifacts were\n       up-to-date, and `rustc` was not executed. When `false`, this means that\n       `rustc` was run to generate the artifacts.\n    */\n    \"fresh\": true\n}\n\n\n```\n\n### [Build script output](#build-script-output)\n\nThe “build-script-executed” message includes the parsed output of a build script. Note that this is emitted even if the build script is not run; it will display the previously cached value. More details about build script output may be found in [the chapter on build scripts](build-scripts.html).\n\n```javascript\n{\n    /* The \"reason\" indicates the kind of message. */\n    \"reason\": \"build-script-executed\",\n    /* The Package ID, a unique identifier for referring to the package. */\n    \"package_id\": \"file:///path/to/my-package#0.1.0\",\n    /* Array of libraries to link, as indicated by the `cargo::rustc-link-lib`\n       instruction. Note that this may include a \"KIND=\" prefix in the string\n       where KIND is the library kind.\n    */\n    \"linked_libs\": [\"foo\", \"static=bar\"],\n    /* Array of paths to include in the library search path, as indicated by\n       the `cargo::rustc-link-search` instruction. Note that this may include a\n       \"KIND=\" prefix in the string where KIND is the library kind.\n    */\n    \"linked_paths\": [\"/some/path\", \"native=/another/path\"],\n    /* Array of cfg values to enable, as indicated by the `cargo::rustc-cfg`\n       instruction.\n    */\n    \"cfgs\": [\"cfg1\", \"cfg2=\\\"string\\\"\"],\n    /* Array of [KEY, VALUE] arrays of environment variables to set, as\n       indicated by the `cargo::rustc-env` instruction.\n    */\n    \"env\": [\n        [\"SOME_KEY\", \"some value\"],\n        [\"ANOTHER_KEY\", \"another value\"]\n    ],\n    /* An absolute path which is used as a value of `OUT_DIR` environmental\n       variable when compiling current package.\n    */\n    \"out_dir\": \"/some/path/in/target/dir\"\n}\n\n```\n\n### [Build finished](#build-finished)\n\nThe “build-finished” message is emitted at the end of the build.\n\n```javascript\n{\n    /* The \"reason\" indicates the kind of message. */\n    \"reason\": \"build-finished\",\n    /* Whether or not the build finished successfully. */\n    \"success\": true,\n}\n\n```\n\nThis message can be helpful for tools to know when to stop reading JSON messages. Commands such as `cargo test` or `cargo run` can produce additional output after the build has finished. This message lets a tool know that Cargo will not produce additional JSON messages, but there may be additional output that may be generated afterwards (such as the output generated by the program executed by `cargo run`).\n\n> Note: There is experimental nightly-only support for JSON output for tests, so additional test-specific JSON messages may begin arriving after the “build-finished” message if that is enabled.\n\n## [Custom subcommands](#custom-subcommands)\n\nCargo is designed to be extensible with new subcommands without having to modify Cargo itself. This is achieved by translating a cargo invocation of the form cargo `(?<command>[^ ]+)` into an invocation of an external tool `cargo-${command}`. The external tool must be present in one of the user’s `$PATH` directories.\n\n> **Note**: Cargo defaults to prioritizing external tools in `$CARGO_HOME/bin` over `$PATH`. Users can override this precedence by adding `$CARGO_HOME/bin` to `$PATH`.\n\nWhen Cargo invokes a custom subcommand, the first argument to the subcommand will be the filename of the custom subcommand, as usual. The second argument will be the subcommand name itself. For example, the second argument would be `${command}` when invoking `cargo-${command}`. Any additional arguments on the command line will be forwarded unchanged.\n\nCargo can also display the help output of a custom subcommand with `cargo help ${command}`. Cargo assumes that the subcommand will print a help message if its third argument is `--help`. So, `cargo help ${command}` would invoke `cargo-${command} ${command} --help`.\n\nCustom subcommands may use the `CARGO` environment variable to call back to Cargo. Alternatively, it can link to `cargo` crate as a library, but this approach has drawbacks:\n\n-   Cargo as a library is unstable: the API may change without deprecation\n-   versions of the linked Cargo library may be different from the Cargo binary\n\nInstead, it is encouraged to use the CLI interface to drive Cargo. The [`cargo metadata`](../commands/cargo-metadata.html) command can be used to obtain information about the current project (the [`cargo_metadata`](https://crates.io/crates/cargo_metadata) crate provides a Rust interface to this command).",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>External Tools - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/external-tools.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"external-tools\"><a class=\"header\" href=\"#external-tools\">External tools</a></h1>\n<p>One of the goals of Cargo is simple integration with third-party tools, like\nIDEs and other build systems. To make integration easier, Cargo has several\nfacilities:</p>\n<ul>\n<li>\n<p>a <a href=\"../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a> command, which outputs package structure and dependencies\ninformation in JSON,</p>\n</li>\n<li>\n<p>a <code class=\"hljs\">--message-format</code> flag, which outputs information about a particular build,\nand</p>\n</li>\n<li>\n<p>support for custom subcommands.</p>\n</li>\n</ul>\n<h2 id=\"information-about-package-structure\"><a class=\"header\" href=\"#information-about-package-structure\">Information about package structure</a></h2>\n<p>You can use <a href=\"../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a> command to get information about package\nstructure and dependencies. See the <a href=\"../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a> documentation\nfor details on the format of the output.</p>\n<p>The format is stable and versioned. When calling <code class=\"hljs\">cargo metadata</code>, you should\npass <code class=\"hljs\">--format-version</code> flag explicitly to avoid forward incompatibility\nhazard.</p>\n<p>If you are using Rust, the <a href=\"https://crates.io/crates/cargo_metadata\">cargo_metadata</a> crate can be used to parse the\noutput.</p>\n<h2 id=\"json-messages\"><a class=\"header\" href=\"#json-messages\">JSON messages</a></h2>\n<p>When passing <code class=\"hljs\">--message-format=json</code>, Cargo will output the following\ninformation during the build:</p>\n<ul>\n<li>\n<p>compiler errors and warnings,</p>\n</li>\n<li>\n<p>produced artifacts,</p>\n</li>\n<li>\n<p>results of the build scripts (for example, native dependencies).</p>\n</li>\n</ul>\n<p>The output goes to stdout in the JSON object per line format. The <code class=\"hljs\">reason</code> field\ndistinguishes different kinds of messages.\nThe <code class=\"hljs\">package_id</code> field is a unique identifier for referring to the package, and\nas the <code class=\"hljs\">--package</code> argument to many commands. The syntax grammar can be found in\nchapter <a href=\"./pkgid-spec.html\">Package ID Specifications</a>.</p>\n<p>The <code class=\"hljs\">--message-format</code> option can also take additional formatting values which\nalter the way the JSON messages are computed and rendered. See the description\nof the <code class=\"hljs\">--message-format</code> option in the <a href=\"../commands/cargo-build.html\">build command documentation</a> for more\ndetails.</p>\n<p>If you are using Rust, the <a href=\"https://crates.io/crates/cargo_metadata\">cargo_metadata</a> crate can be used to parse these\nmessages.</p>\n<h3 id=\"compiler-messages\"><a class=\"header\" href=\"#compiler-messages\">Compiler messages</a></h3>\n<p>The “compiler-message” message includes output from the compiler, such as\nwarnings and errors. See the <a href=\"../../rustc/json.html\">rustc JSON chapter</a> for\ndetails on <code class=\"hljs\">rustc</code>’s message format, which is embedded in the following\nstructure:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">/* The \"reason\" indicates the kind of message. */</span>\n    <span class=\"hljs-string\">\"reason\"</span>: <span class=\"hljs-string\">\"compiler-message\"</span>,\n    <span class=\"hljs-comment\">/* The Package ID, a unique identifier for referring to the package. */</span>\n    <span class=\"hljs-string\">\"package_id\"</span>: <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n    <span class=\"hljs-comment\">/* Absolute path to the package manifest. */</span>\n    <span class=\"hljs-string\">\"manifest_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/Cargo.toml\"</span>,\n    <span class=\"hljs-comment\">/* The Cargo target (lib, bin, example, etc.) that generated the message. */</span>\n    <span class=\"hljs-string\">\"target\"</span>: {\n        <span class=\"hljs-comment\">/* Array of target kinds.\n           - lib targets list the `crate-type` values from the\n             manifest such as \"lib\", \"rlib\", \"dylib\",\n             \"proc-macro\", etc. (default [\"lib\"])\n           - binary is [\"bin\"]\n           - example is [\"example\"]\n           - integration test is [\"test\"]\n           - benchmark is [\"bench\"]\n           - build script is [\"custom-build\"]\n        */</span>\n        <span class=\"hljs-string\">\"kind\"</span>: [\n            <span class=\"hljs-string\">\"lib\"</span>\n        ],\n        <span class=\"hljs-comment\">/* Array of crate types.\n           - lib and example libraries list the `crate-type` values\n             from the manifest such as \"lib\", \"rlib\", \"dylib\",\n             \"proc-macro\", etc. (default [\"lib\"])\n           - all other target kinds are [\"bin\"]\n        */</span>\n        <span class=\"hljs-string\">\"crate_types\"</span>: [\n            <span class=\"hljs-string\">\"lib\"</span>\n        ],\n        <span class=\"hljs-comment\">/* The name of the target.\n           For lib targets, dashes will be replaced with underscores.\n        */</span>\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my_package\"</span>,\n        <span class=\"hljs-comment\">/* Absolute path to the root source file of the target. */</span>\n        <span class=\"hljs-string\">\"src_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/src/lib.rs\"</span>,\n        <span class=\"hljs-comment\">/* The Rust edition of the target.\n           Defaults to the package edition.\n        */</span>\n        <span class=\"hljs-string\">\"edition\"</span>: <span class=\"hljs-string\">\"2018\"</span>,\n        <span class=\"hljs-comment\">/* Array of required features.\n           This property is not included if no required features are set.\n        */</span>\n        <span class=\"hljs-string\">\"required-features\"</span>: [<span class=\"hljs-string\">\"feat1\"</span>],\n        <span class=\"hljs-comment\">/* Whether the target should be documented by `cargo doc`. */</span>\n        <span class=\"hljs-string\">\"doc\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not this target has doc tests enabled, and\n           the target is compatible with doc testing.\n        */</span>\n        <span class=\"hljs-string\">\"doctest\"</span>: <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-comment\">/* Whether or not this target should be built and run with `--test`\n        */</span>\n        <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-literal\">true</span>\n    },\n    <span class=\"hljs-comment\">/* The message emitted by the compiler.\n\n    See https://doc.rust-lang.org/rustc/json.html for details.\n    */</span>\n    <span class=\"hljs-string\">\"message\"</span>: {\n        <span class=\"hljs-comment\">/* ... */</span>\n    }\n}\n</code></pre>\n<h3 id=\"artifact-messages\"><a class=\"header\" href=\"#artifact-messages\">Artifact messages</a></h3>\n<p>For every compilation step, a “compiler-artifact” message is emitted with the\nfollowing structure:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">/* The \"reason\" indicates the kind of message. */</span>\n    <span class=\"hljs-string\">\"reason\"</span>: <span class=\"hljs-string\">\"compiler-artifact\"</span>,\n    <span class=\"hljs-comment\">/* The Package ID, a unique identifier for referring to the package. */</span>\n    <span class=\"hljs-string\">\"package_id\"</span>: <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n    <span class=\"hljs-comment\">/* Absolute path to the package manifest. */</span>\n    <span class=\"hljs-string\">\"manifest_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/Cargo.toml\"</span>,\n    <span class=\"hljs-comment\">/* The Cargo target (lib, bin, example, etc.) that generated the artifacts.\n       See the definition above for `compiler-message` for details.\n    */</span>\n    <span class=\"hljs-string\">\"target\"</span>: {\n        <span class=\"hljs-string\">\"kind\"</span>: [\n            <span class=\"hljs-string\">\"lib\"</span>\n        ],\n        <span class=\"hljs-string\">\"crate_types\"</span>: [\n            <span class=\"hljs-string\">\"lib\"</span>\n        ],\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my_package\"</span>,\n        <span class=\"hljs-string\">\"src_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/src/lib.rs\"</span>,\n        <span class=\"hljs-string\">\"edition\"</span>: <span class=\"hljs-string\">\"2018\"</span>,\n        <span class=\"hljs-string\">\"doc\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-string\">\"doctest\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-literal\">true</span>\n    },\n    <span class=\"hljs-comment\">/* The profile indicates which compiler settings were used. */</span>\n    <span class=\"hljs-string\">\"profile\"</span>: {\n        <span class=\"hljs-comment\">/* The optimization level. */</span>\n        <span class=\"hljs-string\">\"opt_level\"</span>: <span class=\"hljs-string\">\"0\"</span>,\n        <span class=\"hljs-comment\">/* The debug level, an integer of 0, 1, or 2, or a string\n           \"line-directives-only\" or \"line-tables-only\". If `null`, it implies\n           rustc's default of 0.\n        */</span>\n        <span class=\"hljs-string\">\"debuginfo\"</span>: <span class=\"hljs-number\">2</span>,\n        <span class=\"hljs-comment\">/* Whether or not debug assertions are enabled. */</span>\n        <span class=\"hljs-string\">\"debug_assertions\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not overflow checks are enabled. */</span>\n        <span class=\"hljs-string\">\"overflow_checks\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not the `--test` flag is used. */</span>\n        <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-literal\">false</span>\n    },\n    <span class=\"hljs-comment\">/* Array of features enabled. */</span>\n    <span class=\"hljs-string\">\"features\"</span>: [<span class=\"hljs-string\">\"feat1\"</span>, <span class=\"hljs-string\">\"feat2\"</span>],\n    <span class=\"hljs-comment\">/* Array of files generated by this step. */</span>\n    <span class=\"hljs-string\">\"filenames\"</span>: [\n        <span class=\"hljs-string\">\"/path/to/my-package/target/debug/libmy_package.rlib\"</span>,\n        <span class=\"hljs-string\">\"/path/to/my-package/target/debug/deps/libmy_package-be9f3faac0a26ef0.rmeta\"</span>\n    ],\n    <span class=\"hljs-comment\">/* A string of the path to the executable that was created, or null if\n       this step did not generate an executable.\n    */</span>\n    <span class=\"hljs-string\">\"executable\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">/* Whether or not this step was actually executed.\n       When `true`, this means that the pre-existing artifacts were\n       up-to-date, and `rustc` was not executed. When `false`, this means that\n       `rustc` was run to generate the artifacts.\n    */</span>\n    <span class=\"hljs-string\">\"fresh\"</span>: <span class=\"hljs-literal\">true</span>\n}\n\n</code></pre>\n<h3 id=\"build-script-output\"><a class=\"header\" href=\"#build-script-output\">Build script output</a></h3>\n<p>The “build-script-executed” message includes the parsed output of a build\nscript. Note that this is emitted even if the build script is not run; it will\ndisplay the previously cached value. More details about build script output\nmay be found in <a href=\"build-scripts.html\">the chapter on build scripts</a>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">/* The \"reason\" indicates the kind of message. */</span>\n    <span class=\"hljs-string\">\"reason\"</span>: <span class=\"hljs-string\">\"build-script-executed\"</span>,\n    <span class=\"hljs-comment\">/* The Package ID, a unique identifier for referring to the package. */</span>\n    <span class=\"hljs-string\">\"package_id\"</span>: <span class=\"hljs-string\">\"file:///path/to/my-package#0.1.0\"</span>,\n    <span class=\"hljs-comment\">/* Array of libraries to link, as indicated by the `cargo::rustc-link-lib`\n       instruction. Note that this may include a \"KIND=\" prefix in the string\n       where KIND is the library kind.\n    */</span>\n    <span class=\"hljs-string\">\"linked_libs\"</span>: [<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"static=bar\"</span>],\n    <span class=\"hljs-comment\">/* Array of paths to include in the library search path, as indicated by\n       the `cargo::rustc-link-search` instruction. Note that this may include a\n       \"KIND=\" prefix in the string where KIND is the library kind.\n    */</span>\n    <span class=\"hljs-string\">\"linked_paths\"</span>: [<span class=\"hljs-string\">\"/some/path\"</span>, <span class=\"hljs-string\">\"native=/another/path\"</span>],\n    <span class=\"hljs-comment\">/* Array of cfg values to enable, as indicated by the `cargo::rustc-cfg`\n       instruction.\n    */</span>\n    <span class=\"hljs-string\">\"cfgs\"</span>: [<span class=\"hljs-string\">\"cfg1\"</span>, <span class=\"hljs-string\">\"cfg2=\\\"string\\\"\"</span>],\n    <span class=\"hljs-comment\">/* Array of [KEY, VALUE] arrays of environment variables to set, as\n       indicated by the `cargo::rustc-env` instruction.\n    */</span>\n    <span class=\"hljs-string\">\"env\"</span>: [\n        [<span class=\"hljs-string\">\"SOME_KEY\"</span>, <span class=\"hljs-string\">\"some value\"</span>],\n        [<span class=\"hljs-string\">\"ANOTHER_KEY\"</span>, <span class=\"hljs-string\">\"another value\"</span>]\n    ],\n    <span class=\"hljs-comment\">/* An absolute path which is used as a value of `OUT_DIR` environmental\n       variable when compiling current package.\n    */</span>\n    <span class=\"hljs-string\">\"out_dir\"</span>: <span class=\"hljs-string\">\"/some/path/in/target/dir\"</span>\n}\n</code></pre>\n<h3 id=\"build-finished\"><a class=\"header\" href=\"#build-finished\">Build finished</a></h3>\n<p>The “build-finished” message is emitted at the end of the build.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n    <span class=\"hljs-comment\">/* The \"reason\" indicates the kind of message. */</span>\n    <span class=\"hljs-string\">\"reason\"</span>: <span class=\"hljs-string\">\"build-finished\"</span>,\n    <span class=\"hljs-comment\">/* Whether or not the build finished successfully. */</span>\n    <span class=\"hljs-string\">\"success\"</span>: <span class=\"hljs-literal\">true</span>,\n}\n</code></pre>\n<p>This message can be helpful for tools to know when to stop reading JSON\nmessages. Commands such as <code class=\"hljs\">cargo test</code> or <code class=\"hljs\">cargo run</code> can produce additional\noutput after the build has finished. This message lets a tool know that Cargo\nwill not produce additional JSON messages, but there may be additional output\nthat may be generated afterwards (such as the output generated by the program\nexecuted by <code class=\"hljs\">cargo run</code>).</p>\n<blockquote>\n<p>Note: There is experimental nightly-only support for JSON output for tests,\nso additional test-specific JSON messages may begin arriving after the\n“build-finished” message if that is enabled.</p>\n</blockquote>\n<h2 id=\"custom-subcommands\"><a class=\"header\" href=\"#custom-subcommands\">Custom subcommands</a></h2>\n<p>Cargo is designed to be extensible with new subcommands without having to modify\nCargo itself. This is achieved by translating a cargo invocation of the form\ncargo <code class=\"hljs\">(?&lt;command&gt;[^ ]+)</code> into an invocation of an external tool\n<code class=\"hljs\">cargo-${command}</code>. The external tool must be present in one of the user’s\n<code class=\"hljs\">$PATH</code> directories.</p>\n<blockquote>\n<p><strong>Note</strong>: Cargo defaults to prioritizing external tools in <code class=\"hljs\">$CARGO_HOME/bin</code>\nover <code class=\"hljs\">$PATH</code>. Users can override this precedence by adding <code class=\"hljs\">$CARGO_HOME/bin</code>\nto <code class=\"hljs\">$PATH</code>.</p>\n</blockquote>\n<p>When Cargo invokes a custom subcommand, the first argument to the subcommand\nwill be the filename of the custom subcommand, as usual. The second argument\nwill be the subcommand name itself. For example, the second argument would be\n<code class=\"hljs\">${command}</code> when invoking <code class=\"hljs\">cargo-${command}</code>. Any additional arguments on the\ncommand line will be forwarded unchanged.</p>\n<p>Cargo can also display the help output of a custom subcommand with <code class=\"hljs\">cargo help ${command}</code>. Cargo assumes that the subcommand will print a help message if its\nthird argument is <code class=\"hljs\">--help</code>. So, <code class=\"hljs\">cargo help ${command}</code> would invoke\n<code class=\"hljs\">cargo-${command} ${command} --help</code>.</p>\n<p>Custom subcommands may use the <code class=\"hljs\">CARGO</code> environment variable to call back to\nCargo. Alternatively, it can link to <code class=\"hljs\">cargo</code> crate as a library, but this\napproach has drawbacks:</p>\n<ul>\n<li>Cargo as a library is unstable: the  API may change without deprecation</li>\n<li>versions of the linked Cargo library may be different from the Cargo binary</li>\n</ul>\n<p>Instead, it is encouraged to use the CLI interface to drive Cargo. The <a href=\"../commands/cargo-metadata.html\"><code class=\"hljs\">cargo metadata</code></a> command can be used to obtain information about the current project\n(the <a href=\"https://crates.io/crates/cargo_metadata\"><code class=\"hljs\">cargo_metadata</code></a> crate provides a Rust interface to this command).</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/source-replacement.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/registries.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/source-replacement.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/registries.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:23.266Z"
}