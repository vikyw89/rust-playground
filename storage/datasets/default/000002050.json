{
	"title": "AsyncIterator in std::async_iter - Rust",
	"url": "https://doc.rust-lang.org/stable/std/async_iter/trait.AsyncIterator.html",
	"markdown": "# AsyncIterator in std::async\\_iter - Rust\n\n```\npub trait AsyncIterator {\n    type Item;\n\n    // Required method\n    fn poll_next(\n        self: Pin<&mut Self>,\n        cx: &mut Context<'_>,\n    ) -> Poll<Option<Self::Item>>;\n\n    // Provided method\n    fn size_hint(&self) -> (usize, Option<usize>) { ... }\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`async_iterator`Â [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nExpand description\n\nA trait for dealing with asynchronous iterators.\n\nThis is the main async iterator trait. For more about the concept of async iterators generally, please see the [module-level documentation](index.html). In particular, you may want to know how to [implement `AsyncIterator`](about:blank/index.html#implementing-async-iterator).\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#19)\n\nðŸ”¬This is a nightly-only experimental API. (`async_iterator`Â [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nThe type of items yielded by the async iterator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#51)\n\nðŸ”¬This is a nightly-only experimental API. (`async_iterator`Â [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nAttempt to pull out the next value of this async iterator, registering the current task for wakeup if the value is not yet available, and returning `None` if the async iterator is exhausted.\n\n##### [Â§](#return-value)Return value\n\nThere are several possible return values, each indicating a distinct async iterator state:\n\n-   `Poll::Pending` means that this async iteratorâ€™s next value is not ready yet. Implementations will ensure that the current task will be notified when the next value may be ready.\n    \n-   `Poll::Ready(Some(val))` means that the async iterator has successfully produced a value, `val`, and may produce further values on subsequent `poll_next` calls.\n    \n-   `Poll::Ready(None)` means that the async iterator has terminated, and `poll_next` should not be invoked again.\n    \n\n##### [Â§](#panics)Panics\n\nOnce an async iterator has finished (returned `Ready(None)` from `poll_next`), calling its `poll_next` method again may panic, block forever, or cause other kinds of problems; the `AsyncIterator` trait places no requirements on the effects of such a call. However, as the `poll_next` method is not marked `unsafe`, Rustâ€™s usual rules apply: calls must never cause undefined behavior (memory corruption, incorrect use of `unsafe` functions, or the like), regardless of the async iteratorâ€™s state.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#80)\n\nðŸ”¬This is a nightly-only experimental API. (`async_iterator`Â [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nReturns the bounds on the remaining length of the async iterator.\n\nSpecifically, `size_hint()` returns a tuple where the first element is the lower bound, and the second element is the upper bound.\n\nThe second half of the tuple that is returned is an `[Option](../option/enum.Option.html \"enum std::option::Option\")<[usize](../primitive.usize.html \"primitive usize\")>`. A [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") here means that either there is no known upper bound, or the upper bound is larger than [`usize`](../primitive.usize.html \"primitive usize\").\n\n##### [Â§](#implementation-notes)Implementation notes\n\nIt is not enforced that an async iterator implementation yields the declared number of elements. A buggy async iterator may yield less than the lower bound or more than the upper bound of elements.\n\n`size_hint()` is primarily intended to be used for optimizations such as reserving space for the elements of the async iterator, but must not be trusted to e.g., omit bounds checks in unsafe code. An incorrect implementation of `size_hint()` should not lead to memory safety violations.\n\nThat said, the implementation should provide a correct estimation, because otherwise it would be a violation of the traitâ€™s protocol.\n\nThe default implementation returns `(0, [None](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"))` which is correct for any async iterator.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A trait for dealing with asynchronous iterators.\"><title>AsyncIterator in std::async_iter - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">AsyncIterator</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">AsyncIterator</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Item\">Item</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.poll_next\">poll_next</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.size_hint\">size_hint</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::async_iter</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.FromIter.html\">FromIter</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsyncIterator.html\">AsyncIterator</a></li><li><a href=\"trait.IntoAsyncIterator.html\">IntoAsyncIterator</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.from_iter.html\">from_iter</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">async_iter</a>::<wbr><a class=\"trait\" href=\"#\">AsyncIterator</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#17\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait AsyncIterator {\n    type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>;\n\n    // Required method\n    fn <a href=\"#tymethod.poll_next\" class=\"fn\">poll_next</a>(\n        self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a>&gt;,\n        cx: &amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;,\n    ) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a>&gt;&gt;;\n\n    // Provided method\n    fn <a href=\"#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) { ... }\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A trait for dealing with asynchronous iterators.</p>\n<p>This is the main async iterator trait. For more about the concept of async iterators\ngenerally, please see the <a href=\"index.html\">module-level documentation</a>. In particular, you\nmay want to know how to <a href=\"index.html#implementing-async-iterator\">implement <code>AsyncIterator</code></a>.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#19\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span></summary><div class=\"docblock\"><p>The type of items yielded by the async iterator.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.poll_next\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#51\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.poll_next\" class=\"fn\">poll_next</a>(\n    self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a>&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span></summary><div class=\"docblock\"><p>Attempt to pull out the next value of this async iterator, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n<code>None</code> if the async iterator is exhausted.</p>\n<h5 id=\"return-value\"><a class=\"doc-anchor\" href=\"#return-value\">Â§</a>Return value</h5>\n<p>There are several possible return values, each indicating a distinct\nasync iterator state:</p>\n<ul>\n<li>\n<p><code>Poll::Pending</code> means that this async iteratorâ€™s next value is not ready\nyet. Implementations will ensure that the current task will be notified\nwhen the next value may be ready.</p>\n</li>\n<li>\n<p><code>Poll::Ready(Some(val))</code> means that the async iterator has successfully\nproduced a value, <code>val</code>, and may produce further values on subsequent\n<code>poll_next</code> calls.</p>\n</li>\n<li>\n<p><code>Poll::Ready(None)</code> means that the async iterator has terminated, and\n<code>poll_next</code> should not be invoked again.</p>\n</li>\n</ul>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">Â§</a>Panics</h5>\n<p>Once an async iterator has finished (returned <code>Ready(None)</code> from <code>poll_next</code>), calling its\n<code>poll_next</code> method again may panic, block forever, or cause other kinds of\nproblems; the <code>AsyncIterator</code> trait places no requirements on the effects of\nsuch a call. However, as the <code>poll_next</code> method is not marked <code>unsafe</code>,\nRustâ€™s usual rules apply: calls must never cause undefined behavior\n(memory corruption, incorrect use of <code>unsafe</code> functions, or the like),\nregardless of the async iteratorâ€™s state.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size_hint\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#80\">source</a><h4 class=\"code-header\">fn <a href=\"#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the bounds on the remaining length of the async iterator.</p>\n<p>Specifically, <code>size_hint()</code> returns a tuple where the first element\nis the lower bound, and the second element is the upper bound.</p>\n<p>The second half of the tuple that is returned is an <code><a href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>.\nA <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> here means that either there is no known upper bound, or the\nupper bound is larger than <a href=\"../primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a>.</p>\n<h5 id=\"implementation-notes\"><a class=\"doc-anchor\" href=\"#implementation-notes\">Â§</a>Implementation notes</h5>\n<p>It is not enforced that an async iterator implementation yields the declared\nnumber of elements. A buggy async iterator may yield less than the lower bound\nor more than the upper bound of elements.</p>\n<p><code>size_hint()</code> is primarily intended to be used for optimizations such as\nreserving space for the elements of the async iterator, but must not be\ntrusted to e.g., omit bounds checks in unsafe code. An incorrect\nimplementation of <code>size_hint()</code> should not lead to memory safety\nviolations.</p>\n<p>That said, the implementation should provide a correct estimation,\nbecause otherwise it would be a violation of the traitâ€™s protocol.</p>\n<p>The default implementation returns <code>(0, <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\">None</a>)</code> which is correct for any\nasync iterator.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsyncIterator-for-FromIter%3CI%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/from_iter.rs.html#28\">source</a><a href=\"#impl-AsyncIterator-for-FromIter%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> for <a class=\"struct\" href=\"struct.FromIter.html\" title=\"struct std::async_iter::FromIter\">FromIter</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;I as <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsyncIterator-for-Pin%3CP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#99-102\">source</a><a href=\"#impl-AsyncIterator-for-Pin%3CP%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a>,\n    &lt;P as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Item-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;&lt;P as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a> as <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsyncIterator-for-%26mut+S\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#86\">source</a><a href=\"#impl-AsyncIterator-for-%26mut+S\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut S</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Item-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-3\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;S as <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsyncIterator-for-Box%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2338\">source</a><a href=\"#impl-AsyncIterator-for-Box%3CS%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Item-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-4\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;S as <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsyncIterator-for-AssertUnwindSafe%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#302\">source</a><a href=\"#impl-AsyncIterator-for-AssertUnwindSafe%3CS%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> for <a class=\"struct\" href=\"../panic/struct.AssertUnwindSafe.html\" title=\"struct std::panic::AssertUnwindSafe\">AssertUnwindSafe</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Item-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-5\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;S as <a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a></h4></section></div></details></div><script src=\"../../trait.impl/core/async_iter/async_iter/trait.AsyncIterator.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:48.133Z"
}