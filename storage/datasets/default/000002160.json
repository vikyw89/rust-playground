{
	"title": "OsStrExt in std::os::windows::ffi - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/windows/ffi/trait.OsStrExt.html",
	"markdown": "# OsStrExt in std::os::windows::ffi - Rust\n\n```\npub trait OsStrExt: Sealed {\n    // Required method\n    fn encode_wide(&self) -> EncodeWide<'_> ⓘ;\n}\n```\n\nAvailable on **Windows** only.\n\nExpand description\n\nWindows-specific extensions to [`OsStr`](../../../ffi/struct.OsStr.html \"struct std::ffi::OsStr\").\n\nThis trait is sealed: it cannot be implemented outside the standard library. This is so that future additional methods are not breaking changes.\n\n1.0.0 · [source](about:blank/src/std/os/windows/ffi.rs.html#127)\n\nRe-encodes an `OsStr` as a wide character sequence, i.e., potentially ill-formed UTF-16.\n\nThis is lossless: calling [`OsStringExt::from_wide`](about:blank/trait.OsStringExt.html#tymethod.from_wide \"associated function std::os::windows::ffi::OsStringExt::from_wide\") and then `encode_wide` on the result will yield the original code units. Note that the encoding does not add a final null terminator.\n\n##### [§](#examples)Examples\n\n```\nuse std::ffi::OsString;\nuse std::os::windows::prelude::*;\n\n// UTF-16 encoding for \"Unicode\".\nlet source = [0x0055, 0x006E, 0x0069, 0x0063, 0x006F, 0x0064, 0x0065];\n\nlet string = OsString::from_wide(&source[..]);\n\nlet result: Vec<u16> = string.encode_wide().collect();\nassert_eq!(&source[..], &result[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++//+UTF-16+encoding+for+%22Unicode%22.%0A++++let+source+=+%5B0x0055,+0x006E,+0x0069,+0x0063,+0x006F,+0x0064,+0x0065%5D;%0A++++%0A++++let+string+=+OsString::from_wide(%26source%5B..%5D);%0A++++%0A++++let+result:+Vec%3Cu16%3E+=+string.encode_wide().collect();%0A++++assert_eq!(%26source%5B..%5D,+%26result%5B..%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/os/windows/ffi.rs.html#131-136)[§](#impl-OsStrExt-for-OsStr)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Windows-specific extensions to `OsStr`.\"><title>OsStrExt in std::os::windows::ffi - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">OsStrExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">OsStrExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.encode_wide\">encode_wide</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::windows::ffi</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.EncodeWide.html\">EncodeWide</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.OsStrExt.html\">OsStrExt</a></li><li><a href=\"trait.OsStringExt.html\">OsStringExt</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">windows</a>::<wbr><a href=\"index.html\">ffi</a>::<wbr><a class=\"trait\" href=\"#\">OsStrExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/ffi.rs.html#104-128\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait OsStrExt: Sealed {\n    // Required method\n    fn <a href=\"#tymethod.encode_wide\" class=\"fn\">encode_wide</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.EncodeWide.html\" title=\"struct std::os::windows::ffi::EncodeWide\">EncodeWide</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EncodeWide<'_>\">ⓘ</a>;\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Windows-specific extensions to <a href=\"../../../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a>.</p>\n<p>This trait is sealed: it cannot be implemented outside the standard library.\nThis is so that future additional methods are not breaking changes.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.encode_wide\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/ffi.rs.html#127\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.encode_wide\" class=\"fn\">encode_wide</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.EncodeWide.html\" title=\"struct std::os::windows::ffi::EncodeWide\">EncodeWide</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EncodeWide<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Re-encodes an <code>OsStr</code> as a wide character sequence, i.e., potentially\nill-formed UTF-16.</p>\n<p>This is lossless: calling <a href=\"trait.OsStringExt.html#tymethod.from_wide\" title=\"associated function std::os::windows::ffi::OsStringExt::from_wide\"><code>OsStringExt::from_wide</code></a> and then\n<code>encode_wide</code> on the result will yield the original code units.\nNote that the encoding does not add a final null terminator.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsString;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"comment\">// UTF-16 encoding for \"Unicode\".\n</span><span class=\"kw\">let </span>source = [<span class=\"number\">0x0055</span>, <span class=\"number\">0x006E</span>, <span class=\"number\">0x0069</span>, <span class=\"number\">0x0063</span>, <span class=\"number\">0x006F</span>, <span class=\"number\">0x0064</span>, <span class=\"number\">0x0065</span>];\n\n<span class=\"kw\">let </span>string = OsString::from_wide(<span class=\"kw-2\">&amp;</span>source[..]);\n\n<span class=\"kw\">let </span>result: Vec&lt;u16&gt; = string.encode_wide().collect();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>source[..], <span class=\"kw-2\">&amp;</span>result[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++//+UTF-16+encoding+for+%22Unicode%22.%0A++++let+source+=+%5B0x0055,+0x006E,+0x0069,+0x0063,+0x006F,+0x0064,+0x0065%5D;%0A++++%0A++++let+string+=+OsString::from_wide(%26source%5B..%5D);%0A++++%0A++++let+result:+Vec%3Cu16%3E+=+string.encode_wide().collect();%0A++++assert_eq!(%26source%5B..%5D,+%26result%5B..%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-OsStrExt-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/ffi.rs.html#131-136\">source</a></span><a href=\"#impl-OsStrExt-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.OsStrExt.html\" title=\"trait std::os::windows::ffi::OsStrExt\">OsStrExt</a> for <a class=\"struct\" href=\"../../../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></div><script src=\"../../../../trait.impl/std/os/windows/ffi/trait.OsStrExt.js\" async=\"\"></script><script type=\"text/json\" id=\"notable-traits-data\">{\"EncodeWide<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.EncodeWide.html\\\" title=\\\"struct std::os::windows::ffi::EncodeWide\\\">EncodeWide</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.EncodeWide.html\\\" title=\\\"struct std::os::windows::ffi::EncodeWide\\\">EncodeWide</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../../primitive.u16.html\\\">u16</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:05.168Z"
}