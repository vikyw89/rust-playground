{
	"title": "NonZeroI64 in std::num - Rust",
	"url": "https://doc.rust-lang.org/stable/std/num/type.NonZeroI64.html",
	"markdown": "# NonZeroI64 in std::num - Rust\n\n## Type Alias [std](../index.html)::[num](index.html)::[NonZeroI64](#)\n\n1.34.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688) ¬∑\n\n```\npub type NonZeroI64 = NonZero<i64>;\n```\n\nExpand description\n\nAn integer that is known not to equal zero.\n\nThis enables some memory layout optimization. For example, `Option<NonZeroI64>` is the same size as `i64`:\n\n```\nuse std::mem::size_of;\nassert_eq!(size_of::<Option<core::num::NonZeroI64>>(), size_of::<i64>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::size_of;%0A++++assert_eq!(size_of::%3COption%3Ccore::num::NonZeroI64%3E%3E(),+size_of::%3Ci64%3E());%0A%7D&edition=2021)\n\n## [¬ß](#layout-1)Layout\n\n`NonZeroI64` is guaranteed to have the same layout and bit validity as `i64` with the exception that `0` is not a valid instance. `Option<NonZeroI64>` is guaranteed to be compatible with `i64`, including in FFI.\n\nThanks to the [null pointer optimization](about:blank/option/index.html#representation \"mod std::option\"), `NonZeroI64` and `Option<NonZeroI64>` are guaranteed to have the same size and alignment:\n\n```\nuse std::num::NonZeroI64;\n\nassert_eq!(size_of::<NonZeroI64>(), size_of::<Option<NonZeroI64>>());\nassert_eq!(align_of::<NonZeroI64>(), align_of::<Option<NonZeroI64>>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::%7Bsize_of,+align_of%7D;%0A++++use+std::num::NonZeroI64;%0A++++%0A++++assert_eq!(size_of::%3CNonZeroI64%3E(),+size_of::%3COption%3CNonZeroI64%3E%3E());%0A++++assert_eq!(align_of::%3CNonZeroI64%3E(),+align_of::%3COption%3CNonZeroI64%3E%3E());%0A%7D&edition=2021)\n\n```\nstruct NonZeroI64(/* private fields */);\n```\n\n## Implementations\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#348-350)[¬ß](#impl-NonZero%3CT%3E)\n\n1.28.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#357)\n\nCreates a non-zero if the given value is not zero.\n\n1.28.0 (const: 1.28.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#373)\n\nCreates a non-zero without checking whether the value is non-zero. This results in undefined behaviour if the value is zero.\n\n##### [¬ß](#safety)Safety\n\nThe value must not be zero.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#395)\n\nüî¨This is a nightly-only experimental API. (`nonzero_from_mut`¬†[#106290](https://github.com/rust-lang/rust/issues/106290))\n\nConverts a reference to a non-zero mutable reference if the referenced value is not zero.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#413)\n\nüî¨This is a nightly-only experimental API. (`nonzero_from_mut`¬†[#106290](https://github.com/rust-lang/rust/issues/106290))\n\nConverts a mutable reference to a non-zero mutable reference without checking whether the referenced value is non-zero. This results in undefined behavior if the referenced value is zero.\n\n##### [¬ß](#safety-1)Safety\n\nThe referenced value must not be zero.\n\n1.28.0 (const: 1.34.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#434)\n\nReturns the contained value as a primitive type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)[¬ß](#impl-NonZero%3Ci64%3E)\n\n1.67.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nThe size of this non-zero integer type in bits.\n\nThis value is equal to [`i64::BITS`](about:blank/std/primitive.i64.html#associatedconstant.BITS \"associated constant i64::BITS\").\n\n##### [¬ß](#examples)Examples\n\n```\nassert_eq!(NonZero::<i64>::BITS, i64::BITS);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::BITS,+i64::BITS);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nReturns the number of leading zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [¬ß](#examples-1)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i64>::new(-1i64).unwrap();\n\nassert_eq!(n.leading_zeros(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci64%3E::new(-1i64).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nReturns the number of trailing zeros in the binary representation of `self`.\n\nOn many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n\n##### [¬ß](#examples-2)Examples\n\nBasic usage:\n\n```\nlet n = NonZero::<i64>::new(0b0101000).unwrap();\n\nassert_eq!(n.trailing_zeros(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci64%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nüî¨This is a nightly-only experimental API. (`non_zero_count_ones`¬†[#120287](https://github.com/rust-lang/rust/issues/120287))\n\nReturns the number of ones in the binary representation of `self`.\n\n##### [¬ß](#examples-3)Examples\n\nBasic usage:\n\n```\n#![feature(non_zero_count_ones)]\n\nlet a = NonZero::<i64>::new(0b100_0000)?;\nlet b = NonZero::<i64>::new(0b100_0011)?;\n\nassert_eq!(a.count_ones(), NonZero::new(1)?);\nassert_eq!(b.count_ones(), NonZero::new(3)?);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci64%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci64%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.70.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nThe smallest value that can be represented by this non-zero integer type, equal to [`i64::MIN`](about:blank/std/primitive.i64.html#associatedconstant.MIN \"associated constant i64::MIN\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a ‚Äúgap‚Äù at 0.\n\n##### [¬ß](#examples-4)Examples\n\n```\nassert_eq!(NonZero::<i64>::MIN.get(), i64::MIN);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::MIN.get(),+i64::MIN);%0A%7D&edition=2021)\n\n1.70.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nThe largest value that can be represented by this non-zero integer type, equal to [`i64::MAX`](about:blank/std/primitive.i64.html#associatedconstant.MAX \"associated constant i64::MAX\").\n\nNote: While most integer types are defined for every whole number between `MIN` and `MAX`, signed non-zero integers are a special case. They have a ‚Äúgap‚Äù at 0.\n\n##### [¬ß](#examples-5)Examples\n\n```\nassert_eq!(NonZero::<i64>::MAX.get(), i64::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::MAX.get(),+i64::MAX);%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nComputes the absolute value of self. See [`i64::abs`](about:blank/std/primitive.i64.html#method.abs \"method i64::abs\") for documentation on overflow behaviour.\n\n##### [¬ß](#example)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\n\nassert_eq!(pos, pos.abs());\nassert_eq!(pos, neg.abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nChecked absolute value. Checks for overflow and returns [`None`](about:blank/std/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if `self == NonZero::<i64>::MIN`. The result cannot be zero.\n\n##### [¬ß](#example-1)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(Some(pos), neg.checked_abs());\nassert_eq!(None, min.checked_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nComputes the absolute value of self, with overflow information, see [`i64::overflowing_abs`](about:blank/std/primitive.i64.html#method.overflowing_abs \"method i64::overflowing_abs\").\n\n##### [¬ß](#example-2)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!((pos, false), pos.overflowing_abs());\nassert_eq!((pos, false), neg.overflowing_abs());\nassert_eq!((min, true), min.overflowing_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nSaturating absolute value, see [`i64::saturating_abs`](about:blank/std/primitive.i64.html#method.saturating_abs \"method i64::saturating_abs\").\n\n##### [¬ß](#example-3)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\nlet min = NonZero::new(i64::MIN)?;\nlet min_plus = NonZero::new(i64::MIN + 1)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(pos, pos.saturating_abs());\nassert_eq!(pos, neg.saturating_abs());\nassert_eq!(max, min.saturating_abs());\nassert_eq!(max, min_plus.saturating_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+min_plus+=+NonZero::new(i64::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nWrapping absolute value, see [`i64::wrapping_abs`](about:blank/std/primitive.i64.html#method.wrapping_abs \"method i64::wrapping_abs\").\n\n##### [¬ß](#example-4)Example\n\n```\nlet pos = NonZero::new(1i64)?;\nlet neg = NonZero::new(-1i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(pos, pos.wrapping_abs());\nassert_eq!(pos, neg.wrapping_abs());\nassert_eq!(min, min.wrapping_abs());\nassert_eq!(max, (-max).wrapping_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nComputes the absolute value of self without any wrapping or panicking.\n\n##### [¬ß](#example-5)Example\n\n```\nlet u_pos = NonZero::new(1u64)?;\nlet i_pos = NonZero::new(1i64)?;\nlet i_neg = NonZero::new(-1i64)?;\nlet i_min = NonZero::new(i64::MIN)?;\nlet u_max = NonZero::new(u64::MAX / 2 + 1)?;\n\nassert_eq!(u_pos, i_pos.unsigned_abs());\nassert_eq!(u_pos, i_neg.unsigned_abs());\nassert_eq!(u_max, i_min.unsigned_abs());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u64)?;%0Alet+i_pos+=+NonZero::new(1i64)?;%0Alet+i_neg+=+NonZero::new(-1i64)?;%0Alet+i_min+=+NonZero::new(i64::MIN)?;%0Alet+u_max+=+NonZero::new(u64::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nReturns `true` if `self` is positive and `false` if the number is negative.\n\n##### [¬ß](#example-6)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\n\nassert!(pos_five.is_positive());\nassert!(!neg_five.is_positive());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nReturns `true` if `self` is negative and `false` if the number is positive.\n\n##### [¬ß](#example-7)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\n\nassert!(neg_five.is_negative());\nassert!(!pos_five.is_negative());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nChecked negation. Computes `-self`, returning `None` if `self == NonZero::<i64>::MIN`.\n\n##### [¬ß](#example-8)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(pos_five.checked_neg(), Some(neg_five));\nassert_eq!(min.checked_neg(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nNegates self, overflowing if this is equal to the minimum value.\n\nSee [`i64::overflowing_neg`](about:blank/std/primitive.i64.html#method.overflowing_neg \"method i64::overflowing_neg\") for documentation on overflow behaviour.\n\n##### [¬ß](#example-9)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(pos_five.overflowing_neg(), (neg_five, false));\nassert_eq!(min.overflowing_neg(), (min, true));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nSaturating negation. Computes `-self`, returning [`NonZero::<i64>::MAX`](about:blank/std/num/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") if `self == NonZero::<i64>::MIN` instead of overflowing.\n\n##### [¬ß](#example-10)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\nlet min = NonZero::new(i64::MIN)?;\nlet min_plus_one = NonZero::new(i64::MIN + 1)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(pos_five.saturating_neg(), neg_five);\nassert_eq!(min.saturating_neg(), max);\nassert_eq!(max.saturating_neg(), min_plus_one);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i64::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&edition=2021)\n\n1.71.0 (const: 1.71.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nWrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.\n\nSee [`i64::wrapping_neg`](about:blank/std/primitive.i64.html#method.wrapping_neg \"method i64::wrapping_neg\") for documentation on overflow behaviour.\n\n##### [¬ß](#example-11)Example\n\n```\nlet pos_five = NonZero::new(5i64)?;\nlet neg_five = NonZero::new(-5i64)?;\nlet min = NonZero::new(i64::MIN)?;\n\nassert_eq!(pos_five.wrapping_neg(), neg_five);\nassert_eq!(min.wrapping_neg(), min);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nMultiplies two non-zero integers together. Checks for overflow and returns [`None`](about:blank/std/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [¬ß](#examples-6)Examples\n\n```\nlet two = NonZero::new(2i64)?;\nlet four = NonZero::new(4i64)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(Some(four), two.checked_mul(two));\nassert_eq!(None, max.checked_mul(two));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nMultiplies two non-zero integers together. Return [`NonZero::<i64>::MAX`](about:blank/std/num/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [¬ß](#examples-7)Examples\n\n```\nlet two = NonZero::new(2i64)?;\nlet four = NonZero::new(4i64)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(four, two.saturating_mul(two));\nassert_eq!(max, four.saturating_mul(max));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nüî¨This is a nightly-only experimental API. (`nonzero_ops`¬†[#84186](https://github.com/rust-lang/rust/issues/84186))\n\nMultiplies two non-zero integers together, assuming overflow cannot occur. Overflow is unchecked, and it is undefined behaviour to overflow _even if the result would wrap to a non-zero value_. The behaviour is undefined as soon as `self * rhs > i64::MAX`, or `self * rhs < i64::MIN`.\n\n##### [¬ß](#examples-8)Examples\n\n```\n#![feature(nonzero_ops)]\n\nlet two = NonZero::new(2i64)?;\nlet four = NonZero::new(4i64)?;\n\nassert_eq!(four, unsafe { two.unchecked_mul(two) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&version=nightly&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nRaises non-zero value to an integer power. Checks for overflow and returns [`None`](about:blank/std/option/enum.Option.html#variant.None \"variant std::option::Option::None\") on overflow. As a consequence, the result cannot wrap to zero.\n\n##### [¬ß](#examples-9)Examples\n\n```\nlet three = NonZero::new(3i64)?;\nlet twenty_seven = NonZero::new(27i64)?;\nlet half_max = NonZero::new(i64::MAX / 2)?;\n\nassert_eq!(Some(twenty_seven), three.checked_pow(3));\nassert_eq!(None, half_max.checked_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i64)?;%0Alet+twenty_seven+=+NonZero::new(27i64)?;%0Alet+half_max+=+NonZero::new(i64::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n1.64.0 (const: 1.64.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688)\n\nRaise non-zero value to an integer power. Return [`NonZero::<i64>::MIN`](about:blank/std/num/struct.NonZero.html#associatedconstant.MIN \"associated constant std::num::NonZero::MIN\") or [`NonZero::<i64>::MAX`](about:blank/std/num/struct.NonZero.html#associatedconstant.MAX \"associated constant std::num::NonZero::MAX\") on overflow.\n\n##### [¬ß](#examples-10)Examples\n\n```\nlet three = NonZero::new(3i64)?;\nlet twenty_seven = NonZero::new(27i64)?;\nlet max = NonZero::new(i64::MAX)?;\n\nassert_eq!(twenty_seven, three.saturating_pow(3));\nassert_eq!(max, max.saturating_pow(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i64)?;%0Alet+twenty_seven+=+NonZero::new(27i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&edition=2021)\n\n## Trait Implementations",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An integer that is known not to equal zero.\"><title>NonZeroI64 in std::num - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc type\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">NonZeroI64</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">NonZeroI64</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#aliased-type\">Aliased type</a></h3><h3><a href=\"#implementations\">Associated Constants</a></h3><ul class=\"block associatedconstant\"><li><a href=\"#associatedconstant.BITS\">BITS</a></li><li><a href=\"#associatedconstant.MAX\">MAX</a></li><li><a href=\"#associatedconstant.MIN\">MIN</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.abs\">abs</a></li><li><a href=\"#method.checked_abs\">checked_abs</a></li><li><a href=\"#method.checked_mul\">checked_mul</a></li><li><a href=\"#method.checked_neg\">checked_neg</a></li><li><a href=\"#method.checked_pow\">checked_pow</a></li><li><a href=\"#method.count_ones\">count_ones</a></li><li><a href=\"#method.from_mut\">from_mut</a></li><li><a href=\"#method.from_mut_unchecked\">from_mut_unchecked</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.is_negative\">is_negative</a></li><li><a href=\"#method.is_positive\">is_positive</a></li><li><a href=\"#method.leading_zeros\">leading_zeros</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_unchecked\">new_unchecked</a></li><li><a href=\"#method.overflowing_abs\">overflowing_abs</a></li><li><a href=\"#method.overflowing_neg\">overflowing_neg</a></li><li><a href=\"#method.saturating_abs\">saturating_abs</a></li><li><a href=\"#method.saturating_mul\">saturating_mul</a></li><li><a href=\"#method.saturating_neg\">saturating_neg</a></li><li><a href=\"#method.saturating_pow\">saturating_pow</a></li><li><a href=\"#method.trailing_zeros\">trailing_zeros</a></li><li><a href=\"#method.unchecked_mul\">unchecked_mul</a></li><li><a href=\"#method.unsigned_abs\">unsigned_abs</a></li><li><a href=\"#method.wrapping_abs\">wrapping_abs</a></li><li><a href=\"#method.wrapping_neg\">wrapping_neg</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Binary-for-NonZero%3CT%3E\">Binary</a></li><li><a href=\"#impl-BitOr-for-NonZero%3CT%3E\">BitOr</a></li><li><a href=\"#impl-BitOr%3CNonZero%3CT%3E%3E-for-T\">BitOr&lt;NonZero&lt;T&gt;&gt;</a></li><li><a href=\"#impl-BitOr%3CT%3E-for-NonZero%3CT%3E\">BitOr&lt;T&gt;</a></li><li><a href=\"#impl-BitOrAssign-for-NonZero%3CT%3E\">BitOrAssign</a></li><li><a href=\"#impl-BitOrAssign%3CT%3E-for-NonZero%3CT%3E\">BitOrAssign&lt;T&gt;</a></li><li><a href=\"#impl-Clone-for-NonZero%3CT%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-NonZero%3CT%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-NonZero%3CT%3E\">Debug</a></li><li><a href=\"#impl-Display-for-NonZero%3CT%3E\">Display</a></li><li><a href=\"#impl-Eq-for-NonZero%3CT%3E\">Eq</a></li><li><a href=\"#impl-Freeze-for-NonZero%3CT%3E\">Freeze</a></li><li><a href=\"#impl-From%3CNonZero%3CT%3E%3E-for-T\">From&lt;NonZero&lt;T&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;i16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;i32&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;i8&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;u16&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;u32&gt;&gt;</a></li><li><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci64%3E\">From&lt;NonZero&lt;u8&gt;&gt;</a></li><li><a href=\"#impl-FromStr-for-NonZero%3Ci64%3E\">FromStr</a></li><li><a href=\"#impl-Hash-for-NonZero%3CT%3E\">Hash</a></li><li><a href=\"#impl-LowerHex-for-NonZero%3CT%3E\">LowerHex</a></li><li><a href=\"#impl-Neg-for-NonZero%3Ci64%3E\">Neg</a></li><li><a href=\"#impl-Octal-for-NonZero%3CT%3E\">Octal</a></li><li><a href=\"#impl-Ord-for-NonZero%3CT%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-NonZero%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-NonZero%3CT%3E\">PartialOrd</a></li><li><a href=\"#impl-RefUnwindSafe-for-NonZero%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-NonZero%3CT%3E\">Send</a></li><li><a href=\"#impl-StructuralPartialEq-for-NonZero%3CT%3E\">StructuralPartialEq</a></li><li><a href=\"#impl-Sync-for-NonZero%3CT%3E\">Sync</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;i128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;isize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;u128&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;u64&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;NonZero&lt;usize&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3Ci64%3E-for-NonZero%3Ci64%3E\">TryFrom&lt;i64&gt;</a></li><li><a href=\"#impl-Unpin-for-NonZero%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-NonZero%3CT%3E\">UnwindSafe</a></li><li><a href=\"#impl-UpperHex-for-NonZero%3CT%3E\">UpperHex</a></li></ul></section><h2><a href=\"index.html\">In std::num</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.NonZero.html\">NonZero</a></li><li><a href=\"struct.ParseFloatError.html\">ParseFloatError</a></li><li><a href=\"struct.ParseIntError.html\">ParseIntError</a></li><li><a href=\"struct.Saturating.html\">Saturating</a></li><li><a href=\"struct.TryFromIntError.html\">TryFromIntError</a></li><li><a href=\"struct.Wrapping.html\">Wrapping</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.FpCategory.html\">FpCategory</a></li><li><a href=\"enum.IntErrorKind.html\">IntErrorKind</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.ZeroablePrimitive.html\">ZeroablePrimitive</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.NonZeroI128.html\">NonZeroI128</a></li><li><a href=\"type.NonZeroI16.html\">NonZeroI16</a></li><li><a href=\"type.NonZeroI32.html\">NonZeroI32</a></li><li><a href=\"type.NonZeroI64.html\">NonZeroI64</a></li><li><a href=\"type.NonZeroI8.html\">NonZeroI8</a></li><li><a href=\"type.NonZeroIsize.html\">NonZeroIsize</a></li><li><a href=\"type.NonZeroU128.html\">NonZeroU128</a></li><li><a href=\"type.NonZeroU16.html\">NonZeroU16</a></li><li><a href=\"type.NonZeroU32.html\">NonZeroU32</a></li><li><a href=\"type.NonZeroU64.html\">NonZeroU64</a></li><li><a href=\"type.NonZeroU8.html\">NonZeroU8</a></li><li><a href=\"type.NonZeroUsize.html\">NonZeroUsize</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Type Alias <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">num</a>::<wbr><a class=\"type\" href=\"#\">NonZeroI64</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub type NonZeroI64 = <a class=\"struct\" href=\"struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>&gt;;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An integer that is known not to equal zero.</p>\n<p>This enables some memory layout optimization.\nFor example, <code>Option&lt;NonZeroI64&gt;</code> is the same size as <code>i64</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::size_of;\n<span class=\"macro\">assert_eq!</span>(size_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;core::num::NonZeroI64&gt;&gt;(), size_of::&lt;i64&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::size_of;%0A++++assert_eq!(size_of::%3COption%3Ccore::num::NonZeroI64%3E%3E(),+size_of::%3Ci64%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"layout-1\"><a class=\"doc-anchor\" href=\"#layout-1\">¬ß</a>Layout</h2>\n<p><code>NonZeroI64</code> is guaranteed to have the same layout and bit validity as <code>i64</code>\nwith the exception that <code>0</code> is not a valid instance.\n<code>Option&lt;NonZeroI64&gt;</code> is guaranteed to be compatible with <code>i64</code>,\nincluding in FFI.</p>\n<p>Thanks to the <a href=\"../option/index.html#representation\" title=\"mod std::option\">null pointer optimization</a>,\n<code>NonZeroI64</code> and <code>Option&lt;NonZeroI64&gt;</code>\nare guaranteed to have the same size and alignment:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::num::NonZeroI64;\n\n<span class=\"macro\">assert_eq!</span>(size_of::&lt;NonZeroI64&gt;(), size_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;NonZeroI64&gt;&gt;());\n<span class=\"macro\">assert_eq!</span>(align_of::&lt;NonZeroI64&gt;(), align_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;NonZeroI64&gt;&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::%7Bsize_of,+align_of%7D;%0A++++use+std::num::NonZeroI64;%0A++++%0A++++assert_eq!(size_of::%3CNonZeroI64%3E(),+size_of::%3COption%3CNonZeroI64%3E%3E());%0A++++assert_eq!(align_of::%3CNonZeroI64%3E(),+align_of::%3COption%3CNonZeroI64%3E%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"aliased-type\" class=\"section-header\">Aliased Type<a href=\"#aliased-type\" class=\"anchor\">¬ß</a></h2><pre class=\"rust item-decl\"><code>struct NonZeroI64(<span class=\"comment\">/* private fields */</span>);</code></pre><script src=\"../../type.impl/std/num/struct.NonZero.js\" data-self-path=\"std::num::NonZeroI64\" async=\"\"></script><h2 id=\"implementations\">Implementations</h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#348-350\">source</a><a href=\"#impl-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.47.0\">1.28.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#357\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.new\" class=\"fn\">new</a>(n: T) -&gt; <a class=\"enum\" href=\"../../std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a non-zero if the given value is not zero.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.28.0\">1.28.0 (const: 1.28.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#373\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"../../std/num/struct.NonZero.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(n: T) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a non-zero without checking whether the value is non-zero.\nThis results in undefined behaviour if the value is zero.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">¬ß</a>Safety</h5>\n<p>The value must not be zero.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#395\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../std/num/struct.NonZero.html#tymethod.from_mut\" class=\"fn\">from_mut</a>(n: <a class=\"primitive\" href=\"../../std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"../../std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>nonzero_from_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/106290\">#106290</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a reference to a non-zero mutable reference\nif the referenced value is not zero.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mut_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#413\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../std/num/struct.NonZero.html#tymethod.from_mut_unchecked\" class=\"fn\">from_mut_unchecked</a>(n: <a class=\"primitive\" href=\"../../std/primitive.reference.html\">&amp;mut T</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>nonzero_from_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/106290\">#106290</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a mutable reference to a non-zero mutable reference\nwithout checking whether the referenced value is non-zero.\nThis results in undefined behavior if the referenced value is zero.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">¬ß</a>Safety</h5>\n<p>The referenced value must not be zero.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0, const since 1.34.0\">1.28.0 (const: 1.34.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#434\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.get\" class=\"fn\">get</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained value as a primitive type.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonZero%3Ci64%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><a href=\"#impl-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0\">1.67.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const <a href=\"../../std/num/struct.NonZero.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../../std/primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this non-zero integer type in bits.</p>\n<p>This value is equal to <a href=\"../../std/primitive.i64.html#associatedconstant.BITS\" title=\"associated constant i64::BITS\"><code>i64::BITS</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i64&gt;::BITS, i64::BITS);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::BITS,+i64::BITS);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../../std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>leading_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i64&gt;::new(-<span class=\"number\">1i64</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci64%3E::new(-1i64).unwrap();%0A++++%0A++++assert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"../../std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<p>On many architectures, this function can perform better than <code>trailing_zeros()</code> on the underlying integer type, as special handling of zero can be avoided.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b0101000</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+n+=+NonZero::%3Ci64%3E::new(0b0101000).unwrap();%0A++++%0A++++assert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count_ones\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u32.html\">u32</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>non_zero_count_ones</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120287\">#120287</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_zero_count_ones)]\n\n</span><span class=\"kw\">let </span>a = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b100_0000</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = NonZero::&lt;i64&gt;::new(<span class=\"number\">0b100_0011</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.count_ones(), NonZero::new(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>);\n<span class=\"macro\">assert_eq!</span>(b.count_ones(), NonZero::new(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(non_zero_count_ones)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+a+=+NonZero::%3Ci64%3E::new(0b100_0000)?;%0Alet+b+=+NonZero::%3Ci64%3E::new(0b100_0011)?;%0A%0Aassert_eq!(a.count_ones(),+NonZero::new(1)?);%0Aassert_eq!(b.count_ones(),+NonZero::new(3)?);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const <a href=\"../../std/num/struct.NonZero.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../../std/primitive.i64.html#associatedconstant.MIN\" title=\"associated constant i64::MIN\"><code>i64::MIN</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a ‚Äúgap‚Äù at 0.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i64&gt;::MIN.get(), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::MIN.get(),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const <a href=\"../../std/num/struct.NonZero.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; = _</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this non-zero\ninteger type,\nequal to <a href=\"../../std/primitive.i64.html#associatedconstant.MAX\" title=\"associated constant i64::MAX\"><code>i64::MAX</code></a>.</p>\n<p>Note: While most integer types are defined for every whole\nnumber between <code>MIN</code> and <code>MAX</code>, signed non-zero integers are\na special case. They have a ‚Äúgap‚Äù at 0.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NonZero::&lt;i64&gt;::MAX.get(), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++assert_eq!(NonZero::%3Ci64%3E::MAX.get(),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self.\nSee <a href=\"../../std/primitive.i64.html#method.abs\" title=\"method i64::abs\"><code>i64::abs</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0A%0Aassert_eq!(pos,+pos.abs());%0Aassert_eq!(pos,+neg.abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"../../std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value.\nChecks for overflow and returns <a href=\"../../std/option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if\n<code>self == NonZero::&lt;i64&gt;::MIN</code>.\nThe result cannot be zero.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(pos), neg.checked_abs());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, min.checked_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(Some(pos),+neg.checked_abs());%0Aassert_eq!(None,+min.checked_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;, <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self,\nwith overflow information, see\n<a href=\"../../std/primitive.i64.html#method.overflowing_abs\" title=\"method i64::overflowing_abs\"><code>i64::overflowing_abs</code></a>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), pos.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((pos, <span class=\"bool-val\">false</span>), neg.overflowing_abs());\n<span class=\"macro\">assert_eq!</span>((min, <span class=\"bool-val\">true</span>), min.overflowing_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!((pos,+false),+pos.overflowing_abs());%0Aassert_eq!((pos,+false),+neg.overflowing_abs());%0Aassert_eq!((min,+true),+min.overflowing_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value, see\n<a href=\"../../std/primitive.i64.html#method.saturating_abs\" title=\"method i64::saturating_abs\"><code>i64::saturating_abs</code></a>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus = NonZero::new(i64::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min.saturating_abs());\n<span class=\"macro\">assert_eq!</span>(max, min_plus.saturating_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+min_plus+=+NonZero::new(i64::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos,+pos.saturating_abs());%0Aassert_eq!(pos,+neg.saturating_abs());%0Aassert_eq!(max,+min.saturating_abs());%0Aassert_eq!(max,+min_plus.saturating_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping absolute value, see\n<a href=\"../../std/primitive.i64.html#method.wrapping_abs\" title=\"method i64::wrapping_abs\"><code>i64::wrapping_abs</code></a>.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos, pos.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(pos, neg.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(min, min.wrapping_abs());\n<span class=\"macro\">assert_eq!</span>(max, (-max).wrapping_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos+=+NonZero::new(1i64)?;%0Alet+neg+=+NonZero::new(-1i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos,+pos.wrapping_abs());%0Aassert_eq!(pos,+neg.wrapping_abs());%0Aassert_eq!(min,+min.wrapping_abs());%0Aassert_eq!(max,+(-max).wrapping_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of self\nwithout any wrapping or panicking.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u_pos = NonZero::new(<span class=\"number\">1u64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_pos = NonZero::new(<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_neg = NonZero::new(-<span class=\"number\">1i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>i_min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>u_max = NonZero::new(u64::MAX / <span class=\"number\">2 </span>+ <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(u_pos, i_pos.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_pos, i_neg.unsigned_abs());\n<span class=\"macro\">assert_eq!</span>(u_max, i_min.unsigned_abs());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+u_pos+=+NonZero::new(1u64)?;%0Alet+i_pos+=+NonZero::new(1i64)?;%0Alet+i_neg+=+NonZero::new(-1i64)?;%0Alet+i_min+=+NonZero::new(i64::MIN)?;%0Alet+u_max+=+NonZero::new(u64::MAX+/+2+%2B+1)?;%0A%0Aassert_eq!(u_pos,+i_pos.unsigned_abs());%0Aassert_eq!(u_pos,+i_neg.unsigned_abs());%0Aassert_eq!(u_max,+i_min.unsigned_abs());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the\nnumber is negative.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(pos_five.is_positive());\n<span class=\"macro\">assert!</span>(!neg_five.is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0A%0Aassert!(pos_five.is_positive());%0Aassert!(!neg_five.is_positive());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the\nnumber is positive.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(neg_five.is_negative());\n<span class=\"macro\">assert!</span>(!pos_five.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0A%0Aassert!(neg_five.is_negative());%0Aassert!(!pos_five.is_negative());%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"../../std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>,\nreturning <code>None</code> if <code>self == NonZero::&lt;i64&gt;::MIN</code>.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.checked_neg(), <span class=\"prelude-val\">Some</span>(neg_five));\n<span class=\"macro\">assert_eq!</span>(min.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.checked_neg(),+Some(neg_five));%0Aassert_eq!(min.checked_neg(),+None);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;, <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>See <a href=\"../../std/primitive.i64.html#method.overflowing_neg\" title=\"method i64::overflowing_neg\"><code>i64::overflowing_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.overflowing_neg(), (neg_five, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(min.overflowing_neg(), (min, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.overflowing_neg(),+(neg_five,+false));%0Aassert_eq!(min.overflowing_neg(),+(min,+true));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Saturating negation. Computes <code>-self</code>,\nreturning <a href=\"../../std/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i64&gt;::MAX</code></a>\nif <code>self == NonZero::&lt;i64&gt;::MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min_plus_one = NonZero::new(i64::MIN + <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.saturating_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.saturating_neg(), max);\n<span class=\"macro\">assert_eq!</span>(max.saturating_neg(), min_plus_one);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0Alet+min_plus_one+=+NonZero::new(i64::MIN+%2B+1)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(pos_five.saturating_neg(),+neg_five);%0Aassert_eq!(min.saturating_neg(),+max);%0Aassert_eq!(max.saturating_neg(),+min_plus_one);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0, const since 1.71.0\">1.71.0 (const: 1.71.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>See <a href=\"../../std/primitive.i64.html#method.wrapping_neg\" title=\"method i64::wrapping_neg\"><code>i64::wrapping_neg</code></a>\nfor documentation on overflow behaviour.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>pos_five = NonZero::new(<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>neg_five = NonZero::new(-<span class=\"number\">5i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>min = NonZero::new(i64::MIN)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(pos_five.wrapping_neg(), neg_five);\n<span class=\"macro\">assert_eq!</span>(min.wrapping_neg(), min);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+pos_five+=+NonZero::new(5i64)?;%0Alet+neg_five+=+NonZero::new(-5i64)?;%0Alet+min+=+NonZero::new(i64::MIN)?;%0A%0Aassert_eq!(pos_five.wrapping_neg(),+neg_five);%0Aassert_eq!(min.wrapping_neg(),+min);%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, other: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;) -&gt; <a class=\"enum\" href=\"../../std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nChecks for overflow and returns <a href=\"../../std/option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(four), two.checked_mul(two));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, max.checked_mul(two));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(Some(four),+two.checked_mul(two));%0Aassert_eq!(None,+max.checked_mul(two));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together.\nReturn <a href=\"../../std/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, two.saturating_mul(two));\n<span class=\"macro\">assert_eq!</span>(max, four.saturating_mul(max));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(four,+two.saturating_mul(two));%0Aassert_eq!(max,+four.saturating_mul(max));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unchecked_mul\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"../../std/num/struct.NonZero.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, other: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>nonzero_ops</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84186\">#84186</a>)</span></div></span></summary><div class=\"docblock\"><p>Multiplies two non-zero integers together,\nassuming overflow cannot occur.\nOverflow is unchecked, and it is undefined behaviour to overflow\n<em>even if the result would wrap to a non-zero value</em>.\nThe behaviour is undefined as soon as\n<code>self * rhs &gt; i64::MAX</code>, or <code>self * rhs &lt; i64::MIN</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(nonzero_ops)]\n\n</span><span class=\"kw\">let </span>two = NonZero::new(<span class=\"number\">2i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>four = NonZero::new(<span class=\"number\">4i64</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(four, <span class=\"kw\">unsafe </span>{ two.unchecked_mul(two) });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(nonzero_ops)%5D%0A%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+two+=+NonZero::new(2i64)?;%0Alet+four+=+NonZero::new(4i64)?;%0A%0Aassert_eq!(four,+unsafe+%7B+two.unchecked_mul(two)+%7D);%0ASome(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, other: <a class=\"primitive\" href=\"../../std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"../../std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raises non-zero value to an integer power.\nChecks for overflow and returns <a href=\"../../std/option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> on overflow.\nAs a consequence, the result cannot wrap to zero.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>half_max = NonZero::new(i64::MAX / <span class=\"number\">2</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(twenty_seven), three.checked_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, half_max.checked_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i64)?;%0Alet+twenty_seven+=+NonZero::new(27i64)?;%0Alet+half_max+=+NonZero::new(i64::MAX+/+2)?;%0A%0Aassert_eq!(Some(twenty_seven),+three.checked_pow(3));%0Aassert_eq!(None,+half_max.checked_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0, const since 1.64.0\">1.64.0 (const: 1.64.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"../../std/num/struct.NonZero.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, other: <a class=\"primitive\" href=\"../../std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Raise non-zero value to an integer power.\nReturn <a href=\"../../std/num/struct.NonZero.html#associatedconstant.MIN\" title=\"associated constant std::num::NonZero::MIN\"><code>NonZero::&lt;i64&gt;::MIN</code></a> or <a href=\"../../std/num/struct.NonZero.html#associatedconstant.MAX\" title=\"associated constant std::num::NonZero::MAX\"><code>NonZero::&lt;i64&gt;::MAX</code></a> on overflow.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>three = NonZero::new(<span class=\"number\">3i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>twenty_seven = NonZero::new(<span class=\"number\">27i64</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>max = NonZero::new(i64::MAX)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(twenty_seven, three.saturating_pow(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(max, max.saturating_pow(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::num::NonZero;%0A%0Afn+main()+%7B+test().unwrap();+%7D%0Afn+test()+-%3E+Option%3C()%3E+%7B%0Alet+three+=+NonZero::new(3i64)?;%0Alet+twenty_seven+=+NonZero::new(27i64)?;%0Alet+max+=+NonZero::new(i64::MAX)?;%0A%0Aassert_eq!(twenty_seven,+three.saturating_pow(3));%0Aassert_eq!(max,+max.saturating_pow(3));%0ASome(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\">Trait Implementations</h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Binary-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#135\">source</a></span><a href=\"#impl-Binary-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#135\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../std/fmt/trait.Binary.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3CNonZero%3CT%3E%3E-for-T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#311-313\">source</a></span><a href=\"#impl-BitOr%3CNonZero%3CT%3E%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt; for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#318\">source</a><a href=\"#method.bitor\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; &lt;T as <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../../std/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3CT%3E-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#297-299\">source</a></span><a href=\"#impl-BitOr%3CT%3E-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;T&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#304\">source</a><a href=\"#method.bitor-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: T) -&gt; &lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt; as <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../../std/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#283-285\">source</a></span><a href=\"#impl-BitOr-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#290\">source</a><a href=\"#method.bitor-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt; as <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"../../std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../../std/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign%3CT%3E-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#337-340\">source</a></span><a href=\"#impl-BitOrAssign%3CT%3E-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;T&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,\n    <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;: <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;T, Output = <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#343\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: T)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../../std/ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#325-328\">source</a></span><a href=\"#impl-BitOrAssign-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,\n    <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;: <a class=\"trait\" href=\"../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#331\">source</a><a href=\"#method.bitor_assign-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../../std/ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#161-163\">source</a></span><a href=\"#impl-Clone-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#166\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../../std/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../../std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../../std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#133\">source</a></span><a href=\"#impl-Debug-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#133\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../std/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#134\">source</a></span><a href=\"#impl-Display-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#134\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../std/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3CT%3E%3E-for-T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#271-273\">source</a></span><a href=\"#impl-From%3CNonZero%3CT%3E%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;&gt; for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#276\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#443\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci16%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i16.html\">i16</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#443\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i16.html\">i16</a>&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i16.html\" title=\"primitive i16\">i16</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#446\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci32%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i32.html\">i32</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#446\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i32.html\">i32</a>&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i32.html\" title=\"primitive i32\">i32</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#439\">source</a></span><a href=\"#impl-From%3CNonZero%3Ci8%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i8.html\">i8</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#439\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i8.html\">i8</a>&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i8.html\" title=\"primitive i8\">i8</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#457\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu16%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#457\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.u16.html\" title=\"primitive u16\">u16</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#459\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu32%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#459\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.u32.html\" title=\"primitive u32\">u32</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#453\">source</a></span><a href=\"#impl-From%3CNonZero%3Cu8%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#453\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code> losslessly.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><a href=\"#impl-FromStr-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"../../std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><a href=\"#method.from_str\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"../../std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../../std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"../../std/str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../../std/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#257-259\">source</a></span><a href=\"#impl-Hash-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#262-264\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../../std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../../std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../../std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../std/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../../std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../../std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../../std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../../std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../../std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../std/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-LowerHex-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#137\">source</a></span><a href=\"#impl-LowerHex-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#137\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../std/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a></span><a href=\"#impl-Neg-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#1684-1688\">source</a><a href=\"#method.neg\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../../std/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Octal-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#136\">source</a></span><a href=\"#impl-Octal-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#136\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../std/fmt/trait.Octal.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#228-230\">source</a></span><a href=\"#impl-Ord-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#233\">source</a><a href=\"#method.cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../../std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../../std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../../std/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#238\">source</a><a href=\"#method.max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../../std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#244\">source</a><a href=\"#method.min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../../std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#250\">source</a><a href=\"#method.clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;, max: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../../std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#175-177\">source</a></span><a href=\"#impl-PartialEq-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#180\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#185\">source</a><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#197-199\">source</a></span><a href=\"#impl-PartialOrd-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#202\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../../std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../std/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#207\">source</a><a href=\"#method.lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../std/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#212\">source</a><a href=\"#method.le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../std/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#217\">source</a><a href=\"#method.gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../std/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#222\">source</a><a href=\"#method.ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../std/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Ci128%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i128.html\">i128</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#525\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i128.html\">i128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i128.html\">i128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i128.html\" title=\"primitive i128\">i128</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../../std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cisize%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.isize.html\">isize</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#526\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.isize.html\">isize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.isize.html\">isize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.isize.html\" title=\"primitive isize\">isize</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../../std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu128%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u128.html\">u128</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#533\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u128.html\">u128</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u128.html\">u128</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.u128.html\" title=\"primitive u128\">u128</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../../std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cu64%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u64.html\">u64</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#532\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.u64.html\">u64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.u64.html\" title=\"primitive u64\">u64</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../../std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a></span><a href=\"#impl-TryFrom%3CNonZero%3Cusize%3E%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#534\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../../std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Ci64%3E-for-NonZero%3Ci64%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#491\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-NonZero%3Ci64%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/num.rs.html#491\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>,\n) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;, &lt;<a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt; as <a class=\"trait\" href=\"../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert <a href=\"../../std/primitive.i64.html\" title=\"primitive i64\"><code>i64</code></a> \nto <code><a href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../../std/primitive.i64.html\" title=\"primitive i64\">i64</a>&gt;</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../std/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../../std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-UpperHex-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#138\">source</a></span><a href=\"#impl-UpperHex-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#138\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../std/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../std/fmt/trait.UpperHex.html#tymethod.fmt\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#172\">source</a></span><a href=\"#impl-Copy-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a>,</div></h3></section><section id=\"impl-Eq-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#194\">source</a></span><a href=\"#impl-Eq-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section><section id=\"impl-Freeze-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#153\">source</a></span><a href=\"#impl-Freeze-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#154\">source</a></span><a href=\"#impl-RefUnwindSafe-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#155\">source</a></span><a href=\"#impl-Send-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-StructuralPartialEq-for-NonZero%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#191\">source</a><a href=\"#impl-StructuralPartialEq-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a>,</div></h3></section><section id=\"impl-Sync-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#156\">source</a></span><a href=\"#impl-Sync-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#157\">source</a></span><a href=\"#impl-Unpin-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#158\">source</a></span><a href=\"#impl-UnwindSafe-for-NonZero%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"../../std/num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../std/num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"../../std/panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:02.249Z"
}