{
	"title": "ExitStatusExt in std::os::unix::process - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html",
	"markdown": "# ExitStatusExt in std::os::unix::process - Rust\n\n```\npub trait ExitStatusExt: Sealed {\n    // Required methods\n    fn from_raw(raw: i32) -> Self;\n    fn signal(&self) -> Option<i32>;\n    fn core_dumped(&self) -> bool;\n    fn stopped_signal(&self) -> Option<i32>;\n    fn continued(&self) -> bool;\n    fn into_raw(self) -> i32;\n}\n```\n\nAvailable on **Unix** only.\n\nExpand description\n\nUnix-specific extensions to [`process::ExitStatus`](../../../process/struct.ExitStatus.html \"struct std::process::ExitStatus\") and [`ExitStatusError`](../../../process/struct.ExitStatusError.html \"struct std::process::ExitStatusError\").\n\nOn Unix, `ExitStatus` **does not necessarily represent an exit status**, as passed to the `_exit` system call or returned by [`ExitStatus::code()`](about:blank/process/struct.ExitStatus.html#method.code \"method std::process::ExitStatus::code\"). It represents **any wait status** as returned by one of the `wait` family of system calls.\n\nA Unix wait status (a Rust `ExitStatus`) can represent a Unix exit status, but can also represent other kinds of process event.\n\nThis trait is sealed: it cannot be implemented outside the standard library. This is so that future additional methods are not breaking changes.\n\n1.12.0 · [source](about:blank/src/std/os/unix/process.rs.html#271)\n\nCreates a new `ExitStatus` or `ExitStatusError` from the raw underlying integer status value from `wait`\n\nThe value should be a **wait status, not an exit status**.\n\n##### [§](#panics)Panics\n\nPanics on an attempt to make an `ExitStatusError` from a wait status of `0`.\n\nMaking an `ExitStatus` always succeeds and never panics.\n\n1.0.0 · [source](about:blank/src/std/os/unix/process.rs.html#277)\n\nIf the process was terminated by a signal, returns that signal.\n\nIn other words, if `WIFSIGNALED`, this returns `WTERMSIG`.\n\n1.58.0 · [source](about:blank/src/std/os/unix/process.rs.html#281)\n\nIf the process was terminated by a signal, says whether it dumped core.\n\n1.58.0 · [source](about:blank/src/std/os/unix/process.rs.html#288)\n\nIf the process was stopped by a signal, returns that signal.\n\nIn other words, if `WIFSTOPPED`, this returns `WSTOPSIG`. This is only possible if the status came from a `wait` system call which was passed `WUNTRACED`, and was then converted into an `ExitStatus`.\n\n1.58.0 · [source](about:blank/src/std/os/unix/process.rs.html#295)\n\nWhether the process was continued from a stopped status.\n\nIe, `WIFCONTINUED`. This is only possible if the status came from a `wait` system call which was passed `WCONTINUED`, and was then converted into an `ExitStatus`.\n\n1.58.0 · [source](about:blank/src/std/os/unix/process.rs.html#301)\n\nReturns the underlying raw `wait` status.\n\nThe returned integer is a **wait status, not an exit status**.\n\n1.0.0 · [source](about:blank/src/std/os/unix/process.rs.html#305-329)[§](#impl-ExitStatusExt-for-ExitStatus)\n\n[source](about:blank/src/std/os/unix/process.rs.html#332-358)[§](#impl-ExitStatusExt-for-ExitStatusError)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Unix-specific extensions to `process::ExitStatus` and `ExitStatusError`.\"><title>ExitStatusExt in std::os::unix::process - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">ExitStatusExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">ExitStatusExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.continued\">continued</a></li><li><a href=\"#tymethod.core_dumped\">core_dumped</a></li><li><a href=\"#tymethod.from_raw\">from_raw</a></li><li><a href=\"#tymethod.into_raw\">into_raw</a></li><li><a href=\"#tymethod.signal\">signal</a></li><li><a href=\"#tymethod.stopped_signal\">stopped_signal</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::unix::process</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.CommandExt.html\">CommandExt</a></li><li><a href=\"trait.ExitStatusExt.html\">ExitStatusExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.parent_id.html\">parent_id</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">unix</a>::<wbr><a href=\"index.html\">process</a>::<wbr><a class=\"trait\" href=\"#\">ExitStatusExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#259-302\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait ExitStatusExt: Sealed {\n    // Required methods\n    fn <a href=\"#tymethod.from_raw\" class=\"fn\">from_raw</a>(raw: <a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.signal\" class=\"fn\">signal</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.core_dumped\" class=\"fn\">core_dumped</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.stopped_signal\" class=\"fn\">stopped_signal</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.continued\" class=\"fn\">continued</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.into_raw\" class=\"fn\">into_raw</a>(self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>;\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Unix-specific extensions to <a href=\"../../../process/struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\"><code>process::ExitStatus</code></a> and\n<a href=\"../../../process/struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\"><code>ExitStatusError</code></a>.</p>\n<p>On Unix, <code>ExitStatus</code> <strong>does not necessarily represent an exit status</strong>, as\npassed to the <code>_exit</code> system call or returned by\n<a href=\"../../../process/struct.ExitStatus.html#method.code\" title=\"method std::process::ExitStatus::code\"><code>ExitStatus::code()</code></a>.  It represents <strong>any wait status</strong>\nas returned by one of the <code>wait</code> family of system\ncalls.</p>\n<p>A Unix wait status (a Rust <code>ExitStatus</code>) can represent a Unix exit status, but can also\nrepresent other kinds of process event.</p>\n<p>This trait is sealed: it cannot be implemented outside the standard library.\nThis is so that future additional methods are not breaking changes.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.from_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#271\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.from_raw\" class=\"fn\">from_raw</a>(raw: <a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>ExitStatus</code> or <code>ExitStatusError</code> from the raw underlying integer status\nvalue from <code>wait</code></p>\n<p>The value should be a <strong>wait status, not an exit status</strong>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics on an attempt to make an <code>ExitStatusError</code> from a wait status of <code>0</code>.</p>\n<p>Making an <code>ExitStatus</code> always succeeds and never panics.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.signal\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#277\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.signal\" class=\"fn\">signal</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the process was terminated by a signal, returns that signal.</p>\n<p>In other words, if <code>WIFSIGNALED</code>, this returns <code>WTERMSIG</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.core_dumped\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#281\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.core_dumped\" class=\"fn\">core_dumped</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>If the process was terminated by a signal, says whether it dumped core.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.stopped_signal\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#288\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.stopped_signal\" class=\"fn\">stopped_signal</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the process was stopped by a signal, returns that signal.</p>\n<p>In other words, if <code>WIFSTOPPED</code>, this returns <code>WSTOPSIG</code>.  This is only possible if the status came from\na <code>wait</code> system call which was passed <code>WUNTRACED</code>, and was then converted into an <code>ExitStatus</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.continued\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#295\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.continued\" class=\"fn\">continued</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether the process was continued from a stopped status.</p>\n<p>Ie, <code>WIFCONTINUED</code>.  This is only possible if the status came from a <code>wait</code> system call\nwhich was passed <code>WCONTINUED</code>, and was then converted into an <code>ExitStatus</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.into_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#301\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.into_raw\" class=\"fn\">into_raw</a>(self) -&gt; <a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\"><p>Returns the underlying raw <code>wait</code> status.</p>\n<p>The returned integer is a <strong>wait status, not an exit status</strong>.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-ExitStatusExt-for-ExitStatus\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#305-329\">source</a></span><a href=\"#impl-ExitStatusExt-for-ExitStatus\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ExitStatusExt.html\" title=\"trait std::os::unix::process::ExitStatusExt\">ExitStatusExt</a> for <a class=\"struct\" href=\"../../../process/struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\">ExitStatus</a></h3></section><section id=\"impl-ExitStatusExt-for-ExitStatusError\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/process.rs.html#332-358\">source</a><a href=\"#impl-ExitStatusExt-for-ExitStatusError\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ExitStatusExt.html\" title=\"trait std::os::unix::process::ExitStatusExt\">ExitStatusExt</a> for <a class=\"struct\" href=\"../../../process/struct.ExitStatusError.html\" title=\"struct std::process::ExitStatusError\">ExitStatusError</a></h3></section></div><script src=\"../../../../trait.impl/std/os/unix/process/trait.ExitStatusExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:26.209Z"
}