{
	"title": "ErrorKind in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/enum.ErrorKind.html",
	"markdown": "# ErrorKind in std::io - Rust\n\n```\n#[non_exhaustive]pub enum ErrorKind {\nShow 40 variants    NotFound,\n    PermissionDenied,\n    ConnectionRefused,\n    ConnectionReset,\n    HostUnreachable,\n    NetworkUnreachable,\n    ConnectionAborted,\n    NotConnected,\n    AddrInUse,\n    AddrNotAvailable,\n    NetworkDown,\n    BrokenPipe,\n    AlreadyExists,\n    WouldBlock,\n    NotADirectory,\n    IsADirectory,\n    DirectoryNotEmpty,\n    ReadOnlyFilesystem,\n    FilesystemLoop,\n    StaleNetworkFileHandle,\n    InvalidInput,\n    InvalidData,\n    TimedOut,\n    WriteZero,\n    StorageFull,\n    NotSeekable,\n    FilesystemQuotaExceeded,\n    FileTooLarge,\n    ResourceBusy,\n    ExecutableFileBusy,\n    Deadlock,\n    CrossesDevices,\n    TooManyLinks,\n    InvalidFilename,\n    ArgumentListTooLong,\n    Interrupted,\n    Unsupported,\n    UnexpectedEof,\n    OutOfMemory,\n    Other,\n}\n```\n\nExpand description\n\nA list specifying general categories of I/O error.\n\nThis list is intended to grow over time and it is not recommended to exhaustively match against it.\n\nIt is used with the [`io::Error`](struct.Error.html \"struct std::io::Error\") type.\n\n## [§](#handling-errors-and-matching-on-errorkind)Handling errors and matching on `ErrorKind`\n\nIn application code, use `match` for the `ErrorKind` values you are expecting; use `_` to match “all other errors”.\n\nIn comprehensive and thorough tests that want to verify that a test doesn’t return any known incorrect error kind, you may want to cut-and-paste the current full list of errors from here into your test code, and then match `_` as the correct case. This seems counterintuitive, but it will make your tests more robust. In particular, if you want to verify that your code does produce an unrecognized error kind, the robust solution is to check for all the recognized error kinds and fail in those cases.\n\nThis enum is marked as non-exhaustive\n\nNon-exhaustive enums could have additional variants added in future. Therefore, when matching against variants of non-exhaustive enums, an extra wildcard arm must be added to account for any future variants.\n\n[§](#variant.NotFound)1.0.0\n\nAn entity was not found, often a file.\n\n[§](#variant.PermissionDenied)1.0.0\n\nThe operation lacked the necessary privileges to complete.\n\n[§](#variant.ConnectionRefused)1.0.0\n\nThe connection was refused by the remote server.\n\n[§](#variant.ConnectionReset)1.0.0\n\nThe connection was reset by the remote server.\n\n[§](#variant.HostUnreachable)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nThe remote host is not reachable.\n\n[§](#variant.NetworkUnreachable)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nThe network containing the remote host is not reachable.\n\n[§](#variant.ConnectionAborted)1.0.0\n\nThe connection was aborted (terminated) by the remote server.\n\n[§](#variant.NotConnected)1.0.0\n\nThe network operation failed because it was not connected yet.\n\n[§](#variant.AddrInUse)1.0.0\n\nA socket address could not be bound because the address is already in use elsewhere.\n\n[§](#variant.AddrNotAvailable)1.0.0\n\nA nonexistent interface was requested or the requested address was not local.\n\n[§](#variant.NetworkDown)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nThe system’s networking is down.\n\n[§](#variant.BrokenPipe)1.0.0\n\nThe operation failed because a pipe was closed.\n\n[§](#variant.AlreadyExists)1.0.0\n\nAn entity already exists, often a file.\n\n[§](#variant.WouldBlock)1.0.0\n\nThe operation needs to block to complete, but the blocking operation was requested to not occur.\n\n[§](#variant.NotADirectory)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nA filesystem object is, unexpectedly, not a directory.\n\nFor example, a filesystem path was specified where one of the intermediate directory components was, in fact, a plain file.\n\n[§](#variant.IsADirectory)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nThe filesystem object is, unexpectedly, a directory.\n\nA directory was specified when a non-directory was expected.\n\n[§](#variant.DirectoryNotEmpty)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nA non-empty directory was specified where an empty directory was expected.\n\n[§](#variant.ReadOnlyFilesystem)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nThe filesystem or storage medium is read-only, but a write operation was attempted.\n\n[§](#variant.FilesystemLoop)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nLoop in the filesystem or IO subsystem; often, too many levels of symbolic links.\n\nThere was a loop (or excessively long chain) resolving a filesystem object or file IO object.\n\nOn Unix this is usually the result of a symbolic link loop; or, of exceeding the system-specific limit on the depth of symlink traversal.\n\n[§](#variant.StaleNetworkFileHandle)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nStale network file handle.\n\nWith some network filesystems, notably NFS, an open file (or directory) can be invalidated by problems with the network or server.\n\n[§](#variant.InvalidInput)1.0.0\n\nA parameter was incorrect.\n\n[§](#variant.InvalidData)1.2.0\n\nData not valid for the operation were encountered.\n\nUnlike [`InvalidInput`](about:blank/enum.ErrorKind.html#variant.InvalidInput \"variant std::io::ErrorKind::InvalidInput\"), this typically means that the operation parameters were valid, however the error was caused by malformed input data.\n\nFor example, a function that reads a file into a string will error with `InvalidData` if the file’s contents are not valid UTF-8.\n\n[§](#variant.TimedOut)1.0.0\n\nThe I/O operation’s timeout expired, causing it to be canceled.\n\n[§](#variant.WriteZero)1.0.0\n\nAn error returned when an operation could not be completed because a call to [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\") returned [`Ok(0)`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\").\n\nThis typically means that an operation could only succeed if it wrote a particular number of bytes but only a smaller number of bytes could be written.\n\n[§](#variant.StorageFull)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nThe underlying storage (typically, a filesystem) is full.\n\nThis does not include out of quota errors.\n\n[§](#variant.NotSeekable)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nSeek on unseekable file.\n\nSeeking was attempted on an open file handle which is not suitable for seeking - for example, on Unix, a named pipe opened with `File::open`.\n\n[§](#variant.FilesystemQuotaExceeded)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nFilesystem quota was exceeded.\n\n[§](#variant.FileTooLarge)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nFile larger than allowed or supported.\n\nThis might arise from a hard limit of the underlying filesystem or file access API, or from an administratively imposed resource limitation. Simple disk full, and out of quota, have their own errors.\n\n[§](#variant.ResourceBusy)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nResource is busy.\n\n[§](#variant.ExecutableFileBusy)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nExecutable file is busy.\n\nAn attempt was made to write to a file which is also in use as a running program. (Not all operating systems detect this situation.)\n\n[§](#variant.Deadlock)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nDeadlock (avoided).\n\nA file locking operation would result in deadlock. This situation is typically detected, if at all, on a best-effort basis.\n\n[§](#variant.CrossesDevices)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nCross-device or cross-filesystem (hard) link or rename.\n\n[§](#variant.TooManyLinks)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nToo many (hard) links to the same filesystem object.\n\nThe filesystem does not support making so many hardlinks to the same file.\n\n[§](#variant.InvalidFilename)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nA filename was invalid.\n\nThis error can also cause if it exceeded the filename length limit.\n\n[§](#variant.ArgumentListTooLong)\n\n🔬This is a nightly-only experimental API. (`io_error_more` [#86442](https://github.com/rust-lang/rust/issues/86442))\n\nProgram argument list too long.\n\nWhen trying to run an external program, a system or process limit on the size of the arguments would have been exceeded.\n\n[§](#variant.Interrupted)1.0.0\n\nThis operation was interrupted.\n\nInterrupted operations can typically be retried.\n\n[§](#variant.Unsupported)1.53.0\n\nThis operation is unsupported on this platform.\n\nThis means that the operation can never succeed.\n\n[§](#variant.UnexpectedEof)1.6.0\n\nAn error returned when an operation could not be completed because an “end of file” was reached prematurely.\n\nThis typically means that an operation could only succeed if it read a particular number of bytes but only a smaller number of bytes could be read.\n\n[§](#variant.OutOfMemory)1.54.0\n\nAn operation could not be completed, because it failed to allocate enough memory.\n\n[§](#variant.Other)1.0.0\n\nA custom error that does not fall under any other I/O error kind.\n\nThis can be used to construct your own [`Error`](struct.Error.html \"struct std::io::Error\")s that do not match any [`ErrorKind`](enum.ErrorKind.html \"enum std::io::ErrorKind\").\n\nThis [`ErrorKind`](enum.ErrorKind.html \"enum std::io::ErrorKind\") is not used by the standard library.\n\nErrors from the standard library that do not fall under any of the I/O error kinds cannot be `match`ed on, and will only match a wildcard (`_`) pattern. New [`ErrorKind`](enum.ErrorKind.html \"enum std::io::ErrorKind\")s might be added in the future for some of those.\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-Clone-for-ErrorKind)\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-Debug-for-ErrorKind)\n\n1.60.0 · [source](about:blank/src/std/io/error.rs.html#485-498)[§](#impl-Display-for-ErrorKind)\n\n[source](about:blank/src/std/io/error.rs.html#495-497)[§](#method.fmt-1)\n\nShows a human-readable description of the `ErrorKind`.\n\nThis is similar to `impl Display for Error`, but doesn’t require first converting to Error.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::io::ErrorKind;\nassert_eq!(\"entity not found\", ErrorKind::NotFound.to_string());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::ErrorKind;%0A++++assert_eq!(%22entity+not+found%22,+ErrorKind::NotFound.to_string());%0A%7D&edition=2021)\n\n1.14.0 · [source](about:blank/src/std/io/error.rs.html#503-521)[§](#impl-From%3CErrorKind%3E-for-Error)\n\nIntended for use for errors not exposed to the user, where allocating onto the heap (for normal construction via Error::new) is too costly.\n\n[source](about:blank/src/std/io/error.rs.html#518-520)[§](#method.from)\n\nConverts an [`ErrorKind`](enum.ErrorKind.html \"enum std::io::ErrorKind\") into an [`Error`](struct.Error.html \"struct std::io::Error\").\n\nThis conversion creates a new error with a simple representation of error kind.\n\n##### [§](#examples)Examples\n\n```\nuse std::io::{Error, ErrorKind};\n\nlet not_found = ErrorKind::NotFound;\nlet error = Error::from(not_found);\nassert_eq!(\"entity not found\", format!(\"{error}\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7BError,+ErrorKind%7D;%0A++++%0A++++let+not_found+=+ErrorKind::NotFound;%0A++++let+error+=+Error::from(not_found);%0A++++assert_eq!(%22entity+not+found%22,+format!(%22%7Berror%7D%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-Hash-for-ErrorKind)\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-Ord-for-ErrorKind)\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-PartialEq-for-ErrorKind)\n\n[source](about:blank/src/std/io/error.rs.html#211)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-PartialOrd-for-ErrorKind)\n\n[source](about:blank/src/std/io/error.rs.html#211)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-Copy-for-ErrorKind)\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-Eq-for-ErrorKind)\n\n1.0.0 · [source](about:blank/src/std/io/error.rs.html#211)[§](#impl-StructuralPartialEq-for-ErrorKind)\n\n[§](#impl-Freeze-for-ErrorKind)\n\n[§](#impl-RefUnwindSafe-for-ErrorKind)\n\n[§](#impl-Send-for-ErrorKind)\n\n[§](#impl-Sync-for-ErrorKind)\n\n[§](#impl-Unpin-for-ErrorKind)\n\n[§](#impl-UnwindSafe-for-ErrorKind)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A list specifying general categories of I/O error.\"><title>ErrorKind in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc enum\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">ErrorKind</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">ErrorKind</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#variants\">Variants</a></h3><ul class=\"block variant\"><li><a href=\"#variant.AddrInUse\">AddrInUse</a></li><li><a href=\"#variant.AddrNotAvailable\">AddrNotAvailable</a></li><li><a href=\"#variant.AlreadyExists\">AlreadyExists</a></li><li><a href=\"#variant.ArgumentListTooLong\">ArgumentListTooLong</a></li><li><a href=\"#variant.BrokenPipe\">BrokenPipe</a></li><li><a href=\"#variant.ConnectionAborted\">ConnectionAborted</a></li><li><a href=\"#variant.ConnectionRefused\">ConnectionRefused</a></li><li><a href=\"#variant.ConnectionReset\">ConnectionReset</a></li><li><a href=\"#variant.CrossesDevices\">CrossesDevices</a></li><li><a href=\"#variant.Deadlock\">Deadlock</a></li><li><a href=\"#variant.DirectoryNotEmpty\">DirectoryNotEmpty</a></li><li><a href=\"#variant.ExecutableFileBusy\">ExecutableFileBusy</a></li><li><a href=\"#variant.FileTooLarge\">FileTooLarge</a></li><li><a href=\"#variant.FilesystemLoop\">FilesystemLoop</a></li><li><a href=\"#variant.FilesystemQuotaExceeded\">FilesystemQuotaExceeded</a></li><li><a href=\"#variant.HostUnreachable\">HostUnreachable</a></li><li><a href=\"#variant.Interrupted\">Interrupted</a></li><li><a href=\"#variant.InvalidData\">InvalidData</a></li><li><a href=\"#variant.InvalidFilename\">InvalidFilename</a></li><li><a href=\"#variant.InvalidInput\">InvalidInput</a></li><li><a href=\"#variant.IsADirectory\">IsADirectory</a></li><li><a href=\"#variant.NetworkDown\">NetworkDown</a></li><li><a href=\"#variant.NetworkUnreachable\">NetworkUnreachable</a></li><li><a href=\"#variant.NotADirectory\">NotADirectory</a></li><li><a href=\"#variant.NotConnected\">NotConnected</a></li><li><a href=\"#variant.NotFound\">NotFound</a></li><li><a href=\"#variant.NotSeekable\">NotSeekable</a></li><li><a href=\"#variant.Other\">Other</a></li><li><a href=\"#variant.OutOfMemory\">OutOfMemory</a></li><li><a href=\"#variant.PermissionDenied\">PermissionDenied</a></li><li><a href=\"#variant.ReadOnlyFilesystem\">ReadOnlyFilesystem</a></li><li><a href=\"#variant.ResourceBusy\">ResourceBusy</a></li><li><a href=\"#variant.StaleNetworkFileHandle\">StaleNetworkFileHandle</a></li><li><a href=\"#variant.StorageFull\">StorageFull</a></li><li><a href=\"#variant.TimedOut\">TimedOut</a></li><li><a href=\"#variant.TooManyLinks\">TooManyLinks</a></li><li><a href=\"#variant.UnexpectedEof\">UnexpectedEof</a></li><li><a href=\"#variant.Unsupported\">Unsupported</a></li><li><a href=\"#variant.WouldBlock\">WouldBlock</a></li><li><a href=\"#variant.WriteZero\">WriteZero</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-ErrorKind\">Clone</a></li><li><a href=\"#impl-Copy-for-ErrorKind\">Copy</a></li><li><a href=\"#impl-Debug-for-ErrorKind\">Debug</a></li><li><a href=\"#impl-Display-for-ErrorKind\">Display</a></li><li><a href=\"#impl-Eq-for-ErrorKind\">Eq</a></li><li><a href=\"#impl-From%3CErrorKind%3E-for-Error\">From&lt;ErrorKind&gt;</a></li><li><a href=\"#impl-Hash-for-ErrorKind\">Hash</a></li><li><a href=\"#impl-Ord-for-ErrorKind\">Ord</a></li><li><a href=\"#impl-PartialEq-for-ErrorKind\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-ErrorKind\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-ErrorKind\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-ErrorKind\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-ErrorKind\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-ErrorKind\">Send</a></li><li><a href=\"#impl-Sync-for-ErrorKind\">Sync</a></li><li><a href=\"#impl-Unpin-for-ErrorKind\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-ErrorKind\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Enum <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"enum\" href=\"#\">ErrorKind</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#215-431\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code><div class=\"code-attribute\">#[non_exhaustive]</div>pub enum ErrorKind {\n<details class=\"toggle type-contents-toggle\"><summary class=\"hideme\"><span>Show 40 variants</span></summary>    NotFound,\n    PermissionDenied,\n    ConnectionRefused,\n    ConnectionReset,\n    HostUnreachable,\n    NetworkUnreachable,\n    ConnectionAborted,\n    NotConnected,\n    AddrInUse,\n    AddrNotAvailable,\n    NetworkDown,\n    BrokenPipe,\n    AlreadyExists,\n    WouldBlock,\n    NotADirectory,\n    IsADirectory,\n    DirectoryNotEmpty,\n    ReadOnlyFilesystem,\n    FilesystemLoop,\n    StaleNetworkFileHandle,\n    InvalidInput,\n    InvalidData,\n    TimedOut,\n    WriteZero,\n    StorageFull,\n    NotSeekable,\n    FilesystemQuotaExceeded,\n    FileTooLarge,\n    ResourceBusy,\n    ExecutableFileBusy,\n    Deadlock,\n    CrossesDevices,\n    TooManyLinks,\n    InvalidFilename,\n    ArgumentListTooLong,\n    Interrupted,\n    Unsupported,\n    UnexpectedEof,\n    OutOfMemory,\n    Other,\n</details>}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A list specifying general categories of I/O error.</p>\n<p>This list is intended to grow over time and it is not recommended to\nexhaustively match against it.</p>\n<p>It is used with the <a href=\"struct.Error.html\" title=\"struct std::io::Error\"><code>io::Error</code></a> type.</p>\n<h2 id=\"handling-errors-and-matching-on-errorkind\"><a class=\"doc-anchor\" href=\"#handling-errors-and-matching-on-errorkind\">§</a>Handling errors and matching on <code>ErrorKind</code></h2>\n<p>In application code, use <code>match</code> for the <code>ErrorKind</code> values you are\nexpecting; use <code>_</code> to match “all other errors”.</p>\n<p>In comprehensive and thorough tests that want to verify that a test doesn’t\nreturn any known incorrect error kind, you may want to cut-and-paste the\ncurrent full list of errors from here into your test code, and then match\n<code>_</code> as the correct case. This seems counterintuitive, but it will make your\ntests more robust. In particular, if you want to verify that your code does\nproduce an unrecognized error kind, the robust solution is to check for all\nthe recognized error kinds and fail in those cases.</p>\n</div></details><h2 id=\"variants\" class=\"variants section-header\">Variants (Non-exhaustive)<a href=\"#variants\" class=\"anchor\">§</a></h2><details class=\"toggle non-exhaustive\"><summary class=\"hideme\"><span>This enum is marked as non-exhaustive</span></summary><div class=\"docblock\">Non-exhaustive enums could have additional variants added in future. Therefore, when matching against variants of non-exhaustive enums, an extra wildcard arm must be added to account for any future variants.</div></details><div class=\"variants\"><section id=\"variant.NotFound\" class=\"variant\"><a href=\"#variant.NotFound\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">NotFound</h3></section><div class=\"docblock\"><p>An entity was not found, often a file.</p>\n</div><section id=\"variant.PermissionDenied\" class=\"variant\"><a href=\"#variant.PermissionDenied\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">PermissionDenied</h3></section><div class=\"docblock\"><p>The operation lacked the necessary privileges to complete.</p>\n</div><section id=\"variant.ConnectionRefused\" class=\"variant\"><a href=\"#variant.ConnectionRefused\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">ConnectionRefused</h3></section><div class=\"docblock\"><p>The connection was refused by the remote server.</p>\n</div><section id=\"variant.ConnectionReset\" class=\"variant\"><a href=\"#variant.ConnectionReset\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">ConnectionReset</h3></section><div class=\"docblock\"><p>The connection was reset by the remote server.</p>\n</div><section id=\"variant.HostUnreachable\" class=\"variant\"><a href=\"#variant.HostUnreachable\" class=\"anchor\">§</a><h3 class=\"code-header\">HostUnreachable</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>The remote host is not reachable.</p>\n</div><section id=\"variant.NetworkUnreachable\" class=\"variant\"><a href=\"#variant.NetworkUnreachable\" class=\"anchor\">§</a><h3 class=\"code-header\">NetworkUnreachable</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>The network containing the remote host is not reachable.</p>\n</div><section id=\"variant.ConnectionAborted\" class=\"variant\"><a href=\"#variant.ConnectionAborted\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">ConnectionAborted</h3></section><div class=\"docblock\"><p>The connection was aborted (terminated) by the remote server.</p>\n</div><section id=\"variant.NotConnected\" class=\"variant\"><a href=\"#variant.NotConnected\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">NotConnected</h3></section><div class=\"docblock\"><p>The network operation failed because it was not connected yet.</p>\n</div><section id=\"variant.AddrInUse\" class=\"variant\"><a href=\"#variant.AddrInUse\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">AddrInUse</h3></section><div class=\"docblock\"><p>A socket address could not be bound because the address is already in\nuse elsewhere.</p>\n</div><section id=\"variant.AddrNotAvailable\" class=\"variant\"><a href=\"#variant.AddrNotAvailable\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">AddrNotAvailable</h3></section><div class=\"docblock\"><p>A nonexistent interface was requested or the requested address was not\nlocal.</p>\n</div><section id=\"variant.NetworkDown\" class=\"variant\"><a href=\"#variant.NetworkDown\" class=\"anchor\">§</a><h3 class=\"code-header\">NetworkDown</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>The system’s networking is down.</p>\n</div><section id=\"variant.BrokenPipe\" class=\"variant\"><a href=\"#variant.BrokenPipe\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">BrokenPipe</h3></section><div class=\"docblock\"><p>The operation failed because a pipe was closed.</p>\n</div><section id=\"variant.AlreadyExists\" class=\"variant\"><a href=\"#variant.AlreadyExists\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">AlreadyExists</h3></section><div class=\"docblock\"><p>An entity already exists, often a file.</p>\n</div><section id=\"variant.WouldBlock\" class=\"variant\"><a href=\"#variant.WouldBlock\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">WouldBlock</h3></section><div class=\"docblock\"><p>The operation needs to block to complete, but the blocking operation was\nrequested to not occur.</p>\n</div><section id=\"variant.NotADirectory\" class=\"variant\"><a href=\"#variant.NotADirectory\" class=\"anchor\">§</a><h3 class=\"code-header\">NotADirectory</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>A filesystem object is, unexpectedly, not a directory.</p>\n<p>For example, a filesystem path was specified where one of the intermediate directory\ncomponents was, in fact, a plain file.</p>\n</div><section id=\"variant.IsADirectory\" class=\"variant\"><a href=\"#variant.IsADirectory\" class=\"anchor\">§</a><h3 class=\"code-header\">IsADirectory</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>The filesystem object is, unexpectedly, a directory.</p>\n<p>A directory was specified when a non-directory was expected.</p>\n</div><section id=\"variant.DirectoryNotEmpty\" class=\"variant\"><a href=\"#variant.DirectoryNotEmpty\" class=\"anchor\">§</a><h3 class=\"code-header\">DirectoryNotEmpty</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>A non-empty directory was specified where an empty directory was expected.</p>\n</div><section id=\"variant.ReadOnlyFilesystem\" class=\"variant\"><a href=\"#variant.ReadOnlyFilesystem\" class=\"anchor\">§</a><h3 class=\"code-header\">ReadOnlyFilesystem</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>The filesystem or storage medium is read-only, but a write operation was attempted.</p>\n</div><section id=\"variant.FilesystemLoop\" class=\"variant\"><a href=\"#variant.FilesystemLoop\" class=\"anchor\">§</a><h3 class=\"code-header\">FilesystemLoop</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Loop in the filesystem or IO subsystem; often, too many levels of symbolic links.</p>\n<p>There was a loop (or excessively long chain) resolving a filesystem object\nor file IO object.</p>\n<p>On Unix this is usually the result of a symbolic link loop; or, of exceeding the\nsystem-specific limit on the depth of symlink traversal.</p>\n</div><section id=\"variant.StaleNetworkFileHandle\" class=\"variant\"><a href=\"#variant.StaleNetworkFileHandle\" class=\"anchor\">§</a><h3 class=\"code-header\">StaleNetworkFileHandle</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Stale network file handle.</p>\n<p>With some network filesystems, notably NFS, an open file (or directory) can be invalidated\nby problems with the network or server.</p>\n</div><section id=\"variant.InvalidInput\" class=\"variant\"><a href=\"#variant.InvalidInput\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">InvalidInput</h3></section><div class=\"docblock\"><p>A parameter was incorrect.</p>\n</div><section id=\"variant.InvalidData\" class=\"variant\"><a href=\"#variant.InvalidData\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.2.0\">1.2.0</span><h3 class=\"code-header\">InvalidData</h3></section><div class=\"docblock\"><p>Data not valid for the operation were encountered.</p>\n<p>Unlike <a href=\"enum.ErrorKind.html#variant.InvalidInput\" title=\"variant std::io::ErrorKind::InvalidInput\"><code>InvalidInput</code></a>, this typically means that the operation\nparameters were valid, however the error was caused by malformed\ninput data.</p>\n<p>For example, a function that reads a file into a string will error with\n<code>InvalidData</code> if the file’s contents are not valid UTF-8.</p>\n</div><section id=\"variant.TimedOut\" class=\"variant\"><a href=\"#variant.TimedOut\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">TimedOut</h3></section><div class=\"docblock\"><p>The I/O operation’s timeout expired, causing it to be canceled.</p>\n</div><section id=\"variant.WriteZero\" class=\"variant\"><a href=\"#variant.WriteZero\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">WriteZero</h3></section><div class=\"docblock\"><p>An error returned when an operation could not be completed because a\ncall to <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> returned <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok(0)</code></a>.</p>\n<p>This typically means that an operation could only succeed if it wrote a\nparticular number of bytes but only a smaller number of bytes could be\nwritten.</p>\n</div><section id=\"variant.StorageFull\" class=\"variant\"><a href=\"#variant.StorageFull\" class=\"anchor\">§</a><h3 class=\"code-header\">StorageFull</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>The underlying storage (typically, a filesystem) is full.</p>\n<p>This does not include out of quota errors.</p>\n</div><section id=\"variant.NotSeekable\" class=\"variant\"><a href=\"#variant.NotSeekable\" class=\"anchor\">§</a><h3 class=\"code-header\">NotSeekable</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Seek on unseekable file.</p>\n<p>Seeking was attempted on an open file handle which is not suitable for seeking - for\nexample, on Unix, a named pipe opened with <code>File::open</code>.</p>\n</div><section id=\"variant.FilesystemQuotaExceeded\" class=\"variant\"><a href=\"#variant.FilesystemQuotaExceeded\" class=\"anchor\">§</a><h3 class=\"code-header\">FilesystemQuotaExceeded</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Filesystem quota was exceeded.</p>\n</div><section id=\"variant.FileTooLarge\" class=\"variant\"><a href=\"#variant.FileTooLarge\" class=\"anchor\">§</a><h3 class=\"code-header\">FileTooLarge</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>File larger than allowed or supported.</p>\n<p>This might arise from a hard limit of the underlying filesystem or file access API, or from\nan administratively imposed resource limitation.  Simple disk full, and out of quota, have\ntheir own errors.</p>\n</div><section id=\"variant.ResourceBusy\" class=\"variant\"><a href=\"#variant.ResourceBusy\" class=\"anchor\">§</a><h3 class=\"code-header\">ResourceBusy</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Resource is busy.</p>\n</div><section id=\"variant.ExecutableFileBusy\" class=\"variant\"><a href=\"#variant.ExecutableFileBusy\" class=\"anchor\">§</a><h3 class=\"code-header\">ExecutableFileBusy</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Executable file is busy.</p>\n<p>An attempt was made to write to a file which is also in use as a running program.  (Not all\noperating systems detect this situation.)</p>\n</div><section id=\"variant.Deadlock\" class=\"variant\"><a href=\"#variant.Deadlock\" class=\"anchor\">§</a><h3 class=\"code-header\">Deadlock</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Deadlock (avoided).</p>\n<p>A file locking operation would result in deadlock.  This situation is typically detected, if\nat all, on a best-effort basis.</p>\n</div><section id=\"variant.CrossesDevices\" class=\"variant\"><a href=\"#variant.CrossesDevices\" class=\"anchor\">§</a><h3 class=\"code-header\">CrossesDevices</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Cross-device or cross-filesystem (hard) link or rename.</p>\n</div><section id=\"variant.TooManyLinks\" class=\"variant\"><a href=\"#variant.TooManyLinks\" class=\"anchor\">§</a><h3 class=\"code-header\">TooManyLinks</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Too many (hard) links to the same filesystem object.</p>\n<p>The filesystem does not support making so many hardlinks to the same file.</p>\n</div><section id=\"variant.InvalidFilename\" class=\"variant\"><a href=\"#variant.InvalidFilename\" class=\"anchor\">§</a><h3 class=\"code-header\">InvalidFilename</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>A filename was invalid.</p>\n<p>This error can also cause if it exceeded the filename length limit.</p>\n</div><section id=\"variant.ArgumentListTooLong\" class=\"variant\"><a href=\"#variant.ArgumentListTooLong\" class=\"anchor\">§</a><h3 class=\"code-header\">ArgumentListTooLong</h3></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>io_error_more</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86442\">#86442</a>)</span></div></span><div class=\"docblock\"><p>Program argument list too long.</p>\n<p>When trying to run an external program, a system or process limit on the size of the\narguments would have been exceeded.</p>\n</div><section id=\"variant.Interrupted\" class=\"variant\"><a href=\"#variant.Interrupted\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">Interrupted</h3></section><div class=\"docblock\"><p>This operation was interrupted.</p>\n<p>Interrupted operations can typically be retried.</p>\n</div><section id=\"variant.Unsupported\" class=\"variant\"><a href=\"#variant.Unsupported\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0\">1.53.0</span><h3 class=\"code-header\">Unsupported</h3></section><div class=\"docblock\"><p>This operation is unsupported on this platform.</p>\n<p>This means that the operation can never succeed.</p>\n</div><section id=\"variant.UnexpectedEof\" class=\"variant\"><a href=\"#variant.UnexpectedEof\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.6.0\">1.6.0</span><h3 class=\"code-header\">UnexpectedEof</h3></section><div class=\"docblock\"><p>An error returned when an operation could not be completed because an\n“end of file” was reached prematurely.</p>\n<p>This typically means that an operation could only succeed if it read a\nparticular number of bytes but only a smaller number of bytes could be\nread.</p>\n</div><section id=\"variant.OutOfMemory\" class=\"variant\"><a href=\"#variant.OutOfMemory\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.54.0\">1.54.0</span><h3 class=\"code-header\">OutOfMemory</h3></section><div class=\"docblock\"><p>An operation could not be completed, because it failed\nto allocate enough memory.</p>\n</div><section id=\"variant.Other\" class=\"variant\"><a href=\"#variant.Other\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">Other</h3></section><div class=\"docblock\"><p>A custom error that does not fall under any other I/O error kind.</p>\n<p>This can be used to construct your own <a href=\"struct.Error.html\" title=\"struct std::io::Error\"><code>Error</code></a>s that do not match any\n<a href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\"><code>ErrorKind</code></a>.</p>\n<p>This <a href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\"><code>ErrorKind</code></a> is not used by the standard library.</p>\n<p>Errors from the standard library that do not fall under any of the I/O\nerror kinds cannot be <code>match</code>ed on, and will only match a wildcard (<code>_</code>) pattern.\nNew <a href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\"><code>ErrorKind</code></a>s might be added in the future for some of those.</p>\n</div></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-Clone-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/error.rs.html#211\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-Debug-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/error.rs.html#211\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#485-498\">source</a></span><a href=\"#impl-Display-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/error.rs.html#495-497\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\"><p>Shows a human-readable description of the <code>ErrorKind</code>.</p>\n<p>This is similar to <code>impl Display for Error</code>, but doesn’t require first converting to Error.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::ErrorKind;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"entity not found\"</span>, ErrorKind::NotFound.to_string());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::ErrorKind;%0A++++assert_eq!(%22entity+not+found%22,+ErrorKind::NotFound.to_string());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CErrorKind%3E-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#503-521\">source</a></span><a href=\"#impl-From%3CErrorKind%3E-for-Error\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a>&gt; for <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::io::Error\">Error</a></h3></section></summary><div class=\"docblock\"><p>Intended for use for errors not exposed to the user, where allocating onto\nthe heap (for normal construction via Error::new) is too costly.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/error.rs.html#518-520\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(kind: <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a>) -&gt; <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::io::Error\">Error</a></h4></section></summary><div class=\"docblock\"><p>Converts an <a href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\"><code>ErrorKind</code></a> into an <a href=\"struct.Error.html\" title=\"struct std::io::Error\"><code>Error</code></a>.</p>\n<p>This conversion creates a new error with a simple representation of error kind.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n\n<span class=\"kw\">let </span>not_found = ErrorKind::NotFound;\n<span class=\"kw\">let </span>error = Error::from(not_found);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"entity not found\"</span>, <span class=\"macro\">format!</span>(<span class=\"string\">\"{error}\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7BError,+ErrorKind%7D;%0A++++%0A++++let+not_found+=+ErrorKind::NotFound;%0A++++let+error+=+Error::from(not_found);%0A++++assert_eq!(%22entity+not+found%22,+format!(%22%7Berror%7D%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-Hash-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/error.rs.html#211\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-Ord-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/error.rs.html#211\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-PartialEq-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/error.rs.html#211\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-PartialOrd-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/error.rs.html#211\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-Copy-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section><section id=\"impl-Eq-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-Eq-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section><section id=\"impl-StructuralPartialEq-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-StructuralPartialEq-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-ErrorKind\" class=\"impl\"><a href=\"#impl-Freeze-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section><section id=\"impl-RefUnwindSafe-for-ErrorKind\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section><section id=\"impl-Send-for-ErrorKind\" class=\"impl\"><a href=\"#impl-Send-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section><section id=\"impl-Sync-for-ErrorKind\" class=\"impl\"><a href=\"#impl-Sync-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section><section id=\"impl-Unpin-for-ErrorKind\" class=\"impl\"><a href=\"#impl-Unpin-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section><section id=\"impl-UnwindSafe-for-ErrorKind\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"enum\" href=\"enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:30.027Z"
}