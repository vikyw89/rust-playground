{
	"title": "SocketAddrExt in std::os::linux::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/linux/net/trait.SocketAddrExt.html",
	"markdown": "# SocketAddrExt in std::os::linux::net - Rust\n\n```\npub trait SocketAddrExt: Sealed {\n    // Required methods\n    fn from_abstract_name<N>(name: N) -> Result<SocketAddr>\n       where N: AsRef<[u8]>;\n    fn as_abstract_name(&self) -> Option<&[u8]>;\n}\n```\n\nAvailable on **Linux and (Linux or Android)** only.\n\nExpand description\n\nPlatform-specific extensions to [`SocketAddr`](../../unix/net/struct.SocketAddr.html \"struct std::os::unix::net::SocketAddr\").\n\n1.70.0 · [source](about:blank/src/std/os/net/linux_ext/addr.rs.html#41-43)\n\nCreates a Unix socket address in the abstract namespace.\n\nThe abstract namespace is a Linux-specific extension that allows Unix sockets to be bound without creating an entry in the filesystem. Abstract sockets are unaffected by filesystem layout or permissions, and no cleanup is necessary when the socket is closed.\n\nAn abstract socket address name may contain any bytes, including zero.\n\n##### [§](#errors)Errors\n\nReturns an error if the name is longer than `SUN_LEN - 1`.\n\n##### [§](#examples)Examples\n\n```\nuse std::os::unix::net::{UnixListener, SocketAddr};\nuse std::os::linux::net::SocketAddrExt;\n\nfn main() -> std::io::Result<()> {\n    let addr = SocketAddr::from_abstract_name(b\"hidden\")?;\n    let listener = match UnixListener::bind_addr(&addr) {\n        Ok(sock) => sock,\n        Err(err) => {\n            println!(\"Couldn't bind: {err:?}\");\n            return Err(err);\n        }\n    };\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::%7BUnixListener,+SocketAddr%7D;%0Ause+std::os::linux::net::SocketAddrExt;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+addr+=+SocketAddr::from_abstract_name(b%22hidden%22)?;%0A++++let+listener+=+match+UnixListener::bind_addr(%26addr)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(err)+=%3E+%7B%0A++++++++++++println!(%22Couldn%27t+bind:+%7Berr:?%7D%22);%0A++++++++++++return+Err(err);%0A++++++++%7D%0A++++%7D;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.70.0 · [source](about:blank/src/std/os/net/linux_ext/addr.rs.html#63)\n\nReturns the contents of this address if it is in the abstract namespace.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::os::unix::net::{UnixListener, SocketAddr};\nuse std::os::linux::net::SocketAddrExt;\n\nfn main() -> std::io::Result<()> {\n    let name = b\"hidden\";\n    let name_addr = SocketAddr::from_abstract_name(name)?;\n    let socket = UnixListener::bind_addr(&name_addr)?;\n    let local_addr = socket.local_addr().expect(\"Couldn't get local address\");\n    assert_eq!(local_addr.as_abstract_name(), Some(&name[..]));\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::%7BUnixListener,+SocketAddr%7D;%0Ause+std::os::linux::net::SocketAddrExt;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+name+=+b%22hidden%22;%0A++++let+name_addr+=+SocketAddr::from_abstract_name(name)?;%0A++++let+socket+=+UnixListener::bind_addr(%26name_addr)?;%0A++++let+local_addr+=+socket.local_addr().expect(%22Couldn%27t+get+local+address%22);%0A++++assert_eq!(local_addr.as_abstract_name(),+Some(%26name%5B..%5D));%0A++++Ok(())%0A%7D&edition=2021)\n\n1.70.0 · [source](about:blank/src/std/os/unix/net/addr.rs.html#264-294)[§](#impl-SocketAddrExt-for-SocketAddr)\n\nAvailable on **Unix and (Android or Linux)** only.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Platform-specific extensions to `SocketAddr`.\"><title>SocketAddrExt in std::os::linux::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">SocketAddrExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">SocketAddrExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.as_abstract_name\">as_abstract_name</a></li><li><a href=\"#tymethod.from_abstract_name\">from_abstract_name</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::linux::net</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.SocketAddrExt.html\">SocketAddrExt</a></li><li><a href=\"trait.TcpStreamExt.html\">TcpStreamExt</a></li><li><a href=\"trait.UnixSocketExt.html\">UnixSocketExt</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">linux</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"trait\" href=\"#\">SocketAddrExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../../../src/std/os/net/linux_ext/addr.rs.html#8-64\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait SocketAddrExt: Sealed {\n    // Required methods\n    fn <a href=\"#tymethod.from_abstract_name\" class=\"fn\">from_abstract_name</a>&lt;N&gt;(name: N) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../unix/net/struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a>&gt;\n       <span class=\"where\">where N: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]&gt;</span>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.as_abstract_name\" class=\"fn\">as_abstract_name</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]&gt;;\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Linux and (Linux or Android)</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Platform-specific extensions to <a href=\"../../unix/net/struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\"><code>SocketAddr</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.from_abstract_name\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../../../src/std/os/net/linux_ext/addr.rs.html#41-43\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.from_abstract_name\" class=\"fn\">from_abstract_name</a>&lt;N&gt;(name: N) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../unix/net/struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a Unix socket address in the abstract namespace.</p>\n<p>The abstract namespace is a Linux-specific extension that allows Unix\nsockets to be bound without creating an entry in the filesystem.\nAbstract sockets are unaffected by filesystem layout or permissions,\nand no cleanup is necessary when the socket is closed.</p>\n<p>An abstract socket address name may contain any bytes, including zero.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the name is longer than <code>SUN_LEN - 1</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::{UnixListener, SocketAddr};\n<span class=\"kw\">use </span>std::os::linux::net::SocketAddrExt;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>addr = SocketAddr::from_abstract_name(<span class=\"string\">b\"hidden\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>listener = <span class=\"kw\">match </span>UnixListener::bind_addr(<span class=\"kw-2\">&amp;</span>addr) {\n        <span class=\"prelude-val\">Ok</span>(sock) =&gt; sock,\n        <span class=\"prelude-val\">Err</span>(err) =&gt; {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't bind: {err:?}\"</span>);\n            <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(err);\n        }\n    };\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::%7BUnixListener,+SocketAddr%7D;%0Ause+std::os::linux::net::SocketAddrExt;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+addr+=+SocketAddr::from_abstract_name(b%22hidden%22)?;%0A++++let+listener+=+match+UnixListener::bind_addr(%26addr)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(err)+=%3E+%7B%0A++++++++++++println!(%22Couldn't+bind:+%7Berr:?%7D%22);%0A++++++++++++return+Err(err);%0A++++++++%7D%0A++++%7D;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.as_abstract_name\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../../../src/std/os/net/linux_ext/addr.rs.html#63\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.as_abstract_name\" class=\"fn\">as_abstract_name</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the contents of this address if it is in the abstract namespace.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::{UnixListener, SocketAddr};\n<span class=\"kw\">use </span>std::os::linux::net::SocketAddrExt;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>name = <span class=\"string\">b\"hidden\"</span>;\n    <span class=\"kw\">let </span>name_addr = SocketAddr::from_abstract_name(name)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>socket = UnixListener::bind_addr(<span class=\"kw-2\">&amp;</span>name_addr)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>local_addr = socket.local_addr().expect(<span class=\"string\">\"Couldn't get local address\"</span>);\n    <span class=\"macro\">assert_eq!</span>(local_addr.as_abstract_name(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>name[..]));\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::%7BUnixListener,+SocketAddr%7D;%0Ause+std::os::linux::net::SocketAddrExt;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+name+=+b%22hidden%22;%0A++++let+name_addr+=+SocketAddr::from_abstract_name(name)?;%0A++++let+socket+=+UnixListener::bind_addr(%26name_addr)?;%0A++++let+local_addr+=+socket.local_addr().expect(%22Couldn't+get+local+address%22);%0A++++assert_eq!(local_addr.as_abstract_name(),+Some(%26name%5B..%5D));%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-SocketAddrExt-for-SocketAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/addr.rs.html#264-294\">source</a></span><a href=\"#impl-SocketAddrExt-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.SocketAddrExt.html\" title=\"trait std::os::linux::net::SocketAddrExt\">SocketAddrExt</a> for <a class=\"struct\" href=\"../../unix/net/struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix and (Android or Linux)</strong> only.</div></span></section></div><script src=\"../../../../trait.impl/std/os/net/linux_ext/addr/trait.SocketAddrExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:24.627Z"
}