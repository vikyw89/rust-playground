{
	"title": "with_exposed_provenance in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/fn.with_exposed_provenance.html",
	"markdown": "# with\\_exposed\\_provenance in std::ptr - Rust\n\n```\npub fn with_exposed_provenance<T>(addr: usize) -> *const T\n```\n\nüî¨This is a nightly-only experimental API. (`exposed_provenance`¬†[#95228](https://github.com/rust-lang/rust/issues/95228))\n\nExpand description\n\nConvert an address back to a pointer, picking up a previously ‚Äòexposed‚Äô provenance.\n\nThis is a more rigorously specified alternative to `addr as *const T`. The provenance of the returned pointer is that of _any_ pointer that was previously exposed by passing it to [`expose_provenance`](about:blank/primitive.pointer.html#method.expose_provenance \"method pointer::expose_provenance\"), or a `ptr as usize` cast. In addition, memory which is outside the control of the Rust abstract machine (MMIO registers, for example) is always considered to be exposed, so long as this memory is disjoint from memory that will be used by the abstract machine such as the stack, heap, and statics.\n\nIf there is no ‚Äòexposed‚Äô provenance that justifies the way this pointer will be used, the program has undefined behavior. In particular, the aliasing rules still apply: pointers and references that have been invalidated due to aliasing accesses cannot be used any more, even if they have been exposed!\n\nNote that there is no algorithm that decides which provenance will be used. You can think of this as ‚Äúguessing‚Äù the right provenance, and the guess will be ‚Äúmaximally in your favor‚Äù, in the sense that if there is any way to avoid undefined behavior (while upholding all aliasing requirements), then that is the guess that will be taken.\n\nOn platforms with multiple address spaces, it is your responsibility to ensure that the address makes sense in the address space that this pointer will be used with.\n\nUsing this function means that code is _not_ following [Strict Provenance](about:blank/index.html#strict-provenance \"mod std::ptr\") rules. ‚ÄúGuessing‚Äù a suitable provenance complicates specification and reasoning and may not be supported by tools that help you to stay conformant with the Rust memory model, so it is recommended to use [`with_addr`](about:blank/primitive.pointer.html#method.with_addr \"method pointer::with_addr\") wherever possible.\n\nOn most platforms this will produce a value with the same bytes as the address. Platforms which need to store additional information in a pointer may not support this operation, since it is generally not possible to actually _compute_ which provenance the returned pointer has to pick up.\n\nIt is unclear whether this function can be given a satisfying unambiguous specification. This API and its claimed semantics are part of [Exposed Provenance](about:blank/index.html#exposed-provenance \"mod std::ptr\").",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Convert an address back to a pointer, picking up a previously ‚Äòexposed‚Äô provenance.\"><title>with_exposed_provenance in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"fn\" href=\"#\">with_exposed_provenance</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#730-732\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn with_exposed_provenance&lt;T&gt;(addr: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a></code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>exposed_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Convert an address back to a pointer, picking up a previously ‚Äòexposed‚Äô provenance.</p>\n<p>This is a more rigorously specified alternative to <code>addr as *const T</code>. The provenance of the\nreturned pointer is that of <em>any</em> pointer that was previously exposed by passing it to\n<a href=\"../primitive.pointer.html#method.expose_provenance\" title=\"method pointer::expose_provenance\"><code>expose_provenance</code></a>, or a <code>ptr as usize</code> cast. In addition, memory which is\noutside the control of the Rust abstract machine (MMIO registers, for example) is always\nconsidered to be exposed, so long as this memory is disjoint from memory that will be used by\nthe abstract machine such as the stack, heap, and statics.</p>\n<p>If there is no ‚Äòexposed‚Äô provenance that justifies the way this pointer will be used,\nthe program has undefined behavior. In particular, the aliasing rules still apply: pointers\nand references that have been invalidated due to aliasing accesses cannot be used any more,\neven if they have been exposed!</p>\n<p>Note that there is no algorithm that decides which provenance will be used. You can think of this\nas ‚Äúguessing‚Äù the right provenance, and the guess will be ‚Äúmaximally in your favor‚Äù, in the sense\nthat if there is any way to avoid undefined behavior (while upholding all aliasing requirements),\nthen that is the guess that will be taken.</p>\n<p>On platforms with multiple address spaces, it is your responsibility to ensure that the\naddress makes sense in the address space that this pointer will be used with.</p>\n<p>Using this function means that code is <em>not</em> following <a href=\"index.html#strict-provenance\" title=\"mod std::ptr\">Strict\nProvenance</a> rules. ‚ÄúGuessing‚Äù a\nsuitable provenance complicates specification and reasoning and may not be supported by\ntools that help you to stay conformant with the Rust memory model, so it is recommended to\nuse <a href=\"../primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a> wherever possible.</p>\n<p>On most platforms this will produce a value with the same bytes as the address. Platforms\nwhich need to store additional information in a pointer may not support this operation,\nsince it is generally not possible to actually <em>compute</em> which provenance the returned\npointer has to pick up.</p>\n<p>It is unclear whether this function can be given a satisfying unambiguous specification. This\nAPI and its claimed semantics are part of <a href=\"index.html#exposed-provenance\" title=\"mod std::ptr\">Exposed Provenance</a>.</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:31.605Z"
}