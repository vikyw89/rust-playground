{
	"title": "Ipv4Addr in std::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/net/struct.Ipv4Addr.html",
	"markdown": "# Ipv4Addr in std::net - Rust\n\n## Struct [std](../index.html)::[net](index.html)::[Ipv4Addr](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#73) ·\n\n```\npub struct Ipv4Addr { /* private fields */ }\n```\n\nExpand description\n\nAn IPv4 address.\n\nIPv4 addresses are defined as 32-bit integers in [IETF RFC 791](https://tools.ietf.org/html/rfc791). They are usually represented as four octets.\n\nSee [`IpAddr`](enum.IpAddr.html \"enum std::net::IpAddr\") for a type encompassing both IPv4 and IPv6 addresses.\n\n## [§](#textual-representation)Textual representation\n\n`Ipv4Addr` provides a [`FromStr`](../str/trait.FromStr.html \"trait std::str::FromStr\") implementation. The four octets are in decimal notation, divided by `.` (this is called “dot-decimal notation”). Notably, octal numbers (which are indicated with a leading `0`) and hexadecimal numbers (which are indicated with a leading `0x`) are not allowed per [IETF RFC 6943](https://tools.ietf.org/html/rfc6943#section-3.1.1).\n\n## [§](#examples)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet localhost = Ipv4Addr::new(127, 0, 0, 1);\nassert_eq!(\"127.0.0.1\".parse(), Ok(localhost));\nassert_eq!(localhost.is_loopback(), true);\nassert!(\"012.004.002.000\".parse::<Ipv4Addr>().is_err()); // all octets are in octal\nassert!(\"0000000.0.0.0\".parse::<Ipv4Addr>().is_err()); // first octet is a zero in octal\nassert!(\"0xcb.0x0.0x71.0x00\".parse::<Ipv4Addr>().is_err()); // all octets are in hex\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+localhost+=+Ipv4Addr::new(127,+0,+0,+1);%0A++++assert_eq!(%22127.0.0.1%22.parse(),+Ok(localhost));%0A++++assert_eq!(localhost.is_loopback(),+true);%0A++++assert!(%22012.004.002.000%22.parse::%3CIpv4Addr%3E().is_err());+//+all+octets+are+in+octal%0A++++assert!(%220000000.0.0.0%22.parse::%3CIpv4Addr%3E().is_err());+//+first+octet+is+a+zero+in+octal%0A++++assert!(%220xcb.0x0.0x71.0x00%22.parse::%3CIpv4Addr%3E().is_err());+//+all+octets+are+in+hex%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#438)[§](#impl-Ipv4Addr)\n\n1.0.0 (const: 1.32.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#454)\n\nCreates a new IPv4 address from four eight-bit octets.\n\nThe result will represent the IP address `a`.`b`.`c`.`d`.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::new(127, 0, 0, 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::new(127,+0,+0,+1);%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#468)\n\nThe size of an IPv4 address in bits.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::BITS, 32);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::BITS,+32);%0A%7D&edition=2021)\n\n1.80.0 (const: 1.80.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#499)\n\nConverts an IPv4 address into a `u32` representation using native byte order.\n\nAlthough IPv4 addresses are big-endian, the `u32` value will use the target platform’s native byte order. That is, the `u32` value is an integer representation of the IPv4 address and not an integer interpretation of the IPv4 address’s big-endian bitstring. This means that the `u32` value masked with `0xffffff00` will set the last octet in the address to 0, regardless of the target platform’s endianness.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::new(0x12, 0x34, 0x56, 0x78);\nassert_eq!(0x12345678, addr.to_bits());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::new(0x12,+0x34,+0x56,+0x78);%0A++++assert_eq!(0x12345678,+addr.to_bits());%0A%7D&edition=2021)\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::new(0x12, 0x34, 0x56, 0x78);\nlet addr_bits = addr.to_bits() & 0xffffff00;\nassert_eq!(Ipv4Addr::new(0x12, 0x34, 0x56, 0x00), Ipv4Addr::from_bits(addr_bits));\n\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::new(0x12,+0x34,+0x56,+0x78);%0A++++let+addr_bits+=+addr.to_bits()+%26+0xffffff00;%0A++++assert_eq!(Ipv4Addr::new(0x12,+0x34,+0x56,+0x00),+Ipv4Addr::from_bits(addr_bits));%0A%7D&edition=2021)\n\n1.80.0 (const: 1.80.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#519)\n\nConverts a native byte order `u32` into an IPv4 address.\n\nSee [`Ipv4Addr::to_bits`](about:blank/struct.Ipv4Addr.html#method.to_bits \"method std::net::Ipv4Addr::to_bits\") for an explanation on endianness.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::from(0x12345678);\nassert_eq!(Ipv4Addr::new(0x12, 0x34, 0x56, 0x78), addr);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::from(0x12345678);%0A++++assert_eq!(Ipv4Addr::new(0x12,+0x34,+0x56,+0x78),+addr);%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#534)\n\nAn IPv4 address with the address pointing to localhost: `127.0.0.1`\n\n##### [§](#examples-5)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::LOCALHOST;\nassert_eq!(addr, Ipv4Addr::new(127, 0, 0, 1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::LOCALHOST;%0A++++assert_eq!(addr,+Ipv4Addr::new(127,+0,+0,+1));%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#550)\n\nAn IPv4 address representing an unspecified address: `0.0.0.0`\n\nThis corresponds to the constant `INADDR_ANY` in other languages.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::UNSPECIFIED;\nassert_eq!(addr, Ipv4Addr::new(0, 0, 0, 0));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::UNSPECIFIED;%0A++++assert_eq!(addr,+Ipv4Addr::new(0,+0,+0,+0));%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#563)\n\nAn IPv4 address representing the broadcast address: `255.255.255.255`\n\n##### [§](#examples-7)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::BROADCAST;\nassert_eq!(addr, Ipv4Addr::new(255, 255, 255, 255));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::BROADCAST;%0A++++assert_eq!(addr,+Ipv4Addr::new(255,+255,+255,+255));%0A%7D&edition=2021)\n\n1.0.0 (const: 1.50.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#579)\n\nReturns the four eight-bit integers that make up this address.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::new(127, 0, 0, 1);\nassert_eq!(addr.octets(), [127, 0, 0, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::new(127,+0,+0,+1);%0A++++assert_eq!(addr.octets(),+%5B127,+0,+0,+1%5D);%0A%7D&edition=2021)\n\n1.12.0 (const: 1.32.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#602)\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") for the special ‘unspecified’ address (`0.0.0.0`).\n\nThis property is defined in _UNIX Network Programming, Second Edition_, W. Richard Stevens, p. 891; see also [ip7](https://man7.org/linux/man-pages/man7/ip.7.html).\n\n##### [§](#examples-9)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(0, 0, 0, 0).is_unspecified(), true);\nassert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_unspecified(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(0,+0,+0,+0).is_unspecified(),+true);%0A++++assert_eq!(Ipv4Addr::new(45,+22,+13,+197).is_unspecified(),+false);%0A%7D&edition=2021)\n\n1.7.0 (const: 1.50.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#624)\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if this is a loopback address (`127.0.0.0/8`).\n\nThis property is defined by [IETF RFC 1122](https://tools.ietf.org/html/rfc1122).\n\n##### [§](#examples-10)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(127, 0, 0, 1).is_loopback(), true);\nassert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_loopback(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(127,+0,+0,+1).is_loopback(),+true);%0A++++assert_eq!(Ipv4Addr::new(45,+22,+13,+197).is_loopback(),+false);%0A%7D&edition=2021)\n\n1.7.0 (const: 1.50.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#655)\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if this is a private address.\n\nThe private address ranges are defined in [IETF RFC 1918](https://tools.ietf.org/html/rfc1918) and include:\n\n-   `10.0.0.0/8`\n-   `172.16.0.0/12`\n-   `192.168.0.0/16`\n\n##### [§](#examples-11)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(10, 0, 0, 1).is_private(), true);\nassert_eq!(Ipv4Addr::new(10, 10, 10, 10).is_private(), true);\nassert_eq!(Ipv4Addr::new(172, 16, 10, 10).is_private(), true);\nassert_eq!(Ipv4Addr::new(172, 29, 45, 14).is_private(), true);\nassert_eq!(Ipv4Addr::new(172, 32, 0, 2).is_private(), false);\nassert_eq!(Ipv4Addr::new(192, 168, 0, 2).is_private(), true);\nassert_eq!(Ipv4Addr::new(192, 169, 0, 2).is_private(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(10,+0,+0,+1).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(10,+10,+10,+10).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(172,+16,+10,+10).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(172,+29,+45,+14).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(172,+32,+0,+2).is_private(),+false);%0A++++assert_eq!(Ipv4Addr::new(192,+168,+0,+2).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(192,+169,+0,+2).is_private(),+false);%0A%7D&edition=2021)\n\n1.7.0 (const: 1.50.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#683)\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if the address is link-local (`169.254.0.0/16`).\n\nThis property is defined by [IETF RFC 3927](https://tools.ietf.org/html/rfc3927).\n\n##### [§](#examples-12)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(169, 254, 0, 0).is_link_local(), true);\nassert_eq!(Ipv4Addr::new(169, 254, 10, 65).is_link_local(), true);\nassert_eq!(Ipv4Addr::new(16, 89, 10, 65).is_link_local(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(169,+254,+0,+0).is_link_local(),+true);%0A++++assert_eq!(Ipv4Addr::new(169,+254,+10,+65).is_link_local(),+true);%0A++++assert_eq!(Ipv4Addr::new(16,+89,+10,+65).is_link_local(),+false);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#763)\n\n🔬This is a nightly-only experimental API. (`ip` [#27709](https://github.com/rust-lang/rust/issues/27709))\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if the address appears to be globally reachable as specified by the [IANA IPv4 Special-Purpose Address Registry](https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml). Whether or not an address is practically reachable will depend on your network configuration.\n\nMost IPv4 addresses are globally reachable; unless they are specifically defined as _not_ globally reachable.\n\nNon-exhaustive list of notable addresses that are not globally reachable:\n\n-   The [unspecified address](about:blank/struct.Ipv4Addr.html#associatedconstant.UNSPECIFIED \"associated constant std::net::Ipv4Addr::UNSPECIFIED\") ([`is_unspecified`](about:blank/struct.Ipv4Addr.html#method.is_unspecified \"method std::net::Ipv4Addr::is_unspecified\"))\n-   Addresses reserved for private use ([`is_private`](about:blank/struct.Ipv4Addr.html#method.is_private \"method std::net::Ipv4Addr::is_private\"))\n-   Addresses in the shared address space ([`is_shared`](about:blank/struct.Ipv4Addr.html#method.is_shared \"method std::net::Ipv4Addr::is_shared\"))\n-   Loopback addresses ([`is_loopback`](about:blank/struct.Ipv4Addr.html#method.is_loopback \"method std::net::Ipv4Addr::is_loopback\"))\n-   Link-local addresses ([`is_link_local`](about:blank/struct.Ipv4Addr.html#method.is_link_local \"method std::net::Ipv4Addr::is_link_local\"))\n-   Addresses reserved for documentation ([`is_documentation`](about:blank/struct.Ipv4Addr.html#method.is_documentation \"method std::net::Ipv4Addr::is_documentation\"))\n-   Addresses reserved for benchmarking ([`is_benchmarking`](about:blank/struct.Ipv4Addr.html#method.is_benchmarking \"method std::net::Ipv4Addr::is_benchmarking\"))\n-   Reserved addresses ([`is_reserved`](about:blank/struct.Ipv4Addr.html#method.is_reserved \"method std::net::Ipv4Addr::is_reserved\"))\n-   The [broadcast address](about:blank/struct.Ipv4Addr.html#associatedconstant.BROADCAST \"associated constant std::net::Ipv4Addr::BROADCAST\") ([`is_broadcast`](about:blank/struct.Ipv4Addr.html#method.is_broadcast \"method std::net::Ipv4Addr::is_broadcast\"))\n\nFor the complete overview of which addresses are globally reachable, see the table at the [IANA IPv4 Special-Purpose Address Registry](https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml).\n\n##### [§](#examples-13)Examples\n\n```\n#![feature(ip)]\n\nuse std::net::Ipv4Addr;\n\n// Most IPv4 addresses are globally reachable:\nassert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n\n// However some addresses have been assigned a special meaning\n// that makes them not globally reachable. Some examples are:\n\n// The unspecified address (`0.0.0.0`)\nassert_eq!(Ipv4Addr::UNSPECIFIED.is_global(), false);\n\n// Addresses reserved for private use (`10.0.0.0/8`, `172.16.0.0/12`, 192.168.0.0/16)\nassert_eq!(Ipv4Addr::new(10, 254, 0, 0).is_global(), false);\nassert_eq!(Ipv4Addr::new(192, 168, 10, 65).is_global(), false);\nassert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_global(), false);\n\n// Addresses in the shared address space (`100.64.0.0/10`)\nassert_eq!(Ipv4Addr::new(100, 100, 0, 0).is_global(), false);\n\n// The loopback addresses (`127.0.0.0/8`)\nassert_eq!(Ipv4Addr::LOCALHOST.is_global(), false);\n\n// Link-local addresses (`169.254.0.0/16`)\nassert_eq!(Ipv4Addr::new(169, 254, 45, 1).is_global(), false);\n\n// Addresses reserved for documentation (`192.0.2.0/24`, `198.51.100.0/24`, `203.0.113.0/24`)\nassert_eq!(Ipv4Addr::new(192, 0, 2, 255).is_global(), false);\nassert_eq!(Ipv4Addr::new(198, 51, 100, 65).is_global(), false);\nassert_eq!(Ipv4Addr::new(203, 0, 113, 6).is_global(), false);\n\n// Addresses reserved for benchmarking (`198.18.0.0/15`)\nassert_eq!(Ipv4Addr::new(198, 18, 0, 0).is_global(), false);\n\n// Reserved addresses (`240.0.0.0/4`)\nassert_eq!(Ipv4Addr::new(250, 10, 20, 30).is_global(), false);\n\n// The broadcast address (`255.255.255.255`)\nassert_eq!(Ipv4Addr::BROADCAST.is_global(), false);\n\n// For a complete overview see the IANA IPv4 Special-Purpose Address Registry.\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ip)%5D%0A%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++//+Most+IPv4+addresses+are+globally+reachable:%0A++++assert_eq!(Ipv4Addr::new(80,+9,+12,+3).is_global(),+true);%0A++++%0A++++//+However+some+addresses+have+been+assigned+a+special+meaning%0A++++//+that+makes+them+not+globally+reachable.+Some+examples+are:%0A++++%0A++++//+The+unspecified+address+(%600.0.0.0%60)%0A++++assert_eq!(Ipv4Addr::UNSPECIFIED.is_global(),+false);%0A++++%0A++++//+Addresses+reserved+for+private+use+(%6010.0.0.0/8%60,+%60172.16.0.0/12%60,+192.168.0.0/16)%0A++++assert_eq!(Ipv4Addr::new(10,+254,+0,+0).is_global(),+false);%0A++++assert_eq!(Ipv4Addr::new(192,+168,+10,+65).is_global(),+false);%0A++++assert_eq!(Ipv4Addr::new(172,+16,+10,+65).is_global(),+false);%0A++++%0A++++//+Addresses+in+the+shared+address+space+(%60100.64.0.0/10%60)%0A++++assert_eq!(Ipv4Addr::new(100,+100,+0,+0).is_global(),+false);%0A++++%0A++++//+The+loopback+addresses+(%60127.0.0.0/8%60)%0A++++assert_eq!(Ipv4Addr::LOCALHOST.is_global(),+false);%0A++++%0A++++//+Link-local+addresses+(%60169.254.0.0/16%60)%0A++++assert_eq!(Ipv4Addr::new(169,+254,+45,+1).is_global(),+false);%0A++++%0A++++//+Addresses+reserved+for+documentation+(%60192.0.2.0/24%60,+%60198.51.100.0/24%60,+%60203.0.113.0/24%60)%0A++++assert_eq!(Ipv4Addr::new(192,+0,+2,+255).is_global(),+false);%0A++++assert_eq!(Ipv4Addr::new(198,+51,+100,+65).is_global(),+false);%0A++++assert_eq!(Ipv4Addr::new(203,+0,+113,+6).is_global(),+false);%0A++++%0A++++//+Addresses+reserved+for+benchmarking+(%60198.18.0.0/15%60)%0A++++assert_eq!(Ipv4Addr::new(198,+18,+0,+0).is_global(),+false);%0A++++%0A++++//+Reserved+addresses+(%60240.0.0.0/4%60)%0A++++assert_eq!(Ipv4Addr::new(250,+10,+20,+30).is_global(),+false);%0A++++%0A++++//+The+broadcast+address+(%60255.255.255.255%60)%0A++++assert_eq!(Ipv4Addr::BROADCAST.is_global(),+false);%0A++++%0A++++//+For+a+complete+overview+see+the+IANA+IPv4+Special-Purpose+Address+Registry.%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#800)\n\n🔬This is a nightly-only experimental API. (`ip` [#27709](https://github.com/rust-lang/rust/issues/27709))\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if this address is part of the Shared Address Space defined in [IETF RFC 6598](https://tools.ietf.org/html/rfc6598) (`100.64.0.0/10`).\n\n##### [§](#examples-14)Examples\n\n```\n#![feature(ip)]\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(100, 64, 0, 0).is_shared(), true);\nassert_eq!(Ipv4Addr::new(100, 127, 255, 255).is_shared(), true);\nassert_eq!(Ipv4Addr::new(100, 128, 0, 0).is_shared(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ip)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(100,+64,+0,+0).is_shared(),+true);%0A++++assert_eq!(Ipv4Addr::new(100,+127,+255,+255).is_shared(),+true);%0A++++assert_eq!(Ipv4Addr::new(100,+128,+0,+0).is_shared(),+false);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#826)\n\n🔬This is a nightly-only experimental API. (`ip` [#27709](https://github.com/rust-lang/rust/issues/27709))\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if this address part of the `198.18.0.0/15` range, which is reserved for network devices benchmarking. This range is defined in [IETF RFC 2544](https://tools.ietf.org/html/rfc2544) as `192.18.0.0` through `198.19.255.255` but [errata 423](https://www.rfc-editor.org/errata/eid423) corrects it to `198.18.0.0/15`.\n\n##### [§](#examples-15)Examples\n\n```\n#![feature(ip)]\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(198, 17, 255, 255).is_benchmarking(), false);\nassert_eq!(Ipv4Addr::new(198, 18, 0, 0).is_benchmarking(), true);\nassert_eq!(Ipv4Addr::new(198, 19, 255, 255).is_benchmarking(), true);\nassert_eq!(Ipv4Addr::new(198, 20, 0, 0).is_benchmarking(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ip)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(198,+17,+255,+255).is_benchmarking(),+false);%0A++++assert_eq!(Ipv4Addr::new(198,+18,+0,+0).is_benchmarking(),+true);%0A++++assert_eq!(Ipv4Addr::new(198,+19,+255,+255).is_benchmarking(),+true);%0A++++assert_eq!(Ipv4Addr::new(198,+20,+0,+0).is_benchmarking(),+false);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#861)\n\n🔬This is a nightly-only experimental API. (`ip` [#27709](https://github.com/rust-lang/rust/issues/27709))\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if this address is reserved by IANA for future use. [IETF RFC 1112](https://tools.ietf.org/html/rfc1112) defines the block of reserved addresses as `240.0.0.0/4`. This range normally includes the broadcast address `255.255.255.255`, but this implementation explicitly excludes it, since it is obviously not reserved for future use.\n\n##### [§](#warning)Warning\n\nAs IANA assigns new addresses, this method will be updated. This may result in non-reserved addresses being treated as reserved in code that relies on an outdated version of this method.\n\n##### [§](#examples-16)Examples\n\n```\n#![feature(ip)]\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(240, 0, 0, 0).is_reserved(), true);\nassert_eq!(Ipv4Addr::new(255, 255, 255, 254).is_reserved(), true);\n\nassert_eq!(Ipv4Addr::new(239, 255, 255, 255).is_reserved(), false);\n// The broadcast address is not considered as reserved for future use by this implementation\nassert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_reserved(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ip)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(240,+0,+0,+0).is_reserved(),+true);%0A++++assert_eq!(Ipv4Addr::new(255,+255,+255,+254).is_reserved(),+true);%0A++++%0A++++assert_eq!(Ipv4Addr::new(239,+255,+255,+255).is_reserved(),+false);%0A++++//+The+broadcast+address+is+not+considered+as+reserved+for+future+use+by+this+implementation%0A++++assert_eq!(Ipv4Addr::new(255,+255,+255,+255).is_reserved(),+false);%0A%7D&version=nightly&edition=2021)\n\n1.7.0 (const: 1.50.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#885)\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if this is a multicast address (`224.0.0.0/4`).\n\nMulticast addresses have a most significant octet between `224` and `239`, and is defined by [IETF RFC 5771](https://tools.ietf.org/html/rfc5771).\n\n##### [§](#examples-17)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(224, 254, 0, 0).is_multicast(), true);\nassert_eq!(Ipv4Addr::new(236, 168, 10, 65).is_multicast(), true);\nassert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_multicast(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(224,+254,+0,+0).is_multicast(),+true);%0A++++assert_eq!(Ipv4Addr::new(236,+168,+10,+65).is_multicast(),+true);%0A++++assert_eq!(Ipv4Addr::new(172,+16,+10,+65).is_multicast(),+false);%0A%7D&edition=2021)\n\n1.7.0 (const: 1.50.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#907)\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if this is a broadcast address (`255.255.255.255`).\n\nA broadcast address has all octets set to `255` as defined in [IETF RFC 919](https://tools.ietf.org/html/rfc919).\n\n##### [§](#examples-18)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_broadcast(), true);\nassert_eq!(Ipv4Addr::new(236, 168, 10, 65).is_broadcast(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(255,+255,+255,+255).is_broadcast(),+true);%0A++++assert_eq!(Ipv4Addr::new(236,+168,+10,+65).is_broadcast(),+false);%0A%7D&edition=2021)\n\n1.7.0 (const: 1.50.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#935)\n\nReturns [`true`](../primitive.bool.html \"primitive bool\") if this address is in a range designated for documentation.\n\nThis is defined in [IETF RFC 5737](https://tools.ietf.org/html/rfc5737):\n\n-   `192.0.2.0/24` (TEST-NET-1)\n-   `198.51.100.0/24` (TEST-NET-2)\n-   `203.0.113.0/24` (TEST-NET-3)\n\n##### [§](#examples-19)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nassert_eq!(Ipv4Addr::new(192, 0, 2, 255).is_documentation(), true);\nassert_eq!(Ipv4Addr::new(198, 51, 100, 65).is_documentation(), true);\nassert_eq!(Ipv4Addr::new(203, 0, 113, 6).is_documentation(), true);\nassert_eq!(Ipv4Addr::new(193, 34, 17, 19).is_documentation(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(192,+0,+2,+255).is_documentation(),+true);%0A++++assert_eq!(Ipv4Addr::new(198,+51,+100,+65).is_documentation(),+true);%0A++++assert_eq!(Ipv4Addr::new(203,+0,+113,+6).is_documentation(),+true);%0A++++assert_eq!(Ipv4Addr::new(193,+34,+17,+19).is_documentation(),+false);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.50.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#964)\n\nConverts this address to an [IPv4-compatible](about:blank/struct.Ipv6Addr.html#ipv4-compatible-ipv6-addresses \"struct std::net::Ipv6Addr\") [`IPv6` address](struct.Ipv6Addr.html \"struct std::net::Ipv6Addr\").\n\n`a.b.c.d` becomes `::a.b.c.d`\n\nNote that IPv4-compatible addresses have been officially deprecated. If you don’t explicitly need an IPv4-compatible address for legacy reasons, consider using `to_ipv6_mapped` instead.\n\n##### [§](#examples-20)Examples\n\n```\nuse std::net::{Ipv4Addr, Ipv6Addr};\n\nassert_eq!(\n    Ipv4Addr::new(192, 0, 2, 255).to_ipv6_compatible(),\n    Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0xc000, 0x2ff)\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpv4Addr,+Ipv6Addr%7D;%0A++++%0A++++assert_eq!(%0A++++++++Ipv4Addr::new(192,+0,+2,+255).to_ipv6_compatible(),%0A++++++++Ipv6Addr::new(0,+0,+0,+0,+0,+0,+0xc000,+0x2ff)%0A++++);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.50.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#989)\n\nConverts this address to an [IPv4-mapped](about:blank/struct.Ipv6Addr.html#ipv4-mapped-ipv6-addresses \"struct std::net::Ipv6Addr\") [`IPv6` address](struct.Ipv6Addr.html \"struct std::net::Ipv6Addr\").\n\n`a.b.c.d` becomes `::ffff:a.b.c.d`\n\n##### [§](#examples-21)Examples\n\n```\nuse std::net::{Ipv4Addr, Ipv6Addr};\n\nassert_eq!(Ipv4Addr::new(192, 0, 2, 255).to_ipv6_mapped(),\n           Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc000, 0x2ff));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpv4Addr,+Ipv6Addr%7D;%0A++++%0A++++assert_eq!(Ipv4Addr::new(192,+0,+2,+255).to_ipv6_mapped(),%0A+++++++++++++++Ipv6Addr::new(0,+0,+0,+0,+0,+0xffff,+0xc000,+0x2ff));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/parser.rs.html#331)[§](#impl-Ipv4Addr-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/parser.rs.html#344)\n\n🔬This is a nightly-only experimental API. (`addr_parse_ascii` [#101035](https://github.com/rust-lang/rust/issues/101035))\n\nParse an IPv4 address from a slice of bytes.\n\n```\n#![feature(addr_parse_ascii)]\n\nuse std::net::Ipv4Addr;\n\nlet localhost = Ipv4Addr::new(127, 0, 0, 1);\n\nassert_eq!(Ipv4Addr::parse_ascii(b\"127.0.0.1\"), Ok(localhost));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(addr_parse_ascii)%5D%0A%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+localhost+=+Ipv4Addr::new(127,+0,+0,+1);%0A++++%0A++++assert_eq!(Ipv4Addr::parse_ascii(b%22127.0.0.1%22),+Ok(localhost));%0A%7D&version=nightly&edition=2021)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitAnd%3C%26Ipv4Addr%3E-for-%26Ipv4Addr)\n\n[§](#associatedtype.Output-5)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#method.bitand-1)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitAnd%3C%26Ipv4Addr%3E-for-Ipv4Addr)\n\n[§](#associatedtype.Output-6)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#method.bitand-2)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitAnd%3CIpv4Addr%3E-for-%26Ipv4Addr)\n\n[§](#associatedtype.Output-7)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#method.bitand-3)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitAnd-for-Ipv4Addr)\n\n[§](#associatedtype.Output-4)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#method.bitand)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitAndAssign%3C%26Ipv4Addr%3E-for-Ipv4Addr)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitAndAssign-for-Ipv4Addr)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitOr%3C%26Ipv4Addr%3E-for-%26Ipv4Addr)\n\n[§](#associatedtype.Output-2)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#method.bitor-2)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitOr%3C%26Ipv4Addr%3E-for-Ipv4Addr)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#method.bitor-1)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitOr%3CIpv4Addr%3E-for-%26Ipv4Addr)\n\n[§](#associatedtype.Output-3)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#method.bitor-3)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitOr-for-Ipv4Addr)\n\n[§](#associatedtype.Output)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#method.bitor)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitOrAssign%3C%26Ipv4Addr%3E-for-Ipv4Addr)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326)[§](#impl-BitOrAssign-for-Ipv4Addr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71)[§](#impl-Clone-for-Ipv4Addr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1078)[§](#impl-Debug-for-Ipv4Addr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1057)[§](#impl-Display-for-Ipv4Addr)\n\n1.9.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1163)[§](#impl-From%3C%5Bu8;+4%5D%3E-for-Ipv4Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1175)[§](#method.from-3)\n\nCreates an `Ipv4Addr` from a four element byte array.\n\n##### [§](#examples-23)Examples\n\n```\nuse std::net::Ipv4Addr;\n\nlet addr = Ipv4Addr::from([13u8, 12u8, 11u8, 10u8]);\nassert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::from(%5B13u8,+12u8,+11u8,+10u8%5D);%0A++++assert_eq!(Ipv4Addr::new(13,+12,+11,+10),+addr);%0A%7D&edition=2021)\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1013)[§](#impl-From%3CIpv4Addr%3E-for-IpAddr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1029)[§](#method.from-2)\n\nCopies this address to a new `IpAddr::V4`.\n\n##### [§](#examples-22)Examples\n\n```\nuse std::net::{IpAddr, Ipv4Addr};\n\nlet addr = Ipv4Addr::new(127, 0, 0, 1);\n\nassert_eq!(\n    IpAddr::V4(addr),\n    IpAddr::from(addr)\n)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv4Addr%7D;%0A++++%0A++++let+addr+=+Ipv4Addr::new(127,+0,+0,+1);%0A++++%0A++++assert_eq!(%0A++++++++IpAddr::V4(addr),%0A++++++++IpAddr::from(addr)%0A++++)%0A%7D&edition=2021)\n\n1.1.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1145)[§](#impl-From%3CIpv4Addr%3E-for-u32)\n\n1.1.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1154)[§](#impl-From%3Cu32%3E-for-Ipv4Addr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/parser.rs.html#355)[§](#impl-FromStr-for-Ipv4Addr)\n\n[§](#associatedtype.Err)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/parser.rs.html#357)[§](#method.from_str)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71)[§](#impl-Hash-for-Ipv4Addr)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2213)[§](#impl-Not-for-%26Ipv4Addr)\n\n[§](#associatedtype.Output-9)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2217)[§](#method.not-1)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n1.75.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2200)[§](#impl-Not-for-Ipv4Addr)\n\n[§](#associatedtype.Output-8)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2204)[§](#method.not)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1137)[§](#impl-Ord-for-Ipv4Addr)\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1096)[§](#impl-PartialEq%3CIpAddr%3E-for-Ipv4Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1098)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1085)[§](#impl-PartialEq%3CIpv4Addr%3E-for-IpAddr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1087)[§](#method.eq-1)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-1)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71)[§](#impl-PartialEq-for-Ipv4Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71)[§](#method.eq-2)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-2)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1126)[§](#impl-PartialOrd%3CIpAddr%3E-for-Ipv4Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1128)[§](#method.partial_cmp-1)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-1)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-1)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-1)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-1)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1115)[§](#impl-PartialOrd%3CIpv4Addr%3E-for-IpAddr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1117)[§](#method.partial_cmp-2)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-2)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-2)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-2)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-2)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1107)[§](#impl-PartialOrd-for-Ipv4Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1109)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#556)[§](#impl-Step-for-Ipv4Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#558)[§](#method.steps_between)\n\n🔬This is a nightly-only experimental API. (`step_trait` [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the number of _successor_ steps required to get from `start` to `end`. [Read more](about:blank/iter/trait.Step.html#tymethod.steps_between)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#563)[§](#method.forward_checked)\n\n🔬This is a nightly-only experimental API. (`step_trait` [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#tymethod.forward_checked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#568)[§](#method.backward_checked)\n\n🔬This is a nightly-only experimental API. (`step_trait` [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#tymethod.backward_checked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#573)[§](#method.forward_unchecked)\n\n🔬This is a nightly-only experimental API. (`step_trait` [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.forward_unchecked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#580)[§](#method.backward_unchecked)\n\n🔬This is a nightly-only experimental API. (`step_trait` [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.backward_unchecked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#85)[§](#method.forward)\n\n🔬This is a nightly-only experimental API. (`step_trait` [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.forward)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#155)[§](#method.backward)\n\n🔬This is a nightly-only experimental API. (`step_trait` [#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.backward)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71)[§](#impl-Copy-for-Ipv4Addr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71)[§](#impl-Eq-for-Ipv4Addr)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71)[§](#impl-StructuralPartialEq-for-Ipv4Addr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#18)[§](#impl-TrustedStep-for-Ipv4Addr)\n\n[§](#impl-Freeze-for-Ipv4Addr)\n\n[§](#impl-RefUnwindSafe-for-Ipv4Addr)\n\n[§](#impl-Send-for-Ipv4Addr)\n\n[§](#impl-Sync-for-Ipv4Addr)\n\n[§](#impl-Unpin-for-Ipv4Addr)\n\n[§](#impl-UnwindSafe-for-Ipv4Addr)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An IPv4 address.\"><title>Ipv4Addr in std::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Ipv4Addr</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Ipv4Addr</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Associated Constants</a></h3><ul class=\"block associatedconstant\"><li><a href=\"#associatedconstant.BITS\">BITS</a></li><li><a href=\"#associatedconstant.BROADCAST\">BROADCAST</a></li><li><a href=\"#associatedconstant.LOCALHOST\">LOCALHOST</a></li><li><a href=\"#associatedconstant.UNSPECIFIED\">UNSPECIFIED</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.from_bits\">from_bits</a></li><li><a href=\"#method.is_benchmarking\">is_benchmarking</a></li><li><a href=\"#method.is_broadcast\">is_broadcast</a></li><li><a href=\"#method.is_documentation\">is_documentation</a></li><li><a href=\"#method.is_global\">is_global</a></li><li><a href=\"#method.is_link_local\">is_link_local</a></li><li><a href=\"#method.is_loopback\">is_loopback</a></li><li><a href=\"#method.is_multicast\">is_multicast</a></li><li><a href=\"#method.is_private\">is_private</a></li><li><a href=\"#method.is_reserved\">is_reserved</a></li><li><a href=\"#method.is_shared\">is_shared</a></li><li><a href=\"#method.is_unspecified\">is_unspecified</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.octets\">octets</a></li><li><a href=\"#method.parse_ascii\">parse_ascii</a></li><li><a href=\"#method.to_bits\">to_bits</a></li><li><a href=\"#method.to_ipv6_compatible\">to_ipv6_compatible</a></li><li><a href=\"#method.to_ipv6_mapped\">to_ipv6_mapped</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-BitAnd-for-Ipv4Addr\">BitAnd</a></li><li><a href=\"#impl-BitAnd%3C%26Ipv4Addr%3E-for-%26Ipv4Addr\">BitAnd&lt;&amp;Ipv4Addr&gt;</a></li><li><a href=\"#impl-BitAnd%3C%26Ipv4Addr%3E-for-Ipv4Addr\">BitAnd&lt;&amp;Ipv4Addr&gt;</a></li><li><a href=\"#impl-BitAnd%3CIpv4Addr%3E-for-%26Ipv4Addr\">BitAnd&lt;Ipv4Addr&gt;</a></li><li><a href=\"#impl-BitAndAssign-for-Ipv4Addr\">BitAndAssign</a></li><li><a href=\"#impl-BitAndAssign%3C%26Ipv4Addr%3E-for-Ipv4Addr\">BitAndAssign&lt;&amp;Ipv4Addr&gt;</a></li><li><a href=\"#impl-BitOr-for-Ipv4Addr\">BitOr</a></li><li><a href=\"#impl-BitOr%3C%26Ipv4Addr%3E-for-%26Ipv4Addr\">BitOr&lt;&amp;Ipv4Addr&gt;</a></li><li><a href=\"#impl-BitOr%3C%26Ipv4Addr%3E-for-Ipv4Addr\">BitOr&lt;&amp;Ipv4Addr&gt;</a></li><li><a href=\"#impl-BitOr%3CIpv4Addr%3E-for-%26Ipv4Addr\">BitOr&lt;Ipv4Addr&gt;</a></li><li><a href=\"#impl-BitOrAssign-for-Ipv4Addr\">BitOrAssign</a></li><li><a href=\"#impl-BitOrAssign%3C%26Ipv4Addr%3E-for-Ipv4Addr\">BitOrAssign&lt;&amp;Ipv4Addr&gt;</a></li><li><a href=\"#impl-Clone-for-Ipv4Addr\">Clone</a></li><li><a href=\"#impl-Copy-for-Ipv4Addr\">Copy</a></li><li><a href=\"#impl-Debug-for-Ipv4Addr\">Debug</a></li><li><a href=\"#impl-Display-for-Ipv4Addr\">Display</a></li><li><a href=\"#impl-Eq-for-Ipv4Addr\">Eq</a></li><li><a href=\"#impl-From%3CIpv4Addr%3E-for-IpAddr\">From&lt;Ipv4Addr&gt;</a></li><li><a href=\"#impl-From%3CIpv4Addr%3E-for-u32\">From&lt;Ipv4Addr&gt;</a></li><li><a href=\"#impl-From%3C%5Bu8;+4%5D%3E-for-Ipv4Addr\">From&lt;[u8; 4]&gt;</a></li><li><a href=\"#impl-From%3Cu32%3E-for-Ipv4Addr\">From&lt;u32&gt;</a></li><li><a href=\"#impl-FromStr-for-Ipv4Addr\">FromStr</a></li><li><a href=\"#impl-Hash-for-Ipv4Addr\">Hash</a></li><li><a href=\"#impl-Not-for-%26Ipv4Addr\">Not</a></li><li><a href=\"#impl-Not-for-Ipv4Addr\">Not</a></li><li><a href=\"#impl-Ord-for-Ipv4Addr\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Ipv4Addr\">PartialEq</a></li><li><a href=\"#impl-PartialEq%3CIpAddr%3E-for-Ipv4Addr\">PartialEq&lt;IpAddr&gt;</a></li><li><a href=\"#impl-PartialEq%3CIpv4Addr%3E-for-IpAddr\">PartialEq&lt;Ipv4Addr&gt;</a></li><li><a href=\"#impl-PartialOrd-for-Ipv4Addr\">PartialOrd</a></li><li><a href=\"#impl-PartialOrd%3CIpAddr%3E-for-Ipv4Addr\">PartialOrd&lt;IpAddr&gt;</a></li><li><a href=\"#impl-PartialOrd%3CIpv4Addr%3E-for-IpAddr\">PartialOrd&lt;Ipv4Addr&gt;</a></li><li><a href=\"#impl-Step-for-Ipv4Addr\">Step</a></li><li><a href=\"#impl-StructuralPartialEq-for-Ipv4Addr\">StructuralPartialEq</a></li><li><a href=\"#impl-TrustedStep-for-Ipv4Addr\">TrustedStep</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Ipv4Addr\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Ipv4Addr\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Ipv4Addr\">Send</a></li><li><a href=\"#impl-Sync-for-Ipv4Addr\">Sync</a></li><li><a href=\"#impl-Unpin-for-Ipv4Addr\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Ipv4Addr\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::net</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AddrParseError.html\">AddrParseError</a></li><li><a href=\"struct.Incoming.html\">Incoming</a></li><li><a href=\"struct.IntoIncoming.html\">IntoIncoming</a></li><li><a href=\"struct.Ipv4Addr.html\">Ipv4Addr</a></li><li><a href=\"struct.Ipv6Addr.html\">Ipv6Addr</a></li><li><a href=\"struct.SocketAddrV4.html\">SocketAddrV4</a></li><li><a href=\"struct.SocketAddrV6.html\">SocketAddrV6</a></li><li><a href=\"struct.TcpListener.html\">TcpListener</a></li><li><a href=\"struct.TcpStream.html\">TcpStream</a></li><li><a href=\"struct.UdpSocket.html\">UdpSocket</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.IpAddr.html\">IpAddr</a></li><li><a href=\"enum.Ipv6MulticastScope.html\">Ipv6MulticastScope</a></li><li><a href=\"enum.Shutdown.html\">Shutdown</a></li><li><a href=\"enum.SocketAddr.html\">SocketAddr</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.ToSocketAddrs.html\">ToSocketAddrs</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"struct\" href=\"#\">Ipv4Addr</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#73\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Ipv4Addr { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An IPv4 address.</p>\n<p>IPv4 addresses are defined as 32-bit integers in <a href=\"https://tools.ietf.org/html/rfc791\">IETF RFC 791</a>.\nThey are usually represented as four octets.</p>\n<p>See <a href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\"><code>IpAddr</code></a> for a type encompassing both IPv4 and IPv6 addresses.</p>\n<h2 id=\"textual-representation\"><a class=\"doc-anchor\" href=\"#textual-representation\">§</a>Textual representation</h2>\n<p><code>Ipv4Addr</code> provides a <a href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\"><code>FromStr</code></a> implementation. The four octets are in decimal\nnotation, divided by <code>.</code> (this is called “dot-decimal notation”).\nNotably, octal numbers (which are indicated with a leading <code>0</code>) and hexadecimal numbers (which\nare indicated with a leading <code>0x</code>) are not allowed per <a href=\"https://tools.ietf.org/html/rfc6943#section-3.1.1\">IETF RFC 6943</a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>localhost = Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"127.0.0.1\"</span>.parse(), <span class=\"prelude-val\">Ok</span>(localhost));\n<span class=\"macro\">assert_eq!</span>(localhost.is_loopback(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert!</span>(<span class=\"string\">\"012.004.002.000\"</span>.parse::&lt;Ipv4Addr&gt;().is_err()); <span class=\"comment\">// all octets are in octal\n</span><span class=\"macro\">assert!</span>(<span class=\"string\">\"0000000.0.0.0\"</span>.parse::&lt;Ipv4Addr&gt;().is_err()); <span class=\"comment\">// first octet is a zero in octal\n</span><span class=\"macro\">assert!</span>(<span class=\"string\">\"0xcb.0x0.0x71.0x00\"</span>.parse::&lt;Ipv4Addr&gt;().is_err()); <span class=\"comment\">// all octets are in hex</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+localhost+=+Ipv4Addr::new(127,+0,+0,+1);%0A++++assert_eq!(%22127.0.0.1%22.parse(),+Ok(localhost));%0A++++assert_eq!(localhost.is_loopback(),+true);%0A++++assert!(%22012.004.002.000%22.parse::%3CIpv4Addr%3E().is_err());+//+all+octets+are+in+octal%0A++++assert!(%220000000.0.0.0%22.parse::%3CIpv4Addr%3E().is_err());+//+first+octet+is+a+zero+in+octal%0A++++assert!(%220xcb.0x0.0x71.0x00%22.parse::%3CIpv4Addr%3E().is_err());+//+all+octets+are+in+hex%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ipv4Addr\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#438\">source</a><a href=\"#impl-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#454\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(a: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, b: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, c: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, d: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\"><p>Creates a new IPv4 address from four eight-bit octets.</p>\n<p>The result will represent the IP address <code>a</code>.<code>b</code>.<code>c</code>.<code>d</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::new(127,+0,+0,+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#468\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of an IPv4 address in bits.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::BITS, <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::BITS,+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bits\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#499\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_bits\" class=\"fn\">to_bits</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an IPv4 address into a <code>u32</code> representation using native byte order.</p>\n<p>Although IPv4 addresses are big-endian, the <code>u32</code> value will use the target platform’s\nnative byte order. That is, the <code>u32</code> value is an integer representation of the IPv4\naddress and not an integer interpretation of the IPv4 address’s big-endian bitstring. This\nmeans that the <code>u32</code> value masked with <code>0xffffff00</code> will set the last octet in the address\nto 0, regardless of the target platform’s endianness.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::new(<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x12345678</span>, addr.to_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::new(0x12,+0x34,+0x56,+0x78);%0A++++assert_eq!(0x12345678,+addr.to_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::new(<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>);\n<span class=\"kw\">let </span>addr_bits = addr.to_bits() &amp; <span class=\"number\">0xffffff00</span>;\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x00</span>), Ipv4Addr::from_bits(addr_bits));\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::new(0x12,+0x34,+0x56,+0x78);%0A++++let+addr_bits+=+addr.to_bits()+%26+0xffffff00;%0A++++assert_eq!(Ipv4Addr::new(0x12,+0x34,+0x56,+0x00),+Ipv4Addr::from_bits(addr_bits));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bits\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#519\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_bits\" class=\"fn\">from_bits</a>(bits: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\"><p>Converts a native byte order <code>u32</code> into an IPv4 address.</p>\n<p>See <a href=\"struct.Ipv4Addr.html#method.to_bits\" title=\"method std::net::Ipv4Addr::to_bits\"><code>Ipv4Addr::to_bits</code></a> for an explanation on endianness.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::from(<span class=\"number\">0x12345678</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>), addr);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::from(0x12345678);%0A++++assert_eq!(Ipv4Addr::new(0x12,+0x34,+0x56,+0x78),+addr);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.LOCALHOST\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#534\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.LOCALHOST\" class=\"constant\">LOCALHOST</a>: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a> = _</h4></section></summary><div class=\"docblock\"><p>An IPv4 address with the address pointing to localhost: <code>127.0.0.1</code></p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::LOCALHOST;\n<span class=\"macro\">assert_eq!</span>(addr, Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::LOCALHOST;%0A++++assert_eq!(addr,+Ipv4Addr::new(127,+0,+0,+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.UNSPECIFIED\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#550\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.UNSPECIFIED\" class=\"constant\">UNSPECIFIED</a>: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a> = _</h4></section></summary><div class=\"docblock\"><p>An IPv4 address representing an unspecified address: <code>0.0.0.0</code></p>\n<p>This corresponds to the constant <code>INADDR_ANY</code> in other languages.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::UNSPECIFIED;\n<span class=\"macro\">assert_eq!</span>(addr, Ipv4Addr::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::UNSPECIFIED;%0A++++assert_eq!(addr,+Ipv4Addr::new(0,+0,+0,+0));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.BROADCAST\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#563\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BROADCAST\" class=\"constant\">BROADCAST</a>: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a> = _</h4></section></summary><div class=\"docblock\"><p>An IPv4 address representing the broadcast address: <code>255.255.255.255</code></p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::BROADCAST;\n<span class=\"macro\">assert_eq!</span>(addr, Ipv4Addr::new(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::BROADCAST;%0A++++assert_eq!(addr,+Ipv4Addr::new(255,+255,+255,+255));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.octets\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#579\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.octets\" class=\"fn\">octets</a>(&amp;self) -&gt; [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"../primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the four eight-bit integers that make up this address.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(addr.octets(), [<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::new(127,+0,+0,+1);%0A++++assert_eq!(addr.octets(),+%5B127,+0,+0,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_unspecified\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0, const since 1.32.0\">1.12.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#602\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_unspecified\" class=\"fn\">is_unspecified</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> for the special ‘unspecified’ address (<code>0.0.0.0</code>).</p>\n<p>This property is defined in <em>UNIX Network Programming, Second Edition</em>,\nW. Richard Stevens, p. 891; see also <a href=\"https://man7.org/linux/man-pages/man7/ip.7.html\">ip7</a>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_unspecified(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">45</span>, <span class=\"number\">22</span>, <span class=\"number\">13</span>, <span class=\"number\">197</span>).is_unspecified(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(0,+0,+0,+0).is_unspecified(),+true);%0A++++assert_eq!(Ipv4Addr::new(45,+22,+13,+197).is_unspecified(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_loopback\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.50.0\">1.7.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#624\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_loopback\" class=\"fn\">is_loopback</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if this is a loopback address (<code>127.0.0.0/8</code>).</p>\n<p>This property is defined by <a href=\"https://tools.ietf.org/html/rfc1122\">IETF RFC 1122</a>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).is_loopback(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">45</span>, <span class=\"number\">22</span>, <span class=\"number\">13</span>, <span class=\"number\">197</span>).is_loopback(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(127,+0,+0,+1).is_loopback(),+true);%0A++++assert_eq!(Ipv4Addr::new(45,+22,+13,+197).is_loopback(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_private\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.50.0\">1.7.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#655\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_private\" class=\"fn\">is_private</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if this is a private address.</p>\n<p>The private address ranges are defined in <a href=\"https://tools.ietf.org/html/rfc1918\">IETF RFC 1918</a> and include:</p>\n<ul>\n<li><code>10.0.0.0/8</code></li>\n<li><code>172.16.0.0/12</code></li>\n<li><code>192.168.0.0/16</code></li>\n</ul>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).is_private(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>).is_private(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">172</span>, <span class=\"number\">16</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>).is_private(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">172</span>, <span class=\"number\">29</span>, <span class=\"number\">45</span>, <span class=\"number\">14</span>).is_private(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">172</span>, <span class=\"number\">32</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>).is_private(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">192</span>, <span class=\"number\">168</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>).is_private(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">192</span>, <span class=\"number\">169</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>).is_private(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(10,+0,+0,+1).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(10,+10,+10,+10).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(172,+16,+10,+10).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(172,+29,+45,+14).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(172,+32,+0,+2).is_private(),+false);%0A++++assert_eq!(Ipv4Addr::new(192,+168,+0,+2).is_private(),+true);%0A++++assert_eq!(Ipv4Addr::new(192,+169,+0,+2).is_private(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_link_local\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.50.0\">1.7.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#683\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_link_local\" class=\"fn\">is_link_local</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if the address is link-local (<code>169.254.0.0/16</code>).</p>\n<p>This property is defined by <a href=\"https://tools.ietf.org/html/rfc3927\">IETF RFC 3927</a>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">169</span>, <span class=\"number\">254</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_link_local(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">169</span>, <span class=\"number\">254</span>, <span class=\"number\">10</span>, <span class=\"number\">65</span>).is_link_local(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">16</span>, <span class=\"number\">89</span>, <span class=\"number\">10</span>, <span class=\"number\">65</span>).is_link_local(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(169,+254,+0,+0).is_link_local(),+true);%0A++++assert_eq!(Ipv4Addr::new(169,+254,+10,+65).is_link_local(),+true);%0A++++assert_eq!(Ipv4Addr::new(16,+89,+10,+65).is_link_local(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_global\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#763\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.is_global\" class=\"fn\">is_global</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ip</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27709\">#27709</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if the address appears to be globally reachable\nas specified by the <a href=\"https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\">IANA IPv4 Special-Purpose Address Registry</a>.\nWhether or not an address is practically reachable will depend on your network configuration.</p>\n<p>Most IPv4 addresses are globally reachable;\nunless they are specifically defined as <em>not</em> globally reachable.</p>\n<p>Non-exhaustive list of notable addresses that are not globally reachable:</p>\n<ul>\n<li>The <a href=\"struct.Ipv4Addr.html#associatedconstant.UNSPECIFIED\" title=\"associated constant std::net::Ipv4Addr::UNSPECIFIED\">unspecified address</a> (<a href=\"struct.Ipv4Addr.html#method.is_unspecified\" title=\"method std::net::Ipv4Addr::is_unspecified\"><code>is_unspecified</code></a>)</li>\n<li>Addresses reserved for private use (<a href=\"struct.Ipv4Addr.html#method.is_private\" title=\"method std::net::Ipv4Addr::is_private\"><code>is_private</code></a>)</li>\n<li>Addresses in the shared address space (<a href=\"struct.Ipv4Addr.html#method.is_shared\" title=\"method std::net::Ipv4Addr::is_shared\"><code>is_shared</code></a>)</li>\n<li>Loopback addresses (<a href=\"struct.Ipv4Addr.html#method.is_loopback\" title=\"method std::net::Ipv4Addr::is_loopback\"><code>is_loopback</code></a>)</li>\n<li>Link-local addresses (<a href=\"struct.Ipv4Addr.html#method.is_link_local\" title=\"method std::net::Ipv4Addr::is_link_local\"><code>is_link_local</code></a>)</li>\n<li>Addresses reserved for documentation (<a href=\"struct.Ipv4Addr.html#method.is_documentation\" title=\"method std::net::Ipv4Addr::is_documentation\"><code>is_documentation</code></a>)</li>\n<li>Addresses reserved for benchmarking (<a href=\"struct.Ipv4Addr.html#method.is_benchmarking\" title=\"method std::net::Ipv4Addr::is_benchmarking\"><code>is_benchmarking</code></a>)</li>\n<li>Reserved addresses (<a href=\"struct.Ipv4Addr.html#method.is_reserved\" title=\"method std::net::Ipv4Addr::is_reserved\"><code>is_reserved</code></a>)</li>\n<li>The <a href=\"struct.Ipv4Addr.html#associatedconstant.BROADCAST\" title=\"associated constant std::net::Ipv4Addr::BROADCAST\">broadcast address</a> (<a href=\"struct.Ipv4Addr.html#method.is_broadcast\" title=\"method std::net::Ipv4Addr::is_broadcast\"><code>is_broadcast</code></a>)</li>\n</ul>\n<p>For the complete overview of which addresses are globally reachable, see the table at the <a href=\"https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\">IANA IPv4 Special-Purpose Address Registry</a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ip)]\n\n</span><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"comment\">// Most IPv4 addresses are globally reachable:\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">80</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">3</span>).is_global(), <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// However some addresses have been assigned a special meaning\n// that makes them not globally reachable. Some examples are:\n\n// The unspecified address (`0.0.0.0`)\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::UNSPECIFIED.is_global(), <span class=\"bool-val\">false</span>);\n\n<span class=\"comment\">// Addresses reserved for private use (`10.0.0.0/8`, `172.16.0.0/12`, 192.168.0.0/16)\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">10</span>, <span class=\"number\">254</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_global(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">192</span>, <span class=\"number\">168</span>, <span class=\"number\">10</span>, <span class=\"number\">65</span>).is_global(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">172</span>, <span class=\"number\">16</span>, <span class=\"number\">10</span>, <span class=\"number\">65</span>).is_global(), <span class=\"bool-val\">false</span>);\n\n<span class=\"comment\">// Addresses in the shared address space (`100.64.0.0/10`)\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_global(), <span class=\"bool-val\">false</span>);\n\n<span class=\"comment\">// The loopback addresses (`127.0.0.0/8`)\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::LOCALHOST.is_global(), <span class=\"bool-val\">false</span>);\n\n<span class=\"comment\">// Link-local addresses (`169.254.0.0/16`)\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">169</span>, <span class=\"number\">254</span>, <span class=\"number\">45</span>, <span class=\"number\">1</span>).is_global(), <span class=\"bool-val\">false</span>);\n\n<span class=\"comment\">// Addresses reserved for documentation (`192.0.2.0/24`, `198.51.100.0/24`, `203.0.113.0/24`)\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">192</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">255</span>).is_global(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">198</span>, <span class=\"number\">51</span>, <span class=\"number\">100</span>, <span class=\"number\">65</span>).is_global(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">203</span>, <span class=\"number\">0</span>, <span class=\"number\">113</span>, <span class=\"number\">6</span>).is_global(), <span class=\"bool-val\">false</span>);\n\n<span class=\"comment\">// Addresses reserved for benchmarking (`198.18.0.0/15`)\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">198</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_global(), <span class=\"bool-val\">false</span>);\n\n<span class=\"comment\">// Reserved addresses (`240.0.0.0/4`)\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">250</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>).is_global(), <span class=\"bool-val\">false</span>);\n\n<span class=\"comment\">// The broadcast address (`255.255.255.255`)\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::BROADCAST.is_global(), <span class=\"bool-val\">false</span>);\n\n<span class=\"comment\">// For a complete overview see the IANA IPv4 Special-Purpose Address Registry.</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ip)%5D%0A%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++//+Most+IPv4+addresses+are+globally+reachable:%0A++++assert_eq!(Ipv4Addr::new(80,+9,+12,+3).is_global(),+true);%0A++++%0A++++//+However+some+addresses+have+been+assigned+a+special+meaning%0A++++//+that+makes+them+not+globally+reachable.+Some+examples+are:%0A++++%0A++++//+The+unspecified+address+(%600.0.0.0%60)%0A++++assert_eq!(Ipv4Addr::UNSPECIFIED.is_global(),+false);%0A++++%0A++++//+Addresses+reserved+for+private+use+(%6010.0.0.0/8%60,+%60172.16.0.0/12%60,+192.168.0.0/16)%0A++++assert_eq!(Ipv4Addr::new(10,+254,+0,+0).is_global(),+false);%0A++++assert_eq!(Ipv4Addr::new(192,+168,+10,+65).is_global(),+false);%0A++++assert_eq!(Ipv4Addr::new(172,+16,+10,+65).is_global(),+false);%0A++++%0A++++//+Addresses+in+the+shared+address+space+(%60100.64.0.0/10%60)%0A++++assert_eq!(Ipv4Addr::new(100,+100,+0,+0).is_global(),+false);%0A++++%0A++++//+The+loopback+addresses+(%60127.0.0.0/8%60)%0A++++assert_eq!(Ipv4Addr::LOCALHOST.is_global(),+false);%0A++++%0A++++//+Link-local+addresses+(%60169.254.0.0/16%60)%0A++++assert_eq!(Ipv4Addr::new(169,+254,+45,+1).is_global(),+false);%0A++++%0A++++//+Addresses+reserved+for+documentation+(%60192.0.2.0/24%60,+%60198.51.100.0/24%60,+%60203.0.113.0/24%60)%0A++++assert_eq!(Ipv4Addr::new(192,+0,+2,+255).is_global(),+false);%0A++++assert_eq!(Ipv4Addr::new(198,+51,+100,+65).is_global(),+false);%0A++++assert_eq!(Ipv4Addr::new(203,+0,+113,+6).is_global(),+false);%0A++++%0A++++//+Addresses+reserved+for+benchmarking+(%60198.18.0.0/15%60)%0A++++assert_eq!(Ipv4Addr::new(198,+18,+0,+0).is_global(),+false);%0A++++%0A++++//+Reserved+addresses+(%60240.0.0.0/4%60)%0A++++assert_eq!(Ipv4Addr::new(250,+10,+20,+30).is_global(),+false);%0A++++%0A++++//+The+broadcast+address+(%60255.255.255.255%60)%0A++++assert_eq!(Ipv4Addr::BROADCAST.is_global(),+false);%0A++++%0A++++//+For+a+complete+overview+see+the+IANA+IPv4+Special-Purpose+Address+Registry.%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_shared\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#800\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.is_shared\" class=\"fn\">is_shared</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ip</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27709\">#27709</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if this address is part of the Shared Address Space defined in\n<a href=\"https://tools.ietf.org/html/rfc6598\">IETF RFC 6598</a> (<code>100.64.0.0/10</code>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ip)]\n</span><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">100</span>, <span class=\"number\">64</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_shared(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">100</span>, <span class=\"number\">127</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>).is_shared(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">100</span>, <span class=\"number\">128</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_shared(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ip)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(100,+64,+0,+0).is_shared(),+true);%0A++++assert_eq!(Ipv4Addr::new(100,+127,+255,+255).is_shared(),+true);%0A++++assert_eq!(Ipv4Addr::new(100,+128,+0,+0).is_shared(),+false);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_benchmarking\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#826\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.is_benchmarking\" class=\"fn\">is_benchmarking</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ip</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27709\">#27709</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if this address part of the <code>198.18.0.0/15</code> range, which is reserved for\nnetwork devices benchmarking. This range is defined in <a href=\"https://tools.ietf.org/html/rfc2544\">IETF RFC 2544</a> as <code>192.18.0.0</code>\nthrough <code>198.19.255.255</code> but <a href=\"https://www.rfc-editor.org/errata/eid423\">errata 423</a> corrects it to <code>198.18.0.0/15</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ip)]\n</span><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">198</span>, <span class=\"number\">17</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>).is_benchmarking(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">198</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_benchmarking(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">198</span>, <span class=\"number\">19</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>).is_benchmarking(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">198</span>, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_benchmarking(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ip)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(198,+17,+255,+255).is_benchmarking(),+false);%0A++++assert_eq!(Ipv4Addr::new(198,+18,+0,+0).is_benchmarking(),+true);%0A++++assert_eq!(Ipv4Addr::new(198,+19,+255,+255).is_benchmarking(),+true);%0A++++assert_eq!(Ipv4Addr::new(198,+20,+0,+0).is_benchmarking(),+false);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_reserved\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#861\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.is_reserved\" class=\"fn\">is_reserved</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ip</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27709\">#27709</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if this address is reserved by IANA for future use. <a href=\"https://tools.ietf.org/html/rfc1112\">IETF RFC 1112</a>\ndefines the block of reserved addresses as <code>240.0.0.0/4</code>. This range normally includes the\nbroadcast address <code>255.255.255.255</code>, but this implementation explicitly excludes it, since\nit is obviously not reserved for future use.</p>\n<h5 id=\"warning\"><a class=\"doc-anchor\" href=\"#warning\">§</a>Warning</h5>\n<p>As IANA assigns new addresses, this method will be\nupdated. This may result in non-reserved addresses being\ntreated as reserved in code that relies on an outdated version\nof this method.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ip)]\n</span><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">240</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_reserved(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">254</span>).is_reserved(), <span class=\"bool-val\">true</span>);\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">239</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>).is_reserved(), <span class=\"bool-val\">false</span>);\n<span class=\"comment\">// The broadcast address is not considered as reserved for future use by this implementation\n</span><span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>).is_reserved(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ip)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(240,+0,+0,+0).is_reserved(),+true);%0A++++assert_eq!(Ipv4Addr::new(255,+255,+255,+254).is_reserved(),+true);%0A++++%0A++++assert_eq!(Ipv4Addr::new(239,+255,+255,+255).is_reserved(),+false);%0A++++//+The+broadcast+address+is+not+considered+as+reserved+for+future+use+by+this+implementation%0A++++assert_eq!(Ipv4Addr::new(255,+255,+255,+255).is_reserved(),+false);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_multicast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.50.0\">1.7.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#885\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_multicast\" class=\"fn\">is_multicast</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if this is a multicast address (<code>224.0.0.0/4</code>).</p>\n<p>Multicast addresses have a most significant octet between <code>224</code> and <code>239</code>,\nand is defined by <a href=\"https://tools.ietf.org/html/rfc5771\">IETF RFC 5771</a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">224</span>, <span class=\"number\">254</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).is_multicast(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">236</span>, <span class=\"number\">168</span>, <span class=\"number\">10</span>, <span class=\"number\">65</span>).is_multicast(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">172</span>, <span class=\"number\">16</span>, <span class=\"number\">10</span>, <span class=\"number\">65</span>).is_multicast(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(224,+254,+0,+0).is_multicast(),+true);%0A++++assert_eq!(Ipv4Addr::new(236,+168,+10,+65).is_multicast(),+true);%0A++++assert_eq!(Ipv4Addr::new(172,+16,+10,+65).is_multicast(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_broadcast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.50.0\">1.7.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#907\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_broadcast\" class=\"fn\">is_broadcast</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if this is a broadcast address (<code>255.255.255.255</code>).</p>\n<p>A broadcast address has all octets set to <code>255</code> as defined in <a href=\"https://tools.ietf.org/html/rfc919\">IETF RFC 919</a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>).is_broadcast(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">236</span>, <span class=\"number\">168</span>, <span class=\"number\">10</span>, <span class=\"number\">65</span>).is_broadcast(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(255,+255,+255,+255).is_broadcast(),+true);%0A++++assert_eq!(Ipv4Addr::new(236,+168,+10,+65).is_broadcast(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_documentation\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.50.0\">1.7.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#935\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_documentation\" class=\"fn\">is_documentation</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"../primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if this address is in a range designated for documentation.</p>\n<p>This is defined in <a href=\"https://tools.ietf.org/html/rfc5737\">IETF RFC 5737</a>:</p>\n<ul>\n<li><code>192.0.2.0/24</code> (TEST-NET-1)</li>\n<li><code>198.51.100.0/24</code> (TEST-NET-2)</li>\n<li><code>203.0.113.0/24</code> (TEST-NET-3)</li>\n</ul>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">192</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">255</span>).is_documentation(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">198</span>, <span class=\"number\">51</span>, <span class=\"number\">100</span>, <span class=\"number\">65</span>).is_documentation(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">203</span>, <span class=\"number\">0</span>, <span class=\"number\">113</span>, <span class=\"number\">6</span>).is_documentation(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">193</span>, <span class=\"number\">34</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>).is_documentation(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++assert_eq!(Ipv4Addr::new(192,+0,+2,+255).is_documentation(),+true);%0A++++assert_eq!(Ipv4Addr::new(198,+51,+100,+65).is_documentation(),+true);%0A++++assert_eq!(Ipv4Addr::new(203,+0,+113,+6).is_documentation(),+true);%0A++++assert_eq!(Ipv4Addr::new(193,+34,+17,+19).is_documentation(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ipv6_compatible\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#964\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ipv6_compatible\" class=\"fn\">to_ipv6_compatible</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a></h4></section></summary><div class=\"docblock\"><p>Converts this address to an <a href=\"struct.Ipv6Addr.html#ipv4-compatible-ipv6-addresses\" title=\"struct std::net::Ipv6Addr\">IPv4-compatible</a> <a href=\"struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\"><code>IPv6</code> address</a>.</p>\n<p><code>a.b.c.d</code> becomes <code>::a.b.c.d</code></p>\n<p>Note that IPv4-compatible addresses have been officially deprecated.\nIf you don’t explicitly need an IPv4-compatible address for legacy reasons, consider using <code>to_ipv6_mapped</code> instead.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{Ipv4Addr, Ipv6Addr};\n\n<span class=\"macro\">assert_eq!</span>(\n    Ipv4Addr::new(<span class=\"number\">192</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">255</span>).to_ipv6_compatible(),\n    Ipv6Addr::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0xc000</span>, <span class=\"number\">0x2ff</span>)\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpv4Addr,+Ipv6Addr%7D;%0A++++%0A++++assert_eq!(%0A++++++++Ipv4Addr::new(192,+0,+2,+255).to_ipv6_compatible(),%0A++++++++Ipv6Addr::new(0,+0,+0,+0,+0,+0,+0xc000,+0x2ff)%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ipv6_mapped\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#989\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ipv6_mapped\" class=\"fn\">to_ipv6_mapped</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a></h4></section></summary><div class=\"docblock\"><p>Converts this address to an <a href=\"struct.Ipv6Addr.html#ipv4-mapped-ipv6-addresses\" title=\"struct std::net::Ipv6Addr\">IPv4-mapped</a> <a href=\"struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\"><code>IPv6</code> address</a>.</p>\n<p><code>a.b.c.d</code> becomes <code>::ffff:a.b.c.d</code></p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{Ipv4Addr, Ipv6Addr};\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">192</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">255</span>).to_ipv6_mapped(),\n           Ipv6Addr::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0xffff</span>, <span class=\"number\">0xc000</span>, <span class=\"number\">0x2ff</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpv4Addr,+Ipv6Addr%7D;%0A++++%0A++++assert_eq!(Ipv4Addr::new(192,+0,+2,+255).to_ipv6_mapped(),%0A+++++++++++++++Ipv6Addr::new(0,+0,+0,+0,+0,+0xffff,+0xc000,+0x2ff));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ipv4Addr-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/parser.rs.html#331\">source</a><a href=\"#impl-Ipv4Addr-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.parse_ascii\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/parser.rs.html#344\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.parse_ascii\" class=\"fn\">parse_ascii</a>(b: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, <a class=\"struct\" href=\"struct.AddrParseError.html\" title=\"struct std::net::AddrParseError\">AddrParseError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>addr_parse_ascii</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/101035\">#101035</a>)</span></div></span></summary><div class=\"docblock\"><p>Parse an IPv4 address from a slice of bytes.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(addr_parse_ascii)]\n\n</span><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>localhost = Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::parse_ascii(<span class=\"string\">b\"127.0.0.1\"</span>), <span class=\"prelude-val\">Ok</span>(localhost));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(addr_parse_ascii)%5D%0A%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+localhost+=+Ipv4Addr::new(127,+0,+0,+1);%0A++++%0A++++assert_eq!(Ipv4Addr::parse_ascii(b%22127.0.0.1%22),+Ok(localhost));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3C%26Ipv4Addr%3E-for-%26Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitAnd%3C%26Ipv4Addr%3E-for-%26Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitand-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3C%26Ipv4Addr%3E-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitAnd%3C%26Ipv4Addr%3E-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitand-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3CIpv4Addr%3E-for-%26Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitAnd%3CIpv4Addr%3E-for-%26Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitand-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitAnd-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAndAssign%3C%26Ipv4Addr%3E-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitAndAssign%3C%26Ipv4Addr%3E-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitand_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;=</code> operation. <a href=\"../ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAndAssign-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitAndAssign-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;=</code> operation. <a href=\"../ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3C%26Ipv4Addr%3E-for-%26Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitOr%3C%26Ipv4Addr%3E-for-%26Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitor-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3C%26Ipv4Addr%3E-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitOr%3C%26Ipv4Addr%3E-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitor-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3CIpv4Addr%3E-for-%26Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitOr%3CIpv4Addr%3E-for-%26Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitor-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitOr-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign%3C%26Ipv4Addr%3E-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitOrAssign%3C%26Ipv4Addr%3E-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitor_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a></span><a href=\"#impl-BitOrAssign-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2316-2326\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a></span><a href=\"#impl-Clone-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1078\">source</a></span><a href=\"#impl-Debug-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1079\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1057\">source</a></span><a href=\"#impl-Display-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1058\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5Bu8;+4%5D%3E-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1163\">source</a></span><a href=\"#impl-From%3C%5Bu8;+4%5D%3E-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"../primitive.array.html\">4</a>]&gt; for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1175\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(octets: [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"../primitive.array.html\">4</a>]) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\"><p>Creates an <code>Ipv4Addr</code> from a four element byte array.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::from([<span class=\"number\">13u8</span>, <span class=\"number\">12u8</span>, <span class=\"number\">11u8</span>, <span class=\"number\">10u8</span>]);\n<span class=\"macro\">assert_eq!</span>(Ipv4Addr::new(<span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>), addr);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++let+addr+=+Ipv4Addr::from(%5B13u8,+12u8,+11u8,+10u8%5D);%0A++++assert_eq!(Ipv4Addr::new(13,+12,+11,+10),+addr);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CIpv4Addr%3E-for-IpAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1013\">source</a></span><a href=\"#impl-From%3CIpv4Addr%3E-for-IpAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"enum\" href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1029\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(ipv4: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"enum\" href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h4></section></summary><div class=\"docblock\"><p>Copies this address to a new <code>IpAddr::V4</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{IpAddr, Ipv4Addr};\n\n<span class=\"kw\">let </span>addr = Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    IpAddr::V4(addr),\n    IpAddr::from(addr)\n)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv4Addr%7D;%0A++++%0A++++let+addr+=+Ipv4Addr::new(127,+0,+0,+1);%0A++++%0A++++assert_eq!(%0A++++++++IpAddr::V4(addr),%0A++++++++IpAddr::from(addr)%0A++++)%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CIpv4Addr%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1145\">source</a></span><a href=\"#impl-From%3CIpv4Addr%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1148\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(ip: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Uses <a href=\"struct.Ipv4Addr.html#method.to_bits\" title=\"method std::net::Ipv4Addr::to_bits\"><code>Ipv4Addr::to_bits</code></a> to convert an IPv4 address to a host byte order <code>u32</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cu32%3E-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1154\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1157\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(ip: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\"><p>Uses <a href=\"struct.Ipv4Addr.html#method.from_bits\" title=\"associated function std::net::Ipv4Addr::from_bits\"><code>Ipv4Addr::from_bits</code></a> to convert a host byte order <code>u32</code> into an IPv4 address.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/parser.rs.html#355\">source</a></span><a href=\"#impl-FromStr-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"struct.AddrParseError.html\" title=\"struct std::net::AddrParseError\">AddrParseError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/parser.rs.html#357\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, <a class=\"struct\" href=\"struct.AddrParseError.html\" title=\"struct std::net::AddrParseError\">AddrParseError</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"../str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a></span><a href=\"#impl-Hash-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-%26Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2213\">source</a></span><a href=\"#impl-Not-for-%26Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2217\">source</a><a href=\"#method.not-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2200\">source</a></span><a href=\"#impl-Not-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2204\">source</a><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1137\">source</a></span><a href=\"#impl-Ord-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1139\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CIpAddr%3E-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1096\">source</a></span><a href=\"#impl-PartialEq%3CIpAddr%3E-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a>&gt; for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1098\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CIpv4Addr%3E-for-IpAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1085\">source</a></span><a href=\"#impl-PartialEq%3CIpv4Addr%3E-for-IpAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"enum\" href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1087\">source</a><a href=\"#method.eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a></span><a href=\"#impl-PartialEq-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a><a href=\"#method.eq-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CIpAddr%3E-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1126\">source</a></span><a href=\"#impl-PartialOrd%3CIpAddr%3E-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a>&gt; for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1128\">source</a><a href=\"#method.partial_cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CIpv4Addr%3E-for-IpAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1115\">source</a></span><a href=\"#impl-PartialOrd%3CIpv4Addr%3E-for-IpAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"enum\" href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1117\">source</a><a href=\"#method.partial_cmp-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1107\">source</a></span><a href=\"#impl-PartialOrd-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1109\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Step-for-Ipv4Addr\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#556\">source</a><a href=\"#impl-Step-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.steps_between\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#558\">source</a><a href=\"#method.steps_between\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#tymethod.steps_between\" class=\"fn\">steps_between</a>(_: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, _: &amp;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"../iter/trait.Step.html#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#563\">source</a><a href=\"#method.forward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#568\">source</a><a href=\"#method.backward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#tymethod.backward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#573\">source</a><a href=\"#method.forward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../iter/trait.Step.html#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#580\">source</a><a href=\"#method.backward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../iter/trait.Step.html#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#85\">source</a><a href=\"#method.forward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#method.forward\" class=\"fn\">forward</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#155\">source</a><a href=\"#method.backward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Step.html#method.backward\" class=\"fn\">backward</a>(start: Self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"../iter/trait.Step.html#method.backward\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a></span><a href=\"#impl-Copy-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-Eq-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a></span><a href=\"#impl-Eq-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-StructuralPartialEq-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#71\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-TrustedStep-for-Ipv4Addr\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#18\">source</a><a href=\"#impl-TrustedStep-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Ipv4Addr\" class=\"impl\"><a href=\"#impl-Freeze-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-RefUnwindSafe-for-Ipv4Addr\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-Send-for-Ipv4Addr\" class=\"impl\"><a href=\"#impl-Send-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-Sync-for-Ipv4Addr\" class=\"impl\"><a href=\"#impl-Sync-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-Unpin-for-Ipv4Addr\" class=\"impl\"><a href=\"#impl-Unpin-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-UnwindSafe-for-Ipv4Addr\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:00.067Z"
}