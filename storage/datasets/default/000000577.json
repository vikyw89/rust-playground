{
	"title": "Ordering in std::cmp - Rust",
	"url": "https://doc.rust-lang.org/stable/std/cmp/enum.Ordering.html",
	"markdown": "# Ordering in std::cmp - Rust\n\n```\n#[repr(i8)]pub enum Ordering {\n    Less = -1,\n    Equal = 0,\n    Greater = 1,\n}\n```\n\nExpand description\n\nAn `Ordering` is the result of a comparison between two values.\n\n## [§](#examples)Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(1.cmp(&2), Ordering::Less);\n\nassert_eq!(1.cmp(&1), Ordering::Equal);\n\nassert_eq!(2.cmp(&1), Ordering::Greater);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(1.cmp(%262),+Ordering::Less);%0A++++%0A++++assert_eq!(1.cmp(%261),+Ordering::Equal);%0A++++%0A++++assert_eq!(2.cmp(%261),+Ordering::Greater);%0A%7D&edition=2021)\n\n[§](#variant.Less)1.0.0\n\nAn ordering where a compared value is less than another.\n\n[§](#variant.Equal)1.0.0\n\nAn ordering where a compared value is equal to another.\n\n[§](#variant.Greater)1.0.0\n\nAn ordering where a compared value is greater than another.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#396)[§](#impl-Ordering)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#412)\n\nReturns `true` if the ordering is the `Equal` variant.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(Ordering::Less.is_eq(), false);\nassert_eq!(Ordering::Equal.is_eq(), true);\nassert_eq!(Ordering::Greater.is_eq(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_eq(),+false);%0A++++assert_eq!(Ordering::Equal.is_eq(),+true);%0A++++assert_eq!(Ordering::Greater.is_eq(),+false);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#431)\n\nReturns `true` if the ordering is not the `Equal` variant.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(Ordering::Less.is_ne(), true);\nassert_eq!(Ordering::Equal.is_ne(), false);\nassert_eq!(Ordering::Greater.is_ne(), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_ne(),+true);%0A++++assert_eq!(Ordering::Equal.is_ne(),+false);%0A++++assert_eq!(Ordering::Greater.is_ne(),+true);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#450)\n\nReturns `true` if the ordering is the `Less` variant.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(Ordering::Less.is_lt(), true);\nassert_eq!(Ordering::Equal.is_lt(), false);\nassert_eq!(Ordering::Greater.is_lt(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_lt(),+true);%0A++++assert_eq!(Ordering::Equal.is_lt(),+false);%0A++++assert_eq!(Ordering::Greater.is_lt(),+false);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#469)\n\nReturns `true` if the ordering is the `Greater` variant.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(Ordering::Less.is_gt(), false);\nassert_eq!(Ordering::Equal.is_gt(), false);\nassert_eq!(Ordering::Greater.is_gt(), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_gt(),+false);%0A++++assert_eq!(Ordering::Equal.is_gt(),+false);%0A++++assert_eq!(Ordering::Greater.is_gt(),+true);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#488)\n\nReturns `true` if the ordering is either the `Less` or `Equal` variant.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(Ordering::Less.is_le(), true);\nassert_eq!(Ordering::Equal.is_le(), true);\nassert_eq!(Ordering::Greater.is_le(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_le(),+true);%0A++++assert_eq!(Ordering::Equal.is_le(),+true);%0A++++assert_eq!(Ordering::Greater.is_le(),+false);%0A%7D&edition=2021)\n\n1.53.0 (const: 1.53.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#507)\n\nReturns `true` if the ordering is either the `Greater` or `Equal` variant.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(Ordering::Less.is_ge(), false);\nassert_eq!(Ordering::Equal.is_ge(), true);\nassert_eq!(Ordering::Greater.is_ge(), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_ge(),+false);%0A++++assert_eq!(Ordering::Equal.is_ge(),+true);%0A++++assert_eq!(Ordering::Greater.is_ge(),+true);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.48.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#544)\n\nReverses the `Ordering`.\n\n-   `Less` becomes `Greater`.\n-   `Greater` becomes `Less`.\n-   `Equal` becomes `Equal`.\n\n##### [§](#examples-7)Examples\n\nBasic behavior:\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(Ordering::Less.reverse(), Ordering::Greater);\nassert_eq!(Ordering::Equal.reverse(), Ordering::Equal);\nassert_eq!(Ordering::Greater.reverse(), Ordering::Less);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.reverse(),+Ordering::Greater);%0A++++assert_eq!(Ordering::Equal.reverse(),+Ordering::Equal);%0A++++assert_eq!(Ordering::Greater.reverse(),+Ordering::Less);%0A%7D&edition=2021)\n\nThis method can be used to reverse a comparison:\n\n```\nlet data: &mut [_] = &mut [2, 10, 5, 8];\n\n// sort the array from largest to smallest.\ndata.sort_by(|a, b| a.cmp(b).reverse());\n\nlet b: &mut [_] = &mut [10, 8, 5, 2];\nassert!(data == b);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+data:+%26mut+%5B_%5D+=+%26mut+%5B2,+10,+5,+8%5D;%0A++++%0A++++//+sort+the+array+from+largest+to+smallest.%0A++++data.sort_by(%7Ca,+b%7C+a.cmp(b).reverse());%0A++++%0A++++let+b:+%26mut+%5B_%5D+=+%26mut+%5B10,+8,+5,+2%5D;%0A++++assert!(data+==+b);%0A%7D&edition=2021)\n\n1.17.0 (const: 1.48.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#583)\n\nChains two orderings.\n\nReturns `self` when it’s not `Equal`. Otherwise returns `other`.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::cmp::Ordering;\n\nlet result = Ordering::Equal.then(Ordering::Less);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Less.then(Ordering::Equal);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Less.then(Ordering::Greater);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Equal.then(Ordering::Equal);\nassert_eq!(result, Ordering::Equal);\n\nlet x: (i64, i64, i64) = (1, 2, 7);\nlet y: (i64, i64, i64) = (1, 5, 3);\nlet result = x.0.cmp(&y.0).then(x.1.cmp(&y.1)).then(x.2.cmp(&y.2));\n\nassert_eq!(result, Ordering::Less);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++let+result+=+Ordering::Equal.then(Ordering::Less);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Less.then(Ordering::Equal);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Less.then(Ordering::Greater);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Equal.then(Ordering::Equal);%0A++++assert_eq!(result,+Ordering::Equal);%0A++++%0A++++let+x:+(i64,+i64,+i64)+=+(1,+2,+7);%0A++++let+y:+(i64,+i64,+i64)+=+(1,+5,+3);%0A++++let+result+=+x.0.cmp(%26y.0).then(x.1.cmp(%26y.1)).then(x.2.cmp(%26y.2));%0A++++%0A++++assert_eq!(result,+Ordering::Less);%0A%7D&edition=2021)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#621)\n\nChains the ordering with the given function.\n\nReturns `self` when it’s not `Equal`. Otherwise calls `f` and returns the result.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::cmp::Ordering;\n\nlet result = Ordering::Equal.then_with(|| Ordering::Less);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Less.then_with(|| Ordering::Equal);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Less.then_with(|| Ordering::Greater);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Equal.then_with(|| Ordering::Equal);\nassert_eq!(result, Ordering::Equal);\n\nlet x: (i64, i64, i64) = (1, 2, 7);\nlet y: (i64, i64, i64) = (1, 5, 3);\nlet result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));\n\nassert_eq!(result, Ordering::Less);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++let+result+=+Ordering::Equal.then_with(%7C%7C+Ordering::Less);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Less.then_with(%7C%7C+Ordering::Equal);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Less.then_with(%7C%7C+Ordering::Greater);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Equal.then_with(%7C%7C+Ordering::Equal);%0A++++assert_eq!(result,+Ordering::Equal);%0A++++%0A++++let+x:+(i64,+i64,+i64)+=+(1,+2,+7);%0A++++let+y:+(i64,+i64,+i64)+=+(1,+5,+3);%0A++++let+result+=+x.0.cmp(%26y.0).then_with(%7C%7C+x.1.cmp(%26y.1)).then_with(%7C%7C+x.2.cmp(%26y.2));%0A++++%0A++++assert_eq!(result,+Ordering::Less);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-Clone-for-Ordering)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-Debug-for-Ordering)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-Hash-for-Ordering)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-Ord-for-Ordering)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-PartialEq-for-Ordering)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-PartialOrd-for-Ordering)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-Copy-for-Ordering)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-Eq-for-Ordering)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377)[§](#impl-StructuralPartialEq-for-Ordering)\n\n[§](#impl-Freeze-for-Ordering)\n\n[§](#impl-RefUnwindSafe-for-Ordering)\n\n[§](#impl-Send-for-Ordering)\n\n[§](#impl-Sync-for-Ordering)\n\n[§](#impl-Unpin-for-Ordering)\n\n[§](#impl-UnwindSafe-for-Ordering)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An `Ordering` is the result of a comparison between two values.\"><title>Ordering in std::cmp - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc enum\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Ordering</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Ordering</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#variants\">Variants</a></h3><ul class=\"block variant\"><li><a href=\"#variant.Equal\">Equal</a></li><li><a href=\"#variant.Greater\">Greater</a></li><li><a href=\"#variant.Less\">Less</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.is_eq\">is_eq</a></li><li><a href=\"#method.is_ge\">is_ge</a></li><li><a href=\"#method.is_gt\">is_gt</a></li><li><a href=\"#method.is_le\">is_le</a></li><li><a href=\"#method.is_lt\">is_lt</a></li><li><a href=\"#method.is_ne\">is_ne</a></li><li><a href=\"#method.reverse\">reverse</a></li><li><a href=\"#method.then\">then</a></li><li><a href=\"#method.then_with\">then_with</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-Ordering\">Clone</a></li><li><a href=\"#impl-Copy-for-Ordering\">Copy</a></li><li><a href=\"#impl-Debug-for-Ordering\">Debug</a></li><li><a href=\"#impl-Eq-for-Ordering\">Eq</a></li><li><a href=\"#impl-Hash-for-Ordering\">Hash</a></li><li><a href=\"#impl-Ord-for-Ordering\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Ordering\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Ordering\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-Ordering\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Ordering\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Ordering\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Ordering\">Send</a></li><li><a href=\"#impl-Sync-for-Ordering\">Sync</a></li><li><a href=\"#impl-Unpin-for-Ordering\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Ordering\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::cmp</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Reverse.html\">Reverse</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Ordering.html\">Ordering</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Eq.html\">Eq</a></li><li><a href=\"trait.Ord.html\">Ord</a></li><li><a href=\"trait.PartialEq.html\">PartialEq</a></li><li><a href=\"trait.PartialOrd.html\">PartialOrd</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.max.html\">max</a></li><li><a href=\"fn.max_by.html\">max_by</a></li><li><a href=\"fn.max_by_key.html\">max_by_key</a></li><li><a href=\"fn.min.html\">min</a></li><li><a href=\"fn.min_by.html\">min_by</a></li><li><a href=\"fn.min_by_key.html\">min_by_key</a></li><li><a href=\"fn.minmax.html\">minmax</a></li><li><a href=\"fn.minmax_by.html\">minmax_by</a></li><li><a href=\"fn.minmax_by_key.html\">minmax_by_key</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Eq.html\">Eq</a></li><li><a href=\"derive.Ord.html\">Ord</a></li><li><a href=\"derive.PartialEq.html\">PartialEq</a></li><li><a href=\"derive.PartialOrd.html\">PartialOrd</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Enum <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">cmp</a>::<wbr><a class=\"enum\" href=\"#\">Ordering</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#384\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code><div class=\"code-attribute\">#[repr(i8)]</div>pub enum Ordering {\n    Less = -1,\n    Equal = 0,\n    Greater = 1,\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An <code>Ordering</code> is the result of a comparison between two values.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), Ordering::Less);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), Ordering::Equal);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), Ordering::Greater);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(1.cmp(%262),+Ordering::Less);%0A++++%0A++++assert_eq!(1.cmp(%261),+Ordering::Equal);%0A++++%0A++++assert_eq!(2.cmp(%261),+Ordering::Greater);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"variants\" class=\"variants section-header\">Variants<a href=\"#variants\" class=\"anchor\">§</a></h2><div class=\"variants\"><section id=\"variant.Less\" class=\"variant\"><a href=\"#variant.Less\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">Less = -1</h3></section><div class=\"docblock\"><p>An ordering where a compared value is less than another.</p>\n</div><section id=\"variant.Equal\" class=\"variant\"><a href=\"#variant.Equal\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">Equal = 0</h3></section><div class=\"docblock\"><p>An ordering where a compared value is equal to another.</p>\n</div><section id=\"variant.Greater\" class=\"variant\"><a href=\"#variant.Greater\" class=\"anchor\">§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h3 class=\"code-header\">Greater = 1</h3></section><div class=\"docblock\"><p>An ordering where a compared value is greater than another.</p>\n</div></div><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ordering\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#396\">source</a><a href=\"#impl-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_eq\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#412\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_eq\" class=\"fn\">is_eq</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the ordering is the <code>Equal</code> variant.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"macro\">assert_eq!</span>(Ordering::Less.is_eq(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Equal.is_eq(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Greater.is_eq(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_eq(),+false);%0A++++assert_eq!(Ordering::Equal.is_eq(),+true);%0A++++assert_eq!(Ordering::Greater.is_eq(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ne\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#431\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ne\" class=\"fn\">is_ne</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"macro\">assert_eq!</span>(Ordering::Less.is_ne(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Equal.is_ne(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Greater.is_ne(), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_ne(),+true);%0A++++assert_eq!(Ordering::Equal.is_ne(),+false);%0A++++assert_eq!(Ordering::Greater.is_ne(),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_lt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#450\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_lt\" class=\"fn\">is_lt</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the ordering is the <code>Less</code> variant.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"macro\">assert_eq!</span>(Ordering::Less.is_lt(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Equal.is_lt(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Greater.is_lt(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_lt(),+true);%0A++++assert_eq!(Ordering::Equal.is_lt(),+false);%0A++++assert_eq!(Ordering::Greater.is_lt(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_gt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#469\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_gt\" class=\"fn\">is_gt</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the ordering is the <code>Greater</code> variant.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"macro\">assert_eq!</span>(Ordering::Less.is_gt(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Equal.is_gt(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Greater.is_gt(), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_gt(),+false);%0A++++assert_eq!(Ordering::Equal.is_gt(),+false);%0A++++assert_eq!(Ordering::Greater.is_gt(),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_le\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#488\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_le\" class=\"fn\">is_le</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> variant.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"macro\">assert_eq!</span>(Ordering::Less.is_le(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Equal.is_le(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Greater.is_le(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_le(),+true);%0A++++assert_eq!(Ordering::Equal.is_le(),+true);%0A++++assert_eq!(Ordering::Greater.is_le(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ge\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const since 1.53.0\">1.53.0 (const: 1.53.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#507\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ge\" class=\"fn\">is_ge</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code> variant.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"macro\">assert_eq!</span>(Ordering::Less.is_ge(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Equal.is_ge(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(Ordering::Greater.is_ge(), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.is_ge(),+false);%0A++++assert_eq!(Ordering::Equal.is_ge(),+true);%0A++++assert_eq!(Ordering::Greater.is_ge(),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#544\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse\" class=\"fn\">reverse</a>(self) -&gt; <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Reverses the <code>Ordering</code>.</p>\n<ul>\n<li><code>Less</code> becomes <code>Greater</code>.</li>\n<li><code>Greater</code> becomes <code>Less</code>.</li>\n<li><code>Equal</code> becomes <code>Equal</code>.</li>\n</ul>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic behavior:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"macro\">assert_eq!</span>(Ordering::Less.reverse(), Ordering::Greater);\n<span class=\"macro\">assert_eq!</span>(Ordering::Equal.reverse(), Ordering::Equal);\n<span class=\"macro\">assert_eq!</span>(Ordering::Greater.reverse(), Ordering::Less);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(Ordering::Less.reverse(),+Ordering::Greater);%0A++++assert_eq!(Ordering::Equal.reverse(),+Ordering::Equal);%0A++++assert_eq!(Ordering::Greater.reverse(),+Ordering::Less);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This method can be used to reverse a comparison:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>data: <span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\n\n<span class=\"comment\">// sort the array from largest to smallest.\n</span>data.sort_by(|a, b| a.cmp(b).reverse());\n\n<span class=\"kw\">let </span>b: <span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>];\n<span class=\"macro\">assert!</span>(data == b);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+data:+%26mut+%5B_%5D+=+%26mut+%5B2,+10,+5,+8%5D;%0A++++%0A++++//+sort+the+array+from+largest+to+smallest.%0A++++data.sort_by(%7Ca,+b%7C+a.cmp(b).reverse());%0A++++%0A++++let+b:+%26mut+%5B_%5D+=+%26mut+%5B10,+8,+5,+2%5D;%0A++++assert!(data+==+b);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0, const since 1.48.0\">1.17.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#583\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.then\" class=\"fn\">then</a>(self, other: <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>) -&gt; <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Chains two orderings.</p>\n<p>Returns <code>self</code> when it’s not <code>Equal</code>. Otherwise returns <code>other</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"kw\">let </span>result = Ordering::Equal.then(Ordering::Less);\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Less);\n\n<span class=\"kw\">let </span>result = Ordering::Less.then(Ordering::Equal);\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Less);\n\n<span class=\"kw\">let </span>result = Ordering::Less.then(Ordering::Greater);\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Less);\n\n<span class=\"kw\">let </span>result = Ordering::Equal.then(Ordering::Equal);\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Equal);\n\n<span class=\"kw\">let </span>x: (i64, i64, i64) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>y: (i64, i64, i64) = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>);\n<span class=\"kw\">let </span>result = x.<span class=\"number\">0</span>.cmp(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">0</span>).then(x.<span class=\"number\">1</span>.cmp(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">1</span>)).then(x.<span class=\"number\">2</span>.cmp(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">2</span>));\n\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Less);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++let+result+=+Ordering::Equal.then(Ordering::Less);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Less.then(Ordering::Equal);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Less.then(Ordering::Greater);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Equal.then(Ordering::Equal);%0A++++assert_eq!(result,+Ordering::Equal);%0A++++%0A++++let+x:+(i64,+i64,+i64)+=+(1,+2,+7);%0A++++let+y:+(i64,+i64,+i64)+=+(1,+5,+3);%0A++++let+result+=+x.0.cmp(%26y.0).then(x.1.cmp(%26y.1)).then(x.2.cmp(%26y.2));%0A++++%0A++++assert_eq!(result,+Ordering::Less);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.then_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#621\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.then_with\" class=\"fn\">then_with</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Chains the ordering with the given function.</p>\n<p>Returns <code>self</code> when it’s not <code>Equal</code>. Otherwise calls <code>f</code> and returns\nthe result.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"kw\">let </span>result = Ordering::Equal.then_with(|| Ordering::Less);\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Less);\n\n<span class=\"kw\">let </span>result = Ordering::Less.then_with(|| Ordering::Equal);\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Less);\n\n<span class=\"kw\">let </span>result = Ordering::Less.then_with(|| Ordering::Greater);\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Less);\n\n<span class=\"kw\">let </span>result = Ordering::Equal.then_with(|| Ordering::Equal);\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Equal);\n\n<span class=\"kw\">let </span>x: (i64, i64, i64) = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>y: (i64, i64, i64) = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>);\n<span class=\"kw\">let </span>result = x.<span class=\"number\">0</span>.cmp(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">0</span>).then_with(|| x.<span class=\"number\">1</span>.cmp(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">1</span>)).then_with(|| x.<span class=\"number\">2</span>.cmp(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">2</span>));\n\n<span class=\"macro\">assert_eq!</span>(result, Ordering::Less);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++let+result+=+Ordering::Equal.then_with(%7C%7C+Ordering::Less);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Less.then_with(%7C%7C+Ordering::Equal);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Less.then_with(%7C%7C+Ordering::Greater);%0A++++assert_eq!(result,+Ordering::Less);%0A++++%0A++++let+result+=+Ordering::Equal.then_with(%7C%7C+Ordering::Equal);%0A++++assert_eq!(result,+Ordering::Equal);%0A++++%0A++++let+x:+(i64,+i64,+i64)+=+(1,+2,+7);%0A++++let+y:+(i64,+i64,+i64)+=+(1,+5,+3);%0A++++let+result+=+x.0.cmp(%26y.0).then_with(%7C%7C+x.1.cmp(%26y.1)).then_with(%7C%7C+x.2.cmp(%26y.2));%0A++++%0A++++assert_eq!(result,+Ordering::Less);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-Clone-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-Debug-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-Hash-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-Ord-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>) -&gt; <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-PartialEq-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-PartialOrd-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-Copy-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section><section id=\"impl-Eq-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-Eq-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section><section id=\"impl-StructuralPartialEq-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Ordering\" class=\"impl\"><a href=\"#impl-Freeze-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section><section id=\"impl-RefUnwindSafe-for-Ordering\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section><section id=\"impl-Send-for-Ordering\" class=\"impl\"><a href=\"#impl-Send-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section><section id=\"impl-Sync-for-Ordering\" class=\"impl\"><a href=\"#impl-Sync-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section><section id=\"impl-Unpin-for-Ordering\" class=\"impl\"><a href=\"#impl-Unpin-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section><section id=\"impl-UnwindSafe-for-Ordering\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:29.732Z"
}