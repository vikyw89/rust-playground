{
	"title": "char - Rust",
	"url": "https://doc.rust-lang.org/stable/std/primitive.char.html",
	"markdown": "# char - Rust\n\n## Primitive Type [char](#)\n\n1.0.0 ¬∑\n\nExpand description\n\nA character type.\n\nThe `char` type represents a single character. More specifically, since ‚Äòcharacter‚Äô isn‚Äôt a well-defined concept in Unicode, `char` is a ‚Äò[Unicode scalar value](https://www.unicode.org/glossary/#unicode_scalar_value)‚Äô.\n\nThis documentation describes a number of methods and trait implementations on the `char` type. For technical reasons, there is additional, separate documentation in [the `std::char` module](char/index.html) as well.\n\n## [¬ß](#validity-and-layout)Validity and Layout\n\nA `char` is a ‚Äò[Unicode scalar value](https://www.unicode.org/glossary/#unicode_scalar_value)‚Äô, which is any ‚Äò[Unicode code point](https://www.unicode.org/glossary/#code_point)‚Äô other than a [surrogate code point](https://www.unicode.org/glossary/#surrogate_code_point). This has a fixed numerical definition: code points are in the range 0 to 0x10FFFF, inclusive. Surrogate code points, used by UTF-16, are in the range 0xD800 to 0xDFFF.\n\nNo `char` may be constructed, whether as a literal or at runtime, that is not a Unicode scalar value. Violating this rule causes undefined behavior.\n\n[‚ìò](# \"This example deliberately fails to compile\")\n\n```\n// Each of these is a compiler error\n['\\u{D800}', '\\u{DFFF}', '\\u{110000}'];\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Each+of+these+is+a+compiler+error%0Afn+main()+%7B%0A++++%5B%27%5Cu%7BD800%7D%27,+%27%5Cu%7BDFFF%7D%27,+%27%5Cu%7B110000%7D%27%5D;%0A%7D&edition=2021)\n\n[‚ìò](# \"This example panics\")\n\n```\n// Panics; from_u32 returns None.\nchar::from_u32(0xDE01).unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Panics;+from_u32+returns+None.%0Afn+main()+%7B%0A++++char::from_u32(0xDE01).unwrap();%0A%7D&edition=2021)\n\n```\n// Undefined behaviour\nlet _ = unsafe { char::from_u32_unchecked(0x110000) };\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Undefined+behaviour%0Afn+main()+%7B%0A++++let+_+=+unsafe+%7B+char::from_u32_unchecked(0x110000)+%7D;%0A%7D&edition=2021)\n\nUnicode scalar values are also the exact set of values that may be encoded in UTF-8. Because `char` values are Unicode scalar values and functions may assume [incoming `str` values are valid UTF-8](about:blank/primitive.str.html#invariant), it is safe to store any `char` in a `str` or read any character from a `str` as a `char`.\n\nThe gap in valid `char` values is understood by the compiler, so in the below example the two ranges are understood to cover the whole range of possible `char` values and there is no error for a [non-exhaustive match](about:blank/book/ch06-02-match.html#matches-are-exhaustive).\n\n```\nlet c: char = 'a';\nmatch c {\n    '\\0' ..= '\\u{D7FF}' => false,\n    '\\u{E000}' ..= '\\u{10FFFF}' => true,\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c:+char+=+%27a%27;%0A++++match+c+%7B%0A++++++++%27%5C0%27+..=+%27%5Cu%7BD7FF%7D%27+=%3E+false,%0A++++++++%27%5Cu%7BE000%7D%27+..=+%27%5Cu%7B10FFFF%7D%27+=%3E+true,%0A++++%7D;%0A%7D&edition=2021)\n\nAll Unicode scalar values are valid `char` values, but not all of them represent a real character. Many Unicode scalar values are not currently assigned to a character, but may be in the future (‚Äúreserved‚Äù); some will never be a character (‚Äúnoncharacters‚Äù); and some may be given different meanings by different users (‚Äúprivate use‚Äù).\n\n`char` is guaranteed to have the same size, alignment, and function call ABI as `u32` on all platforms.\n\n```\nuse std::alloc::Layout;\nassert_eq!(Layout::new::<char>(), Layout::new::<u32>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::Layout;%0A++++assert_eq!(Layout::new::%3Cchar%3E(),+Layout::new::%3Cu32%3E());%0A%7D&edition=2021)\n\n## [¬ß](#representation)Representation\n\n`char` is always four bytes in size. This is a different representation than a given character would have as part of a [`String`](../std/string/struct.String.html). For example:\n\n```\nlet v = vec!['h', 'e', 'l', 'l', 'o'];\n\n// five elements times four bytes for each element\nassert_eq!(20, v.len() * std::mem::size_of::<char>());\n\nlet s = String::from(\"hello\");\n\n// five elements times one byte per element\nassert_eq!(5, s.len() * std::mem::size_of::<u8>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B%27h%27,+%27e%27,+%27l%27,+%27l%27,+%27o%27%5D;%0A++++%0A++++//+five+elements+times+four+bytes+for+each+element%0A++++assert_eq!(20,+v.len()+*+std::mem::size_of::%3Cchar%3E());%0A++++%0A++++let+s+=+String::from(%22hello%22);%0A++++%0A++++//+five+elements+times+one+byte+per+element%0A++++assert_eq!(5,+s.len()+*+std::mem::size_of::%3Cu8%3E());%0A%7D&edition=2021)\n\nAs always, remember that a human intuition for ‚Äòcharacter‚Äô might not map to Unicode‚Äôs definitions. For example, despite looking similar, the ‚Äò√©‚Äô character is one Unicode code point while ‚ÄòeÃÅ‚Äô is two Unicode code points:\n\n```\nlet mut chars = \"√©\".chars();\n// U+00e9: 'latin small letter e with acute'\nassert_eq!(Some('\\u{00e9}'), chars.next());\nassert_eq!(None, chars.next());\n\nlet mut chars = \"eÃÅ\".chars();\n// U+0065: 'latin small letter e'\nassert_eq!(Some('\\u{0065}'), chars.next());\n// U+0301: 'combining acute accent'\nassert_eq!(Some('\\u{0301}'), chars.next());\nassert_eq!(None, chars.next());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+chars+=+%22%C3%A9%22.chars();%0A++++//+U%2B00e9:+%27latin+small+letter+e+with+acute%27%0A++++assert_eq!(Some(%27%5Cu%7B00e9%7D%27),+chars.next());%0A++++assert_eq!(None,+chars.next());%0A++++%0A++++let+mut+chars+=+%22e%CC%81%22.chars();%0A++++//+U%2B0065:+%27latin+small+letter+e%27%0A++++assert_eq!(Some(%27%5Cu%7B0065%7D%27),+chars.next());%0A++++//+U%2B0301:+%27combining+acute+accent%27%0A++++assert_eq!(Some(%27%5Cu%7B0301%7D%27),+chars.next());%0A++++assert_eq!(None,+chars.next());%0A%7D&edition=2021)\n\nThis means that the contents of the first string above _will_ fit into a `char` while the contents of the second string _will not_. Trying to create a `char` literal with the contents of the second string gives an error:\n\n```text\nerror: character literal may only contain one codepoint: 'eÃÅ'\nlet c = 'eÃÅ';\n        ^^^\n\n```\n\nAnother implication of the 4-byte fixed size of a `char` is that per-`char` processing can end up using a lot more memory:\n\n```\nlet s = String::from(\"love: ‚ù§Ô∏è\");\nlet v: Vec<char> = s.chars().collect();\n\nassert_eq!(12, std::mem::size_of_val(&s[..]));\nassert_eq!(32, std::mem::size_of_val(&v[..]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+String::from(%22love:+%E2%9D%A4%EF%B8%8F%22);%0A++++let+v:+Vec%3Cchar%3E+=+s.chars().collect();%0A++++%0A++++assert_eq!(12,+std::mem::size_of_val(%26s%5B..%5D));%0A++++assert_eq!(32,+std::mem::size_of_val(%26v%5B..%5D));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#10)[¬ß](#impl-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#42)\n\nüî¨This is a nightly-only experimental API. (`char_min`¬†[#114298](https://github.com/rust-lang/rust/issues/114298))\n\nThe lowest valid code point a `char` can have, `'\\0'`.\n\nUnlike integer types, `char` actually has a gap in the middle, meaning that the range of possible `char`s is smaller than you might expect. Ranges of `char` will automatically hop this gap for you:\n\n```\n#![feature(char_min)]\nlet dist = u32::from(char::MAX) - u32::from(char::MIN);\nlet size = (char::MIN..=char::MAX).count() as u32;\nassert!(size < dist);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(char_min)%5D%0Afn+main()+%7B%0A++++let+dist+=+u32::from(char::MAX)+-+u32::from(char::MIN);%0A++++let+size+=+(char::MIN..=char::MAX).count()+as+u32;%0A++++assert!(size+%3C+dist);%0A%7D&version=nightly&edition=2021)\n\nDespite this gap, the `MIN` and [`MAX`](about:blank/primitive.char.html#associatedconstant.MAX \"associated constant char::MAX\") values can be used as bounds for all `char` values.\n\n##### [¬ß](#examples)Examples\n\n```\n#![feature(char_min)]\nlet c: char = something_which_returns_char();\nassert!(char::MIN <= c);\n\nlet value_at_min = u32::from(char::MIN);\nassert_eq!(char::from_u32(value_at_min), Some('\\0'));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(char_min)%5D%0Afn+main()+%7B%0A++++fn+something_which_returns_char()+-%3E+char+%7B+%27a%27+%7D%0A++++let+c:+char+=+something_which_returns_char();%0A++++assert!(char::MIN+%3C=+c);%0A++++%0A++++let+value_at_min+=+u32::from(char::MIN);%0A++++assert_eq!(char::from_u32(value_at_min),+Some(%27%5C0%27));%0A%7D&version=nightly&edition=2021)\n\n1.52.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#75)\n\nThe highest valid code point a `char` can have, `'\\u{10FFFF}'`.\n\nUnlike integer types, `char` actually has a gap in the middle, meaning that the range of possible `char`s is smaller than you might expect. Ranges of `char` will automatically hop this gap for you:\n\n```\n#![feature(char_min)]\nlet dist = u32::from(char::MAX) - u32::from(char::MIN);\nlet size = (char::MIN..=char::MAX).count() as u32;\nassert!(size < dist);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(char_min)%5D%0Afn+main()+%7B%0A++++let+dist+=+u32::from(char::MAX)+-+u32::from(char::MIN);%0A++++let+size+=+(char::MIN..=char::MAX).count()+as+u32;%0A++++assert!(size+%3C+dist);%0A%7D&version=nightly&edition=2021)\n\nDespite this gap, the [`MIN`](about:blank/primitive.char.html#associatedconstant.MIN \"associated constant char::MIN\") and `MAX` values can be used as bounds for all `char` values.\n\n##### [¬ß](#examples-1)Examples\n\n```\nlet c: char = something_which_returns_char();\nassert!(c <= char::MAX);\n\nlet value_at_max = u32::from(char::MAX);\nassert_eq!(char::from_u32(value_at_max), Some('\\u{10FFFF}'));\nassert_eq!(char::from_u32(value_at_max + 1), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+something_which_returns_char()+-%3E+char+%7B+%27a%27+%7D%0A++++let+c:+char+=+something_which_returns_char();%0A++++assert!(c+%3C=+char::MAX);%0A++++%0A++++let+value_at_max+=+u32::from(char::MAX);%0A++++assert_eq!(char::from_u32(value_at_max),+Some(%27%5Cu%7B10FFFF%7D%27));%0A++++assert_eq!(char::from_u32(value_at_max+%2B+1),+None);%0A%7D&edition=2021)\n\n1.52.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#83)\n\n`U+FFFD REPLACEMENT CHARACTER` (ÔøΩ) is used in Unicode to represent a decoding error.\n\nIt can occur, for example, when giving ill-formed UTF-8 bytes to [`String::from_utf8_lossy`](about:blank/std/string/struct.String.html#method.from_utf8_lossy).\n\n1.52.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#96)\n\nThe version of [Unicode](https://www.unicode.org/) that the Unicode parts of `char` and `str` methods are based on.\n\nNew versions of Unicode are released regularly and subsequently all methods in the standard library depending on Unicode are updated. Therefore the behavior of some `char` and `str` methods and the value of this constant changes over time. This is _not_ considered to be a breaking change.\n\nThe version numbering scheme is explained in [Unicode 11.0 or later, Section 3.1 Versions of the Unicode Standard](https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf#page=4).\n\n1.52.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#142)\n\nCreates an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.\n\n##### [¬ß](#examples-2)Examples\n\nBasic usage:\n\n```\n// ùÑûmus<invalid>ic<invalid>\nlet v = [\n    0xD834, 0xDD1E, 0x006d, 0x0075, 0x0073, 0xDD1E, 0x0069, 0x0063, 0xD834,\n];\n\nassert_eq!(\n    char::decode_utf16(v)\n        .map(|r| r.map_err(|e| e.unpaired_surrogate()))\n        .collect::<Vec<_>>(),\n    vec![\n        Ok('ùÑû'),\n        Ok('m'), Ok('u'), Ok('s'),\n        Err(0xDD1E),\n        Ok('i'), Ok('c'),\n        Err(0xD834)\n    ]\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+%F0%9D%84%9Emus%3Cinvalid%3Eic%3Cinvalid%3E%0Afn+main()+%7B%0A++++let+v+=+%5B%0A++++++++0xD834,+0xDD1E,+0x006d,+0x0075,+0x0073,+0xDD1E,+0x0069,+0x0063,+0xD834,%0A++++%5D;%0A++++%0A++++assert_eq!(%0A++++++++char::decode_utf16(v)%0A++++++++++++.map(%7Cr%7C+r.map_err(%7Ce%7C+e.unpaired_surrogate()))%0A++++++++++++.collect::%3CVec%3C_%3E%3E(),%0A++++++++vec!%5B%0A++++++++++++Ok(%27%F0%9D%84%9E%27),%0A++++++++++++Ok(%27m%27),+Ok(%27u%27),+Ok(%27s%27),%0A++++++++++++Err(0xDD1E),%0A++++++++++++Ok(%27i%27),+Ok(%27c%27),%0A++++++++++++Err(0xD834)%0A++++++++%5D%0A++++);%0A%7D&edition=2021)\n\nA lossy decoder can be obtained by replacing `Err` results with the replacement character:\n\n```\n// ùÑûmus<invalid>ic<invalid>\nlet v = [\n    0xD834, 0xDD1E, 0x006d, 0x0075, 0x0073, 0xDD1E, 0x0069, 0x0063, 0xD834,\n];\n\nassert_eq!(\n    char::decode_utf16(v)\n       .map(|r| r.unwrap_or(char::REPLACEMENT_CHARACTER))\n       .collect::<String>(),\n    \"ùÑûmusÔøΩicÔøΩ\"\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+%F0%9D%84%9Emus%3Cinvalid%3Eic%3Cinvalid%3E%0Afn+main()+%7B%0A++++let+v+=+%5B%0A++++++++0xD834,+0xDD1E,+0x006d,+0x0075,+0x0073,+0xDD1E,+0x0069,+0x0063,+0xD834,%0A++++%5D;%0A++++%0A++++assert_eq!(%0A++++++++char::decode_utf16(v)%0A+++++++++++.map(%7Cr%7C+r.unwrap_or(char::REPLACEMENT_CHARACTER))%0A+++++++++++.collect::%3CString%3E(),%0A++++++++%22%F0%9D%84%9Emus%EF%BF%BDic%EF%BF%BD%22%0A++++);%0A%7D&edition=2021)\n\n1.52.0 (const: 1.67.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#188)\n\nConverts a `u32` to a `char`.\n\nNote that all `char`s are valid [`u32`](primitive.u32.html \"primitive u32\")s, and can be cast to one with [`as`](../std/keyword.as.html):\n\n```\nlet c = 'üíØ';\nlet i = c as u32;\n\nassert_eq!(128175, i);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+%27%F0%9F%92%AF%27;%0A++++let+i+=+c+as+u32;%0A++++%0A++++assert_eq!(128175,+i);%0A%7D&edition=2021)\n\nHowever, the reverse is not true: not all valid [`u32`](primitive.u32.html \"primitive u32\")s are valid `char`s. `from_u32()` will return `None` if the input is not a valid value for a `char`.\n\nFor an unsafe version of this function which ignores these checks, see [`from_u32_unchecked`](#method.from_u32_unchecked).\n\n##### [¬ß](#examples-3)Examples\n\nBasic usage:\n\n```\nlet c = char::from_u32(0x2764);\n\nassert_eq!(Some('‚ù§'), c);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+char::from_u32(0x2764);%0A++++%0A++++assert_eq!(Some(%27%E2%9D%A4%27),+c);%0A%7D&edition=2021)\n\nReturning `None` when the input is not a valid `char`:\n\n```\nlet c = char::from_u32(0x110000);\n\nassert_eq!(None, c);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+char::from_u32(0x110000);%0A++++%0A++++assert_eq!(None,+c);%0A%7D&edition=2021)\n\n1.52.0 (const: [unstable](https://github.com/rust-lang/rust/issues/89259 \"Tracking issue for const_char_from_u32_unchecked\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#229)\n\nConverts a `u32` to a `char`, ignoring validity.\n\nNote that all `char`s are valid [`u32`](primitive.u32.html \"primitive u32\")s, and can be cast to one with `as`:\n\n```\nlet c = 'üíØ';\nlet i = c as u32;\n\nassert_eq!(128175, i);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+%27%F0%9F%92%AF%27;%0A++++let+i+=+c+as+u32;%0A++++%0A++++assert_eq!(128175,+i);%0A%7D&edition=2021)\n\nHowever, the reverse is not true: not all valid [`u32`](primitive.u32.html \"primitive u32\")s are valid `char`s. `from_u32_unchecked()` will ignore this, and blindly cast to `char`, possibly creating an invalid one.\n\n##### [¬ß](#safety)Safety\n\nThis function is unsafe, as it may construct invalid `char` values.\n\nFor a safe version of this function, see the [`from_u32`](#method.from_u32) function.\n\n##### [¬ß](#examples-4)Examples\n\nBasic usage:\n\n```\nlet c = unsafe { char::from_u32_unchecked(0x2764) };\n\nassert_eq!('‚ù§', c);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+unsafe+%7B+char::from_u32_unchecked(0x2764)+%7D;%0A++++%0A++++assert_eq!(%27%E2%9D%A4%27,+c);%0A%7D&edition=2021)\n\n1.52.0 (const: 1.67.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#281)\n\nConverts a digit in the given radix to a `char`.\n\nA ‚Äòradix‚Äô here is sometimes also called a ‚Äòbase‚Äô. A radix of two indicates a binary number, a radix of ten, decimal, and a radix of sixteen, hexadecimal, to give some common values. Arbitrary radices are supported.\n\n`from_digit()` will return `None` if the input is not a digit in the given radix.\n\n##### [¬ß](#panics)Panics\n\nPanics if given a radix larger than 36.\n\n##### [¬ß](#examples-5)Examples\n\nBasic usage:\n\n```\nlet c = char::from_digit(4, 10);\n\nassert_eq!(Some('4'), c);\n\n// Decimal 11 is a single digit in base 16\nlet c = char::from_digit(11, 16);\n\nassert_eq!(Some('b'), c);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+char::from_digit(4,+10);%0A++++%0A++++assert_eq!(Some(%274%27),+c);%0A++++%0A++++//+Decimal+11+is+a+single+digit+in+base+16%0A++++let+c+=+char::from_digit(11,+16);%0A++++%0A++++assert_eq!(Some(%27b%27),+c);%0A%7D&edition=2021)\n\nReturning `None` when the input is not a digit:\n\n```\nlet c = char::from_digit(20, 10);\n\nassert_eq!(None, c);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+char::from_digit(20,+10);%0A++++%0A++++assert_eq!(None,+c);%0A%7D&edition=2021)\n\nPassing a large radix, causing a panic:\n\n[‚ìò](# \"This example panics\")\n\n```\n// this panics\nlet _c = char::from_digit(1, 37);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+panics%0Afn+main()+%7B%0A++++let+_c+=+char::from_digit(1,+37);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#327)\n\nChecks if a `char` is a digit in the given radix.\n\nA ‚Äòradix‚Äô here is sometimes also called a ‚Äòbase‚Äô. A radix of two indicates a binary number, a radix of ten, decimal, and a radix of sixteen, hexadecimal, to give some common values. Arbitrary radices are supported.\n\nCompared to [`is_numeric()`](#method.is_numeric), this function only recognizes the characters `0-9`, `a-z` and `A-Z`.\n\n‚ÄòDigit‚Äô is defined to be only the following characters:\n\n-   `0-9`\n-   `a-z`\n-   `A-Z`\n\nFor a more comprehensive understanding of ‚Äòdigit‚Äô, see [`is_numeric()`](#method.is_numeric).\n\n##### [¬ß](#panics-1)Panics\n\nPanics if given a radix larger than 36.\n\n##### [¬ß](#examples-6)Examples\n\nBasic usage:\n\n```\nassert!('1'.is_digit(10));\nassert!('f'.is_digit(16));\nassert!(!'f'.is_digit(10));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(%271%27.is_digit(10));%0A++++assert!(%27f%27.is_digit(16));%0A++++assert!(!%27f%27.is_digit(10));%0A%7D&edition=2021)\n\nPassing a large radix, causing a panic:\n\n[‚ìò](# \"This example panics\")\n\n```\n// this panics\n'1'.is_digit(37);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+panics%0Afn+main()+%7B%0A++++%271%27.is_digit(37);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.67.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#379)\n\nConverts a `char` to a digit in the given radix.\n\nA ‚Äòradix‚Äô here is sometimes also called a ‚Äòbase‚Äô. A radix of two indicates a binary number, a radix of ten, decimal, and a radix of sixteen, hexadecimal, to give some common values. Arbitrary radices are supported.\n\n‚ÄòDigit‚Äô is defined to be only the following characters:\n\n-   `0-9`\n-   `a-z`\n-   `A-Z`\n\n##### [¬ß](#errors)Errors\n\nReturns `None` if the `char` does not refer to a digit in the given radix.\n\n##### [¬ß](#panics-2)Panics\n\nPanics if given a radix larger than 36.\n\n##### [¬ß](#examples-7)Examples\n\nBasic usage:\n\n```\nassert_eq!('1'.to_digit(10), Some(1));\nassert_eq!('f'.to_digit(16), Some(15));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%271%27.to_digit(10),+Some(1));%0A++++assert_eq!(%27f%27.to_digit(16),+Some(15));%0A%7D&edition=2021)\n\nPassing a non-digit results in failure:\n\n```\nassert_eq!('f'.to_digit(10), None);\nassert_eq!('z'.to_digit(16), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%27f%27.to_digit(10),+None);%0A++++assert_eq!(%27z%27.to_digit(16),+None);%0A%7D&edition=2021)\n\nPassing a large radix, causing a panic:\n\n[‚ìò](# \"This example panics\")\n\n```\n// this panics\nlet _ = '1'.to_digit(37);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+panics%0Afn+main()+%7B%0A++++let+_+=+%271%27.to_digit(37);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#432)\n\nReturns an iterator that yields the hexadecimal Unicode escape of a character as `char`s.\n\nThis will escape characters with the Rust syntax of the form `\\u{NNNNNN}` where `NNNNNN` is a hexadecimal representation.\n\n##### [¬ß](#examples-8)Examples\n\nAs an iterator:\n\n```\nfor c in '‚ù§'.escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%27%E2%9D%A4%27.escape_unicode()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&edition=2021)\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", '‚ù§'.escape_unicode());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%27%E2%9D%A4%27.escape_unicode());%0A%7D&edition=2021)\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%5C%5Cu%7B%7B2764%7D%7D%22);%0A%7D&edition=2021)\n\nUsing [`to_string`](about:blank/std/string/trait.ToString.html#tymethod.to_string):\n\n```\nassert_eq!('‚ù§'.escape_unicode().to_string(), \"\\\\u{2764}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%27%E2%9D%A4%27.escape_unicode().to_string(),+%22%5C%5Cu%7B2764%7D%22);%0A%7D&edition=2021)\n\n1.20.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#497)\n\nReturns an iterator that yields the literal escape code of a character as `char`s.\n\nThis will escape the characters similar to the [`Debug`](fmt/trait.Debug.html \"trait std::fmt::Debug\") implementations of `str` or `char`.\n\n##### [¬ß](#examples-9)Examples\n\nAs an iterator:\n\n```\nfor c in '\\n'.escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%27%5Cn%27.escape_debug()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&edition=2021)\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", '\\n'.escape_debug());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%27%5Cn%27.escape_debug());%0A%7D&edition=2021)\n\nBoth are equivalent to:\n\nUsing [`to_string`](about:blank/std/string/trait.ToString.html#tymethod.to_string):\n\n```\nassert_eq!('\\n'.escape_debug().to_string(), \"\\\\n\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%27%5Cn%27.escape_debug().to_string(),+%22%5C%5Cn%22);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#553)\n\nReturns an iterator that yields the literal escape code of a character as `char`s.\n\nThe default is chosen with a bias toward producing literals that are legal in a variety of languages, including C++11 and similar C-family languages. The exact rules are:\n\n-   Tab is escaped as `\\t`.\n-   Carriage return is escaped as `\\r`.\n-   Line feed is escaped as `\\n`.\n-   Single quote is escaped as `\\'`.\n-   Double quote is escaped as `\\\"`.\n-   Backslash is escaped as `\\\\`.\n-   Any character in the ‚Äòprintable ASCII‚Äô range `0x20` .. `0x7e` inclusive is not escaped.\n-   All other characters are given hexadecimal Unicode escapes; see [`escape_unicode`](#method.escape_unicode).\n\n##### [¬ß](#examples-10)Examples\n\nAs an iterator:\n\n```\nfor c in '\"'.escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%27%22%27.escape_default()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&edition=2021)\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", '\"'.escape_default());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%27%22%27.escape_default());%0A%7D&edition=2021)\n\nBoth are equivalent to:\n\nUsing [`to_string`](about:blank/std/string/trait.ToString.html#tymethod.to_string):\n\n```\nassert_eq!('\"'.escape_default().to_string(), \"\\\\\\\"\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%27%22%27.escape_default().to_string(),+%22%5C%5C%5C%22%22);%0A%7D&edition=2021)\n\n1.0.0 (const: 1.52.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#612)\n\nReturns the number of bytes this `char` would need if encoded in UTF-8.\n\nThat number of bytes is always between 1 and 4, inclusive.\n\n##### [¬ß](#examples-11)Examples\n\nBasic usage:\n\n```\nlet len = 'A'.len_utf8();\nassert_eq!(len, 1);\n\nlet len = '√ü'.len_utf8();\nassert_eq!(len, 2);\n\nlet len = '‚Ñù'.len_utf8();\nassert_eq!(len, 3);\n\nlet len = 'üí£'.len_utf8();\nassert_eq!(len, 4);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+len+=+%27A%27.len_utf8();%0A++++assert_eq!(len,+1);%0A++++%0A++++let+len+=+%27%C3%9F%27.len_utf8();%0A++++assert_eq!(len,+2);%0A++++%0A++++let+len+=+%27%E2%84%9D%27.len_utf8();%0A++++assert_eq!(len,+3);%0A++++%0A++++let+len+=+%27%F0%9F%92%A3%27.len_utf8();%0A++++assert_eq!(len,+4);%0A%7D&edition=2021)\n\nThe `&str` type guarantees that its contents are UTF-8, and so we can compare the length it would take if each code point was represented as a `char` vs in the `&str` itself:\n\n```\n// as chars\nlet eastern = 'Êù±';\nlet capital = '‰∫¨';\n\n// both can be represented as three bytes\nassert_eq!(3, eastern.len_utf8());\nassert_eq!(3, capital.len_utf8());\n\n// as a &str, these two are encoded in UTF-8\nlet tokyo = \"Êù±‰∫¨\";\n\nlet len = eastern.len_utf8() + capital.len_utf8();\n\n// we can see that they take six bytes total...\nassert_eq!(6, tokyo.len());\n\n// ... just like the &str\nassert_eq!(len, tokyo.len());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+as+chars%0Afn+main()+%7B%0A++++let+eastern+=+%27%E6%9D%B1%27;%0A++++let+capital+=+%27%E4%BA%AC%27;%0A++++%0A++++//+both+can+be+represented+as+three+bytes%0A++++assert_eq!(3,+eastern.len_utf8());%0A++++assert_eq!(3,+capital.len_utf8());%0A++++%0A++++//+as+a+%26str,+these+two+are+encoded+in+UTF-8%0A++++let+tokyo+=+%22%E6%9D%B1%E4%BA%AC%22;%0A++++%0A++++let+len+=+eastern.len_utf8()+%2B+capital.len_utf8();%0A++++%0A++++//+we+can+see+that+they+take+six+bytes+total...%0A++++assert_eq!(6,+tokyo.len());%0A++++%0A++++//+...+just+like+the+%26str%0A++++assert_eq!(len,+tokyo.len());%0A%7D&edition=2021)\n\n1.0.0 (const: 1.52.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#643)\n\nReturns the number of 16-bit code units this `char` would need if encoded in UTF-16.\n\nThat number of code units is always either 1 or 2, for unicode scalar values in the [basic multilingual plane](http://www.unicode.org/glossary/#basic_multilingual_plane) or [supplementary planes](http://www.unicode.org/glossary/#supplementary_planes) respectively.\n\nSee the documentation for [`len_utf8()`](#method.len_utf8) for more explanation of this concept. This function is a mirror, but for UTF-16 instead of UTF-8.\n\n##### [¬ß](#examples-12)Examples\n\nBasic usage:\n\n```\nlet n = '√ü'.len_utf16();\nassert_eq!(n, 1);\n\nlet len = 'üí£'.len_utf16();\nassert_eq!(len, 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+n+=+%27%C3%9F%27.len_utf16();%0A++++assert_eq!(n,+1);%0A++++%0A++++let+len+=+%27%F0%9F%92%A3%27.len_utf16();%0A++++assert_eq!(len,+2);%0A%7D&edition=2021)\n\n1.15.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#680)\n\nEncodes this character as UTF-8 into the provided byte buffer, and then returns the subslice of the buffer that contains the encoded character.\n\n##### [¬ß](#panics-3)Panics\n\nPanics if the buffer is not large enough. A buffer of length four is large enough to encode any `char`.\n\n##### [¬ß](#examples-13)Examples\n\nIn both of these examples, ‚Äò√ü‚Äô takes two bytes to encode.\n\n```\nlet mut b = [0; 2];\n\nlet result = '√ü'.encode_utf8(&mut b);\n\nassert_eq!(result, \"√ü\");\n\nassert_eq!(result.len(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+b+=+%5B0;+2%5D;%0A++++%0A++++let+result+=+%27%C3%9F%27.encode_utf8(%26mut+b);%0A++++%0A++++assert_eq!(result,+%22%C3%9F%22);%0A++++%0A++++assert_eq!(result.len(),+2);%0A%7D&edition=2021)\n\nA buffer that‚Äôs too small:\n\n[‚ìò](# \"This example panics\")\n\n```\nlet mut b = [0; 1];\n\n// this panics\n'√ü'.encode_utf8(&mut b);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+b+=+%5B0;+1%5D;%0A++++%0A++++//+this+panics%0A++++%27%C3%9F%27.encode_utf8(%26mut+b);%0A%7D&edition=2021)\n\n1.15.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#715)\n\nEncodes this character as UTF-16 into the provided `u16` buffer, and then returns the subslice of the buffer that contains the encoded character.\n\n##### [¬ß](#panics-4)Panics\n\nPanics if the buffer is not large enough. A buffer of length 2 is large enough to encode any `char`.\n\n##### [¬ß](#examples-14)Examples\n\nIn both of these examples, ‚Äòùïä‚Äô takes two `u16`s to encode.\n\n```\nlet mut b = [0; 2];\n\nlet result = 'ùïä'.encode_utf16(&mut b);\n\nassert_eq!(result.len(), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+b+=+%5B0;+2%5D;%0A++++%0A++++let+result+=+%27%F0%9D%95%8A%27.encode_utf16(%26mut+b);%0A++++%0A++++assert_eq!(result.len(),+2);%0A%7D&edition=2021)\n\nA buffer that‚Äôs too small:\n\n[‚ìò](# \"This example panics\")\n\n```\nlet mut b = [0; 1];\n\n// this panics\n'ùïä'.encode_utf16(&mut b);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+b+=+%5B0;+1%5D;%0A++++%0A++++//+this+panics%0A++++%27%F0%9D%95%8A%27.encode_utf16(%26mut+b);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#743)\n\nReturns `true` if this `char` has the `Alphabetic` property.\n\n`Alphabetic` is described in Chapter 4 (Character Properties) of the [Unicode Standard](https://www.unicode.org/versions/latest/) and specified in the [Unicode Character Database](https://www.unicode.org/reports/tr44/) [`DerivedCoreProperties.txt`](https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt).\n\n##### [¬ß](#examples-15)Examples\n\nBasic usage:\n\n```\nassert!('a'.is_alphabetic());\nassert!('‰∫¨'.is_alphabetic());\n\nlet c = 'üíù';\n// love is many things, but it is not alphabetic\nassert!(!c.is_alphabetic());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(%27a%27.is_alphabetic());%0A++++assert!(%27%E4%BA%AC%27.is_alphabetic());%0A++++%0A++++let+c+=+%27%F0%9F%92%9D%27;%0A++++//+love+is+many+things,+but+it+is+not+alphabetic%0A++++assert!(!c.is_alphabetic());%0A%7D&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/101400 \"Tracking issue for const_unicode_case_lookup\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#785)\n\nReturns `true` if this `char` has the `Lowercase` property.\n\n`Lowercase` is described in Chapter 4 (Character Properties) of the [Unicode Standard](https://www.unicode.org/versions/latest/) and specified in the [Unicode Character Database](https://www.unicode.org/reports/tr44/) [`DerivedCoreProperties.txt`](https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt).\n\n##### [¬ß](#examples-16)Examples\n\nBasic usage:\n\n```\nassert!('a'.is_lowercase());\nassert!('Œ¥'.is_lowercase());\nassert!(!'A'.is_lowercase());\nassert!(!'Œî'.is_lowercase());\n\n// The various Chinese scripts and punctuation do not have case, and so:\nassert!(!'‰∏≠'.is_lowercase());\nassert!(!' '.is_lowercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(%27a%27.is_lowercase());%0A++++assert!(%27%CE%B4%27.is_lowercase());%0A++++assert!(!%27A%27.is_lowercase());%0A++++assert!(!%27%CE%94%27.is_lowercase());%0A++++%0A++++//+The+various+Chinese+scripts+and+punctuation+do+not+have+case,+and+so:%0A++++assert!(!%27%E4%B8%AD%27.is_lowercase());%0A++++assert!(!%27+%27.is_lowercase());%0A%7D&edition=2021)\n\nIn a const context:\n\n```\n#![feature(const_unicode_case_lookup)]\nconst CAPITAL_DELTA_IS_LOWERCASE: bool = 'Œî'.is_lowercase();\nassert!(!CAPITAL_DELTA_IS_LOWERCASE);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_unicode_case_lookup)%5D%0Afn+main()+%7B%0A++++const+CAPITAL_DELTA_IS_LOWERCASE:+bool+=+%27%CE%94%27.is_lowercase();%0A++++assert!(!CAPITAL_DELTA_IS_LOWERCASE);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/101400 \"Tracking issue for const_unicode_case_lookup\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#827)\n\nReturns `true` if this `char` has the `Uppercase` property.\n\n`Uppercase` is described in Chapter 4 (Character Properties) of the [Unicode Standard](https://www.unicode.org/versions/latest/) and specified in the [Unicode Character Database](https://www.unicode.org/reports/tr44/) [`DerivedCoreProperties.txt`](https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt).\n\n##### [¬ß](#examples-17)Examples\n\nBasic usage:\n\n```\nassert!(!'a'.is_uppercase());\nassert!(!'Œ¥'.is_uppercase());\nassert!('A'.is_uppercase());\nassert!('Œî'.is_uppercase());\n\n// The various Chinese scripts and punctuation do not have case, and so:\nassert!(!'‰∏≠'.is_uppercase());\nassert!(!' '.is_uppercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(!%27a%27.is_uppercase());%0A++++assert!(!%27%CE%B4%27.is_uppercase());%0A++++assert!(%27A%27.is_uppercase());%0A++++assert!(%27%CE%94%27.is_uppercase());%0A++++%0A++++//+The+various+Chinese+scripts+and+punctuation+do+not+have+case,+and+so:%0A++++assert!(!%27%E4%B8%AD%27.is_uppercase());%0A++++assert!(!%27+%27.is_uppercase());%0A%7D&edition=2021)\n\nIn a const context:\n\n```\n#![feature(const_unicode_case_lookup)]\nconst CAPITAL_DELTA_IS_UPPERCASE: bool = 'Œî'.is_uppercase();\nassert!(CAPITAL_DELTA_IS_UPPERCASE);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_unicode_case_lookup)%5D%0Afn+main()+%7B%0A++++const+CAPITAL_DELTA_IS_UPPERCASE:+bool+=+%27%CE%94%27.is_uppercase();%0A++++assert!(CAPITAL_DELTA_IS_UPPERCASE);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#859)\n\nReturns `true` if this `char` has the `White_Space` property.\n\n`White_Space` is specified in the [Unicode Character Database](https://www.unicode.org/reports/tr44/) [`PropList.txt`](https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt).\n\n##### [¬ß](#examples-18)Examples\n\nBasic usage:\n\n```\nassert!(' '.is_whitespace());\n\n// line break\nassert!('\\n'.is_whitespace());\n\n// a non-breaking space\nassert!('\\u{A0}'.is_whitespace());\n\nassert!(!'Ë∂ä'.is_whitespace());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(%27+%27.is_whitespace());%0A++++%0A++++//+line+break%0A++++assert!(%27%5Cn%27.is_whitespace());%0A++++%0A++++//+a+non-breaking+space%0A++++assert!(%27%5Cu%7BA0%7D%27.is_whitespace());%0A++++%0A++++assert!(!%27%E8%B6%8A%27.is_whitespace());%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#888)\n\nReturns `true` if this `char` satisfies either [`is_alphabetic()`](#method.is_alphabetic) or [`is_numeric()`](#method.is_numeric).\n\n##### [¬ß](#examples-19)Examples\n\nBasic usage:\n\n```\nassert!('Ÿ£'.is_alphanumeric());\nassert!('7'.is_alphanumeric());\nassert!('‡ß¨'.is_alphanumeric());\nassert!('¬æ'.is_alphanumeric());\nassert!('‚ë†'.is_alphanumeric());\nassert!('K'.is_alphanumeric());\nassert!('Ÿà'.is_alphanumeric());\nassert!('Ëóè'.is_alphanumeric());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(%27%D9%A3%27.is_alphanumeric());%0A++++assert!(%277%27.is_alphanumeric());%0A++++assert!(%27%E0%A7%AC%27.is_alphanumeric());%0A++++assert!(%27%C2%BE%27.is_alphanumeric());%0A++++assert!(%27%E2%91%A0%27.is_alphanumeric());%0A++++assert!(%27K%27.is_alphanumeric());%0A++++assert!(%27%D9%88%27.is_alphanumeric());%0A++++assert!(%27%E8%97%8F%27.is_alphanumeric());%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#914)\n\nReturns `true` if this `char` has the general category for control codes.\n\nControl codes (code points with the general category of `Cc`) are described in Chapter 4 (Character Properties) of the [Unicode Standard](https://www.unicode.org/versions/latest/) and specified in the [Unicode Character Database](https://www.unicode.org/reports/tr44/) [`UnicodeData.txt`](https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt).\n\n##### [¬ß](#examples-20)Examples\n\nBasic usage:\n\n```\n// U+009C, STRING TERMINATOR\nassert!('¬ú'.is_control());\nassert!(!'q'.is_control());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+U%2B009C,+STRING+TERMINATOR%0Afn+main()+%7B%0A++++assert!(%27%C2%9C%27.is_control());%0A++++assert!(!%27q%27.is_control());%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#969)\n\nReturns `true` if this `char` has one of the general categories for numbers.\n\nThe general categories for numbers (`Nd` for decimal digits, `Nl` for letter-like numeric characters, and `No` for other numeric characters) are specified in the [Unicode Character Database](https://www.unicode.org/reports/tr44/) [`UnicodeData.txt`](https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt).\n\nThis method doesn‚Äôt cover everything that could be considered a number, e.g. ideographic numbers like ‚Äò‰∏â‚Äô. If you want everything including characters with overlapping purposes then you might want to use a unicode or language-processing library that exposes the appropriate character properties instead of looking at the unicode categories.\n\nIf you want to parse ASCII decimal digits (0-9) or ASCII base-N, use `is_ascii_digit` or `is_digit` instead.\n\n##### [¬ß](#examples-21)Examples\n\nBasic usage:\n\n```\nassert!('Ÿ£'.is_numeric());\nassert!('7'.is_numeric());\nassert!('‡ß¨'.is_numeric());\nassert!('¬æ'.is_numeric());\nassert!('‚ë†'.is_numeric());\nassert!(!'K'.is_numeric());\nassert!(!'Ÿà'.is_numeric());\nassert!(!'Ëóè'.is_numeric());\nassert!(!'‰∏â'.is_numeric());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(%27%D9%A3%27.is_numeric());%0A++++assert!(%277%27.is_numeric());%0A++++assert!(%27%E0%A7%AC%27.is_numeric());%0A++++assert!(%27%C2%BE%27.is_numeric());%0A++++assert!(%27%E2%91%A0%27.is_numeric());%0A++++assert!(!%27K%27.is_numeric());%0A++++assert!(!%27%D9%88%27.is_numeric());%0A++++assert!(!%27%E8%97%8F%27.is_numeric());%0A++++assert!(!%27%E4%B8%89%27.is_numeric());%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1039)\n\nReturns an iterator that yields the lowercase mapping of this `char` as one or more `char`s.\n\nIf this `char` does not have a lowercase mapping, the iterator yields the same `char`.\n\nIf this `char` has a one-to-one lowercase mapping given by the [Unicode Character Database](https://www.unicode.org/reports/tr44/) [`UnicodeData.txt`](https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt), the iterator yields that `char`.\n\nIf this `char` requires special considerations (e.g. multiple `char`s) the iterator yields the `char`(s) given by [`SpecialCasing.txt`](https://www.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt).\n\nThis operation performs an unconditional mapping without tailoring. That is, the conversion is independent of context and language.\n\nIn the [Unicode Standard](https://www.unicode.org/versions/latest/), Chapter 4 (Character Properties) discusses case mapping in general and Chapter 3 (Conformance) discusses the default algorithm for case conversion.\n\n##### [¬ß](#examples-22)Examples\n\nAs an iterator:\n\n```\nfor c in 'ƒ∞'.to_lowercase() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%27%C4%B0%27.to_lowercase()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&edition=2021)\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", 'ƒ∞'.to_lowercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%27%C4%B0%27.to_lowercase());%0A%7D&edition=2021)\n\nBoth are equivalent to:\n\nUsing [`to_string`](about:blank/std/string/trait.ToString.html#tymethod.to_string):\n\n```\nassert_eq!('C'.to_lowercase().to_string(), \"c\");\n\n// Sometimes the result is more than one character:\nassert_eq!('ƒ∞'.to_lowercase().to_string(), \"i\\u{307}\");\n\n// Characters that do not have both uppercase and lowercase\n// convert into themselves.\nassert_eq!('Â±±'.to_lowercase().to_string(), \"Â±±\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%27C%27.to_lowercase().to_string(),+%22c%22);%0A++++%0A++++//+Sometimes+the+result+is+more+than+one+character:%0A++++assert_eq!(%27%C4%B0%27.to_lowercase().to_string(),+%22i%5Cu%7B307%7D%22);%0A++++%0A++++//+Characters+that+do+not+have+both+uppercase+and+lowercase%0A++++//+convert+into+themselves.%0A++++assert_eq!(%27%E5%B1%B1%27.to_lowercase().to_string(),+%22%E5%B1%B1%22);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1131)\n\nReturns an iterator that yields the uppercase mapping of this `char` as one or more `char`s.\n\nIf this `char` does not have an uppercase mapping, the iterator yields the same `char`.\n\nIf this `char` has a one-to-one uppercase mapping given by the [Unicode Character Database](https://www.unicode.org/reports/tr44/) [`UnicodeData.txt`](https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt), the iterator yields that `char`.\n\nIf this `char` requires special considerations (e.g. multiple `char`s) the iterator yields the `char`(s) given by [`SpecialCasing.txt`](https://www.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt).\n\nThis operation performs an unconditional mapping without tailoring. That is, the conversion is independent of context and language.\n\nIn the [Unicode Standard](https://www.unicode.org/versions/latest/), Chapter 4 (Character Properties) discusses case mapping in general and Chapter 3 (Conformance) discusses the default algorithm for case conversion.\n\n##### [¬ß](#examples-23)Examples\n\nAs an iterator:\n\n```\nfor c in '√ü'.to_uppercase() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+%27%C3%9F%27.to_uppercase()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&edition=2021)\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", '√ü'.to_uppercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+%27%C3%9F%27.to_uppercase());%0A%7D&edition=2021)\n\nBoth are equivalent to:\n\nUsing [`to_string`](about:blank/std/string/trait.ToString.html#tymethod.to_string):\n\n```\nassert_eq!('c'.to_uppercase().to_string(), \"C\");\n\n// Sometimes the result is more than one character:\nassert_eq!('√ü'.to_uppercase().to_string(), \"SS\");\n\n// Characters that do not have both uppercase and lowercase\n// convert into themselves.\nassert_eq!('Â±±'.to_uppercase().to_string(), \"Â±±\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%27c%27.to_uppercase().to_string(),+%22C%22);%0A++++%0A++++//+Sometimes+the+result+is+more+than+one+character:%0A++++assert_eq!(%27%C3%9F%27.to_uppercase().to_string(),+%22SS%22);%0A++++%0A++++//+Characters+that+do+not+have+both+uppercase+and+lowercase%0A++++//+convert+into+themselves.%0A++++assert_eq!(%27%E5%B1%B1%27.to_uppercase().to_string(),+%22%E5%B1%B1%22);%0A%7D&edition=2021)\n\n##### [¬ß](#note-on-locale)Note on locale\n\nIn Turkish, the equivalent of ‚Äòi‚Äô in Latin has five forms instead of two:\n\n-   ‚ÄòDotless‚Äô: I / ƒ±, sometimes written √Ø\n-   ‚ÄòDotted‚Äô: ƒ∞ / i\n\nNote that the lowercase dotted ‚Äòi‚Äô is the same as the Latin. Therefore:\n\n```\nlet upper_i = 'i'.to_uppercase().to_string();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+upper_i+=+%27i%27.to_uppercase().to_string();%0A%7D&edition=2021)\n\nThe value of `upper_i` here relies on the language of the text: if we‚Äôre in `en-US`, it should be `\"I\"`, but if we‚Äôre in `tr_TR`, it should be `\"ƒ∞\"`. `to_uppercase()` does not take this into account, and so:\n\n```\nlet upper_i = 'i'.to_uppercase().to_string();\n\nassert_eq!(upper_i, \"I\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+upper_i+=+%27i%27.to_uppercase().to_string();%0A++++%0A++++assert_eq!(upper_i,+%22I%22);%0A%7D&edition=2021)\n\nholds across languages.\n\n1.23.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1150)\n\nChecks if the value is within the ASCII range.\n\n##### [¬ß](#examples-24)Examples\n\n```\nlet ascii = 'a';\nlet non_ascii = '‚ù§';\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ascii+=+%27a%27;%0A++++let+non_ascii+=+%27%E2%9D%A4%27;%0A++++%0A++++assert!(ascii.is_ascii());%0A++++assert!(!non_ascii.is_ascii());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1163)\n\nüî¨This is a nightly-only experimental API. (`ascii_char`¬†[#110998](https://github.com/rust-lang/rust/issues/110998))\n\nReturns `Some` if the value is within the ASCII range, or `None` if it‚Äôs not.\n\nThis is preferred to [`Self::is_ascii`](about:blank/primitive.char.html#method.is_ascii \"method char::is_ascii\") when you‚Äôre passing the value along to something else that can take [`ascii::Char`](ascii/enum.Char.html \"enum std::ascii::Char\") rather than needing to check again for itself whether the value is in ASCII.\n\n1.23.0 (const: 1.52.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1198)\n\nMakes a copy of the value in its ASCII upper case equivalent.\n\nASCII letters ‚Äòa‚Äô to ‚Äòz‚Äô are mapped to ‚ÄòA‚Äô to ‚ÄòZ‚Äô, but non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase()`](#method.make_ascii_uppercase).\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use [`to_uppercase()`](#method.to_uppercase).\n\n##### [¬ß](#examples-25)Examples\n\n```\nlet ascii = 'a';\nlet non_ascii = '‚ù§';\n\nassert_eq!('A', ascii.to_ascii_uppercase());\nassert_eq!('‚ù§', non_ascii.to_ascii_uppercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ascii+=+%27a%27;%0A++++let+non_ascii+=+%27%E2%9D%A4%27;%0A++++%0A++++assert_eq!(%27A%27,+ascii.to_ascii_uppercase());%0A++++assert_eq!(%27%E2%9D%A4%27,+non_ascii.to_ascii_uppercase());%0A%7D&edition=2021)\n\n1.23.0 (const: 1.52.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1232)\n\nMakes a copy of the value in its ASCII lower case equivalent.\n\nASCII letters ‚ÄòA‚Äô to ‚ÄòZ‚Äô are mapped to ‚Äòa‚Äô to ‚Äòz‚Äô, but non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase()`](#method.make_ascii_lowercase).\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use [`to_lowercase()`](#method.to_lowercase).\n\n##### [¬ß](#examples-26)Examples\n\n```\nlet ascii = 'A';\nlet non_ascii = '‚ù§';\n\nassert_eq!('a', ascii.to_ascii_lowercase());\nassert_eq!('‚ù§', non_ascii.to_ascii_lowercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ascii+=+%27A%27;%0A++++let+non_ascii+=+%27%E2%9D%A4%27;%0A++++%0A++++assert_eq!(%27a%27,+ascii.to_ascii_lowercase());%0A++++assert_eq!(%27%E2%9D%A4%27,+non_ascii.to_ascii_lowercase());%0A%7D&edition=2021)\n\n1.23.0 (const: 1.52.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1260)\n\nChecks that two values are an ASCII case-insensitive match.\n\nEquivalent to `[to_ascii_lowercase](#method.to_ascii_lowercase)(a) == [to_ascii_lowercase](#method.to_ascii_lowercase)(b)`.\n\n##### [¬ß](#examples-27)Examples\n\n```\nlet upper_a = 'A';\nlet lower_a = 'a';\nlet lower_z = 'z';\n\nassert!(upper_a.eq_ignore_ascii_case(&lower_a));\nassert!(upper_a.eq_ignore_ascii_case(&upper_a));\nassert!(!upper_a.eq_ignore_ascii_case(&lower_z));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+upper_a+=+%27A%27;%0A++++let+lower_a+=+%27a%27;%0A++++let+lower_z+=+%27z%27;%0A++++%0A++++assert!(upper_a.eq_ignore_ascii_case(%26lower_a));%0A++++assert!(upper_a.eq_ignore_ascii_case(%26upper_a));%0A++++assert!(!upper_a.eq_ignore_ascii_case(%26lower_z));%0A%7D&edition=2021)\n\n1.23.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1285)\n\nConverts this type to its ASCII upper case equivalent in-place.\n\nASCII letters ‚Äòa‚Äô to ‚Äòz‚Äô are mapped to ‚ÄòA‚Äô to ‚ÄòZ‚Äô, but non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use [`to_ascii_uppercase()`](#method.to_ascii_uppercase).\n\n##### [¬ß](#examples-28)Examples\n\n```\nlet mut ascii = 'a';\n\nascii.make_ascii_uppercase();\n\nassert_eq!('A', ascii);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+ascii+=+%27a%27;%0A++++%0A++++ascii.make_ascii_uppercase();%0A++++%0A++++assert_eq!(%27A%27,+ascii);%0A%7D&edition=2021)\n\n1.23.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1310)\n\nConverts this type to its ASCII lower case equivalent in-place.\n\nASCII letters ‚ÄòA‚Äô to ‚ÄòZ‚Äô are mapped to ‚Äòa‚Äô to ‚Äòz‚Äô, but non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use [`to_ascii_lowercase()`](#method.to_ascii_lowercase).\n\n##### [¬ß](#examples-29)Examples\n\n```\nlet mut ascii = 'A';\n\nascii.make_ascii_lowercase();\n\nassert_eq!('a', ascii);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+ascii+=+%27A%27;%0A++++%0A++++ascii.make_ascii_lowercase();%0A++++%0A++++assert_eq!(%27a%27,+ascii);%0A%7D&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1346)\n\nChecks if the value is an ASCII alphabetic character:\n\n-   U+0041 ‚ÄòA‚Äô ..= U+005A ‚ÄòZ‚Äô, or\n-   U+0061 ‚Äòa‚Äô ..= U+007A ‚Äòz‚Äô.\n\n##### [¬ß](#examples-30)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(uppercase_a.is_ascii_alphabetic());\nassert!(uppercase_g.is_ascii_alphabetic());\nassert!(a.is_ascii_alphabetic());\nassert!(g.is_ascii_alphabetic());\nassert!(!zero.is_ascii_alphabetic());\nassert!(!percent.is_ascii_alphabetic());\nassert!(!space.is_ascii_alphabetic());\nassert!(!lf.is_ascii_alphabetic());\nassert!(!esc.is_ascii_alphabetic());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(uppercase_a.is_ascii_alphabetic());%0A++++assert!(uppercase_g.is_ascii_alphabetic());%0A++++assert!(a.is_ascii_alphabetic());%0A++++assert!(g.is_ascii_alphabetic());%0A++++assert!(!zero.is_ascii_alphabetic());%0A++++assert!(!percent.is_ascii_alphabetic());%0A++++assert!(!space.is_ascii_alphabetic());%0A++++assert!(!lf.is_ascii_alphabetic());%0A++++assert!(!esc.is_ascii_alphabetic());%0A%7D&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1380)\n\nChecks if the value is an ASCII uppercase character: U+0041 ‚ÄòA‚Äô ..= U+005A ‚ÄòZ‚Äô.\n\n##### [¬ß](#examples-31)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(uppercase_a.is_ascii_uppercase());\nassert!(uppercase_g.is_ascii_uppercase());\nassert!(!a.is_ascii_uppercase());\nassert!(!g.is_ascii_uppercase());\nassert!(!zero.is_ascii_uppercase());\nassert!(!percent.is_ascii_uppercase());\nassert!(!space.is_ascii_uppercase());\nassert!(!lf.is_ascii_uppercase());\nassert!(!esc.is_ascii_uppercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(uppercase_a.is_ascii_uppercase());%0A++++assert!(uppercase_g.is_ascii_uppercase());%0A++++assert!(!a.is_ascii_uppercase());%0A++++assert!(!g.is_ascii_uppercase());%0A++++assert!(!zero.is_ascii_uppercase());%0A++++assert!(!percent.is_ascii_uppercase());%0A++++assert!(!space.is_ascii_uppercase());%0A++++assert!(!lf.is_ascii_uppercase());%0A++++assert!(!esc.is_ascii_uppercase());%0A%7D&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1414)\n\nChecks if the value is an ASCII lowercase character: U+0061 ‚Äòa‚Äô ..= U+007A ‚Äòz‚Äô.\n\n##### [¬ß](#examples-32)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(!uppercase_a.is_ascii_lowercase());\nassert!(!uppercase_g.is_ascii_lowercase());\nassert!(a.is_ascii_lowercase());\nassert!(g.is_ascii_lowercase());\nassert!(!zero.is_ascii_lowercase());\nassert!(!percent.is_ascii_lowercase());\nassert!(!space.is_ascii_lowercase());\nassert!(!lf.is_ascii_lowercase());\nassert!(!esc.is_ascii_lowercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(!uppercase_a.is_ascii_lowercase());%0A++++assert!(!uppercase_g.is_ascii_lowercase());%0A++++assert!(a.is_ascii_lowercase());%0A++++assert!(g.is_ascii_lowercase());%0A++++assert!(!zero.is_ascii_lowercase());%0A++++assert!(!percent.is_ascii_lowercase());%0A++++assert!(!space.is_ascii_lowercase());%0A++++assert!(!lf.is_ascii_lowercase());%0A++++assert!(!esc.is_ascii_lowercase());%0A%7D&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1451)\n\nChecks if the value is an ASCII alphanumeric character:\n\n-   U+0041 ‚ÄòA‚Äô ..= U+005A ‚ÄòZ‚Äô, or\n-   U+0061 ‚Äòa‚Äô ..= U+007A ‚Äòz‚Äô, or\n-   U+0030 ‚Äò0‚Äô ..= U+0039 ‚Äò9‚Äô.\n\n##### [¬ß](#examples-33)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(uppercase_a.is_ascii_alphanumeric());\nassert!(uppercase_g.is_ascii_alphanumeric());\nassert!(a.is_ascii_alphanumeric());\nassert!(g.is_ascii_alphanumeric());\nassert!(zero.is_ascii_alphanumeric());\nassert!(!percent.is_ascii_alphanumeric());\nassert!(!space.is_ascii_alphanumeric());\nassert!(!lf.is_ascii_alphanumeric());\nassert!(!esc.is_ascii_alphanumeric());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(uppercase_a.is_ascii_alphanumeric());%0A++++assert!(uppercase_g.is_ascii_alphanumeric());%0A++++assert!(a.is_ascii_alphanumeric());%0A++++assert!(g.is_ascii_alphanumeric());%0A++++assert!(zero.is_ascii_alphanumeric());%0A++++assert!(!percent.is_ascii_alphanumeric());%0A++++assert!(!space.is_ascii_alphanumeric());%0A++++assert!(!lf.is_ascii_alphanumeric());%0A++++assert!(!esc.is_ascii_alphanumeric());%0A%7D&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1485)\n\nChecks if the value is an ASCII decimal digit: U+0030 ‚Äò0‚Äô ..= U+0039 ‚Äò9‚Äô.\n\n##### [¬ß](#examples-34)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(!uppercase_a.is_ascii_digit());\nassert!(!uppercase_g.is_ascii_digit());\nassert!(!a.is_ascii_digit());\nassert!(!g.is_ascii_digit());\nassert!(zero.is_ascii_digit());\nassert!(!percent.is_ascii_digit());\nassert!(!space.is_ascii_digit());\nassert!(!lf.is_ascii_digit());\nassert!(!esc.is_ascii_digit());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(!uppercase_a.is_ascii_digit());%0A++++assert!(!uppercase_g.is_ascii_digit());%0A++++assert!(!a.is_ascii_digit());%0A++++assert!(!g.is_ascii_digit());%0A++++assert!(zero.is_ascii_digit());%0A++++assert!(!percent.is_ascii_digit());%0A++++assert!(!space.is_ascii_digit());%0A++++assert!(!lf.is_ascii_digit());%0A++++assert!(!esc.is_ascii_digit());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1517)\n\nüî¨This is a nightly-only experimental API. (`is_ascii_octdigit`¬†[#101288](https://github.com/rust-lang/rust/issues/101288))\n\nChecks if the value is an ASCII octal digit: U+0030 ‚Äò0‚Äô ..= U+0037 ‚Äò7‚Äô.\n\n##### [¬ß](#examples-35)Examples\n\n```\n#![feature(is_ascii_octdigit)]\n\nlet uppercase_a = 'A';\nlet a = 'a';\nlet zero = '0';\nlet seven = '7';\nlet nine = '9';\nlet percent = '%';\nlet lf = '\\n';\n\nassert!(!uppercase_a.is_ascii_octdigit());\nassert!(!a.is_ascii_octdigit());\nassert!(zero.is_ascii_octdigit());\nassert!(seven.is_ascii_octdigit());\nassert!(!nine.is_ascii_octdigit());\nassert!(!percent.is_ascii_octdigit());\nassert!(!lf.is_ascii_octdigit());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(is_ascii_octdigit)%5D%0A%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+a+=+%27a%27;%0A++++let+zero+=+%270%27;%0A++++let+seven+=+%277%27;%0A++++let+nine+=+%279%27;%0A++++let+percent+=+%27%25%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++%0A++++assert!(!uppercase_a.is_ascii_octdigit());%0A++++assert!(!a.is_ascii_octdigit());%0A++++assert!(zero.is_ascii_octdigit());%0A++++assert!(seven.is_ascii_octdigit());%0A++++assert!(!nine.is_ascii_octdigit());%0A++++assert!(!percent.is_ascii_octdigit());%0A++++assert!(!lf.is_ascii_octdigit());%0A%7D&version=nightly&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1554)\n\nChecks if the value is an ASCII hexadecimal digit:\n\n-   U+0030 ‚Äò0‚Äô ..= U+0039 ‚Äò9‚Äô, or\n-   U+0041 ‚ÄòA‚Äô ..= U+0046 ‚ÄòF‚Äô, or\n-   U+0061 ‚Äòa‚Äô ..= U+0066 ‚Äòf‚Äô.\n\n##### [¬ß](#examples-36)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(uppercase_a.is_ascii_hexdigit());\nassert!(!uppercase_g.is_ascii_hexdigit());\nassert!(a.is_ascii_hexdigit());\nassert!(!g.is_ascii_hexdigit());\nassert!(zero.is_ascii_hexdigit());\nassert!(!percent.is_ascii_hexdigit());\nassert!(!space.is_ascii_hexdigit());\nassert!(!lf.is_ascii_hexdigit());\nassert!(!esc.is_ascii_hexdigit());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(uppercase_a.is_ascii_hexdigit());%0A++++assert!(!uppercase_g.is_ascii_hexdigit());%0A++++assert!(a.is_ascii_hexdigit());%0A++++assert!(!g.is_ascii_hexdigit());%0A++++assert!(zero.is_ascii_hexdigit());%0A++++assert!(!percent.is_ascii_hexdigit());%0A++++assert!(!space.is_ascii_hexdigit());%0A++++assert!(!lf.is_ascii_hexdigit());%0A++++assert!(!esc.is_ascii_hexdigit());%0A%7D&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1592)\n\nChecks if the value is an ASCII punctuation character:\n\n-   U+0021 ..= U+002F `! \" # $ % & ' ( ) * + , - . /`, or\n-   U+003A ..= U+0040 `: ; < = > ? @`, or\n-   U+005B ..= U+0060 ``[ \\ ] ^ _ ` `` , or\n-   U+007B ..= U+007E `{ | } ~`\n\n##### [¬ß](#examples-37)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(!uppercase_a.is_ascii_punctuation());\nassert!(!uppercase_g.is_ascii_punctuation());\nassert!(!a.is_ascii_punctuation());\nassert!(!g.is_ascii_punctuation());\nassert!(!zero.is_ascii_punctuation());\nassert!(percent.is_ascii_punctuation());\nassert!(!space.is_ascii_punctuation());\nassert!(!lf.is_ascii_punctuation());\nassert!(!esc.is_ascii_punctuation());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(!uppercase_a.is_ascii_punctuation());%0A++++assert!(!uppercase_g.is_ascii_punctuation());%0A++++assert!(!a.is_ascii_punctuation());%0A++++assert!(!g.is_ascii_punctuation());%0A++++assert!(!zero.is_ascii_punctuation());%0A++++assert!(percent.is_ascii_punctuation());%0A++++assert!(!space.is_ascii_punctuation());%0A++++assert!(!lf.is_ascii_punctuation());%0A++++assert!(!esc.is_ascii_punctuation());%0A%7D&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1629)\n\nChecks if the value is an ASCII graphic character: U+0021 ‚Äò!‚Äô ..= U+007E ‚Äò~‚Äô.\n\n##### [¬ß](#examples-38)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(uppercase_a.is_ascii_graphic());\nassert!(uppercase_g.is_ascii_graphic());\nassert!(a.is_ascii_graphic());\nassert!(g.is_ascii_graphic());\nassert!(zero.is_ascii_graphic());\nassert!(percent.is_ascii_graphic());\nassert!(!space.is_ascii_graphic());\nassert!(!lf.is_ascii_graphic());\nassert!(!esc.is_ascii_graphic());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(uppercase_a.is_ascii_graphic());%0A++++assert!(uppercase_g.is_ascii_graphic());%0A++++assert!(a.is_ascii_graphic());%0A++++assert!(g.is_ascii_graphic());%0A++++assert!(zero.is_ascii_graphic());%0A++++assert!(percent.is_ascii_graphic());%0A++++assert!(!space.is_ascii_graphic());%0A++++assert!(!lf.is_ascii_graphic());%0A++++assert!(!esc.is_ascii_graphic());%0A%7D&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1680)\n\nChecks if the value is an ASCII whitespace character: U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED, U+000C FORM FEED, or U+000D CARRIAGE RETURN.\n\nRust uses the WhatWG Infra Standard‚Äôs [definition of ASCII whitespace](https://infra.spec.whatwg.org/#ascii-whitespace). There are several other definitions in wide use. For instance, [the POSIX locale](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01) includes U+000B VERTICAL TAB as well as all the above characters, but‚Äîfrom the very same specification‚Äî[the default rule for ‚Äúfield splitting‚Äù in the Bourne shell](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05) considers _only_ SPACE, HORIZONTAL TAB, and LINE FEED as whitespace.\n\nIf you are writing a program that will process an existing file format, check what that format‚Äôs definition of whitespace is before using this function.\n\n##### [¬ß](#examples-39)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(!uppercase_a.is_ascii_whitespace());\nassert!(!uppercase_g.is_ascii_whitespace());\nassert!(!a.is_ascii_whitespace());\nassert!(!g.is_ascii_whitespace());\nassert!(!zero.is_ascii_whitespace());\nassert!(!percent.is_ascii_whitespace());\nassert!(space.is_ascii_whitespace());\nassert!(lf.is_ascii_whitespace());\nassert!(!esc.is_ascii_whitespace());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(!uppercase_a.is_ascii_whitespace());%0A++++assert!(!uppercase_g.is_ascii_whitespace());%0A++++assert!(!a.is_ascii_whitespace());%0A++++assert!(!g.is_ascii_whitespace());%0A++++assert!(!zero.is_ascii_whitespace());%0A++++assert!(!percent.is_ascii_whitespace());%0A++++assert!(space.is_ascii_whitespace());%0A++++assert!(lf.is_ascii_whitespace());%0A++++assert!(!esc.is_ascii_whitespace());%0A%7D&edition=2021)\n\n1.24.0 (const: 1.47.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1716)\n\nChecks if the value is an ASCII control character: U+0000 NUL ..= U+001F UNIT SEPARATOR, or U+007F DELETE. Note that most ASCII whitespace characters are control characters, but SPACE is not.\n\n##### [¬ß](#examples-40)Examples\n\n```\nlet uppercase_a = 'A';\nlet uppercase_g = 'G';\nlet a = 'a';\nlet g = 'g';\nlet zero = '0';\nlet percent = '%';\nlet space = ' ';\nlet lf = '\\n';\nlet esc = '\\x1b';\n\nassert!(!uppercase_a.is_ascii_control());\nassert!(!uppercase_g.is_ascii_control());\nassert!(!a.is_ascii_control());\nassert!(!g.is_ascii_control());\nassert!(!zero.is_ascii_control());\nassert!(!percent.is_ascii_control());\nassert!(!space.is_ascii_control());\nassert!(lf.is_ascii_control());\nassert!(esc.is_ascii_control());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+%27A%27;%0A++++let+uppercase_g+=+%27G%27;%0A++++let+a+=+%27a%27;%0A++++let+g+=+%27g%27;%0A++++let+zero+=+%270%27;%0A++++let+percent+=+%27%25%27;%0A++++let+space+=+%27+%27;%0A++++let+lf+=+%27%5Cn%27;%0A++++let+esc+=+%27%5Cx1b%27;%0A++++%0A++++assert!(!uppercase_a.is_ascii_control());%0A++++assert!(!uppercase_g.is_ascii_control());%0A++++assert!(!a.is_ascii_control());%0A++++assert!(!g.is_ascii_control());%0A++++assert!(!zero.is_ascii_control());%0A++++assert!(!percent.is_ascii_control());%0A++++assert!(!space.is_ascii_control());%0A++++assert!(lf.is_ascii_control());%0A++++assert!(esc.is_ascii_control());%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](about:blank/src/std/ascii.rs.html#191-195)[¬ß](#impl-AsciiExt-for-char)\n\n[¬ß](#associatedtype.Owned)\n\nüëéDeprecated since 1.26.0: use inherent methods instead\n\nContainer type for copied ASCII characters.\n\n[source](about:blank/src/std/ascii.rs.html#194)[¬ß](#method.is_ascii-1)\n\nüëéDeprecated since 1.26.0: use inherent methods instead\n\nChecks if the value is within the ASCII range. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.is_ascii)\n\n[source](about:blank/src/std/ascii.rs.html#194)[¬ß](#method.to_ascii_uppercase-1)\n\nüëéDeprecated since 1.26.0: use inherent methods instead\n\nMakes a copy of the value in its ASCII upper case equivalent. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase)\n\n[source](about:blank/src/std/ascii.rs.html#194)[¬ß](#method.to_ascii_lowercase-1)\n\nüëéDeprecated since 1.26.0: use inherent methods instead\n\nMakes a copy of the value in its ASCII lower case equivalent. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase)\n\n[source](about:blank/src/std/ascii.rs.html#194)[¬ß](#method.eq_ignore_ascii_case-1)\n\nüëéDeprecated since 1.26.0: use inherent methods instead\n\nChecks that two values are an ASCII case-insensitive match. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case)\n\n[source](about:blank/src/std/ascii.rs.html#194)[¬ß](#method.make_ascii_uppercase-1)\n\nüëéDeprecated since 1.26.0: use inherent methods instead\n\nConverts this type to its ASCII upper case equivalent in-place. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase)\n\n[source](about:blank/src/std/ascii.rs.html#194)[¬ß](#method.make_ascii_lowercase-1)\n\nüëéDeprecated since 1.26.0: use inherent methods instead\n\nConverts this type to its ASCII lower case equivalent in-place. [Read more](about:blank/ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#227-232)[¬ß](#impl-Clone-for-char)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2454)[¬ß](#impl-Debug-for-char)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#164)[¬ß](#impl-Default-for-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#164)[¬ß](#method.default)\n\nReturns the default value of `\\x00`\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2468)[¬ß](#impl-Display-for-char)\n\n1.2.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2213)[¬ß](#impl-Extend%3C%26char%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2214)[¬ß](#method.extend-1)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2219)[¬ß](#method.extend_one-1)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2224)[¬ß](#method.extend_reserve-1)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2192)[¬ß](#impl-Extend%3Cchar%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2193)[¬ß](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2201)[¬ß](#method.extend_one)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2206)[¬ß](#method.extend_reserve)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[¬ß](#impl-From%3CChar%3E-for-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554)[¬ß](#method.from-1)\n\nConverts to this type from the input type.\n\n1.46.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#3041)[¬ß](#impl-From%3Cchar%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#3051)[¬ß](#method.from-5)\n\nAllocates an owned [`String`](string/struct.String.html \"struct std::string::String\") from a single character.\n\n##### [¬ß](#example)Example\n\n```\nlet c: char = 'a';\nlet s: String = String::from(c);\nassert_eq!(\"a\", &s[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c:+char+=+%27a%27;%0A++++let+s:+String+=+String::from(c);%0A++++assert_eq!(%22a%22,+%26s%5B..%5D);%0A%7D&edition=2021)\n\n1.51.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#77)[¬ß](#impl-From%3Cchar%3E-for-u128)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#90)[¬ß](#method.from-3)\n\nConverts a [`char`](primitive.char.html \"primitive char\") into a [`u128`](primitive.u128.html \"primitive u128\").\n\n##### [¬ß](#examples-43)Examples\n\n```\nuse std::mem;\n\nlet c = '‚öô';\nlet u = u128::from(c);\nassert!(16 == mem::size_of_val(&u))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+c+=+%27%E2%9A%99%27;%0A++++let+u+=+u128::from(c);%0A++++assert!(16+==+mem::size_of_val(%26u))%0A%7D&edition=2021)\n\n1.13.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#37)[¬ß](#impl-From%3Cchar%3E-for-u32)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#50)[¬ß](#method.from-4)\n\nConverts a [`char`](primitive.char.html \"primitive char\") into a [`u32`](primitive.u32.html \"primitive u32\").\n\n##### [¬ß](#examples-44)Examples\n\n```\nuse std::mem;\n\nlet c = 'c';\nlet u = u32::from(c);\nassert!(4 == mem::size_of_val(&u))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+c+=+%27c%27;%0A++++let+u+=+u32::from(c);%0A++++assert!(4+==+mem::size_of_val(%26u))%0A%7D&edition=2021)\n\n1.51.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#56)[¬ß](#impl-From%3Cchar%3E-for-u64)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#69)[¬ß](#method.from)\n\nConverts a [`char`](primitive.char.html \"primitive char\") into a [`u64`](primitive.u64.html \"primitive u64\").\n\n##### [¬ß](#examples-41)Examples\n\n```\nuse std::mem;\n\nlet c = 'üë§';\nlet u = u64::from(c);\nassert!(8 == mem::size_of_val(&u))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+c+=+%27%F0%9F%91%A4%27;%0A++++let+u+=+u64::from(c);%0A++++assert!(8+==+mem::size_of_val(%26u))%0A%7D&edition=2021)\n\n1.13.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#164)[¬ß](#impl-From%3Cu8%3E-for-char)\n\nMaps a byte in 0x00..=0xFF to a `char` whose code point has the same value, in U+0000..=U+00FF.\n\nUnicode is designed such that this effectively decodes bytes with the character encoding that IANA calls ISO-8859-1. This encoding is compatible with ASCII.\n\nNote that this is different from ISO/IEC 8859-1 a.k.a. ISO 8859-1 (with one less hyphen), which leaves some ‚Äúblanks‚Äù, byte values that are not assigned to any character. ISO-8859-1 (the IANA one) assigns them to the C0 and C1 control codes.\n\nNote that this is _also_ different from Windows-1252 a.k.a. code page 1252, which is a superset ISO/IEC 8859-1 that assigns some (not all!) blanks to punctuation and various Latin characters.\n\nTo confuse things further, [on the Web](https://encoding.spec.whatwg.org/) `ascii`, `iso-8859-1`, and `windows-1252` are all aliases for a superset of Windows-1252 that fills the remaining blanks with corresponding C0 and C1 control codes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#177)[¬ß](#method.from-2)\n\nConverts a [`u8`](primitive.u8.html \"primitive u8\") into a [`char`](primitive.char.html \"primitive char\").\n\n##### [¬ß](#examples-42)Examples\n\n```\nuse std::mem;\n\nlet u = 32 as u8;\nlet c = char::from(u);\nassert!(4 == mem::size_of_val(&c))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+u+=+32+as+u8;%0A++++let+c+=+char::from(u);%0A++++assert!(4+==+mem::size_of_val(%26c))%0A%7D&edition=2021)\n\n1.80.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2179)[¬ß](#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E)\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2123)[¬ß](#impl-FromIterator%3C%26char%3E-for-String)\n\n1.80.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2171)[¬ß](#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E)\n\n1.12.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2875)[¬ß](#impl-FromIterator%3Cchar%3E-for-Cow%3C'a,+str%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2113)[¬ß](#impl-FromIterator%3Cchar%3E-for-String)\n\n1.20.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#217)[¬ß](#impl-FromStr-for-char)\n\n[¬ß](#associatedtype.Err)\n\nThe associated error which can be returned from parsing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#221)[¬ß](#method.from_str)\n\nParses a string `s` to return a value of this type. [Read more](about:blank/str/trait.FromStr.html#tymethod.from_str)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#860)[¬ß](#impl-Hash-for-char)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625)[¬ß](#impl-Ord-for-char)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/92391 \"Tracking issue for const_cmp\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502)[¬ß](#impl-PartialEq-for-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625)[¬ß](#impl-PartialOrd-for-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625)[¬ß](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625)[¬ß](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625)[¬ß](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625)[¬ß](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625)[¬ß](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#546)[¬ß](#impl-Pattern%3C'a%3E-for-char)\n\nSearches for chars that are equal to a given [`char`](primitive.char.html \"primitive char\").\n\n#### [¬ß](#examples-47)Examples\n\n```\nassert_eq!(\"Hello world\".find('o'), Some(4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find(%27o%27),+Some(4));%0A%7D&edition=2021)\n\n[¬ß](#associatedtype.Searcher)\n\nüî¨This is a nightly-only experimental API. (`pattern`¬†[#27721](https://github.com/rust-lang/rust/issues/27721))\n\nAssociated searcher for this pattern\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#550)[¬ß](#method.into_searcher)\n\nüî¨This is a nightly-only experimental API. (`pattern`¬†[#27721](https://github.com/rust-lang/rust/issues/27721))\n\nConstructs the associated searcher from `self` and the `haystack` to search in.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#569)[¬ß](#method.is_contained_in)\n\nüî¨This is a nightly-only experimental API. (`pattern`¬†[#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches anywhere in the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#579)[¬ß](#method.is_prefix_of)\n\nüî¨This is a nightly-only experimental API. (`pattern`¬†[#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the front of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#584)[¬ß](#method.strip_prefix_of)\n\nüî¨This is a nightly-only experimental API. (`pattern`¬†[#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the front of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#589-591)[¬ß](#method.is_suffix_of)\n\nüî¨This is a nightly-only experimental API. (`pattern`¬†[#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the back of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#597-599)[¬ß](#method.strip_suffix_of)\n\nüî¨This is a nightly-only experimental API. (`pattern`¬†[#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the back of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#435)[¬ß](#impl-Step-for-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#437)[¬ß](#method.steps_between)\n\nüî¨This is a nightly-only experimental API. (`step_trait`¬†[#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the number of _successor_ steps required to get from `start` to `end`. [Read more](about:blank/iter/trait.Step.html#tymethod.steps_between)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#453)[¬ß](#method.forward_checked)\n\nüî¨This is a nightly-only experimental API. (`step_trait`¬†[#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#tymethod.forward_checked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#469)[¬ß](#method.backward_checked)\n\nüî¨This is a nightly-only experimental API. (`step_trait`¬†[#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#tymethod.backward_checked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#481)[¬ß](#method.forward_unchecked)\n\nüî¨This is a nightly-only experimental API. (`step_trait`¬†[#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.forward_unchecked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#497)[¬ß](#method.backward_unchecked)\n\nüî¨This is a nightly-only experimental API. (`step_trait`¬†[#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.backward_unchecked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#85)[¬ß](#method.forward)\n\nüî¨This is a nightly-only experimental API. (`step_trait`¬†[#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _successor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.forward)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#155)[¬ß](#method.backward)\n\nüî¨This is a nightly-only experimental API. (`step_trait`¬†[#42168](https://github.com/rust-lang/rust/issues/42168))\n\nReturns the value that would be obtained by taking the _predecessor_ of `self` `count` times. [Read more](about:blank/iter/trait.Step.html#method.backward)\n\n1.74.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#126)[¬ß](#impl-TryFrom%3Cchar%3E-for-u16)\n\nMaps a `char` with code point in U+0000..=U+FFFF to a `u16` in 0x0000..=0xFFFF with same value, failing if the code point is greater than U+FFFF.\n\nThis corresponds to the UCS-2 encoding, as specified in ISO/IEC 10646:2003.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#140)[¬ß](#method.try_from-1)\n\nTries to convert a [`char`](primitive.char.html \"primitive char\") into a [`u16`](primitive.u16.html \"primitive u16\").\n\n##### [¬ß](#examples-45)Examples\n\n```\nlet trans_rights = '‚öß'; // U+26A7\nlet ninjas = 'ü•∑'; // U+1F977\nassert_eq!(u16::try_from(trans_rights), Ok(0x26A7_u16));\nassert!(u16::try_from(ninjas).is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+trans_rights+=+%27%E2%9A%A7%27;+//+U%2B26A7%0A++++let+ninjas+=+%27%F0%9F%A5%B7%27;+//+U%2B1F977%0A++++assert_eq!(u16::try_from(trans_rights),+Ok(0x26A7_u16));%0A++++assert!(u16::try_from(ninjas).is_err());%0A%7D&edition=2021)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n1.59.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#102)[¬ß](#impl-TryFrom%3Cchar%3E-for-u8)\n\nMaps a `char` with code point in U+0000..=U+00FF to a byte in 0x00..=0xFF with same value, failing if the code point is greater than U+00FF.\n\nSee [`impl From<u8> for char`](about:blank/primitive.char.html#impl-From%3Cu8%3E-for-char \"primitive char\") for details on the encoding.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#116)[¬ß](#method.try_from-2)\n\nTries to convert a [`char`](primitive.char.html \"primitive char\") into a [`u8`](primitive.u8.html \"primitive u8\").\n\n##### [¬ß](#examples-46)Examples\n\n```\nlet a = '√ø'; // U+00FF\nlet b = 'ƒÄ'; // U+0100\nassert_eq!(u8::try_from(a), Ok(0xFF_u8));\nassert!(u8::try_from(b).is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%27%C3%BF%27;+//+U%2B00FF%0A++++let+b+=+%27%C4%80%27;+//+U%2B0100%0A++++assert_eq!(u8::try_from(a),+Ok(0xFF_u8));%0A++++assert!(u8::try_from(b).is_err());%0A%7D&edition=2021)\n\n[¬ß](#associatedtype.Error-2)\n\nThe type returned in the event of a conversion error.\n\n1.34.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#255)[¬ß](#impl-TryFrom%3Cu32%3E-for-char)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#259)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#992-1003)[¬ß](#impl-ConstParamTy-for-char)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#420-430)[¬ß](#impl-Copy-for-char)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1511)[¬ß](#impl-Eq-for-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#214-226)[¬ß](#impl-StructuralPartialEq-for-char)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#18)[¬ß](#impl-TrustedStep-for-char)\n\n[¬ß](#impl-Freeze-for-char)\n\n[¬ß](#impl-RefUnwindSafe-for-char)\n\n[¬ß](#impl-Send-for-char)\n\n[¬ß](#impl-Sync-for-char)\n\n[¬ß](#impl-Unpin-for-char)\n\n[¬ß](#impl-UnwindSafe-for-char)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A character type.\"><title>char - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc primitive\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">char</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">char</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Associated Constants</a></h3><ul class=\"block associatedconstant\"><li><a href=\"#associatedconstant.MAX\">MAX</a></li><li><a href=\"#associatedconstant.MIN\">MIN</a></li><li><a href=\"#associatedconstant.REPLACEMENT_CHARACTER\">REPLACEMENT_CHARACTER</a></li><li><a href=\"#associatedconstant.UNICODE_VERSION\">UNICODE_VERSION</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_ascii\">as_ascii</a></li><li><a href=\"#method.decode_utf16\">decode_utf16</a></li><li><a href=\"#method.encode_utf16\">encode_utf16</a></li><li><a href=\"#method.encode_utf8\">encode_utf8</a></li><li><a href=\"#method.eq_ignore_ascii_case\">eq_ignore_ascii_case</a></li><li><a href=\"#method.escape_debug\">escape_debug</a></li><li><a href=\"#method.escape_default\">escape_default</a></li><li><a href=\"#method.escape_unicode\">escape_unicode</a></li><li><a href=\"#method.from_digit\">from_digit</a></li><li><a href=\"#method.from_u32\">from_u32</a></li><li><a href=\"#method.from_u32_unchecked\">from_u32_unchecked</a></li><li><a href=\"#method.is_alphabetic\">is_alphabetic</a></li><li><a href=\"#method.is_alphanumeric\">is_alphanumeric</a></li><li><a href=\"#method.is_ascii\">is_ascii</a></li><li><a href=\"#method.is_ascii_alphabetic\">is_ascii_alphabetic</a></li><li><a href=\"#method.is_ascii_alphanumeric\">is_ascii_alphanumeric</a></li><li><a href=\"#method.is_ascii_control\">is_ascii_control</a></li><li><a href=\"#method.is_ascii_digit\">is_ascii_digit</a></li><li><a href=\"#method.is_ascii_graphic\">is_ascii_graphic</a></li><li><a href=\"#method.is_ascii_hexdigit\">is_ascii_hexdigit</a></li><li><a href=\"#method.is_ascii_lowercase\">is_ascii_lowercase</a></li><li><a href=\"#method.is_ascii_octdigit\">is_ascii_octdigit</a></li><li><a href=\"#method.is_ascii_punctuation\">is_ascii_punctuation</a></li><li><a href=\"#method.is_ascii_uppercase\">is_ascii_uppercase</a></li><li><a href=\"#method.is_ascii_whitespace\">is_ascii_whitespace</a></li><li><a href=\"#method.is_control\">is_control</a></li><li><a href=\"#method.is_digit\">is_digit</a></li><li><a href=\"#method.is_lowercase\">is_lowercase</a></li><li><a href=\"#method.is_numeric\">is_numeric</a></li><li><a href=\"#method.is_uppercase\">is_uppercase</a></li><li><a href=\"#method.is_whitespace\">is_whitespace</a></li><li><a href=\"#method.len_utf16\">len_utf16</a></li><li><a href=\"#method.len_utf8\">len_utf8</a></li><li><a href=\"#method.make_ascii_lowercase\">make_ascii_lowercase</a></li><li><a href=\"#method.make_ascii_uppercase\">make_ascii_uppercase</a></li><li><a href=\"#method.to_ascii_lowercase\">to_ascii_lowercase</a></li><li><a href=\"#method.to_ascii_uppercase\">to_ascii_uppercase</a></li><li><a href=\"#method.to_digit\">to_digit</a></li><li><a href=\"#method.to_lowercase\">to_lowercase</a></li><li><a href=\"#method.to_uppercase\">to_uppercase</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsciiExt-for-char\">AsciiExt</a></li><li><a href=\"#impl-Clone-for-char\">Clone</a></li><li><a href=\"#impl-ConstParamTy-for-char\">ConstParamTy</a></li><li><a href=\"#impl-Copy-for-char\">Copy</a></li><li><a href=\"#impl-Debug-for-char\">Debug</a></li><li><a href=\"#impl-Default-for-char\">Default</a></li><li><a href=\"#impl-Display-for-char\">Display</a></li><li><a href=\"#impl-Eq-for-char\">Eq</a></li><li><a href=\"#impl-Extend%3C%26char%3E-for-String\">Extend&lt;&amp;'a char&gt;</a></li><li><a href=\"#impl-Extend%3Cchar%3E-for-String\">Extend&lt;char&gt;</a></li><li><a href=\"#impl-From%3CChar%3E-for-char\">From&lt;AsciiChar&gt;</a></li><li><a href=\"#impl-From%3Cchar%3E-for-String\">From&lt;char&gt;</a></li><li><a href=\"#impl-From%3Cchar%3E-for-u128\">From&lt;char&gt;</a></li><li><a href=\"#impl-From%3Cchar%3E-for-u32\">From&lt;char&gt;</a></li><li><a href=\"#impl-From%3Cchar%3E-for-u64\">From&lt;char&gt;</a></li><li><a href=\"#impl-From%3Cu8%3E-for-char\">From&lt;u8&gt;</a></li><li><a href=\"#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\">FromIterator&lt;&amp;'a char&gt;</a></li><li><a href=\"#impl-FromIterator%3C%26char%3E-for-String\">FromIterator&lt;&amp;'a char&gt;</a></li><li><a href=\"#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\">FromIterator&lt;char&gt;</a></li><li><a href=\"#impl-FromIterator%3Cchar%3E-for-Cow%3C'a,+str%3E\">FromIterator&lt;char&gt;</a></li><li><a href=\"#impl-FromIterator%3Cchar%3E-for-String\">FromIterator&lt;char&gt;</a></li><li><a href=\"#impl-FromStr-for-char\">FromStr</a></li><li><a href=\"#impl-Hash-for-char\">Hash</a></li><li><a href=\"#impl-Ord-for-char\">Ord</a></li><li><a href=\"#impl-PartialEq-for-char\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-char\">PartialOrd</a></li><li><a href=\"#impl-Pattern%3C'a%3E-for-char\">Pattern&lt;'a&gt;</a></li><li><a href=\"#impl-Step-for-char\">Step</a></li><li><a href=\"#impl-StructuralPartialEq-for-char\">StructuralPartialEq</a></li><li><a href=\"#impl-TrustedStep-for-char\">TrustedStep</a></li><li><a href=\"#impl-TryFrom%3Cchar%3E-for-u16\">TryFrom&lt;char&gt;</a></li><li><a href=\"#impl-TryFrom%3Cchar%3E-for-u8\">TryFrom&lt;char&gt;</a></li><li><a href=\"#impl-TryFrom%3Cu32%3E-for-char\">TryFrom&lt;u32&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-char\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-char\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-char\">Send</a></li><li><a href=\"#impl-Sync-for-char\">Sync</a></li><li><a href=\"#impl-Unpin-for-char\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-char\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In crate std</a></h2><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Primitive Type <a class=\"primitive\" href=\"#\">char</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A character type.</p>\n<p>The <code>char</code> type represents a single character. More specifically, since\n‚Äòcharacter‚Äô isn‚Äôt a well-defined concept in Unicode, <code>char</code> is a ‚Äò<a href=\"https://www.unicode.org/glossary/#unicode_scalar_value\">Unicode\nscalar value</a>‚Äô.</p>\n<p>This documentation describes a number of methods and trait implementations on the\n<code>char</code> type. For technical reasons, there is additional, separate\ndocumentation in <a href=\"char/index.html\">the <code>std::char</code> module</a> as well.</p>\n<h2 id=\"validity-and-layout\"><a class=\"doc-anchor\" href=\"#validity-and-layout\">¬ß</a>Validity and Layout</h2>\n<p>A <code>char</code> is a ‚Äò<a href=\"https://www.unicode.org/glossary/#unicode_scalar_value\">Unicode scalar value</a>‚Äô, which is any ‚Äò<a href=\"https://www.unicode.org/glossary/#code_point\">Unicode code point</a>‚Äô\nother than a <a href=\"https://www.unicode.org/glossary/#surrogate_code_point\">surrogate code point</a>. This has a fixed numerical definition:\ncode points are in the range 0 to 0x10FFFF, inclusive.\nSurrogate code points, used by UTF-16, are in the range 0xD800 to 0xDFFF.</p>\n<p>No <code>char</code> may be constructed, whether as a literal or at runtime, that is not a\nUnicode scalar value. Violating this rule causes undefined behavior.</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Each of these is a compiler error\n</span>[<span class=\"string\">'\\u{D800}'</span>, <span class=\"string\">'\\u{DFFF}'</span>, <span class=\"string\">'\\u{110000}'</span>];</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Each+of+these+is+a+compiler+error%0Afn+main()+%7B%0A++++%5B'%5Cu%7BD800%7D',+'%5Cu%7BDFFF%7D',+'%5Cu%7B110000%7D'%5D;%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Panics; from_u32 returns None.\n</span>char::from_u32(<span class=\"number\">0xDE01</span>).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Panics;+from_u32+returns+None.%0Afn+main()+%7B%0A++++char::from_u32(0xDE01).unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Undefined behaviour\n</span><span class=\"kw\">let _ </span>= <span class=\"kw\">unsafe </span>{ char::from_u32_unchecked(<span class=\"number\">0x110000</span>) };</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Undefined+behaviour%0Afn+main()+%7B%0A++++let+_+=+unsafe+%7B+char::from_u32_unchecked(0x110000)+%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Unicode scalar values are also the exact set of values that may be encoded in UTF-8. Because\n<code>char</code> values are Unicode scalar values and functions may assume <a href=\"primitive.str.html#invariant\">incoming <code>str</code> values are\nvalid UTF-8</a>, it is safe to store any <code>char</code> in a <code>str</code> or read\nany character from a <code>str</code> as a <code>char</code>.</p>\n<p>The gap in valid <code>char</code> values is understood by the compiler, so in the\nbelow example the two ranges are understood to cover the whole range of\npossible <code>char</code> values and there is no error for a <a href=\"../book/ch06-02-match.html#matches-are-exhaustive\">non-exhaustive match</a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c: char = <span class=\"string\">'a'</span>;\n<span class=\"kw\">match </span>c {\n    <span class=\"string\">'\\0' </span>..= <span class=\"string\">'\\u{D7FF}' </span>=&gt; <span class=\"bool-val\">false</span>,\n    <span class=\"string\">'\\u{E000}' </span>..= <span class=\"string\">'\\u{10FFFF}' </span>=&gt; <span class=\"bool-val\">true</span>,\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c:+char+=+'a';%0A++++match+c+%7B%0A++++++++'%5C0'+..=+'%5Cu%7BD7FF%7D'+=%3E+false,%0A++++++++'%5Cu%7BE000%7D'+..=+'%5Cu%7B10FFFF%7D'+=%3E+true,%0A++++%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>All Unicode scalar values are valid <code>char</code> values, but not all of them represent a real\ncharacter. Many Unicode scalar values are not currently assigned to a character, but may be in\nthe future (‚Äúreserved‚Äù); some will never be a character (‚Äúnoncharacters‚Äù); and some may be given\ndifferent meanings by different users (‚Äúprivate use‚Äù).</p>\n<p><code>char</code> is guaranteed to have the same size, alignment, and function call ABI as <code>u32</code> on all\nplatforms.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::Layout;\n<span class=\"macro\">assert_eq!</span>(Layout::new::&lt;char&gt;(), Layout::new::&lt;u32&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::Layout;%0A++++assert_eq!(Layout::new::%3Cchar%3E(),+Layout::new::%3Cu32%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"representation\"><a class=\"doc-anchor\" href=\"#representation\">¬ß</a>Representation</h2>\n<p><code>char</code> is always four bytes in size. This is a different representation than\na given character would have as part of a <a href=\"../std/string/struct.String.html\"><code>String</code></a>. For example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">'h'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>];\n\n<span class=\"comment\">// five elements times four bytes for each element\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">20</span>, v.len() * std::mem::size_of::&lt;char&gt;());\n\n<span class=\"kw\">let </span>s = String::from(<span class=\"string\">\"hello\"</span>);\n\n<span class=\"comment\">// five elements times one byte per element\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5</span>, s.len() * std::mem::size_of::&lt;u8&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B'h',+'e',+'l',+'l',+'o'%5D;%0A++++%0A++++//+five+elements+times+four+bytes+for+each+element%0A++++assert_eq!(20,+v.len()+*+std::mem::size_of::%3Cchar%3E());%0A++++%0A++++let+s+=+String::from(%22hello%22);%0A++++%0A++++//+five+elements+times+one+byte+per+element%0A++++assert_eq!(5,+s.len()+*+std::mem::size_of::%3Cu8%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>As always, remember that a human intuition for ‚Äòcharacter‚Äô might not map to\nUnicode‚Äôs definitions. For example, despite looking similar, the ‚Äò√©‚Äô\ncharacter is one Unicode code point while ‚ÄòeÃÅ‚Äô is two Unicode code points:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = <span class=\"string\">\"√©\"</span>.chars();\n<span class=\"comment\">// U+00e9: 'latin small letter e with acute'\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'\\u{00e9}'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = <span class=\"string\">\"eÃÅ\"</span>.chars();\n<span class=\"comment\">// U+0065: 'latin small letter e'\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'\\u{0065}'</span>), chars.next());\n<span class=\"comment\">// U+0301: 'combining acute accent'\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'\\u{0301}'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+chars+=+%22%C3%A9%22.chars();%0A++++//+U%2B00e9:+'latin+small+letter+e+with+acute'%0A++++assert_eq!(Some('%5Cu%7B00e9%7D'),+chars.next());%0A++++assert_eq!(None,+chars.next());%0A++++%0A++++let+mut+chars+=+%22e%CC%81%22.chars();%0A++++//+U%2B0065:+'latin+small+letter+e'%0A++++assert_eq!(Some('%5Cu%7B0065%7D'),+chars.next());%0A++++//+U%2B0301:+'combining+acute+accent'%0A++++assert_eq!(Some('%5Cu%7B0301%7D'),+chars.next());%0A++++assert_eq!(None,+chars.next());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This means that the contents of the first string above <em>will</em> fit into a\n<code>char</code> while the contents of the second string <em>will not</em>. Trying to create\na <code>char</code> literal with the contents of the second string gives an error:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>error: character literal may only contain one codepoint: 'eÃÅ'\nlet c = 'eÃÅ';\n        ^^^\n</code></pre></div>\n<p>Another implication of the 4-byte fixed size of a <code>char</code> is that\nper-<code>char</code> processing can end up using a lot more memory:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = String::from(<span class=\"string\">\"love: ‚ù§Ô∏è\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;char&gt; = s.chars().collect();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">12</span>, std::mem::size_of_val(<span class=\"kw-2\">&amp;</span>s[..]));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">32</span>, std::mem::size_of_val(<span class=\"kw-2\">&amp;</span>v[..]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+String::from(%22love:+%E2%9D%A4%EF%B8%8F%22);%0A++++let+v:+Vec%3Cchar%3E+=+s.chars().collect();%0A++++%0A++++assert_eq!(12,+std::mem::size_of_val(%26s%5B..%5D));%0A++++assert_eq!(32,+std::mem::size_of_val(%26v%5B..%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#10\">source</a><a href=\"#impl-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#42\">source</a><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.char.html\">char</a> = '\\0'</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>char_min</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/114298\">#114298</a>)</span></div></span></summary><div class=\"docblock\"><p>The lowest valid code point a <code>char</code> can have, <code>'\\0'</code>.</p>\n<p>Unlike integer types, <code>char</code> actually has a gap in the middle,\nmeaning that the range of possible <code>char</code>s is smaller than you\nmight expect. Ranges of <code>char</code> will automatically hop this gap\nfor you:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(char_min)]\n</span><span class=\"kw\">let </span>dist = u32::from(char::MAX) - u32::from(char::MIN);\n<span class=\"kw\">let </span>size = (char::MIN..=char::MAX).count() <span class=\"kw\">as </span>u32;\n<span class=\"macro\">assert!</span>(size &lt; dist);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(char_min)%5D%0Afn+main()+%7B%0A++++let+dist+=+u32::from(char::MAX)+-+u32::from(char::MIN);%0A++++let+size+=+(char::MIN..=char::MAX).count()+as+u32;%0A++++assert!(size+%3C+dist);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Despite this gap, the <code>MIN</code> and <a href=\"primitive.char.html#associatedconstant.MAX\" title=\"associated constant char::MAX\"><code>MAX</code></a> values can be used as bounds for\nall <code>char</code> values.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(char_min)]\n</span><span class=\"kw\">let </span>c: char = something_which_returns_char();\n<span class=\"macro\">assert!</span>(char::MIN &lt;= c);\n\n<span class=\"kw\">let </span>value_at_min = u32::from(char::MIN);\n<span class=\"macro\">assert_eq!</span>(char::from_u32(value_at_min), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'\\0'</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(char_min)%5D%0Afn+main()+%7B%0A++++fn+something_which_returns_char()+-%3E+char+%7B+'a'+%7D%0A++++let+c:+char+=+something_which_returns_char();%0A++++assert!(char::MIN+%3C=+c);%0A++++%0A++++let+value_at_min+=+u32::from(char::MIN);%0A++++assert_eq!(char::from_u32(value_at_min),+Some('%5C0'));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#75\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.char.html\">char</a> = '\\u{10ffff}'</h4></section></summary><div class=\"docblock\"><p>The highest valid code point a <code>char</code> can have, <code>'\\u{10FFFF}'</code>.</p>\n<p>Unlike integer types, <code>char</code> actually has a gap in the middle,\nmeaning that the range of possible <code>char</code>s is smaller than you\nmight expect. Ranges of <code>char</code> will automatically hop this gap\nfor you:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(char_min)]\n</span><span class=\"kw\">let </span>dist = u32::from(char::MAX) - u32::from(char::MIN);\n<span class=\"kw\">let </span>size = (char::MIN..=char::MAX).count() <span class=\"kw\">as </span>u32;\n<span class=\"macro\">assert!</span>(size &lt; dist);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(char_min)%5D%0Afn+main()+%7B%0A++++let+dist+=+u32::from(char::MAX)+-+u32::from(char::MIN);%0A++++let+size+=+(char::MIN..=char::MAX).count()+as+u32;%0A++++assert!(size+%3C+dist);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Despite this gap, the <a href=\"primitive.char.html#associatedconstant.MIN\" title=\"associated constant char::MIN\"><code>MIN</code></a> and <code>MAX</code> values can be used as bounds for\nall <code>char</code> values.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c: char = something_which_returns_char();\n<span class=\"macro\">assert!</span>(c &lt;= char::MAX);\n\n<span class=\"kw\">let </span>value_at_max = u32::from(char::MAX);\n<span class=\"macro\">assert_eq!</span>(char::from_u32(value_at_max), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'\\u{10FFFF}'</span>));\n<span class=\"macro\">assert_eq!</span>(char::from_u32(value_at_max + <span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+something_which_returns_char()+-%3E+char+%7B+'a'+%7D%0A++++let+c:+char+=+something_which_returns_char();%0A++++assert!(c+%3C=+char::MAX);%0A++++%0A++++let+value_at_max+=+u32::from(char::MAX);%0A++++assert_eq!(char::from_u32(value_at_max),+Some('%5Cu%7B10FFFF%7D'));%0A++++assert_eq!(char::from_u32(value_at_max+%2B+1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.REPLACEMENT_CHARACTER\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#83\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.REPLACEMENT_CHARACTER\" class=\"constant\">REPLACEMENT_CHARACTER</a>: <a class=\"primitive\" href=\"primitive.char.html\">char</a> = 'ÔøΩ'</h4></section></summary><div class=\"docblock\"><p><code>U+FFFD REPLACEMENT CHARACTER</code> (ÔøΩ) is used in Unicode to represent a\ndecoding error.</p>\n<p>It can occur, for example, when giving ill-formed UTF-8 bytes to\n<a href=\"../std/string/struct.String.html#method.from_utf8_lossy\"><code>String::from_utf8_lossy</code></a>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.UNICODE_VERSION\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#96\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.UNICODE_VERSION\" class=\"constant\">UNICODE_VERSION</a>: (<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) = crate::unicode::UNICODE_VERSION</h4></section></summary><div class=\"docblock\"><p>The version of <a href=\"https://www.unicode.org/\">Unicode</a> that the Unicode parts of\n<code>char</code> and <code>str</code> methods are based on.</p>\n<p>New versions of Unicode are released regularly and subsequently all methods\nin the standard library depending on Unicode are updated. Therefore the\nbehavior of some <code>char</code> and <code>str</code> methods and the value of this constant\nchanges over time. This is <em>not</em> considered to be a breaking change.</p>\n<p>The version numbering scheme is explained in\n<a href=\"https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf#page=4\">Unicode 11.0 or later, Section 3.1 Versions of the Unicode Standard</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.decode_utf16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#142\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.decode_utf16\" class=\"fn\">decode_utf16</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"char/struct.DecodeUtf16.html\" title=\"struct std::char::DecodeUtf16\">DecodeUtf16</a>&lt;&lt;I as <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"DecodeUtf16<<I as IntoIterator>::IntoIter>\">‚ìò</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an iterator over the UTF-16 encoded code points in <code>iter</code>,\nreturning unpaired surrogates as <code>Err</code>s.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// ùÑûmus&lt;invalid&gt;ic&lt;invalid&gt;\n</span><span class=\"kw\">let </span>v = [\n    <span class=\"number\">0xD834</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x006d</span>, <span class=\"number\">0x0075</span>, <span class=\"number\">0x0073</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x0069</span>, <span class=\"number\">0x0063</span>, <span class=\"number\">0xD834</span>,\n];\n\n<span class=\"macro\">assert_eq!</span>(\n    char::decode_utf16(v)\n        .map(|r| r.map_err(|e| e.unpaired_surrogate()))\n        .collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(),\n    <span class=\"macro\">vec!</span>[\n        <span class=\"prelude-val\">Ok</span>(<span class=\"string\">'ùÑû'</span>),\n        <span class=\"prelude-val\">Ok</span>(<span class=\"string\">'m'</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">'u'</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">'s'</span>),\n        <span class=\"prelude-val\">Err</span>(<span class=\"number\">0xDD1E</span>),\n        <span class=\"prelude-val\">Ok</span>(<span class=\"string\">'i'</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">'c'</span>),\n        <span class=\"prelude-val\">Err</span>(<span class=\"number\">0xD834</span>)\n    ]\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+%F0%9D%84%9Emus%3Cinvalid%3Eic%3Cinvalid%3E%0Afn+main()+%7B%0A++++let+v+=+%5B%0A++++++++0xD834,+0xDD1E,+0x006d,+0x0075,+0x0073,+0xDD1E,+0x0069,+0x0063,+0xD834,%0A++++%5D;%0A++++%0A++++assert_eq!(%0A++++++++char::decode_utf16(v)%0A++++++++++++.map(%7Cr%7C+r.map_err(%7Ce%7C+e.unpaired_surrogate()))%0A++++++++++++.collect::%3CVec%3C_%3E%3E(),%0A++++++++vec!%5B%0A++++++++++++Ok('%F0%9D%84%9E'),%0A++++++++++++Ok('m'),+Ok('u'),+Ok('s'),%0A++++++++++++Err(0xDD1E),%0A++++++++++++Ok('i'),+Ok('c'),%0A++++++++++++Err(0xD834)%0A++++++++%5D%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A lossy decoder can be obtained by replacing <code>Err</code> results with the replacement character:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// ùÑûmus&lt;invalid&gt;ic&lt;invalid&gt;\n</span><span class=\"kw\">let </span>v = [\n    <span class=\"number\">0xD834</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x006d</span>, <span class=\"number\">0x0075</span>, <span class=\"number\">0x0073</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x0069</span>, <span class=\"number\">0x0063</span>, <span class=\"number\">0xD834</span>,\n];\n\n<span class=\"macro\">assert_eq!</span>(\n    char::decode_utf16(v)\n       .map(|r| r.unwrap_or(char::REPLACEMENT_CHARACTER))\n       .collect::&lt;String&gt;(),\n    <span class=\"string\">\"ùÑûmusÔøΩicÔøΩ\"\n</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+%F0%9D%84%9Emus%3Cinvalid%3Eic%3Cinvalid%3E%0Afn+main()+%7B%0A++++let+v+=+%5B%0A++++++++0xD834,+0xDD1E,+0x006d,+0x0075,+0x0073,+0xDD1E,+0x0069,+0x0063,+0xD834,%0A++++%5D;%0A++++%0A++++assert_eq!(%0A++++++++char::decode_utf16(v)%0A+++++++++++.map(%7Cr%7C+r.unwrap_or(char::REPLACEMENT_CHARACTER))%0A+++++++++++.collect::%3CString%3E(),%0A++++++++%22%F0%9D%84%9Emus%EF%BF%BDic%EF%BF%BD%22%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_u32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0, const since 1.67.0\">1.52.0 (const: 1.67.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#188\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_u32\" class=\"fn\">from_u32</a>(i: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>u32</code> to a <code>char</code>.</p>\n<p>Note that all <code>char</code>s are valid <a href=\"primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s, and can be cast to one with\n<a href=\"../std/keyword.as.html\"><code>as</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c = <span class=\"string\">'üíØ'</span>;\n<span class=\"kw\">let </span>i = c <span class=\"kw\">as </span>u32;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">128175</span>, i);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+'%F0%9F%92%AF';%0A++++let+i+=+c+as+u32;%0A++++%0A++++assert_eq!(128175,+i);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>However, the reverse is not true: not all valid <a href=\"primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s are valid\n<code>char</code>s. <code>from_u32()</code> will return <code>None</code> if the input is not a valid value\nfor a <code>char</code>.</p>\n<p>For an unsafe version of this function which ignores these checks, see\n<a href=\"#method.from_u32_unchecked\"><code>from_u32_unchecked</code></a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c = char::from_u32(<span class=\"number\">0x2764</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'‚ù§'</span>), c);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+char::from_u32(0x2764);%0A++++%0A++++assert_eq!(Some('%E2%9D%A4'),+c);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Returning <code>None</code> when the input is not a valid <code>char</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c = char::from_u32(<span class=\"number\">0x110000</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, c);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+char::from_u32(0x110000);%0A++++%0A++++assert_eq!(None,+c);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_u32_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0, const unstable\">1.52.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/89259\" title=\"Tracking issue for const_char_from_u32_unchecked\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#229\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_u32_unchecked\" class=\"fn\">from_u32_unchecked</a>(i: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>u32</code> to a <code>char</code>, ignoring validity.</p>\n<p>Note that all <code>char</code>s are valid <a href=\"primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s, and can be cast to one with\n<code>as</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c = <span class=\"string\">'üíØ'</span>;\n<span class=\"kw\">let </span>i = c <span class=\"kw\">as </span>u32;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">128175</span>, i);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+'%F0%9F%92%AF';%0A++++let+i+=+c+as+u32;%0A++++%0A++++assert_eq!(128175,+i);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>However, the reverse is not true: not all valid <a href=\"primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s are valid\n<code>char</code>s. <code>from_u32_unchecked()</code> will ignore this, and blindly cast to\n<code>char</code>, possibly creating an invalid one.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">¬ß</a>Safety</h5>\n<p>This function is unsafe, as it may construct invalid <code>char</code> values.</p>\n<p>For a safe version of this function, see the <a href=\"#method.from_u32\"><code>from_u32</code></a> function.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c = <span class=\"kw\">unsafe </span>{ char::from_u32_unchecked(<span class=\"number\">0x2764</span>) };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'‚ù§'</span>, c);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+unsafe+%7B+char::from_u32_unchecked(0x2764)+%7D;%0A++++%0A++++assert_eq!('%E2%9D%A4',+c);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_digit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0, const since 1.67.0\">1.52.0 (const: 1.67.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#281\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_digit\" class=\"fn\">from_digit</a>(num: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a digit in the given radix to a <code>char</code>.</p>\n<p>A ‚Äòradix‚Äô here is sometimes also called a ‚Äòbase‚Äô. A radix of two\nindicates a binary number, a radix of ten, decimal, and a radix of\nsixteen, hexadecimal, to give some common values. Arbitrary\nradices are supported.</p>\n<p><code>from_digit()</code> will return <code>None</code> if the input is not a digit in\nthe given radix.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">¬ß</a>Panics</h5>\n<p>Panics if given a radix larger than 36.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c = char::from_digit(<span class=\"number\">4</span>, <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'4'</span>), c);\n\n<span class=\"comment\">// Decimal 11 is a single digit in base 16\n</span><span class=\"kw\">let </span>c = char::from_digit(<span class=\"number\">11</span>, <span class=\"number\">16</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'b'</span>), c);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+char::from_digit(4,+10);%0A++++%0A++++assert_eq!(Some('4'),+c);%0A++++%0A++++//+Decimal+11+is+a+single+digit+in+base+16%0A++++let+c+=+char::from_digit(11,+16);%0A++++%0A++++assert_eq!(Some('b'),+c);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Returning <code>None</code> when the input is not a digit:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c = char::from_digit(<span class=\"number\">20</span>, <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, c);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c+=+char::from_digit(20,+10);%0A++++%0A++++assert_eq!(None,+c);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Passing a large radix, causing a panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// this panics\n</span><span class=\"kw\">let </span>_c = char::from_digit(<span class=\"number\">1</span>, <span class=\"number\">37</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+panics%0Afn+main()+%7B%0A++++let+_c+=+char::from_digit(1,+37);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_digit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#327\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_digit\" class=\"fn\">is_digit</a>(self, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if a <code>char</code> is a digit in the given radix.</p>\n<p>A ‚Äòradix‚Äô here is sometimes also called a ‚Äòbase‚Äô. A radix of two\nindicates a binary number, a radix of ten, decimal, and a radix of\nsixteen, hexadecimal, to give some common values. Arbitrary\nradices are supported.</p>\n<p>Compared to <a href=\"#method.is_numeric\"><code>is_numeric()</code></a>, this function only recognizes the characters\n<code>0-9</code>, <code>a-z</code> and <code>A-Z</code>.</p>\n<p>‚ÄòDigit‚Äô is defined to be only the following characters:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<p>For a more comprehensive understanding of ‚Äòdigit‚Äô, see <a href=\"#method.is_numeric\"><code>is_numeric()</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">¬ß</a>Panics</h5>\n<p>Panics if given a radix larger than 36.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"string\">'1'</span>.is_digit(<span class=\"number\">10</span>));\n<span class=\"macro\">assert!</span>(<span class=\"string\">'f'</span>.is_digit(<span class=\"number\">16</span>));\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'f'</span>.is_digit(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!('1'.is_digit(10));%0A++++assert!('f'.is_digit(16));%0A++++assert!(!'f'.is_digit(10));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Passing a large radix, causing a panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// this panics\n</span><span class=\"string\">'1'</span>.is_digit(<span class=\"number\">37</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+panics%0Afn+main()+%7B%0A++++'1'.is_digit(37);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_digit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.67.0\">1.0.0 (const: 1.67.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#379\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_digit\" class=\"fn\">to_digit</a>(self, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>char</code> to a digit in the given radix.</p>\n<p>A ‚Äòradix‚Äô here is sometimes also called a ‚Äòbase‚Äô. A radix of two\nindicates a binary number, a radix of ten, decimal, and a radix of\nsixteen, hexadecimal, to give some common values. Arbitrary\nradices are supported.</p>\n<p>‚ÄòDigit‚Äô is defined to be only the following characters:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">¬ß</a>Errors</h5>\n<p>Returns <code>None</code> if the <code>char</code> does not refer to a digit in the given radix.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">¬ß</a>Panics</h5>\n<p>Panics if given a radix larger than 36.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'1'</span>.to_digit(<span class=\"number\">10</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'f'</span>.to_digit(<span class=\"number\">16</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">15</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!('1'.to_digit(10),+Some(1));%0A++++assert_eq!('f'.to_digit(16),+Some(15));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Passing a non-digit results in failure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'f'</span>.to_digit(<span class=\"number\">10</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'z'</span>.to_digit(<span class=\"number\">16</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!('f'.to_digit(10),+None);%0A++++assert_eq!('z'.to_digit(16),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Passing a large radix, causing a panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// this panics\n</span><span class=\"kw\">let _ </span>= <span class=\"string\">'1'</span>.to_digit(<span class=\"number\">37</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+panics%0Afn+main()+%7B%0A++++let+_+=+'1'.to_digit(37);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.escape_unicode\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#432\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.escape_unicode\" class=\"fn\">escape_unicode</a>(self) -&gt; <a class=\"struct\" href=\"char/struct.EscapeUnicode.html\" title=\"struct std::char::EscapeUnicode\">EscapeUnicode</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeUnicode\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter as <code>char</code>s.</p>\n<p>This will escape characters with the Rust syntax of the form\n<code>\\u{NNNNNN}</code> where <code>NNNNNN</code> is a hexadecimal representation.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">¬ß</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">'‚ù§'</span>.escape_unicode() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+'%E2%9D%A4'.escape_unicode()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">'‚ù§'</span>.escape_unicode());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+'%E2%9D%A4'.escape_unicode());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"\\\\u{{2764}}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%5C%5Cu%7B%7B2764%7D%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <a href=\"../std/string/trait.ToString.html#tymethod.to_string\"><code>to_string</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'‚ù§'</span>.escape_unicode().to_string(), <span class=\"string\">\"\\\\u{2764}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!('%E2%9D%A4'.escape_unicode().to_string(),+%22%5C%5Cu%7B2764%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.escape_debug\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#497\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.escape_debug\" class=\"fn\">escape_debug</a>(self) -&gt; <a class=\"struct\" href=\"char/struct.EscapeDebug.html\" title=\"struct std::char::EscapeDebug\">EscapeDebug</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeDebug\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that yields the literal escape code of a character\nas <code>char</code>s.</p>\n<p>This will escape the characters similar to the <a href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\"><code>Debug</code></a> implementations\nof <code>str</code> or <code>char</code>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">¬ß</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">'\\n'</span>.escape_debug() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+'%5Cn'.escape_debug()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">'\\n'</span>.escape_debug());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+'%5Cn'.escape_debug());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"\\\\n\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%5C%5Cn%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <a href=\"../std/string/trait.ToString.html#tymethod.to_string\"><code>to_string</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'\\n'</span>.escape_debug().to_string(), <span class=\"string\">\"\\\\n\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!('%5Cn'.escape_debug().to_string(),+%22%5C%5Cn%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.escape_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#553\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.escape_default\" class=\"fn\">escape_default</a>(self) -&gt; <a class=\"struct\" href=\"char/struct.EscapeDefault.html\" title=\"struct std::char::EscapeDefault\">EscapeDefault</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeDefault\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that yields the literal escape code of a character\nas <code>char</code>s.</p>\n<p>The default is chosen with a bias toward producing literals that are\nlegal in a variety of languages, including C++11 and similar C-family\nlanguages. The exact rules are:</p>\n<ul>\n<li>Tab is escaped as <code>\\t</code>.</li>\n<li>Carriage return is escaped as <code>\\r</code>.</li>\n<li>Line feed is escaped as <code>\\n</code>.</li>\n<li>Single quote is escaped as <code>\\'</code>.</li>\n<li>Double quote is escaped as <code>\\\"</code>.</li>\n<li>Backslash is escaped as <code>\\\\</code>.</li>\n<li>Any character in the ‚Äòprintable ASCII‚Äô range <code>0x20</code> .. <code>0x7e</code>\ninclusive is not escaped.</li>\n<li>All other characters are given hexadecimal Unicode escapes; see\n<a href=\"#method.escape_unicode\"><code>escape_unicode</code></a>.</li>\n</ul>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">¬ß</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">'\"'</span>.escape_default() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+'%22'.escape_default()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">'\"'</span>.escape_default());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+'%22'.escape_default());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"\\\\\\\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%5C%5C%5C%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <a href=\"../std/string/trait.ToString.html#tymethod.to_string\"><code>to_string</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'\"'</span>.escape_default().to_string(), <span class=\"string\">\"\\\\\\\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!('%22'.escape_default().to_string(),+%22%5C%5C%5C%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len_utf8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#612\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.len_utf8\" class=\"fn\">len_utf8</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of bytes this <code>char</code> would need if encoded in UTF-8.</p>\n<p>That number of bytes is always between 1 and 4, inclusive.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>len = <span class=\"string\">'A'</span>.len_utf8();\n<span class=\"macro\">assert_eq!</span>(len, <span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>len = <span class=\"string\">'√ü'</span>.len_utf8();\n<span class=\"macro\">assert_eq!</span>(len, <span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span>len = <span class=\"string\">'‚Ñù'</span>.len_utf8();\n<span class=\"macro\">assert_eq!</span>(len, <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>len = <span class=\"string\">'üí£'</span>.len_utf8();\n<span class=\"macro\">assert_eq!</span>(len, <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+len+=+'A'.len_utf8();%0A++++assert_eq!(len,+1);%0A++++%0A++++let+len+=+'%C3%9F'.len_utf8();%0A++++assert_eq!(len,+2);%0A++++%0A++++let+len+=+'%E2%84%9D'.len_utf8();%0A++++assert_eq!(len,+3);%0A++++%0A++++let+len+=+'%F0%9F%92%A3'.len_utf8();%0A++++assert_eq!(len,+4);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The <code>&amp;str</code> type guarantees that its contents are UTF-8, and so we can compare the length it\nwould take if each code point was represented as a <code>char</code> vs in the <code>&amp;str</code> itself:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// as chars\n</span><span class=\"kw\">let </span>eastern = <span class=\"string\">'Êù±'</span>;\n<span class=\"kw\">let </span>capital = <span class=\"string\">'‰∫¨'</span>;\n\n<span class=\"comment\">// both can be represented as three bytes\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, eastern.len_utf8());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, capital.len_utf8());\n\n<span class=\"comment\">// as a &amp;str, these two are encoded in UTF-8\n</span><span class=\"kw\">let </span>tokyo = <span class=\"string\">\"Êù±‰∫¨\"</span>;\n\n<span class=\"kw\">let </span>len = eastern.len_utf8() + capital.len_utf8();\n\n<span class=\"comment\">// we can see that they take six bytes total...\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">6</span>, tokyo.len());\n\n<span class=\"comment\">// ... just like the &amp;str\n</span><span class=\"macro\">assert_eq!</span>(len, tokyo.len());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+as+chars%0Afn+main()+%7B%0A++++let+eastern+=+'%E6%9D%B1';%0A++++let+capital+=+'%E4%BA%AC';%0A++++%0A++++//+both+can+be+represented+as+three+bytes%0A++++assert_eq!(3,+eastern.len_utf8());%0A++++assert_eq!(3,+capital.len_utf8());%0A++++%0A++++//+as+a+%26str,+these+two+are+encoded+in+UTF-8%0A++++let+tokyo+=+%22%E6%9D%B1%E4%BA%AC%22;%0A++++%0A++++let+len+=+eastern.len_utf8()+%2B+capital.len_utf8();%0A++++%0A++++//+we+can+see+that+they+take+six+bytes+total...%0A++++assert_eq!(6,+tokyo.len());%0A++++%0A++++//+...+just+like+the+%26str%0A++++assert_eq!(len,+tokyo.len());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len_utf16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#643\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.len_utf16\" class=\"fn\">len_utf16</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of 16-bit code units this <code>char</code> would need if\nencoded in UTF-16.</p>\n<p>That number of code units is always either 1 or 2, for unicode scalar values in\nthe <a href=\"http://www.unicode.org/glossary/#basic_multilingual_plane\">basic multilingual plane</a> or <a href=\"http://www.unicode.org/glossary/#supplementary_planes\">supplementary planes</a> respectively.</p>\n<p>See the documentation for <a href=\"#method.len_utf8\"><code>len_utf8()</code></a> for more explanation of this\nconcept. This function is a mirror, but for UTF-16 instead of UTF-8.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"string\">'√ü'</span>.len_utf16();\n<span class=\"macro\">assert_eq!</span>(n, <span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>len = <span class=\"string\">'üí£'</span>.len_utf16();\n<span class=\"macro\">assert_eq!</span>(len, <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+n+=+'%C3%9F'.len_utf16();%0A++++assert_eq!(n,+1);%0A++++%0A++++let+len+=+'%F0%9F%92%A3'.len_utf16();%0A++++assert_eq!(len,+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.encode_utf8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#680\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.encode_utf8\" class=\"fn\">encode_utf8</a>(self, dst: &amp;mut [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>]) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Encodes this character as UTF-8 into the provided byte buffer,\nand then returns the subslice of the buffer that contains the encoded character.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">¬ß</a>Panics</h5>\n<p>Panics if the buffer is not large enough.\nA buffer of length four is large enough to encode any <code>char</code>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">¬ß</a>Examples</h5>\n<p>In both of these examples, ‚Äò√ü‚Äô takes two bytes to encode.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = [<span class=\"number\">0</span>; <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>result = <span class=\"string\">'√ü'</span>.encode_utf8(<span class=\"kw-2\">&amp;mut </span>b);\n\n<span class=\"macro\">assert_eq!</span>(result, <span class=\"string\">\"√ü\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(result.len(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+b+=+%5B0;+2%5D;%0A++++%0A++++let+result+=+'%C3%9F'.encode_utf8(%26mut+b);%0A++++%0A++++assert_eq!(result,+%22%C3%9F%22);%0A++++%0A++++assert_eq!(result.len(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A buffer that‚Äôs too small:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = [<span class=\"number\">0</span>; <span class=\"number\">1</span>];\n\n<span class=\"comment\">// this panics\n</span><span class=\"string\">'√ü'</span>.encode_utf8(<span class=\"kw-2\">&amp;mut </span>b);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+b+=+%5B0;+1%5D;%0A++++%0A++++//+this+panics%0A++++'%C3%9F'.encode_utf8(%26mut+b);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.encode_utf16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#715\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.encode_utf16\" class=\"fn\">encode_utf16</a>(self, dst: &amp;mut [<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>]) -&gt; &amp;mut [<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>]</h4></section></summary><div class=\"docblock\"><p>Encodes this character as UTF-16 into the provided <code>u16</code> buffer,\nand then returns the subslice of the buffer that contains the encoded character.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">¬ß</a>Panics</h5>\n<p>Panics if the buffer is not large enough.\nA buffer of length 2 is large enough to encode any <code>char</code>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">¬ß</a>Examples</h5>\n<p>In both of these examples, ‚Äòùïä‚Äô takes two <code>u16</code>s to encode.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = [<span class=\"number\">0</span>; <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>result = <span class=\"string\">'ùïä'</span>.encode_utf16(<span class=\"kw-2\">&amp;mut </span>b);\n\n<span class=\"macro\">assert_eq!</span>(result.len(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+b+=+%5B0;+2%5D;%0A++++%0A++++let+result+=+'%F0%9D%95%8A'.encode_utf16(%26mut+b);%0A++++%0A++++assert_eq!(result.len(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A buffer that‚Äôs too small:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = [<span class=\"number\">0</span>; <span class=\"number\">1</span>];\n\n<span class=\"comment\">// this panics\n</span><span class=\"string\">'ùïä'</span>.encode_utf16(<span class=\"kw-2\">&amp;mut </span>b);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+b+=+%5B0;+1%5D;%0A++++%0A++++//+this+panics%0A++++'%F0%9D%95%8A'.encode_utf16(%26mut+b);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_alphabetic\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#743\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_alphabetic\" class=\"fn\">is_alphabetic</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>char</code> has the <code>Alphabetic</code> property.</p>\n<p><code>Alphabetic</code> is described in Chapter 4 (Character Properties) of the <a href=\"https://www.unicode.org/versions/latest/\">Unicode Standard</a> and\nspecified in the <a href=\"https://www.unicode.org/reports/tr44/\">Unicode Character Database</a> <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt\"><code>DerivedCoreProperties.txt</code></a>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"string\">'a'</span>.is_alphabetic());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'‰∫¨'</span>.is_alphabetic());\n\n<span class=\"kw\">let </span>c = <span class=\"string\">'üíù'</span>;\n<span class=\"comment\">// love is many things, but it is not alphabetic\n</span><span class=\"macro\">assert!</span>(!c.is_alphabetic());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!('a'.is_alphabetic());%0A++++assert!('%E4%BA%AC'.is_alphabetic());%0A++++%0A++++let+c+=+'%F0%9F%92%9D';%0A++++//+love+is+many+things,+but+it+is+not+alphabetic%0A++++assert!(!c.is_alphabetic());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/101400\" title=\"Tracking issue for const_unicode_case_lookup\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#785\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_lowercase\" class=\"fn\">is_lowercase</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>char</code> has the <code>Lowercase</code> property.</p>\n<p><code>Lowercase</code> is described in Chapter 4 (Character Properties) of the <a href=\"https://www.unicode.org/versions/latest/\">Unicode Standard</a> and\nspecified in the <a href=\"https://www.unicode.org/reports/tr44/\">Unicode Character Database</a> <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt\"><code>DerivedCoreProperties.txt</code></a>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"string\">'a'</span>.is_lowercase());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'Œ¥'</span>.is_lowercase());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'A'</span>.is_lowercase());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'Œî'</span>.is_lowercase());\n\n<span class=\"comment\">// The various Chinese scripts and punctuation do not have case, and so:\n</span><span class=\"macro\">assert!</span>(!<span class=\"string\">'‰∏≠'</span>.is_lowercase());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">' '</span>.is_lowercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!('a'.is_lowercase());%0A++++assert!('%CE%B4'.is_lowercase());%0A++++assert!(!'A'.is_lowercase());%0A++++assert!(!'%CE%94'.is_lowercase());%0A++++%0A++++//+The+various+Chinese+scripts+and+punctuation+do+not+have+case,+and+so:%0A++++assert!(!'%E4%B8%AD'.is_lowercase());%0A++++assert!(!'+'.is_lowercase());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>In a const context:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_unicode_case_lookup)]\n</span><span class=\"kw\">const </span>CAPITAL_DELTA_IS_LOWERCASE: bool = <span class=\"string\">'Œî'</span>.is_lowercase();\n<span class=\"macro\">assert!</span>(!CAPITAL_DELTA_IS_LOWERCASE);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_unicode_case_lookup)%5D%0Afn+main()+%7B%0A++++const+CAPITAL_DELTA_IS_LOWERCASE:+bool+=+'%CE%94'.is_lowercase();%0A++++assert!(!CAPITAL_DELTA_IS_LOWERCASE);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/101400\" title=\"Tracking issue for const_unicode_case_lookup\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#827\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_uppercase\" class=\"fn\">is_uppercase</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>char</code> has the <code>Uppercase</code> property.</p>\n<p><code>Uppercase</code> is described in Chapter 4 (Character Properties) of the <a href=\"https://www.unicode.org/versions/latest/\">Unicode Standard</a> and\nspecified in the <a href=\"https://www.unicode.org/reports/tr44/\">Unicode Character Database</a> <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt\"><code>DerivedCoreProperties.txt</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(!<span class=\"string\">'a'</span>.is_uppercase());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'Œ¥'</span>.is_uppercase());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'A'</span>.is_uppercase());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'Œî'</span>.is_uppercase());\n\n<span class=\"comment\">// The various Chinese scripts and punctuation do not have case, and so:\n</span><span class=\"macro\">assert!</span>(!<span class=\"string\">'‰∏≠'</span>.is_uppercase());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">' '</span>.is_uppercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!(!'a'.is_uppercase());%0A++++assert!(!'%CE%B4'.is_uppercase());%0A++++assert!('A'.is_uppercase());%0A++++assert!('%CE%94'.is_uppercase());%0A++++%0A++++//+The+various+Chinese+scripts+and+punctuation+do+not+have+case,+and+so:%0A++++assert!(!'%E4%B8%AD'.is_uppercase());%0A++++assert!(!'+'.is_uppercase());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>In a const context:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_unicode_case_lookup)]\n</span><span class=\"kw\">const </span>CAPITAL_DELTA_IS_UPPERCASE: bool = <span class=\"string\">'Œî'</span>.is_uppercase();\n<span class=\"macro\">assert!</span>(CAPITAL_DELTA_IS_UPPERCASE);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_unicode_case_lookup)%5D%0Afn+main()+%7B%0A++++const+CAPITAL_DELTA_IS_UPPERCASE:+bool+=+'%CE%94'.is_uppercase();%0A++++assert!(CAPITAL_DELTA_IS_UPPERCASE);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_whitespace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#859\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_whitespace\" class=\"fn\">is_whitespace</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>char</code> has the <code>White_Space</code> property.</p>\n<p><code>White_Space</code> is specified in the <a href=\"https://www.unicode.org/reports/tr44/\">Unicode Character Database</a> <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\"><code>PropList.txt</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"string\">' '</span>.is_whitespace());\n\n<span class=\"comment\">// line break\n</span><span class=\"macro\">assert!</span>(<span class=\"string\">'\\n'</span>.is_whitespace());\n\n<span class=\"comment\">// a non-breaking space\n</span><span class=\"macro\">assert!</span>(<span class=\"string\">'\\u{A0}'</span>.is_whitespace());\n\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'Ë∂ä'</span>.is_whitespace());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!('+'.is_whitespace());%0A++++%0A++++//+line+break%0A++++assert!('%5Cn'.is_whitespace());%0A++++%0A++++//+a+non-breaking+space%0A++++assert!('%5Cu%7BA0%7D'.is_whitespace());%0A++++%0A++++assert!(!'%E8%B6%8A'.is_whitespace());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_alphanumeric\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#888\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_alphanumeric\" class=\"fn\">is_alphanumeric</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>char</code> satisfies either <a href=\"#method.is_alphabetic\"><code>is_alphabetic()</code></a> or <a href=\"#method.is_numeric\"><code>is_numeric()</code></a>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"string\">'Ÿ£'</span>.is_alphanumeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'7'</span>.is_alphanumeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'‡ß¨'</span>.is_alphanumeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'¬æ'</span>.is_alphanumeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'‚ë†'</span>.is_alphanumeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'K'</span>.is_alphanumeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'Ÿà'</span>.is_alphanumeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'Ëóè'</span>.is_alphanumeric());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!('%D9%A3'.is_alphanumeric());%0A++++assert!('7'.is_alphanumeric());%0A++++assert!('%E0%A7%AC'.is_alphanumeric());%0A++++assert!('%C2%BE'.is_alphanumeric());%0A++++assert!('%E2%91%A0'.is_alphanumeric());%0A++++assert!('K'.is_alphanumeric());%0A++++assert!('%D9%88'.is_alphanumeric());%0A++++assert!('%E8%97%8F'.is_alphanumeric());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_control\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#914\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_control\" class=\"fn\">is_control</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>char</code> has the general category for control codes.</p>\n<p>Control codes (code points with the general category of <code>Cc</code>) are described in Chapter 4\n(Character Properties) of the <a href=\"https://www.unicode.org/versions/latest/\">Unicode Standard</a> and specified in the <a href=\"https://www.unicode.org/reports/tr44/\">Unicode Character\nDatabase</a> <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt\"><code>UnicodeData.txt</code></a>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// U+009C, STRING TERMINATOR\n</span><span class=\"macro\">assert!</span>(<span class=\"string\">'¬ú'</span>.is_control());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'q'</span>.is_control());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+U%2B009C,+STRING+TERMINATOR%0Afn+main()+%7B%0A++++assert!('%C2%9C'.is_control());%0A++++assert!(!'q'.is_control());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_numeric\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#969\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_numeric\" class=\"fn\">is_numeric</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>char</code> has one of the general categories for numbers.</p>\n<p>The general categories for numbers (<code>Nd</code> for decimal digits, <code>Nl</code> for letter-like numeric\ncharacters, and <code>No</code> for other numeric characters) are specified in the <a href=\"https://www.unicode.org/reports/tr44/\">Unicode Character\nDatabase</a> <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt\"><code>UnicodeData.txt</code></a>.</p>\n<p>This method doesn‚Äôt cover everything that could be considered a number, e.g. ideographic numbers like ‚Äò‰∏â‚Äô.\nIf you want everything including characters with overlapping purposes then you might want to use\na unicode or language-processing library that exposes the appropriate character properties instead\nof looking at the unicode categories.</p>\n<p>If you want to parse ASCII decimal digits (0-9) or ASCII base-N, use\n<code>is_ascii_digit</code> or <code>is_digit</code> instead.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"string\">'Ÿ£'</span>.is_numeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'7'</span>.is_numeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'‡ß¨'</span>.is_numeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'¬æ'</span>.is_numeric());\n<span class=\"macro\">assert!</span>(<span class=\"string\">'‚ë†'</span>.is_numeric());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'K'</span>.is_numeric());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'Ÿà'</span>.is_numeric());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'Ëóè'</span>.is_numeric());\n<span class=\"macro\">assert!</span>(!<span class=\"string\">'‰∏â'</span>.is_numeric());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert!('%D9%A3'.is_numeric());%0A++++assert!('7'.is_numeric());%0A++++assert!('%E0%A7%AC'.is_numeric());%0A++++assert!('%C2%BE'.is_numeric());%0A++++assert!('%E2%91%A0'.is_numeric());%0A++++assert!(!'K'.is_numeric());%0A++++assert!(!'%D9%88'.is_numeric());%0A++++assert!(!'%E8%97%8F'.is_numeric());%0A++++assert!(!'%E4%B8%89'.is_numeric());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1039\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_lowercase\" class=\"fn\">to_lowercase</a>(self) -&gt; <a class=\"struct\" href=\"char/struct.ToLowercase.html\" title=\"struct std::char::ToLowercase\">ToLowercase</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ToLowercase\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that yields the lowercase mapping of this <code>char</code> as one or more\n<code>char</code>s.</p>\n<p>If this <code>char</code> does not have a lowercase mapping, the iterator yields the same <code>char</code>.</p>\n<p>If this <code>char</code> has a one-to-one lowercase mapping given by the <a href=\"https://www.unicode.org/reports/tr44/\">Unicode Character\nDatabase</a> <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt\"><code>UnicodeData.txt</code></a>, the iterator yields that <code>char</code>.</p>\n<p>If this <code>char</code> requires special considerations (e.g. multiple <code>char</code>s) the iterator yields\nthe <code>char</code>(s) given by <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\"><code>SpecialCasing.txt</code></a>.</p>\n<p>This operation performs an unconditional mapping without tailoring. That is, the conversion\nis independent of context and language.</p>\n<p>In the <a href=\"https://www.unicode.org/versions/latest/\">Unicode Standard</a>, Chapter 4 (Character Properties) discusses case mapping in\ngeneral and Chapter 3 (Conformance) discusses the default algorithm for case conversion.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">¬ß</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">'ƒ∞'</span>.to_lowercase() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+'%C4%B0'.to_lowercase()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">'ƒ∞'</span>.to_lowercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+'%C4%B0'.to_lowercase());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"i\\u{307}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22i%5Cu%7B307%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <a href=\"../std/string/trait.ToString.html#tymethod.to_string\"><code>to_string</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'C'</span>.to_lowercase().to_string(), <span class=\"string\">\"c\"</span>);\n\n<span class=\"comment\">// Sometimes the result is more than one character:\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'ƒ∞'</span>.to_lowercase().to_string(), <span class=\"string\">\"i\\u{307}\"</span>);\n\n<span class=\"comment\">// Characters that do not have both uppercase and lowercase\n// convert into themselves.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'Â±±'</span>.to_lowercase().to_string(), <span class=\"string\">\"Â±±\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!('C'.to_lowercase().to_string(),+%22c%22);%0A++++%0A++++//+Sometimes+the+result+is+more+than+one+character:%0A++++assert_eq!('%C4%B0'.to_lowercase().to_string(),+%22i%5Cu%7B307%7D%22);%0A++++%0A++++//+Characters+that+do+not+have+both+uppercase+and+lowercase%0A++++//+convert+into+themselves.%0A++++assert_eq!('%E5%B1%B1'.to_lowercase().to_string(),+%22%E5%B1%B1%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1131\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_uppercase\" class=\"fn\">to_uppercase</a>(self) -&gt; <a class=\"struct\" href=\"char/struct.ToUppercase.html\" title=\"struct std::char::ToUppercase\">ToUppercase</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ToUppercase\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that yields the uppercase mapping of this <code>char</code> as one or more\n<code>char</code>s.</p>\n<p>If this <code>char</code> does not have an uppercase mapping, the iterator yields the same <code>char</code>.</p>\n<p>If this <code>char</code> has a one-to-one uppercase mapping given by the <a href=\"https://www.unicode.org/reports/tr44/\">Unicode Character\nDatabase</a> <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt\"><code>UnicodeData.txt</code></a>, the iterator yields that <code>char</code>.</p>\n<p>If this <code>char</code> requires special considerations (e.g. multiple <code>char</code>s) the iterator yields\nthe <code>char</code>(s) given by <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\"><code>SpecialCasing.txt</code></a>.</p>\n<p>This operation performs an unconditional mapping without tailoring. That is, the conversion\nis independent of context and language.</p>\n<p>In the <a href=\"https://www.unicode.org/versions/latest/\">Unicode Standard</a>, Chapter 4 (Character Properties) discusses case mapping in\ngeneral and Chapter 3 (Conformance) discusses the default algorithm for case conversion.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">¬ß</a>Examples</h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">'√ü'</span>.to_uppercase() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">\"{c}\"</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++for+c+in+'%C3%9F'.to_uppercase()+%7B%0A++++++++print!(%22%7Bc%7D%22);%0A++++%7D%0A++++println!();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"string\">'√ü'</span>.to_uppercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22%7B%7D%22,+'%C3%9F'.to_uppercase());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">\"SS\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22SS%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <a href=\"../std/string/trait.ToString.html#tymethod.to_string\"><code>to_string</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'c'</span>.to_uppercase().to_string(), <span class=\"string\">\"C\"</span>);\n\n<span class=\"comment\">// Sometimes the result is more than one character:\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'√ü'</span>.to_uppercase().to_string(), <span class=\"string\">\"SS\"</span>);\n\n<span class=\"comment\">// Characters that do not have both uppercase and lowercase\n// convert into themselves.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">'Â±±'</span>.to_uppercase().to_string(), <span class=\"string\">\"Â±±\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!('c'.to_uppercase().to_string(),+%22C%22);%0A++++%0A++++//+Sometimes+the+result+is+more+than+one+character:%0A++++assert_eq!('%C3%9F'.to_uppercase().to_string(),+%22SS%22);%0A++++%0A++++//+Characters+that+do+not+have+both+uppercase+and+lowercase%0A++++//+convert+into+themselves.%0A++++assert_eq!('%E5%B1%B1'.to_uppercase().to_string(),+%22%E5%B1%B1%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"note-on-locale\"><a class=\"doc-anchor\" href=\"#note-on-locale\">¬ß</a>Note on locale</h5>\n<p>In Turkish, the equivalent of ‚Äòi‚Äô in Latin has five forms instead of two:</p>\n<ul>\n<li>‚ÄòDotless‚Äô: I / ƒ±, sometimes written √Ø</li>\n<li>‚ÄòDotted‚Äô: ƒ∞ / i</li>\n</ul>\n<p>Note that the lowercase dotted ‚Äòi‚Äô is the same as the Latin. Therefore:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>upper_i = <span class=\"string\">'i'</span>.to_uppercase().to_string();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+upper_i+=+'i'.to_uppercase().to_string();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The value of <code>upper_i</code> here relies on the language of the text: if we‚Äôre\nin <code>en-US</code>, it should be <code>\"I\"</code>, but if we‚Äôre in <code>tr_TR</code>, it should\nbe <code>\"ƒ∞\"</code>. <code>to_uppercase()</code> does not take this into account, and so:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>upper_i = <span class=\"string\">'i'</span>.to_uppercase().to_string();\n\n<span class=\"macro\">assert_eq!</span>(upper_i, <span class=\"string\">\"I\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+upper_i+=+'i'.to_uppercase().to_string();%0A++++%0A++++assert_eq!(upper_i,+%22I%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>holds across languages.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0, const since 1.32.0\">1.23.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1150\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is within the ASCII range.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ascii = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>non_ascii = <span class=\"string\">'‚ù§'</span>;\n\n<span class=\"macro\">assert!</span>(ascii.is_ascii());\n<span class=\"macro\">assert!</span>(!non_ascii.is_ascii());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ascii+=+'a';%0A++++let+non_ascii+=+'%E2%9D%A4';%0A++++%0A++++assert!(ascii.is_ascii());%0A++++assert!(!non_ascii.is_ascii());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ascii\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1163\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ascii\" class=\"fn\">as_ascii</a>(&amp;self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>Some</code> if the value is within the ASCII range,\nor <code>None</code> if it‚Äôs not.</p>\n<p>This is preferred to <a href=\"primitive.char.html#method.is_ascii\" title=\"method char::is_ascii\"><code>Self::is_ascii</code></a> when you‚Äôre passing the value\nalong to something else that can take <a href=\"ascii/enum.Char.html\" title=\"enum std::ascii::Char\"><code>ascii::Char</code></a> rather than\nneeding to check again for itself whether the value is in ASCII.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0, const since 1.52.0\">1.23.0 (const: 1.52.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1198\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>Makes a copy of the value in its ASCII upper case equivalent.</p>\n<p>ASCII letters ‚Äòa‚Äô to ‚Äòz‚Äô are mapped to ‚ÄòA‚Äô to ‚ÄòZ‚Äô,\nbut non-ASCII letters are unchanged.</p>\n<p>To uppercase the value in-place, use <a href=\"#method.make_ascii_uppercase\"><code>make_ascii_uppercase()</code></a>.</p>\n<p>To uppercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"#method.to_uppercase\"><code>to_uppercase()</code></a>.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ascii = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>non_ascii = <span class=\"string\">'‚ù§'</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'A'</span>, ascii.to_ascii_uppercase());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'‚ù§'</span>, non_ascii.to_ascii_uppercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ascii+=+'a';%0A++++let+non_ascii+=+'%E2%9D%A4';%0A++++%0A++++assert_eq!('A',+ascii.to_ascii_uppercase());%0A++++assert_eq!('%E2%9D%A4',+non_ascii.to_ascii_uppercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0, const since 1.52.0\">1.23.0 (const: 1.52.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1232\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>Makes a copy of the value in its ASCII lower case equivalent.</p>\n<p>ASCII letters ‚ÄòA‚Äô to ‚ÄòZ‚Äô are mapped to ‚Äòa‚Äô to ‚Äòz‚Äô,\nbut non-ASCII letters are unchanged.</p>\n<p>To lowercase the value in-place, use <a href=\"#method.make_ascii_lowercase\"><code>make_ascii_lowercase()</code></a>.</p>\n<p>To lowercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"#method.to_lowercase\"><code>to_lowercase()</code></a>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ascii = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>non_ascii = <span class=\"string\">'‚ù§'</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'a'</span>, ascii.to_ascii_lowercase());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'‚ù§'</span>, non_ascii.to_ascii_lowercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ascii+=+'A';%0A++++let+non_ascii+=+'%E2%9D%A4';%0A++++%0A++++assert_eq!('a',+ascii.to_ascii_lowercase());%0A++++assert_eq!('%E2%9D%A4',+non_ascii.to_ascii_lowercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_ignore_ascii_case\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0, const since 1.52.0\">1.23.0 (const: 1.52.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1260\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks that two values are an ASCII case-insensitive match.</p>\n<p>Equivalent to <code><a href=\"#method.to_ascii_lowercase\">to_ascii_lowercase</a>(a) == <a href=\"#method.to_ascii_lowercase\">to_ascii_lowercase</a>(b)</code>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>upper_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>lower_a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>lower_z = <span class=\"string\">'z'</span>;\n\n<span class=\"macro\">assert!</span>(upper_a.eq_ignore_ascii_case(<span class=\"kw-2\">&amp;</span>lower_a));\n<span class=\"macro\">assert!</span>(upper_a.eq_ignore_ascii_case(<span class=\"kw-2\">&amp;</span>upper_a));\n<span class=\"macro\">assert!</span>(!upper_a.eq_ignore_ascii_case(<span class=\"kw-2\">&amp;</span>lower_z));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+upper_a+=+'A';%0A++++let+lower_a+=+'a';%0A++++let+lower_z+=+'z';%0A++++%0A++++assert!(upper_a.eq_ignore_ascii_case(%26lower_a));%0A++++assert!(upper_a.eq_ignore_ascii_case(%26upper_a));%0A++++assert!(!upper_a.eq_ignore_ascii_case(%26lower_z));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1285\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this type to its ASCII upper case equivalent in-place.</p>\n<p>ASCII letters ‚Äòa‚Äô to ‚Äòz‚Äô are mapped to ‚ÄòA‚Äô to ‚ÄòZ‚Äô,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new uppercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_uppercase\"><code>to_ascii_uppercase()</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ascii = <span class=\"string\">'a'</span>;\n\nascii.make_ascii_uppercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'A'</span>, ascii);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+ascii+=+'a';%0A++++%0A++++ascii.make_ascii_uppercase();%0A++++%0A++++assert_eq!('A',+ascii);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1310\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this type to its ASCII lower case equivalent in-place.</p>\n<p>ASCII letters ‚ÄòA‚Äô to ‚ÄòZ‚Äô are mapped to ‚Äòa‚Äô to ‚Äòz‚Äô,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new lowercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_lowercase\"><code>to_ascii_lowercase()</code></a>.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ascii = <span class=\"string\">'A'</span>;\n\nascii.make_ascii_lowercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'a'</span>, ascii);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+ascii+=+'A';%0A++++%0A++++ascii.make_ascii_lowercase();%0A++++%0A++++assert_eq!('a',+ascii);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_alphabetic\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1346\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_alphabetic\" class=\"fn\">is_ascii_alphabetic</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII alphabetic character:</p>\n<ul>\n<li>U+0041 ‚ÄòA‚Äô ..= U+005A ‚ÄòZ‚Äô, or</li>\n<li>U+0061 ‚Äòa‚Äô ..= U+007A ‚Äòz‚Äô.</li>\n</ul>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(uppercase_a.is_ascii_alphabetic());\n<span class=\"macro\">assert!</span>(uppercase_g.is_ascii_alphabetic());\n<span class=\"macro\">assert!</span>(a.is_ascii_alphabetic());\n<span class=\"macro\">assert!</span>(g.is_ascii_alphabetic());\n<span class=\"macro\">assert!</span>(!zero.is_ascii_alphabetic());\n<span class=\"macro\">assert!</span>(!percent.is_ascii_alphabetic());\n<span class=\"macro\">assert!</span>(!space.is_ascii_alphabetic());\n<span class=\"macro\">assert!</span>(!lf.is_ascii_alphabetic());\n<span class=\"macro\">assert!</span>(!esc.is_ascii_alphabetic());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(uppercase_a.is_ascii_alphabetic());%0A++++assert!(uppercase_g.is_ascii_alphabetic());%0A++++assert!(a.is_ascii_alphabetic());%0A++++assert!(g.is_ascii_alphabetic());%0A++++assert!(!zero.is_ascii_alphabetic());%0A++++assert!(!percent.is_ascii_alphabetic());%0A++++assert!(!space.is_ascii_alphabetic());%0A++++assert!(!lf.is_ascii_alphabetic());%0A++++assert!(!esc.is_ascii_alphabetic());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1380\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_uppercase\" class=\"fn\">is_ascii_uppercase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII uppercase character:\nU+0041 ‚ÄòA‚Äô ..= U+005A ‚ÄòZ‚Äô.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(uppercase_a.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(uppercase_g.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(!a.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(!g.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(!zero.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(!percent.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(!space.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(!lf.is_ascii_uppercase());\n<span class=\"macro\">assert!</span>(!esc.is_ascii_uppercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(uppercase_a.is_ascii_uppercase());%0A++++assert!(uppercase_g.is_ascii_uppercase());%0A++++assert!(!a.is_ascii_uppercase());%0A++++assert!(!g.is_ascii_uppercase());%0A++++assert!(!zero.is_ascii_uppercase());%0A++++assert!(!percent.is_ascii_uppercase());%0A++++assert!(!space.is_ascii_uppercase());%0A++++assert!(!lf.is_ascii_uppercase());%0A++++assert!(!esc.is_ascii_uppercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1414\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_lowercase\" class=\"fn\">is_ascii_lowercase</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII lowercase character:\nU+0061 ‚Äòa‚Äô ..= U+007A ‚Äòz‚Äô.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(!uppercase_a.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(!uppercase_g.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(a.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(g.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(!zero.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(!percent.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(!space.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(!lf.is_ascii_lowercase());\n<span class=\"macro\">assert!</span>(!esc.is_ascii_lowercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(!uppercase_a.is_ascii_lowercase());%0A++++assert!(!uppercase_g.is_ascii_lowercase());%0A++++assert!(a.is_ascii_lowercase());%0A++++assert!(g.is_ascii_lowercase());%0A++++assert!(!zero.is_ascii_lowercase());%0A++++assert!(!percent.is_ascii_lowercase());%0A++++assert!(!space.is_ascii_lowercase());%0A++++assert!(!lf.is_ascii_lowercase());%0A++++assert!(!esc.is_ascii_lowercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_alphanumeric\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1451\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_alphanumeric\" class=\"fn\">is_ascii_alphanumeric</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII alphanumeric character:</p>\n<ul>\n<li>U+0041 ‚ÄòA‚Äô ..= U+005A ‚ÄòZ‚Äô, or</li>\n<li>U+0061 ‚Äòa‚Äô ..= U+007A ‚Äòz‚Äô, or</li>\n<li>U+0030 ‚Äò0‚Äô ..= U+0039 ‚Äò9‚Äô.</li>\n</ul>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(uppercase_a.is_ascii_alphanumeric());\n<span class=\"macro\">assert!</span>(uppercase_g.is_ascii_alphanumeric());\n<span class=\"macro\">assert!</span>(a.is_ascii_alphanumeric());\n<span class=\"macro\">assert!</span>(g.is_ascii_alphanumeric());\n<span class=\"macro\">assert!</span>(zero.is_ascii_alphanumeric());\n<span class=\"macro\">assert!</span>(!percent.is_ascii_alphanumeric());\n<span class=\"macro\">assert!</span>(!space.is_ascii_alphanumeric());\n<span class=\"macro\">assert!</span>(!lf.is_ascii_alphanumeric());\n<span class=\"macro\">assert!</span>(!esc.is_ascii_alphanumeric());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(uppercase_a.is_ascii_alphanumeric());%0A++++assert!(uppercase_g.is_ascii_alphanumeric());%0A++++assert!(a.is_ascii_alphanumeric());%0A++++assert!(g.is_ascii_alphanumeric());%0A++++assert!(zero.is_ascii_alphanumeric());%0A++++assert!(!percent.is_ascii_alphanumeric());%0A++++assert!(!space.is_ascii_alphanumeric());%0A++++assert!(!lf.is_ascii_alphanumeric());%0A++++assert!(!esc.is_ascii_alphanumeric());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_digit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1485\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_digit\" class=\"fn\">is_ascii_digit</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII decimal digit:\nU+0030 ‚Äò0‚Äô ..= U+0039 ‚Äò9‚Äô.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(!uppercase_a.is_ascii_digit());\n<span class=\"macro\">assert!</span>(!uppercase_g.is_ascii_digit());\n<span class=\"macro\">assert!</span>(!a.is_ascii_digit());\n<span class=\"macro\">assert!</span>(!g.is_ascii_digit());\n<span class=\"macro\">assert!</span>(zero.is_ascii_digit());\n<span class=\"macro\">assert!</span>(!percent.is_ascii_digit());\n<span class=\"macro\">assert!</span>(!space.is_ascii_digit());\n<span class=\"macro\">assert!</span>(!lf.is_ascii_digit());\n<span class=\"macro\">assert!</span>(!esc.is_ascii_digit());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(!uppercase_a.is_ascii_digit());%0A++++assert!(!uppercase_g.is_ascii_digit());%0A++++assert!(!a.is_ascii_digit());%0A++++assert!(!g.is_ascii_digit());%0A++++assert!(zero.is_ascii_digit());%0A++++assert!(!percent.is_ascii_digit());%0A++++assert!(!space.is_ascii_digit());%0A++++assert!(!lf.is_ascii_digit());%0A++++assert!(!esc.is_ascii_digit());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_octdigit\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1517\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_octdigit\" class=\"fn\">is_ascii_octdigit</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>is_ascii_octdigit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/101288\">#101288</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks if the value is an ASCII octal digit:\nU+0030 ‚Äò0‚Äô ..= U+0037 ‚Äò7‚Äô.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(is_ascii_octdigit)]\n\n</span><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>seven = <span class=\"string\">'7'</span>;\n<span class=\"kw\">let </span>nine = <span class=\"string\">'9'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n\n<span class=\"macro\">assert!</span>(!uppercase_a.is_ascii_octdigit());\n<span class=\"macro\">assert!</span>(!a.is_ascii_octdigit());\n<span class=\"macro\">assert!</span>(zero.is_ascii_octdigit());\n<span class=\"macro\">assert!</span>(seven.is_ascii_octdigit());\n<span class=\"macro\">assert!</span>(!nine.is_ascii_octdigit());\n<span class=\"macro\">assert!</span>(!percent.is_ascii_octdigit());\n<span class=\"macro\">assert!</span>(!lf.is_ascii_octdigit());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(is_ascii_octdigit)%5D%0A%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+a+=+'a';%0A++++let+zero+=+'0';%0A++++let+seven+=+'7';%0A++++let+nine+=+'9';%0A++++let+percent+=+'%25';%0A++++let+lf+=+'%5Cn';%0A++++%0A++++assert!(!uppercase_a.is_ascii_octdigit());%0A++++assert!(!a.is_ascii_octdigit());%0A++++assert!(zero.is_ascii_octdigit());%0A++++assert!(seven.is_ascii_octdigit());%0A++++assert!(!nine.is_ascii_octdigit());%0A++++assert!(!percent.is_ascii_octdigit());%0A++++assert!(!lf.is_ascii_octdigit());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_hexdigit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1554\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_hexdigit\" class=\"fn\">is_ascii_hexdigit</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII hexadecimal digit:</p>\n<ul>\n<li>U+0030 ‚Äò0‚Äô ..= U+0039 ‚Äò9‚Äô, or</li>\n<li>U+0041 ‚ÄòA‚Äô ..= U+0046 ‚ÄòF‚Äô, or</li>\n<li>U+0061 ‚Äòa‚Äô ..= U+0066 ‚Äòf‚Äô.</li>\n</ul>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(uppercase_a.is_ascii_hexdigit());\n<span class=\"macro\">assert!</span>(!uppercase_g.is_ascii_hexdigit());\n<span class=\"macro\">assert!</span>(a.is_ascii_hexdigit());\n<span class=\"macro\">assert!</span>(!g.is_ascii_hexdigit());\n<span class=\"macro\">assert!</span>(zero.is_ascii_hexdigit());\n<span class=\"macro\">assert!</span>(!percent.is_ascii_hexdigit());\n<span class=\"macro\">assert!</span>(!space.is_ascii_hexdigit());\n<span class=\"macro\">assert!</span>(!lf.is_ascii_hexdigit());\n<span class=\"macro\">assert!</span>(!esc.is_ascii_hexdigit());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(uppercase_a.is_ascii_hexdigit());%0A++++assert!(!uppercase_g.is_ascii_hexdigit());%0A++++assert!(a.is_ascii_hexdigit());%0A++++assert!(!g.is_ascii_hexdigit());%0A++++assert!(zero.is_ascii_hexdigit());%0A++++assert!(!percent.is_ascii_hexdigit());%0A++++assert!(!space.is_ascii_hexdigit());%0A++++assert!(!lf.is_ascii_hexdigit());%0A++++assert!(!esc.is_ascii_hexdigit());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_punctuation\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1592\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_punctuation\" class=\"fn\">is_ascii_punctuation</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII punctuation character:</p>\n<ul>\n<li>U+0021 ..= U+002F <code>! \" # $ % &amp; ' ( ) * + , - . /</code>, or</li>\n<li>U+003A ..= U+0040 <code>: ; &lt; = &gt; ? @</code>, or</li>\n<li>U+005B ..= U+0060 <code>[ \\ ] ^ _ ` </code>, or</li>\n<li>U+007B ..= U+007E <code>{ | } ~</code></li>\n</ul>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(!uppercase_a.is_ascii_punctuation());\n<span class=\"macro\">assert!</span>(!uppercase_g.is_ascii_punctuation());\n<span class=\"macro\">assert!</span>(!a.is_ascii_punctuation());\n<span class=\"macro\">assert!</span>(!g.is_ascii_punctuation());\n<span class=\"macro\">assert!</span>(!zero.is_ascii_punctuation());\n<span class=\"macro\">assert!</span>(percent.is_ascii_punctuation());\n<span class=\"macro\">assert!</span>(!space.is_ascii_punctuation());\n<span class=\"macro\">assert!</span>(!lf.is_ascii_punctuation());\n<span class=\"macro\">assert!</span>(!esc.is_ascii_punctuation());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(!uppercase_a.is_ascii_punctuation());%0A++++assert!(!uppercase_g.is_ascii_punctuation());%0A++++assert!(!a.is_ascii_punctuation());%0A++++assert!(!g.is_ascii_punctuation());%0A++++assert!(!zero.is_ascii_punctuation());%0A++++assert!(percent.is_ascii_punctuation());%0A++++assert!(!space.is_ascii_punctuation());%0A++++assert!(!lf.is_ascii_punctuation());%0A++++assert!(!esc.is_ascii_punctuation());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_graphic\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1629\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_graphic\" class=\"fn\">is_ascii_graphic</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII graphic character:\nU+0021 ‚Äò!‚Äô ..= U+007E ‚Äò~‚Äô.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(uppercase_a.is_ascii_graphic());\n<span class=\"macro\">assert!</span>(uppercase_g.is_ascii_graphic());\n<span class=\"macro\">assert!</span>(a.is_ascii_graphic());\n<span class=\"macro\">assert!</span>(g.is_ascii_graphic());\n<span class=\"macro\">assert!</span>(zero.is_ascii_graphic());\n<span class=\"macro\">assert!</span>(percent.is_ascii_graphic());\n<span class=\"macro\">assert!</span>(!space.is_ascii_graphic());\n<span class=\"macro\">assert!</span>(!lf.is_ascii_graphic());\n<span class=\"macro\">assert!</span>(!esc.is_ascii_graphic());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(uppercase_a.is_ascii_graphic());%0A++++assert!(uppercase_g.is_ascii_graphic());%0A++++assert!(a.is_ascii_graphic());%0A++++assert!(g.is_ascii_graphic());%0A++++assert!(zero.is_ascii_graphic());%0A++++assert!(percent.is_ascii_graphic());%0A++++assert!(!space.is_ascii_graphic());%0A++++assert!(!lf.is_ascii_graphic());%0A++++assert!(!esc.is_ascii_graphic());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_whitespace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_whitespace\" class=\"fn\">is_ascii_whitespace</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII whitespace character:\nU+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED,\nU+000C FORM FEED, or U+000D CARRIAGE RETURN.</p>\n<p>Rust uses the WhatWG Infra Standard‚Äôs <a href=\"https://infra.spec.whatwg.org/#ascii-whitespace\">definition of ASCII\nwhitespace</a>. There are several other definitions in\nwide use. For instance, <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\">the POSIX locale</a> includes\nU+000B VERTICAL TAB as well as all the above characters,\nbut‚Äîfrom the very same specification‚Äî<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\">the default rule for\n‚Äúfield splitting‚Äù in the Bourne shell</a> considers <em>only</em>\nSPACE, HORIZONTAL TAB, and LINE FEED as whitespace.</p>\n<p>If you are writing a program that will process an existing\nfile format, check what that format‚Äôs definition of whitespace is\nbefore using this function.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(!uppercase_a.is_ascii_whitespace());\n<span class=\"macro\">assert!</span>(!uppercase_g.is_ascii_whitespace());\n<span class=\"macro\">assert!</span>(!a.is_ascii_whitespace());\n<span class=\"macro\">assert!</span>(!g.is_ascii_whitespace());\n<span class=\"macro\">assert!</span>(!zero.is_ascii_whitespace());\n<span class=\"macro\">assert!</span>(!percent.is_ascii_whitespace());\n<span class=\"macro\">assert!</span>(space.is_ascii_whitespace());\n<span class=\"macro\">assert!</span>(lf.is_ascii_whitespace());\n<span class=\"macro\">assert!</span>(!esc.is_ascii_whitespace());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(!uppercase_a.is_ascii_whitespace());%0A++++assert!(!uppercase_g.is_ascii_whitespace());%0A++++assert!(!a.is_ascii_whitespace());%0A++++assert!(!g.is_ascii_whitespace());%0A++++assert!(!zero.is_ascii_whitespace());%0A++++assert!(!percent.is_ascii_whitespace());%0A++++assert!(space.is_ascii_whitespace());%0A++++assert!(lf.is_ascii_whitespace());%0A++++assert!(!esc.is_ascii_whitespace());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii_control\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const since 1.47.0\">1.24.0 (const: 1.47.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/methods.rs.html#1716\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ascii_control\" class=\"fn\">is_ascii_control</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the value is an ASCII control character:\nU+0000 NUL ..= U+001F UNIT SEPARATOR, or U+007F DELETE.\nNote that most ASCII whitespace characters are control\ncharacters, but SPACE is not.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>uppercase_a = <span class=\"string\">'A'</span>;\n<span class=\"kw\">let </span>uppercase_g = <span class=\"string\">'G'</span>;\n<span class=\"kw\">let </span>a = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>g = <span class=\"string\">'g'</span>;\n<span class=\"kw\">let </span>zero = <span class=\"string\">'0'</span>;\n<span class=\"kw\">let </span>percent = <span class=\"string\">'%'</span>;\n<span class=\"kw\">let </span>space = <span class=\"string\">' '</span>;\n<span class=\"kw\">let </span>lf = <span class=\"string\">'\\n'</span>;\n<span class=\"kw\">let </span>esc = <span class=\"string\">'\\x1b'</span>;\n\n<span class=\"macro\">assert!</span>(!uppercase_a.is_ascii_control());\n<span class=\"macro\">assert!</span>(!uppercase_g.is_ascii_control());\n<span class=\"macro\">assert!</span>(!a.is_ascii_control());\n<span class=\"macro\">assert!</span>(!g.is_ascii_control());\n<span class=\"macro\">assert!</span>(!zero.is_ascii_control());\n<span class=\"macro\">assert!</span>(!percent.is_ascii_control());\n<span class=\"macro\">assert!</span>(!space.is_ascii_control());\n<span class=\"macro\">assert!</span>(lf.is_ascii_control());\n<span class=\"macro\">assert!</span>(esc.is_ascii_control());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+uppercase_a+=+'A';%0A++++let+uppercase_g+=+'G';%0A++++let+a+=+'a';%0A++++let+g+=+'g';%0A++++let+zero+=+'0';%0A++++let+percent+=+'%25';%0A++++let+space+=+'+';%0A++++let+lf+=+'%5Cn';%0A++++let+esc+=+'%5Cx1b';%0A++++%0A++++assert!(!uppercase_a.is_ascii_control());%0A++++assert!(!uppercase_g.is_ascii_control());%0A++++assert!(!a.is_ascii_control());%0A++++assert!(!g.is_ascii_control());%0A++++assert!(!zero.is_ascii_control());%0A++++assert!(!percent.is_ascii_control());%0A++++assert!(!space.is_ascii_control());%0A++++assert!(lf.is_ascii_control());%0A++++assert!(esc.is_ascii_control());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsciiExt-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../src/std/ascii.rs.html#191-195\">source</a></span><a href=\"#impl-AsciiExt-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ascii/trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"ascii/trait.AsciiExt.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Container type for copied ASCII characters.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#194\">source</a><a href=\"#method.is_ascii-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Checks if the value is within the ASCII range. <a href=\"ascii/trait.AsciiExt.html#tymethod.is_ascii\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_uppercase-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#194\">source</a><a href=\"#method.to_ascii_uppercase-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"ascii/trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Makes a copy of the value in its ASCII upper case equivalent. <a href=\"ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_lowercase-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#194\">source</a><a href=\"#method.to_ascii_lowercase-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"ascii/trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Makes a copy of the value in its ASCII lower case equivalent. <a href=\"ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_ignore_ascii_case-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#194\">source</a><a href=\"#method.eq_ignore_ascii_case-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, o: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Checks that two values are an ASCII case-insensitive match. <a href=\"ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_uppercase-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#194\">source</a><a href=\"#method.make_ascii_uppercase-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Converts this type to its ASCII upper case equivalent in-place. <a href=\"ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_lowercase-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/ascii.rs.html#194\">source</a><a href=\"#method.make_ascii_lowercase-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class=\"docblock\">Converts this type to its ASCII lower case equivalent in-place. <a href=\"ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#227-232\">source</a></span><a href=\"#impl-Clone-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#227-232\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2454\">source</a></span><a href=\"#impl-Debug-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2455\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#164\">source</a></span><a href=\"#impl-Default-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/default.rs.html#164\">source</a><a href=\"#method.default\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>\\x00</code></p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2468\">source</a></span><a href=\"#impl-Display-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2469\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C%26char%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2213\">source</a></span><a href=\"#impl-Extend%3C%26char%3E-for-String\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2214\">source</a><a href=\"#method.extend-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2219\">source</a><a href=\"#method.extend_one-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: &amp;'a <a class=\"primitive\" href=\"primitive.char.html\">char</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2224\">source</a><a href=\"#method.extend_reserve-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3Cchar%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2192\">source</a></span><a href=\"#impl-Extend%3Cchar%3E-for-String\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2193\">source</a><a href=\"#method.extend\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2201\">source</a><a href=\"#method.extend_one\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2206\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChar%3E-for-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#impl-From%3CChar%3E-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>&gt; for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#554\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(chr: <a class=\"enum\" href=\"ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>) -&gt; <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cchar%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#3041\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-String\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#3051\">source</a><a href=\"#method.from-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Allocates an owned <a href=\"string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> from a single character.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c: char = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>s: String = String::from(c);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"a\"</span>, <span class=\"kw-2\">&amp;</span>s[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+c:+char+=+'a';%0A++++let+s:+String+=+String::from(c);%0A++++assert_eq!(%22a%22,+%26s%5B..%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cchar%3E-for-u128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#77\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-u128\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u128.html\">u128</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#90\">source</a><a href=\"#method.from-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"primitive.u128.html\" title=\"primitive u128\"><code>u128</code></a>.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>c = <span class=\"string\">'‚öô'</span>;\n<span class=\"kw\">let </span>u = u128::from(c);\n<span class=\"macro\">assert!</span>(<span class=\"number\">16 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>u))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+c+=+'%E2%9A%99';%0A++++let+u+=+u128::from(c);%0A++++assert!(16+==+mem::size_of_val(%26u))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cchar%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#37\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-u32\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#50\">source</a><a href=\"#method.from-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>c = <span class=\"string\">'c'</span>;\n<span class=\"kw\">let </span>u = u32::from(c);\n<span class=\"macro\">assert!</span>(<span class=\"number\">4 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>u))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+c+=+'c';%0A++++let+u+=+u32::from(c);%0A++++assert!(4+==+mem::size_of_val(%26u))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cchar%3E-for-u64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#56\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-u64\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#69\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"primitive.u64.html\" title=\"primitive u64\"><code>u64</code></a>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>c = <span class=\"string\">'üë§'</span>;\n<span class=\"kw\">let </span>u = u64::from(c);\n<span class=\"macro\">assert!</span>(<span class=\"number\">8 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>u))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+c+=+'%F0%9F%91%A4';%0A++++let+u+=+u64::from(c);%0A++++assert!(8+==+mem::size_of_val(%26u))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cu8%3E-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#164\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"docblock\"><p>Maps a byte in 0x00..=0xFF to a <code>char</code> whose code point has the same value, in U+0000..=U+00FF.</p>\n<p>Unicode is designed such that this effectively decodes bytes\nwith the character encoding that IANA calls ISO-8859-1.\nThis encoding is compatible with ASCII.</p>\n<p>Note that this is different from ISO/IEC 8859-1 a.k.a. ISO 8859-1 (with one less hyphen),\nwhich leaves some ‚Äúblanks‚Äù, byte values that are not assigned to any character.\nISO-8859-1 (the IANA one) assigns them to the C0 and C1 control codes.</p>\n<p>Note that this is <em>also</em> different from Windows-1252 a.k.a. code page 1252,\nwhich is a superset ISO/IEC 8859-1 that assigns some (not all!) blanks\nto punctuation and various Latin characters.</p>\n<p>To confuse things further, <a href=\"https://encoding.spec.whatwg.org/\">on the Web</a>\n<code>ascii</code>, <code>iso-8859-1</code>, and <code>windows-1252</code> are all aliases\nfor a superset of Windows-1252 that fills the remaining blanks with corresponding\nC0 and C1 control codes.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#177\">source</a><a href=\"#method.from-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(i: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a> into a <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>u = <span class=\"number\">32 </span><span class=\"kw\">as </span>u8;\n<span class=\"kw\">let </span>c = char::from(u);\n<span class=\"macro\">assert!</span>(<span class=\"number\">4 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>c))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+u+=+32+as+u8;%0A++++let+c+=+char::from(u);%0A++++assert!(4+==+mem::size_of_val(%26c))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2179\">source</a></span><a href=\"#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2180\">source</a><a href=\"#method.from_iter-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C%26char%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2123\">source</a></span><a href=\"#impl-FromIterator%3C%26char%3E-for-String\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2124\">source</a><a href=\"#method.from_iter-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2171\">source</a></span><a href=\"#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2172\">source</a><a href=\"#method.from_iter\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3Cchar%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2875\">source</a></span><a href=\"#impl-FromIterator%3Cchar%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2876\">source</a><a href=\"#method.from_iter-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(it: I) -&gt; <a class=\"enum\" href=\"borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3Cchar%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2113\">source</a></span><a href=\"#impl-FromIterator%3Cchar%3E-for-String\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2114\">source</a><a href=\"#method.from_iter-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromStr-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#217\">source</a></span><a href=\"#impl-FromStr-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"char/struct.ParseCharError.html\" title=\"struct std::char::ParseCharError\">ParseCharError</a></h4></section></summary><div class=\"docblock\">The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#221\">source</a><a href=\"#method.from_str\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>, &lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a> as <a class=\"trait\" href=\"str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"str/trait.FromStr.html#associatedtype.Err\" title=\"type std::str::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class=\"docblock\">Parses a string <code>s</code> to return a value of this type. <a href=\"str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#860\">source</a></span><a href=\"#impl-Hash-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#862\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a><a href=\"#method.cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/92391\" title=\"Tracking issue for const_cmp\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502\">source</a></span><a href=\"#impl-PartialEq-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">const fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1500-1502\">source</a><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">const fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-PartialOrd-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a><a href=\"#method.lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a><a href=\"#method.le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a><a href=\"#method.ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a><a href=\"#method.gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pattern%3C'a%3E-for-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#546\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"docblock\"><p>Searches for chars that are equal to a given <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a>.</p>\n<h4 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">¬ß</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello world\"</span>.find(<span class=\"string\">'o'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%22Hello+world%22.find('o'),+Some(4));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Searcher\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"str/pattern/struct.CharSearcher.html\" title=\"struct std::str::pattern::CharSearcher\">CharSearcher</a>&lt;'a&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Associated searcher for this pattern</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_searcher\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#550\">source</a><a href=\"#method.into_searcher\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a> as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Constructs the associated searcher from\n<code>self</code> and the <code>haystack</code> to search in.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_contained_in\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#569\">source</a><a href=\"#method.is_contained_in\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches anywhere in the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#579\">source</a><a href=\"#method.is_prefix_of\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the front of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#584\">source</a><a href=\"#method.strip_prefix_of\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the front of haystack, if it matches.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#589-591\">source</a><a href=\"#method.is_suffix_of\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    &lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a> as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the back of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#597-599\">source</a><a href=\"#method.strip_suffix_of\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"str/pattern/trait.Pattern.html#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    &lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a> as <a class=\"trait\" href=\"str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the back of haystack, if it matches.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Step-for-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#435\">source</a><a href=\"#impl-Step-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.steps_between\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#437\">source</a><a href=\"#method.steps_between\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Step.html#tymethod.steps_between\" class=\"fn\">steps_between</a>(_: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>, _: &amp;<a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"iter/trait.Step.html#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#453\">source</a><a href=\"#method.forward_checked\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Step.html#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.char.html\">char</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"iter/trait.Step.html#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#469\">source</a><a href=\"#method.backward_checked\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Step.html#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.char.html\">char</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"iter/trait.Step.html#tymethod.backward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#481\">source</a><a href=\"#method.forward_unchecked\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">unsafe fn <a href=\"iter/trait.Step.html#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.char.html\">char</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"iter/trait.Step.html#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#497\">source</a><a href=\"#method.backward_unchecked\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">unsafe fn <a href=\"iter/trait.Step.html#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.char.html\">char</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.char.html\">char</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"iter/trait.Step.html#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.forward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#85\">source</a><a href=\"#method.forward\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Step.html#method.forward\" class=\"fn\">forward</a>(start: Self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"iter/trait.Step.html#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.backward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#155\">source</a><a href=\"#method.backward\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Step.html#method.backward\" class=\"fn\">backward</a>(start: Self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class=\"docblock\">Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"iter/trait.Step.html#method.backward\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cchar%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#126\">source</a></span><a href=\"#impl-TryFrom%3Cchar%3E-for-u16\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u16.html\">u16</a></h3></section></summary><div class=\"docblock\"><p>Maps a <code>char</code> with code point in U+0000..=U+FFFF to a <code>u16</code> in 0x0000..=0xFFFF with same value,\nfailing if the code point is greater than U+FFFF.</p>\n<p>This corresponds to the UCS-2 encoding, as specified in ISO/IEC 10646:2003.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#140\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to convert a <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>trans_rights = <span class=\"string\">'‚öß'</span>; <span class=\"comment\">// U+26A7\n</span><span class=\"kw\">let </span>ninjas = <span class=\"string\">'ü•∑'</span>; <span class=\"comment\">// U+1F977\n</span><span class=\"macro\">assert_eq!</span>(u16::try_from(trans_rights), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">0x26A7_u16</span>));\n<span class=\"macro\">assert!</span>(u16::try_from(ninjas).is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+trans_rights+=+'%E2%9A%A7';+//+U%2B26A7%0A++++let+ninjas+=+'%F0%9F%A5%B7';+//+U%2B1F977%0A++++assert_eq!(u16::try_from(trans_rights),+Ok(0x26A7_u16));%0A++++assert!(u16::try_from(ninjas).is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"char/struct.TryFromCharError.html\" title=\"struct std::char::TryFromCharError\">TryFromCharError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cchar%3E-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0\">1.59.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#102\">source</a></span><a href=\"#impl-TryFrom%3Cchar%3E-for-u8\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u8.html\">u8</a></h3></section></summary><div class=\"docblock\"><p>Maps a <code>char</code> with code point in U+0000..=U+00FF to a byte in 0x00..=0xFF with same value,\nfailing if the code point is greater than U+00FF.</p>\n<p>See <a href=\"primitive.char.html#impl-From%3Cu8%3E-for-char\" title=\"primitive char\"><code>impl From&lt;u8&gt; for char</code></a> for details on the encoding.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#116\">source</a><a href=\"#method.try_from-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>, &lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a> as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to convert a <a href=\"primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"string\">'√ø'</span>; <span class=\"comment\">// U+00FF\n</span><span class=\"kw\">let </span>b = <span class=\"string\">'ƒÄ'</span>; <span class=\"comment\">// U+0100\n</span><span class=\"macro\">assert_eq!</span>(u8::try_from(a), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">0xFF_u8</span>));\n<span class=\"macro\">assert!</span>(u8::try_from(b).is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+'%C3%BF';+//+U%2B00FF%0A++++let+b+=+'%C4%80';+//+U%2B0100%0A++++assert_eq!(u8::try_from(a),+Ok(0xFF_u8));%0A++++assert!(u8::try_from(b).is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"char/struct.TryFromCharError.html\" title=\"struct std::char::TryFromCharError\">TryFromCharError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3Cu32%3E-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#255\">source</a></span><a href=\"#impl-TryFrom%3Cu32%3E-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"char/struct.CharTryFromError.html\" title=\"struct std::char::CharTryFromError\">CharTryFromError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/convert.rs.html#259\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(i: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>, &lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a> as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><section id=\"impl-ConstParamTy-for-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#992-1003\">source</a><a href=\"#impl-ConstParamTy-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section><section id=\"impl-Copy-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#420-430\">source</a></span><a href=\"#impl-Copy-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section><section id=\"impl-Eq-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1511\">source</a></span><a href=\"#impl-Eq-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section><section id=\"impl-StructuralPartialEq-for-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section><section id=\"impl-TrustedStep-for-char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#18\">source</a><a href=\"#impl-TrustedStep-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-char\" class=\"impl\"><a href=\"#impl-Freeze-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section><section id=\"impl-RefUnwindSafe-for-char\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section><section id=\"impl-Send-for-char\" class=\"impl\"><a href=\"#impl-Send-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section><section id=\"impl-Sync-for-char\" class=\"impl\"><a href=\"#impl-Sync-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section><section id=\"impl-Unpin-for-char\" class=\"impl\"><a href=\"#impl-Unpin-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section><section id=\"impl-UnwindSafe-for-char\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-char\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"primitive\" href=\"primitive.char.html\">char</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">default fn <a href=\"string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"DecodeUtf16<<I as IntoIterator>::IntoIter>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"char/struct.DecodeUtf16.html\\\" title=\\\"struct std::char::DecodeUtf16\\\">DecodeUtf16</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I&gt; <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"char/struct.DecodeUtf16.html\\\" title=\\\"struct std::char::DecodeUtf16\\\">DecodeUtf16</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&lt;Item = <a class=\\\"primitive\\\" href=\\\"primitive.u16.html\\\">u16</a>&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"enum\\\" href=\\\"result/enum.Result.html\\\" title=\\\"enum std::result::Result\\\">Result</a>&lt;<a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>, <a class=\\\"struct\\\" href=\\\"char/struct.DecodeUtf16Error.html\\\" title=\\\"struct std::char::DecodeUtf16Error\\\">DecodeUtf16Error</a>&gt;;</div>\",\"EscapeDebug\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"char/struct.EscapeDebug.html\\\" title=\\\"struct std::char::EscapeDebug\\\">EscapeDebug</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"char/struct.EscapeDebug.html\\\" title=\\\"struct std::char::EscapeDebug\\\">EscapeDebug</a></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>;</div>\",\"EscapeDefault\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"char/struct.EscapeDefault.html\\\" title=\\\"struct std::char::EscapeDefault\\\">EscapeDefault</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"char/struct.EscapeDefault.html\\\" title=\\\"struct std::char::EscapeDefault\\\">EscapeDefault</a></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>;</div>\",\"EscapeUnicode\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"char/struct.EscapeUnicode.html\\\" title=\\\"struct std::char::EscapeUnicode\\\">EscapeUnicode</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"char/struct.EscapeUnicode.html\\\" title=\\\"struct std::char::EscapeUnicode\\\">EscapeUnicode</a></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>;</div>\",\"ToLowercase\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"char/struct.ToLowercase.html\\\" title=\\\"struct std::char::ToLowercase\\\">ToLowercase</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"char/struct.ToLowercase.html\\\" title=\\\"struct std::char::ToLowercase\\\">ToLowercase</a></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>;</div>\",\"ToUppercase\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"char/struct.ToUppercase.html\\\" title=\\\"struct std::char::ToUppercase\\\">ToUppercase</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"char/struct.ToUppercase.html\\\" title=\\\"struct std::char::ToUppercase\\\">ToUppercase</a></div><div class=\\\"where\\\">    type <a href=\\\"iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"primitive.char.html\\\">char</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:09:54.384Z"
}