{
	"title": "write in std - Rust",
	"url": "https://doc.rust-lang.org/stable/std/macro.write.html",
	"markdown": "# write in std - Rust\n\n## Macro [std](index.html)::[write](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/macros/mod.rs.html#630) ·\n\n```\nmacro_rules! write {\n    ($dst:expr, $($arg:tt)*) => { ... };\n}\n```\n\nExpand description\n\nWrites formatted data into a buffer.\n\nThis macro accepts a ‘writer’, a format string, and a list of arguments. Arguments will be formatted according to the specified format string and the result will be passed to the writer. The writer may be any value with a `write_fmt` method; generally this comes from an implementation of either the [`fmt::Write`](fmt/trait.Write.html \"trait std::fmt::Write\") or the [`io::Write`](../std/io/trait.Write.html) trait. The macro returns whatever the `write_fmt` method returns; commonly a [`fmt::Result`](fmt/type.Result.html \"type std::fmt::Result\"), or an [`io::Result`](../std/io/type.Result.html).\n\nSee [`std::fmt`](../std/fmt/index.html) for more information on the format string syntax.\n\n## [§](#examples)Examples\n\n```\nuse std::io::Write;\n\nfn main() -> std::io::Result<()> {\n    let mut w = Vec::new();\n    write!(&mut w, \"test\")?;\n    write!(&mut w, \"formatted {}\", \"arguments\")?;\n\n    assert_eq!(w, b\"testformatted arguments\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::Write;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+w+=+Vec::new();%0A++++write!(%26mut+w,+%22test%22)?;%0A++++write!(%26mut+w,+%22formatted+%7B%7D%22,+%22arguments%22)?;%0A%0A++++assert_eq!(w,+b%22testformatted+arguments%22);%0A++++Ok(())%0A%7D&edition=2021)\n\nA module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects implementing either, as objects do not typically implement both. However, the module must avoid conflict between the trait names, such as by importing them as `_` or otherwise renaming them:\n\n```\nuse std::fmt::Write as _;\nuse std::io::Write as _;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let mut s = String::new();\n    let mut v = Vec::new();\n\n    write!(&mut s, \"{} {}\", \"abc\", 123)?; // uses fmt::Write::write_fmt\n    write!(&mut v, \"s = {:?}\", s)?; // uses io::Write::write_fmt\n    assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fmt::Write+as+_;%0Ause+std::io::Write+as+_;%0A%0Afn+main()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0A++++let+mut+s+=+String::new();%0A++++let+mut+v+=+Vec::new();%0A%0A++++write!(%26mut+s,+%22%7B%7D+%7B%7D%22,+%22abc%22,+123)?;+//+uses+fmt::Write::write_fmt%0A++++write!(%26mut+v,+%22s+=+%7B:?%7D%22,+s)?;+//+uses+io::Write::write_fmt%0A++++assert_eq!(v,+b%22s+=+%5C%22abc+123%5C%22%22);%0A++++Ok(())%0A%7D&edition=2021)\n\nIf you also need the trait names themselves, such as to implement one or both on your types, import the containing module and then name them with a prefix:\n\n```\nuse std::fmt::{self, Write as _};\nuse std::io::{self, Write as _};\n\nstruct Example;\n\nimpl fmt::Write for Example {\n    fn write_str(&mut self, _s: &str) -> core::fmt::Result {\n         unimplemented!();\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_imports)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7Bself,+Write+as+_%7D;%0A++++use+std::io::%7Bself,+Write+as+_%7D;%0A++++%0A++++struct+Example;%0A++++%0A++++impl+fmt::Write+for+Example+%7B%0A++++++++fn+write_str(%26mut+self,+_s:+%26str)+-%3E+core::fmt::Result+%7B%0A+++++++++++++unimplemented!();%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nNote: This macro can be used in `no_std` setups as well. In a `no_std` setup you are responsible for the implementation details of the components.\n\n```\nuse core::fmt::Write;\n\nstruct Example;\n\nimpl Write for Example {\n    fn write_str(&mut self, _s: &str) -> core::fmt::Result {\n         unimplemented!();\n    }\n}\n\nlet mut m = Example{};\nwrite!(&mut m, \"Hello World\").expect(\"Not written\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::fmt::Write;%0A++++%0A++++struct+Example;%0A++++%0A++++impl+Write+for+Example+%7B%0A++++++++fn+write_str(%26mut+self,+_s:+%26str)+-%3E+core::fmt::Result+%7B%0A+++++++++++++unimplemented!();%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+m+=+Example%7B%7D;%0A++++write!(%26mut+m,+%22Hello+World%22).expect(%22Not+written%22);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Writes formatted data into a buffer.\"><title>write in std - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc macro\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Macro <a href=\"index.html\">std</a>::<wbr><a class=\"macro\" href=\"#\">write</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/macros/mod.rs.html#630\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><span class=\"macro\">macro_rules!</span> write {\n    (<span class=\"macro-nonterminal\">$dst</span>:expr, $(<span class=\"macro-nonterminal\">$arg</span>:tt)<span class=\"kw-2\">*</span>) =&gt; { ... };\n}</pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Writes formatted data into a buffer.</p>\n<p>This macro accepts a ‘writer’, a format string, and a list of arguments. Arguments will be\nformatted according to the specified format string and the result will be passed to the writer.\nThe writer may be any value with a <code>write_fmt</code> method; generally this comes from an\nimplementation of either the <a href=\"fmt/trait.Write.html\" title=\"trait std::fmt::Write\"><code>fmt::Write</code></a> or the <a href=\"../std/io/trait.Write.html\"><code>io::Write</code></a> trait. The macro\nreturns whatever the <code>write_fmt</code> method returns; commonly a <a href=\"fmt/type.Result.html\" title=\"type std::fmt::Result\"><code>fmt::Result</code></a>, or an\n<a href=\"../std/io/type.Result.html\"><code>io::Result</code></a>.</p>\n<p>See <a href=\"../std/fmt/index.html\"><code>std::fmt</code></a> for more information on the format string syntax.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::Write;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>w = Vec::new();\n    <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>w, <span class=\"string\">\"test\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>w, <span class=\"string\">\"formatted {}\"</span>, <span class=\"string\">\"arguments\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">assert_eq!</span>(w, <span class=\"string\">b\"testformatted arguments\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::Write;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+w+=+Vec::new();%0A++++write!(%26mut+w,+%22test%22)?;%0A++++write!(%26mut+w,+%22formatted+%7B%7D%22,+%22arguments%22)?;%0A%0A++++assert_eq!(w,+b%22testformatted+arguments%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A module can import both <code>std::fmt::Write</code> and <code>std::io::Write</code> and call <code>write!</code> on objects\nimplementing either, as objects do not typically implement both. However, the module must\navoid conflict between the trait names, such as by importing them as <code>_</code> or otherwise renaming\nthem:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt::Write <span class=\"kw\">as _</span>;\n<span class=\"kw\">use </span>std::io::Write <span class=\"kw\">as _</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), Box&lt;<span class=\"kw\">dyn </span>std::error::Error&gt;&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::new();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::new();\n\n    <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>s, <span class=\"string\">\"{} {}\"</span>, <span class=\"string\">\"abc\"</span>, <span class=\"number\">123</span>)<span class=\"question-mark\">?</span>; <span class=\"comment\">// uses fmt::Write::write_fmt\n    </span><span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"string\">\"s = {:?}\"</span>, s)<span class=\"question-mark\">?</span>; <span class=\"comment\">// uses io::Write::write_fmt\n    </span><span class=\"macro\">assert_eq!</span>(v, <span class=\"string\">b\"s = \\\"abc 123\\\"\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fmt::Write+as+_;%0Ause+std::io::Write+as+_;%0A%0Afn+main()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0A++++let+mut+s+=+String::new();%0A++++let+mut+v+=+Vec::new();%0A%0A++++write!(%26mut+s,+%22%7B%7D+%7B%7D%22,+%22abc%22,+123)?;+//+uses+fmt::Write::write_fmt%0A++++write!(%26mut+v,+%22s+=+%7B:?%7D%22,+s)?;+//+uses+io::Write::write_fmt%0A++++assert_eq!(v,+b%22s+=+%5C%22abc+123%5C%22%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you also need the trait names themselves, such as to implement one or both on your types,\nimport the containing module and then name them with a prefix:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt::{<span class=\"self\">self</span>, Write <span class=\"kw\">as _</span>};\n<span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write <span class=\"kw\">as _</span>};\n\n<span class=\"kw\">struct </span>Example;\n\n<span class=\"kw\">impl </span>fmt::Write <span class=\"kw\">for </span>Example {\n    <span class=\"kw\">fn </span>write_str(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, _s: <span class=\"kw-2\">&amp;</span>str) -&gt; core::fmt::Result {\n         <span class=\"macro\">unimplemented!</span>();\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_imports)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7Bself,+Write+as+_%7D;%0A++++use+std::io::%7Bself,+Write+as+_%7D;%0A++++%0A++++struct+Example;%0A++++%0A++++impl+fmt::Write+for+Example+%7B%0A++++++++fn+write_str(%26mut+self,+_s:+%26str)+-%3E+core::fmt::Result+%7B%0A+++++++++++++unimplemented!();%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note: This macro can be used in <code>no_std</code> setups as well.\nIn a <code>no_std</code> setup you are responsible for the implementation details of the components.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::fmt::Write;\n\n<span class=\"kw\">struct </span>Example;\n\n<span class=\"kw\">impl </span>Write <span class=\"kw\">for </span>Example {\n    <span class=\"kw\">fn </span>write_str(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, _s: <span class=\"kw-2\">&amp;</span>str) -&gt; core::fmt::Result {\n         <span class=\"macro\">unimplemented!</span>();\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = Example{};\n<span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>m, <span class=\"string\">\"Hello World\"</span>).expect(<span class=\"string\">\"Not written\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::fmt::Write;%0A++++%0A++++struct+Example;%0A++++%0A++++impl+Write+for+Example+%7B%0A++++++++fn+write_str(%26mut+self,+_s:+%26str)+-%3E+core::fmt::Result+%7B%0A+++++++++++++unimplemented!();%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+m+=+Example%7B%7D;%0A++++write!(%26mut+m,+%22Hello+World%22).expect(%22Not+written%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:18.468Z"
}