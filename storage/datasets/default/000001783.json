{
	"title": "Panic macro consistency - The Rust Edition Guide",
	"url": "https://doc.rust-lang.org/stable/edition-guide/rust-2021/panic-macro-consistency.html",
	"markdown": "# Panic macro consistency - The Rust Edition Guide\n\n## [Summary](#summary)\n\n-   `panic!(..)` now always uses `format_args!(..)`, just like `println!()`.\n-   `panic!(\"{\")` is no longer accepted, without escaping the `{` as `{{`.\n-   `panic!(x)` is no longer accepted if `x` is not a string literal.\n    -   Use `std::panic::panic_any(x)` to panic with a non-string payload.\n    -   Or use `panic!(\"{}\", x)` to use `x`'s `Display` implementation.\n-   The same applies to `assert!(expr, ..)`.\n\n## [Details](#details)\n\nThe `panic!()` macro is one of Rust's most well known macros. However, it has [some subtle surprises](https://github.com/rust-lang/rfcs/blob/master/text/3007-panic-plan.md) that we can't just change due to backwards compatibility.\n\n```rust\n// Rust 2018\npanic!(\"{}\", 1); // Ok, panics with the message \"1\"\npanic!(\"{}\"); // Ok, panics with the message \"{}\"\n```\n\nThe `panic!()` macro only uses string formatting when it's invoked with more than one argument. When invoked with a single argument, it doesn't even look at that argument.\n\n```rust\n// Rust 2018\nlet a = \"{\";\nprintln!(a); // Error: First argument must be a format string literal\npanic!(a); // Ok: The panic macro doesn't care\n```\n\nIt even accepts non-strings such as `panic!(123)`, which is uncommon and rarely useful since it produces a surprisingly unhelpful message: `panicked at 'Box<Any>'`.\n\nThis will especially be a problem once [implicit format arguments](https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html) are stabilized. That feature will make `println!(\"hello {name}\")` a short-hand for `println!(\"hello {}\", name)`. However, `panic!(\"hello {name}\")` would not work as expected, since `panic!()` doesn't process a single argument as format string.\n\nTo avoid that confusing situation, Rust 2021 features a more consistent `panic!()` macro. The new `panic!()` macro will no longer accept arbitrary expressions as the only argument. It will, just like `println!()`, always process the first argument as format string. Since `panic!()` will no longer accept arbitrary payloads, [`panic_any()`](https://doc.rust-lang.org/stable/std/panic/fn.panic_any.html) will be the only way to panic with something other than a formatted string.\n\n```rust\n// Rust 2021\npanic!(\"{}\", 1); // Ok, panics with the message \"1\"\npanic!(\"{}\"); // Error, missing argument\npanic!(a); // Error, must be a string literal\n```\n\nIn addition, `core::panic!()` and `std::panic!()` will be identical in Rust 2021. Currently, there are some historical differences between those two, which can be noticeable when switching `#![no_std]` on or off.\n\n## [Migration](#migration)\n\nA lint, `non_fmt_panics`, gets triggered whenever there is some call to `panic` that uses some deprecated behavior that will error in Rust 2021. The `non_fmt_panics` lint has already been a warning by default on all editions since the 1.50 release (with several enhancements made in later releases). If your code is already warning free, then it should already be ready to go for Rust 2021!\n\nYou can automatically migrate your code to be Rust 2021 Edition compatible or ensure it is already compatible by running:\n\n```sh\ncargo fix --edition\n\n```\n\nShould you choose or need to manually migrate, you'll need to update all panic invocations to either use the same formatting as `println` or use `std::panic::panic_any` to panic with non-string data.\n\nFor example, in the case of `panic!(MyStruct)`, you'll need to convert to using `std::panic::panic_any` (note that this is a function not a macro): `std::panic::panic_any(MyStruct)`.\n\nIn the case of panic messages that include curly braces but the wrong number of arguments (e.g., `panic!(\"Some curlies: {}\")`), you can panic with the string literal by either using the same syntax as `println!` (i.e., `panic!(\"{}\", \"Some curlies: {}\")`) or by escaping the curly braces (i.e., `panic!(\"Some curlies: {{}}\")`).",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Panic macro consistency - The Rust Edition Guide</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What are editions?</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../editions/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Creating a new project</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/transitioning-an-existing-project-to-a-new-edition.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Transitioning an existing project to a new edition</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/advanced-migrations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Advanced migrations</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2015/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Rust 2015</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Rust 2018</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2018/path-changes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Path and module system changes</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/trait-fn-parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Anonymous trait function parameters deprecated</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/new-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> New keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/tyvar-behind-raw-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Method dispatch for raw pointers to inference variables</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Cargo changes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Rust 2021</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2021/prelude.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/default-cargo-resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Default Cargo feature resolver</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/IntoIterator-for-arrays.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> IntoIterator for arrays</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/disjoint-capture-in-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Disjoint capture in closures</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/panic-macro-consistency.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Panic macro consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/reserving-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.6.</strong> Reserving syntax</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/warnings-promoted-to-error.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.7.</strong> Warnings promoted to errors</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/or-patterns-macro-rules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.8.</strong> Or patterns in macro-rules</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/c-string-literals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.9.</strong> C-string literals</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Rust 2024 🚧</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2024/prelude.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/unsafe-op-in-unsafe-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> unsafe_op_in_unsafe_fn warning</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rpit-lifetime-capture.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> RPIT lifetime capture</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/static-mut-reference.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.4.</strong> Disallow references to static mut</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/public-private-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.5.</strong> Public/private dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-remove-implicit-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.6.</strong> Cargo: Remove implicit features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-table-key-names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.7.</strong> Cargo: Table and key name consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-inherited-default-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.8.</strong> Cargo: Reject unused inherited default-features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rustfmt-overflow-delimited-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.9.</strong> Rustfmt: Combine all delimited exprs as last argument</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/gen-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.10.</strong> gen keyword</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Edition Guide</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide/edit/master/src/rust-2021/panic-macro-consistency.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"panic-macro-consistency\"><a class=\"header\" href=\"#panic-macro-consistency\">Panic macro consistency</a></h1>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<ul>\n<li><code class=\"hljs\">panic!(..)</code> now always uses <code class=\"hljs\">format_args!(..)</code>, just like <code class=\"hljs\">println!()</code>.</li>\n<li><code class=\"hljs\">panic!(\"{\")</code> is no longer accepted, without escaping the <code class=\"hljs\">{</code> as <code class=\"hljs\">{{</code>.</li>\n<li><code class=\"hljs\">panic!(x)</code> is no longer accepted if <code class=\"hljs\">x</code> is not a string literal.\n<ul>\n<li>Use <code class=\"hljs\">std::panic::panic_any(x)</code> to panic with a non-string payload.</li>\n<li>Or use <code class=\"hljs\">panic!(\"{}\", x)</code> to use <code class=\"hljs\">x</code>'s <code class=\"hljs\">Display</code> implementation.</li>\n</ul>\n</li>\n<li>The same applies to <code class=\"hljs\">assert!(expr, ..)</code>.</li>\n</ul>\n<h2 id=\"details\"><a class=\"header\" href=\"#details\">Details</a></h2>\n<p>The <code class=\"hljs\">panic!()</code> macro is one of Rust's most well known macros.\nHowever, it has <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/3007-panic-plan.md\">some subtle surprises</a>\nthat we can't just change due to backwards compatibility.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Rust 2018</span>\n<span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Ok, panics with the message \"1\"</span>\n<span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"{}\"</span>); <span class=\"hljs-comment\">// Ok, panics with the message \"{}\"</span></code></pre>\n<p>The <code class=\"hljs\">panic!()</code> macro only uses string formatting when it's invoked with more than one argument.\nWhen invoked with a single argument, it doesn't even look at that argument.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Rust 2018</span>\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-string\">\"{\"</span>;\n<span class=\"hljs-built_in\">println!</span>(a); <span class=\"hljs-comment\">// Error: First argument must be a format string literal</span>\n<span class=\"hljs-built_in\">panic!</span>(a); <span class=\"hljs-comment\">// Ok: The panic macro doesn't care</span></code></pre>\n<p>It even accepts non-strings such as <code class=\"hljs\">panic!(123)</code>, which is uncommon and rarely useful since it\nproduces a surprisingly unhelpful message: <code class=\"hljs\">panicked at 'Box&lt;Any&gt;'</code>.</p>\n<p>This will especially be a problem once\n<a href=\"https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html\">implicit format arguments</a>\nare stabilized.\nThat feature will make <code class=\"hljs\">println!(\"hello {name}\")</code> a short-hand for <code class=\"hljs\">println!(\"hello {}\", name)</code>.\nHowever, <code class=\"hljs\">panic!(\"hello {name}\")</code> would not work as expected,\nsince <code class=\"hljs\">panic!()</code> doesn't process a single argument as format string.</p>\n<p>To avoid that confusing situation, Rust 2021 features a more consistent <code class=\"hljs\">panic!()</code> macro.\nThe new <code class=\"hljs\">panic!()</code> macro will no longer accept arbitrary expressions as the only argument.\nIt will, just like <code class=\"hljs\">println!()</code>, always process the first argument as format string.\nSince <code class=\"hljs\">panic!()</code> will no longer accept arbitrary payloads,\n<a href=\"https://doc.rust-lang.org/stable/std/panic/fn.panic_any.html\"><code class=\"hljs\">panic_any()</code></a>\nwill be the only way to panic with something other than a formatted string.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Rust 2021</span>\n<span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Ok, panics with the message \"1\"</span>\n<span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"{}\"</span>); <span class=\"hljs-comment\">// Error, missing argument</span>\n<span class=\"hljs-built_in\">panic!</span>(a); <span class=\"hljs-comment\">// Error, must be a string literal</span></code></pre>\n<p>In addition, <code class=\"hljs\">core::panic!()</code> and <code class=\"hljs\">std::panic!()</code> will be identical in Rust 2021.\nCurrently, there are some historical differences between those two,\nwhich can be noticeable when switching <code class=\"hljs\">#![no_std]</code> on or off.</p>\n<h2 id=\"migration\"><a class=\"header\" href=\"#migration\">Migration</a></h2>\n<p>A lint, <code class=\"hljs\">non_fmt_panics</code>, gets triggered whenever there is some call to <code class=\"hljs\">panic</code> that uses some\ndeprecated behavior that will error in Rust 2021. The <code class=\"hljs\">non_fmt_panics</code> lint has already been a warning\nby default on all editions since the 1.50 release (with several enhancements made in later releases).\nIf your code is already warning free, then it should already be ready to go for Rust 2021!</p>\n<p>You can automatically migrate your code to be Rust 2021 Edition compatible or ensure it is already compatible by\nrunning:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo fix --edition\n</code></pre>\n<p>Should you choose or need to manually migrate, you'll need to update all panic invocations to either use the same\nformatting as <code class=\"hljs\">println</code> or use <code class=\"hljs\">std::panic::panic_any</code> to panic with non-string data.</p>\n<p>For example, in the case of <code class=\"hljs\">panic!(MyStruct)</code>, you'll need to convert to using <code class=\"hljs\">std::panic::panic_any</code> (note\nthat this is a function not a macro): <code class=\"hljs\">std::panic::panic_any(MyStruct)</code>.</p>\n<p>In the case of panic messages that include curly braces but the wrong number of arguments (e.g., <code class=\"hljs\">panic!(\"Some curlies: {}\")</code>),\nyou can panic with the string literal by either using the same syntax as <code class=\"hljs\">println!</code> (i.e., <code class=\"hljs\">panic!(\"{}\", \"Some curlies: {}\")</code>)\nor by escaping the curly braces (i.e., <code class=\"hljs\">panic!(\"Some curlies: {{}}\")</code>).</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../rust-2021/disjoint-capture-in-closures.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../rust-2021/reserving-syntax.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../rust-2021/disjoint-capture-in-closures.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../rust-2021/reserving-syntax.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:31.686Z"
}