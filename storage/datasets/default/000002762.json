{
	"title": "RawWakerVTable in std::task - Rust",
	"url": "https://doc.rust-lang.org/stable/std/task/struct.RawWakerVTable.html",
	"markdown": "# RawWakerVTable in std::task - Rust\n\n```\npub struct RawWakerVTable { /* private fields */ }\n```\n\nExpand description\n\nA virtual function pointer table (vtable) that specifies the behavior of a [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\").\n\nThe pointer passed to all functions inside the vtable is the `data` pointer from the enclosing [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") object.\n\nThe functions inside this struct are only intended to be called on the `data` pointer of a properly constructed [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") object from inside the [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") implementation. Calling one of the contained functions using any other `data` pointer will cause undefined behavior.\n\nNote that while this type implements `PartialEq`, comparing function pointers, and hence comparing structs like this that contain function pointers, is unreliable: pointers to the same function can compare inequal (because functions are duplicated in multiple codegen units), and pointers to _different_ functions can compare equal (since identical functions can be deduplicated within a codegen unit).\n\n## [§](#thread-safety)Thread safety\n\nIf the [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") will be used to construct a [`Waker`](struct.Waker.html \"struct std::task::Waker\") then these functions must all be thread-safe (even though [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") is `![Send](../marker/trait.Send.html \"trait std::marker::Send\") + ![Sync](../marker/trait.Sync.html \"trait std::marker::Sync\")`). This is because [`Waker`](struct.Waker.html \"struct std::task::Waker\") is `[Send](../marker/trait.Send.html \"trait std::marker::Send\") + [Sync](../marker/trait.Sync.html \"trait std::marker::Sync\")`, and it may be moved to arbitrary threads or invoked by `&` reference. For example, this means that if the `clone` and `drop` functions manage a reference count, they must do so atomically.\n\nHowever, if the [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") will be used to construct a [`LocalWaker`](struct.LocalWaker.html \"struct std::task::LocalWaker\") instead, then these functions don’t need to be thread safe. This means that `![Send](../marker/trait.Send.html \"trait std::marker::Send\") + ![Sync](../marker/trait.Sync.html \"trait std::marker::Sync\")` data can be stored in the data pointer, and reference counting does not need any atomic synchronization. This is because [`LocalWaker`](struct.LocalWaker.html \"struct std::task::LocalWaker\") is not thread safe itself, so it cannot be sent across threads.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#162)[§](#impl-RawWakerVTable)\n\n1.36.0 (const: 1.36.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#215-220)\n\nCreates a new `RawWakerVTable` from the provided `clone`, `wake`, `wake_by_ref`, and `drop` functions.\n\nIf the [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") will be used to construct a [`Waker`](struct.Waker.html \"struct std::task::Waker\") then these functions must all be thread-safe (even though [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") is `![Send](../marker/trait.Send.html \"trait std::marker::Send\") + ![Sync](../marker/trait.Sync.html \"trait std::marker::Sync\")`). This is because [`Waker`](struct.Waker.html \"struct std::task::Waker\") is `[Send](../marker/trait.Send.html \"trait std::marker::Send\") + [Sync](../marker/trait.Sync.html \"trait std::marker::Sync\")`, and it may be moved to arbitrary threads or invoked by `&` reference. For example, this means that if the `clone` and `drop` functions manage a reference count, they must do so atomically.\n\nHowever, if the [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") will be used to construct a [`LocalWaker`](struct.LocalWaker.html \"struct std::task::LocalWaker\") instead, then these functions don’t need to be thread safe. This means that `![Send](../marker/trait.Send.html \"trait std::marker::Send\") + ![Sync](../marker/trait.Sync.html \"trait std::marker::Sync\")` data can be stored in the data pointer, and reference counting does not need any atomic synchronization. This is because [`LocalWaker`](struct.LocalWaker.html \"struct std::task::LocalWaker\") is not thread safe itself, so it cannot be sent across threads.\n\n##### [§](#clone)`clone`\n\nThis function will be called when the [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") gets cloned, e.g. when the [`Waker`](struct.Waker.html \"struct std::task::Waker\")/[`LocalWaker`](struct.LocalWaker.html \"struct std::task::LocalWaker\") in which the [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") is stored gets cloned.\n\nThe implementation of this function must retain all resources that are required for this additional instance of a [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") and associated task. Calling `wake` on the resulting [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") should result in a wakeup of the same task that would have been awoken by the original [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\").\n\n##### [§](#wake)`wake`\n\nThis function will be called when `wake` is called on the [`Waker`](struct.Waker.html \"struct std::task::Waker\"). It must wake up the task associated with this [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\").\n\nThe implementation of this function must make sure to release any resources that are associated with this instance of a [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") and associated task.\n\n##### [§](#wake_by_ref)`wake_by_ref`\n\nThis function will be called when `wake_by_ref` is called on the [`Waker`](struct.Waker.html \"struct std::task::Waker\"). It must wake up the task associated with this [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\").\n\nThis function is similar to `wake`, but must not consume the provided data pointer.\n\n##### [§](#drop)`drop`\n\nThis function gets called when a [`Waker`](struct.Waker.html \"struct std::task::Waker\")/[`LocalWaker`](struct.LocalWaker.html \"struct std::task::LocalWaker\") gets dropped.\n\nThe implementation of this function must make sure to release any resources that are associated with this instance of a [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") and associated task.\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128)[§](#impl-Clone-for-RawWakerVTable)\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128)[§](#impl-Debug-for-RawWakerVTable)\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128)[§](#impl-PartialEq-for-RawWakerVTable)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128)[§](#impl-Copy-for-RawWakerVTable)\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128)[§](#impl-StructuralPartialEq-for-RawWakerVTable)\n\n[§](#impl-Freeze-for-RawWakerVTable)\n\n[§](#impl-RefUnwindSafe-for-RawWakerVTable)\n\n[§](#impl-Send-for-RawWakerVTable)\n\n[§](#impl-Sync-for-RawWakerVTable)\n\n[§](#impl-Unpin-for-RawWakerVTable)\n\n[§](#impl-UnwindSafe-for-RawWakerVTable)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A virtual function pointer table (vtable) that specifies the behavior of a `RawWaker`.\"><title>RawWakerVTable in std::task - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">RawWakerVTable</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">RawWakerVTable</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.new\">new</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-RawWakerVTable\">Clone</a></li><li><a href=\"#impl-Copy-for-RawWakerVTable\">Copy</a></li><li><a href=\"#impl-Debug-for-RawWakerVTable\">Debug</a></li><li><a href=\"#impl-PartialEq-for-RawWakerVTable\">PartialEq</a></li><li><a href=\"#impl-StructuralPartialEq-for-RawWakerVTable\">StructuralPartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-RawWakerVTable\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-RawWakerVTable\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-RawWakerVTable\">Send</a></li><li><a href=\"#impl-Sync-for-RawWakerVTable\">Sync</a></li><li><a href=\"#impl-Unpin-for-RawWakerVTable\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-RawWakerVTable\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::task</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.ready.html\">ready</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Context.html\">Context</a></li><li><a href=\"struct.ContextBuilder.html\">ContextBuilder</a></li><li><a href=\"struct.LocalWaker.html\">LocalWaker</a></li><li><a href=\"struct.RawWaker.html\">RawWaker</a></li><li><a href=\"struct.RawWakerVTable.html\">RawWakerVTable</a></li><li><a href=\"struct.Waker.html\">Waker</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Poll.html\">Poll</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.LocalWake.html\">LocalWake</a></li><li><a href=\"trait.Wake.html\">Wake</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">task</a>::<wbr><a class=\"struct\" href=\"#\">RawWakerVTable</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#129\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct RawWakerVTable { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A virtual function pointer table (vtable) that specifies the behavior\nof a <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>.</p>\n<p>The pointer passed to all functions inside the vtable is the <code>data</code> pointer\nfrom the enclosing <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> object.</p>\n<p>The functions inside this struct are only intended to be called on the <code>data</code>\npointer of a properly constructed <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> object from inside the\n<a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> implementation. Calling one of the contained functions using\nany other <code>data</code> pointer will cause undefined behavior.</p>\n<p>Note that while this type implements <code>PartialEq</code>, comparing function pointers, and hence\ncomparing structs like this that contain function pointers, is unreliable: pointers to the same\nfunction can compare inequal (because functions are duplicated in multiple codegen units), and\npointers to <em>different</em> functions can compare equal (since identical functions can be\ndeduplicated within a codegen unit).</p>\n<h2 id=\"thread-safety\"><a class=\"doc-anchor\" href=\"#thread-safety\">§</a>Thread safety</h2>\n<p>If the <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> will be used to construct a <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> then\nthese functions must all be thread-safe (even though <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> is\n<code>!<a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + !<a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a></code>). This is because <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> is <code><a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a></code>,\nand it may be moved to arbitrary threads or invoked by <code>&amp;</code> reference. For example,\nthis means that if the <code>clone</code> and <code>drop</code> functions manage a reference count,\nthey must do so atomically.</p>\n<p>However, if the <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> will be used to construct a <a href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\"><code>LocalWaker</code></a> instead, then\nthese functions don’t need to be thread safe. This means that <code>!<a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + !<a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a></code>\ndata can be stored in the data pointer, and reference counting does not need any atomic\nsynchronization. This is because <a href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\"><code>LocalWaker</code></a> is not thread safe itself, so it cannot\nbe sent across threads.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RawWakerVTable\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#162\">source</a><a href=\"#impl-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0, const since 1.36.0\">1.36.0 (const: 1.36.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#215-220\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(\n    clone: unsafe <a class=\"primitive\" href=\"../primitive.fn.html\">fn</a>(_: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../primitive.unit.html\">()</a>) -&gt; <a class=\"struct\" href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\">RawWaker</a>,\n    wake: unsafe <a class=\"primitive\" href=\"../primitive.fn.html\">fn</a>(_: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../primitive.unit.html\">()</a>),\n    wake_by_ref: unsafe <a class=\"primitive\" href=\"../primitive.fn.html\">fn</a>(_: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../primitive.unit.html\">()</a>),\n    drop: unsafe <a class=\"primitive\" href=\"../primitive.fn.html\">fn</a>(_: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"../primitive.unit.html\">()</a>),\n) -&gt; <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>,\n<code>wake_by_ref</code>, and <code>drop</code> functions.</p>\n<p>If the <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> will be used to construct a <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> then\nthese functions must all be thread-safe (even though <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> is\n<code>!<a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + !<a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a></code>). This is because <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a> is <code><a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a></code>,\nand it may be moved to arbitrary threads or invoked by <code>&amp;</code> reference. For example,\nthis means that if the <code>clone</code> and <code>drop</code> functions manage a reference count,\nthey must do so atomically.</p>\n<p>However, if the <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> will be used to construct a <a href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\"><code>LocalWaker</code></a> instead, then\nthese functions don’t need to be thread safe. This means that <code>!<a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + !<a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a></code>\ndata can be stored in the data pointer, and reference counting does not need any atomic\nsynchronization. This is because <a href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\"><code>LocalWaker</code></a> is not thread safe itself, so it cannot\nbe sent across threads.</p>\n<h5 id=\"clone\"><a class=\"doc-anchor\" href=\"#clone\">§</a><code>clone</code></h5>\n<p>This function will be called when the <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> gets cloned, e.g. when\nthe <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a>/<a href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\"><code>LocalWaker</code></a> in which the <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> is stored gets cloned.</p>\n<p>The implementation of this function must retain all resources that are\nrequired for this additional instance of a <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> and associated\ntask. Calling <code>wake</code> on the resulting <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> should result in a wakeup\nof the same task that would have been awoken by the original <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>.</p>\n<h5 id=\"wake\"><a class=\"doc-anchor\" href=\"#wake\">§</a><code>wake</code></h5>\n<p>This function will be called when <code>wake</code> is called on the <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a>.\nIt must wake up the task associated with this <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>.</p>\n<p>The implementation of this function must make sure to release any\nresources that are associated with this instance of a <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> and\nassociated task.</p>\n<h5 id=\"wake_by_ref\"><a class=\"doc-anchor\" href=\"#wake_by_ref\">§</a><code>wake_by_ref</code></h5>\n<p>This function will be called when <code>wake_by_ref</code> is called on the <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a>.\nIt must wake up the task associated with this <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>.</p>\n<p>This function is similar to <code>wake</code>, but must not consume the provided data\npointer.</p>\n<h5 id=\"drop\"><a class=\"doc-anchor\" href=\"#drop\">§</a><code>drop</code></h5>\n<p>This function gets called when a <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a>/<a href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\"><code>LocalWaker</code></a> gets dropped.</p>\n<p>The implementation of this function must make sure to release any\nresources that are associated with this instance of a <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> and\nassociated task.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-RawWakerVTable\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128\">source</a></span><a href=\"#impl-Clone-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-RawWakerVTable\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128\">source</a></span><a href=\"#impl-Debug-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-RawWakerVTable\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128\">source</a></span><a href=\"#impl-PartialEq-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><section id=\"impl-Copy-for-RawWakerVTable\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128\">source</a></span><a href=\"#impl-Copy-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section><section id=\"impl-StructuralPartialEq-for-RawWakerVTable\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#128\">source</a></span><a href=\"#impl-StructuralPartialEq-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-RawWakerVTable\" class=\"impl\"><a href=\"#impl-Freeze-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section><section id=\"impl-RefUnwindSafe-for-RawWakerVTable\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section><section id=\"impl-Send-for-RawWakerVTable\" class=\"impl\"><a href=\"#impl-Send-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section><section id=\"impl-Sync-for-RawWakerVTable\" class=\"impl\"><a href=\"#impl-Sync-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section><section id=\"impl-Unpin-for-RawWakerVTable\" class=\"impl\"><a href=\"#impl-Unpin-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section><section id=\"impl-UnwindSafe-for-RawWakerVTable\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-RawWakerVTable\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\">RawWakerVTable</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:25:47.698Z"
}