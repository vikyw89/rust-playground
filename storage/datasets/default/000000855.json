{
	"title": "HashSet in std::collections - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/struct.HashSet.html",
	"markdown": "# HashSet in std::collections - Rust\n\n```\npub struct HashSet<T, S = RandomState> { /* private fields */ }\n```\n\nExpand description\n\nA [hash set](about:blank/index.html#use-the-set-variant-of-any-of-these-maps-when \"mod std::collections\") implemented as a `HashMap` where the value is `()`.\n\nAs with the [`HashMap`](hash_map/struct.HashMap.html \"struct std::collections::hash_map::HashMap\") type, a `HashSet` requires that the elements implement the [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") and [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") traits. This can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself, it is important that the following property holds:\n\n```text\nk1 == k2 -> hash(k1) == hash(k2)\n\n```\n\nIn other words, if two keys are equal, their hashes must be equal. Violating this property is a logic error.\n\nIt is also a logic error for a key to be modified in such a way that the key’s hash, as determined by the [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") trait, or its equality, as determined by the [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") trait, changes while it is in the map. This is normally only possible through [`Cell`](../cell/struct.Cell.html \"struct std::cell::Cell\"), [`RefCell`](../cell/struct.RefCell.html \"struct std::cell::RefCell\"), global state, I/O, or unsafe code.\n\nThe behavior resulting from either logic error is not specified, but will be encapsulated to the `HashSet` that observed the logic error and not result in undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and non-termination.\n\n## [§](#examples)Examples\n\n```\nuse std::collections::HashSet;\n// Type inference lets us omit an explicit type signature (which\n// would be `HashSet<String>` in this example).\nlet mut books = HashSet::new();\n\n// Add some books.\nbooks.insert(\"A Dance With Dragons\".to_string());\nbooks.insert(\"To Kill a Mockingbird\".to_string());\nbooks.insert(\"The Odyssey\".to_string());\nbooks.insert(\"The Great Gatsby\".to_string());\n\n// Check for a specific one.\nif !books.contains(\"The Winds of Winter\") {\n    println!(\"We have {} books, but The Winds of Winter ain't one.\",\n             books.len());\n}\n\n// Remove a book.\nbooks.remove(\"The Odyssey\");\n\n// Iterate over everything.\nfor book in &books {\n    println!(\"{book}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++//+Type+inference+lets+us+omit+an+explicit+type+signature+(which%0A++++//+would+be+%60HashSet%3CString%3E%60+in+this+example).%0A++++let+mut+books+=+HashSet::new();%0A++++%0A++++//+Add+some+books.%0A++++books.insert(%22A+Dance+With+Dragons%22.to_string());%0A++++books.insert(%22To+Kill+a+Mockingbird%22.to_string());%0A++++books.insert(%22The+Odyssey%22.to_string());%0A++++books.insert(%22The+Great+Gatsby%22.to_string());%0A++++%0A++++//+Check+for+a+specific+one.%0A++++if+!books.contains(%22The+Winds+of+Winter%22)+%7B%0A++++++++println!(%22We+have+%7B%7D+books,+but+The+Winds+of+Winter+ain%27t+one.%22,%0A+++++++++++++++++books.len());%0A++++%7D%0A++++%0A++++//+Remove+a+book.%0A++++books.remove(%22The+Odyssey%22);%0A++++%0A++++//+Iterate+over+everything.%0A++++for+book+in+%26books+%7B%0A++++++++println!(%22%7Bbook%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\nThe easiest way to use `HashSet` with a custom type is to derive [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") and [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\"). We must also derive [`PartialEq`](../cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\"), which is required if [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") is derived.\n\n```\nuse std::collections::HashSet;\n#[derive(Hash, Eq, PartialEq, Debug)]\nstruct Viking {\n    name: String,\n    power: usize,\n}\n\nlet mut vikings = HashSet::new();\n\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });\nvikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });\n\n// Use derived implementation to print the vikings.\nfor x in &vikings {\n    println!(\"{x:?}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%23%5Bderive(Hash,+Eq,+PartialEq,+Debug)%5D%0A++++struct+Viking+%7B%0A++++++++name:+String,%0A++++++++power:+usize,%0A++++%7D%0A++++%0A++++let+mut+vikings+=+HashSet::new();%0A++++%0A++++vikings.insert(Viking+%7B+name:+%22Einar%22.to_string(),+power:+9+%7D);%0A++++vikings.insert(Viking+%7B+name:+%22Einar%22.to_string(),+power:+9+%7D);%0A++++vikings.insert(Viking+%7B+name:+%22Olaf%22.to_string(),+power:+4+%7D);%0A++++vikings.insert(Viking+%7B+name:+%22Harald%22.to_string(),+power:+8+%7D);%0A++++%0A++++//+Use+derived+implementation+to+print+the+vikings.%0A++++for+x+in+%26vikings+%7B%0A++++++++println!(%22%7Bx:?%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\nA `HashSet` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::HashSet;\n\nlet viking_names = HashSet::from([\"Einar\", \"Olaf\", \"Harald\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+viking_names+=+HashSet::from(%5B%22Einar%22,+%22Olaf%22,+%22Harald%22%5D);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#111-149)[§](#impl-HashSet%3CT%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#126-128)\n\nCreates an empty `HashSet`.\n\nThe hash set is initially created with a capacity of 0, so it will not allocate until it is first inserted into.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::collections::HashSet;\nlet set: HashSet<i32> = HashSet::new();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+set:+HashSet%3Ci32%3E+=+HashSet::new();%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#146-148)\n\nCreates an empty `HashSet` with at least the specified capacity.\n\nThe hash set will be able to hold at least `capacity` elements without reallocating. This method is allowed to allocate for more elements than `capacity`. If `capacity` is 0, the hash set will not allocate.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::collections::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(10);\nassert!(set.capacity() >= 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+set:+HashSet%3Ci32%3E+=+HashSet::with_capacity(10);%0A++++assert!(set.capacity()+%3E=+10);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#151-425)[§](#impl-HashSet%3CT,+S%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#163-165)\n\nReturns the number of elements the set can hold without reallocating.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::collections::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(100);\nassert!(set.capacity() >= 100);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+set:+HashSet%3Ci32%3E+=+HashSet::with_capacity(100);%0A++++assert!(set.capacity()+%3E=+100);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#191-193)\n\nAn iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::collections::HashSet;\nlet mut set = HashSet::new();\nset.insert(\"a\");\nset.insert(\"b\");\n\n// Will print in an arbitrary order.\nfor x in set.iter() {\n    println!(\"{x}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+mut+set+=+HashSet::new();%0A++++set.insert(%22a%22);%0A++++set.insert(%22b%22);%0A++++%0A++++//+Will+print+in+an+arbitrary+order.%0A++++for+x+in+set.iter()+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#performance)Performance\n\nIn the current implementation, iterating over set takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#209-211)\n\nReturns the number of elements in the set.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut v = HashSet::new();\nassert_eq!(v.len(), 0);\nv.insert(1);\nassert_eq!(v.len(), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+v+=+HashSet::new();%0A++++assert_eq!(v.len(),+0);%0A++++v.insert(1);%0A++++assert_eq!(v.len(),+1);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#227-229)\n\nReturns `true` if the set contains no elements.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut v = HashSet::new();\nassert!(v.is_empty());\nv.insert(1);\nassert!(!v.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+v+=+HashSet::new();%0A++++assert!(v.is_empty());%0A++++v.insert(1);%0A++++assert!(!v.is_empty());%0A%7D&edition=2021)\n\n1.6.0 · [source](about:blank/src/std/collections/hash/set.rs.html#256-258)\n\nClears the set, returning all elements as an iterator. Keeps the allocated memory for reuse.\n\nIf the returned iterator is dropped before being fully consumed, it drops the remaining elements. The returned iterator keeps a mutable borrow on the set to optimize its implementation.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut set = HashSet::from([1, 2, 3]);\nassert!(!set.is_empty());\n\n// print 1, 2, 3 in an arbitrary order\nfor i in set.drain() {\n    println!(\"{i}\");\n}\n\nassert!(set.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert!(!set.is_empty());%0A++++%0A++++//+print+1,+2,+3+in+an+arbitrary+order%0A++++for+i+in+set.drain()+%7B%0A++++++++println!(%22%7Bi%7D%22);%0A++++%7D%0A++++%0A++++assert!(set.is_empty());%0A%7D&edition=2021)\n\n🔬This is a nightly-only experimental API. (`hash_extract_if` [#59618](https://github.com/rust-lang/rust/issues/59618))\n\nCreates an iterator which uses a closure to determine if a value should be removed.\n\nIf the closure returns true, then the value is removed and yielded. If the closure returns false, the value will remain in the list and will not be yielded by the iterator.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating or the iteration short-circuits, then the remaining elements will be retained. Use [`retain`](about:blank/hash_set/struct.HashSet.html#method.retain \"method std::collections::hash_set::HashSet::retain\") with a negated predicate if you do not need the returned iterator.\n\n##### [§](#examples-8)Examples\n\nSplitting a set into even and odd values, reusing the original set:\n\n```\n#![feature(hash_extract_if)]\nuse std::collections::HashSet;\n\nlet mut set: HashSet<i32> = (0..8).collect();\nlet extracted: HashSet<i32> = set.extract_if(|v| v % 2 == 0).collect();\n\nlet mut evens = extracted.into_iter().collect::<Vec<_>>();\nlet mut odds = set.into_iter().collect::<Vec<_>>();\nevens.sort();\nodds.sort();\n\nassert_eq!(evens, vec![0, 2, 4, 6]);\nassert_eq!(odds, vec![1, 3, 5, 7]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_extract_if)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set:+HashSet%3Ci32%3E+=+(0..8).collect();%0A++++let+extracted:+HashSet%3Ci32%3E+=+set.extract_if(%7Cv%7C+v+%25+2+==+0).collect();%0A++++%0A++++let+mut+evens+=+extracted.into_iter().collect::%3CVec%3C_%3E%3E();%0A++++let+mut+odds+=+set.into_iter().collect::%3CVec%3C_%3E%3E();%0A++++evens.sort();%0A++++odds.sort();%0A++++%0A++++assert_eq!(evens,+vec!%5B0,+2,+4,+6%5D);%0A++++assert_eq!(odds,+vec!%5B1,+3,+5,+7%5D);%0A%7D&version=nightly&edition=2021)\n\n1.18.0 · [source](about:blank/src/std/collections/hash/set.rs.html#322-327)\n\nRetains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns `false`. The elements are visited in unsorted (and unspecified) order.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut set = HashSet::from([1, 2, 3, 4, 5, 6]);\nset.retain(|&k| k % 2 == 0);\nassert_eq!(set, HashSet::from([2, 4, 6]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::from(%5B1,+2,+3,+4,+5,+6%5D);%0A++++set.retain(%7C%26k%7C+k+%25+2+==+0);%0A++++assert_eq!(set,+HashSet::from(%5B2,+4,+6%5D));%0A%7D&edition=2021)\n\n##### [§](#performance-1)Performance\n\nIn the current implementation, this operation takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#343-345)\n\nClears the set, removing all values.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut v = HashSet::new();\nv.insert(1);\nv.clear();\nassert!(v.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+v+=+HashSet::new();%0A++++v.insert(1);%0A++++v.clear();%0A++++assert!(v.is_empty());%0A%7D&edition=2021)\n\n1.7.0 (const: [unstable](https://github.com/rust-lang/rust/issues/102575 \"Tracking issue for const_collections_with_hasher\")) · [source](about:blank/src/std/collections/hash/set.rs.html#373-375)\n\nCreates a new empty hash set which will use the given hasher to hash keys.\n\nThe hash set is also created with the default initial capacity.\n\nWarning: `hasher` is normally randomly generated, and is designed to allow `HashSet`s to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector.\n\nThe `hash_builder` passed should implement the [`BuildHasher`](../hash/trait.BuildHasher.html \"trait std::hash::BuildHasher\") trait for the HashMap to be useful, see its documentation for details.\n\n##### [§](#examples-11)Examples\n\n```\nuse std::collections::HashSet;\nuse std::hash::RandomState;\n\nlet s = RandomState::new();\nlet mut set = HashSet::with_hasher(s);\nset.insert(2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+set+=+HashSet::with_hasher(s);%0A++++set.insert(2);%0A%7D&edition=2021)\n\n1.7.0 · [source](about:blank/src/std/collections/hash/set.rs.html#404-406)\n\nCreates an empty `HashSet` with at least the specified capacity, using `hasher` to hash the keys.\n\nThe hash set will be able to hold at least `capacity` elements without reallocating. This method is allowed to allocate for more elements than `capacity`. If `capacity` is 0, the hash set will not allocate.\n\nWarning: `hasher` is normally randomly generated, and is designed to allow `HashSet`s to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector.\n\nThe `hash_builder` passed should implement the [`BuildHasher`](../hash/trait.BuildHasher.html \"trait std::hash::BuildHasher\") trait for the HashMap to be useful, see its documentation for details.\n\n##### [§](#examples-12)Examples\n\n```\nuse std::collections::HashSet;\nuse std::hash::RandomState;\n\nlet s = RandomState::new();\nlet mut set = HashSet::with_capacity_and_hasher(10, s);\nset.insert(1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+set+=+HashSet::with_capacity_and_hasher(10,+s);%0A++++set.insert(1);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/collections/hash/set.rs.html#422-424)\n\nReturns a reference to the set’s [`BuildHasher`](../hash/trait.BuildHasher.html \"trait std::hash::BuildHasher\").\n\n##### [§](#examples-13)Examples\n\n```\nuse std::collections::HashSet;\nuse std::hash::RandomState;\n\nlet hasher = RandomState::new();\nlet set: HashSet<i32> = HashSet::with_hasher(hasher);\nlet hasher: &RandomState = set.hasher();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+hasher+=+RandomState::new();%0A++++let+set:+HashSet%3Ci32%3E+=+HashSet::with_hasher(hasher);%0A++++let+hasher:+%26RandomState+=+set.hasher();%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#427-968)[§](#impl-HashSet%3CT,+S%3E-1)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#452-454)\n\nReserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to speculatively avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.\n\n##### [§](#panics)Panics\n\nPanics if the new allocation size overflows `usize`.\n\n##### [§](#examples-14)Examples\n\n```\nuse std::collections::HashSet;\nlet mut set: HashSet<i32> = HashSet::new();\nset.reserve(10);\nassert!(set.capacity() >= 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+mut+set:+HashSet%3Ci32%3E+=+HashSet::new();%0A++++set.reserve(10);%0A++++assert!(set.capacity()+%3E=+10);%0A%7D&edition=2021)\n\n1.57.0 · [source](about:blank/src/std/collections/hash/set.rs.html#477-479)\n\nTries to reserve capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to speculatively avoid frequent reallocations. After calling `try_reserve`, capacity will be greater than or equal to `self.len() + additional` if it returns `Ok(())`. Does nothing if capacity is already sufficient.\n\n##### [§](#errors)Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error is returned.\n\n##### [§](#examples-15)Examples\n\n```\nuse std::collections::HashSet;\nlet mut set: HashSet<i32> = HashSet::new();\nset.try_reserve(10).expect(\"why is the test harness OOMing on a handful of bytes?\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+mut+set:+HashSet%3Ci32%3E+=+HashSet::new();%0A++++set.try_reserve(10).expect(%22why+is+the+test+harness+OOMing+on+a+handful+of+bytes?%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#499-501)\n\nShrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.\n\n##### [§](#examples-16)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut set = HashSet::with_capacity(100);\nset.insert(1);\nset.insert(2);\nassert!(set.capacity() >= 100);\nset.shrink_to_fit();\nassert!(set.capacity() >= 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::with_capacity(100);%0A++++set.insert(1);%0A++++set.insert(2);%0A++++assert!(set.capacity()+%3E=+100);%0A++++set.shrink_to_fit();%0A++++assert!(set.capacity()+%3E=+2);%0A%7D&edition=2021)\n\n1.56.0 · [source](about:blank/src/std/collections/hash/set.rs.html#524-526)\n\nShrinks the capacity of the set with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n##### [§](#examples-17)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut set = HashSet::with_capacity(100);\nset.insert(1);\nset.insert(2);\nassert!(set.capacity() >= 100);\nset.shrink_to(10);\nassert!(set.capacity() >= 10);\nset.shrink_to(0);\nassert!(set.capacity() >= 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::with_capacity(100);%0A++++set.insert(1);%0A++++set.insert(2);%0A++++assert!(set.capacity()+%3E=+100);%0A++++set.shrink_to(10);%0A++++assert!(set.capacity()+%3E=+10);%0A++++set.shrink_to(0);%0A++++assert!(set.capacity()+%3E=+2);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#554-556)\n\nVisits the values representing the difference, i.e., the values that are in `self` but not in `other`.\n\n##### [§](#examples-18)Examples\n\n```\nuse std::collections::HashSet;\nlet a = HashSet::from([1, 2, 3]);\nlet b = HashSet::from([4, 2, 3, 4]);\n\n// Can be seen as `a - b`.\nfor x in a.difference(&b) {\n    println!(\"{x}\"); // Print 1\n}\n\nlet diff: HashSet<_> = a.difference(&b).collect();\nassert_eq!(diff, [1].iter().collect());\n\n// Note that difference is not symmetric,\n// and `b - a` means something else:\nlet diff: HashSet<_> = b.difference(&a).collect();\nassert_eq!(diff, [4].iter().collect());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B4,+2,+3,+4%5D);%0A++++%0A++++//+Can+be+seen+as+%60a+-+b%60.%0A++++for+x+in+a.difference(%26b)+%7B%0A++++++++println!(%22%7Bx%7D%22);+//+Print+1%0A++++%7D%0A++++%0A++++let+diff:+HashSet%3C_%3E+=+a.difference(%26b).collect();%0A++++assert_eq!(diff,+%5B1%5D.iter().collect());%0A++++%0A++++//+Note+that+difference+is+not+symmetric,%0A++++//+and+%60b+-+a%60+means+something+else:%0A++++let+diff:+HashSet%3C_%3E+=+b.difference(%26a).collect();%0A++++assert_eq!(diff,+%5B4%5D.iter().collect());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#582-587)\n\nVisits the values representing the symmetric difference, i.e., the values that are in `self` or in `other` but not in both.\n\n##### [§](#examples-19)Examples\n\n```\nuse std::collections::HashSet;\nlet a = HashSet::from([1, 2, 3]);\nlet b = HashSet::from([4, 2, 3, 4]);\n\n// Print 1, 4 in arbitrary order.\nfor x in a.symmetric_difference(&b) {\n    println!(\"{x}\");\n}\n\nlet diff1: HashSet<_> = a.symmetric_difference(&b).collect();\nlet diff2: HashSet<_> = b.symmetric_difference(&a).collect();\n\nassert_eq!(diff1, diff2);\nassert_eq!(diff1, [1, 4].iter().collect());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B4,+2,+3,+4%5D);%0A++++%0A++++//+Print+1,+4+in+arbitrary+order.%0A++++for+x+in+a.symmetric_difference(%26b)+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++let+diff1:+HashSet%3C_%3E+=+a.symmetric_difference(%26b).collect();%0A++++let+diff2:+HashSet%3C_%3E+=+b.symmetric_difference(%26a).collect();%0A++++%0A++++assert_eq!(diff1,+diff2);%0A++++assert_eq!(diff1,+%5B1,+4%5D.iter().collect());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#616-622)\n\nVisits the values representing the intersection, i.e., the values that are both in `self` and `other`.\n\nWhen an equal element is present in `self` and `other` then the resulting `Intersection` may yield references to one or the other. This can be relevant if `T` contains fields which are not compared by its `Eq` implementation, and may hold different value between the two equal copies of `T` in the two sets.\n\n##### [§](#examples-20)Examples\n\n```\nuse std::collections::HashSet;\nlet a = HashSet::from([1, 2, 3]);\nlet b = HashSet::from([4, 2, 3, 4]);\n\n// Print 2, 3 in arbitrary order.\nfor x in a.intersection(&b) {\n    println!(\"{x}\");\n}\n\nlet intersection: HashSet<_> = a.intersection(&b).collect();\nassert_eq!(intersection, [2, 3].iter().collect());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B4,+2,+3,+4%5D);%0A++++%0A++++//+Print+2,+3+in+arbitrary+order.%0A++++for+x+in+a.intersection(%26b)+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++let+intersection:+HashSet%3C_%3E+=+a.intersection(%26b).collect();%0A++++assert_eq!(intersection,+%5B2,+3%5D.iter().collect());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#645-651)\n\nVisits the values representing the union, i.e., all the values in `self` or `other`, without duplicates.\n\n##### [§](#examples-21)Examples\n\n```\nuse std::collections::HashSet;\nlet a = HashSet::from([1, 2, 3]);\nlet b = HashSet::from([4, 2, 3, 4]);\n\n// Print 1, 2, 3, 4 in arbitrary order.\nfor x in a.union(&b) {\n    println!(\"{x}\");\n}\n\nlet union: HashSet<_> = a.union(&b).collect();\nassert_eq!(union, [1, 2, 3, 4].iter().collect());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B4,+2,+3,+4%5D);%0A++++%0A++++//+Print+1,+2,+3,+4+in+arbitrary+order.%0A++++for+x+in+a.union(%26b)+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++let+union:+HashSet%3C_%3E+=+a.union(%26b).collect();%0A++++assert_eq!(union,+%5B1,+2,+3,+4%5D.iter().collect());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#670-676)\n\nReturns `true` if the set contains a value.\n\nThe value may be any borrowed form of the set’s value type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the value type.\n\n##### [§](#examples-22)Examples\n\n```\nuse std::collections::HashSet;\n\nlet set = HashSet::from([1, 2, 3]);\nassert_eq!(set.contains(&1), true);\nassert_eq!(set.contains(&4), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.contains(%261),+true);%0A++++assert_eq!(set.contains(%264),+false);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/collections/hash/set.rs.html#695-701)\n\nReturns a reference to the value in the set, if any, that is equal to the given value.\n\nThe value may be any borrowed form of the set’s value type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the value type.\n\n##### [§](#examples-23)Examples\n\n```\nuse std::collections::HashSet;\n\nlet set = HashSet::from([1, 2, 3]);\nassert_eq!(set.get(&2), Some(&2));\nassert_eq!(set.get(&4), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.get(%262),+Some(%262));%0A++++assert_eq!(set.get(%264),+None);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#721-725)\n\n🔬This is a nightly-only experimental API. (`hash_set_entry` [#60896](https://github.com/rust-lang/rust/issues/60896))\n\nInserts the given `value` into the set if it is not present, then returns a reference to the value in the set.\n\n##### [§](#examples-24)Examples\n\n```\n#![feature(hash_set_entry)]\n\nuse std::collections::HashSet;\n\nlet mut set = HashSet::from([1, 2, 3]);\nassert_eq!(set.len(), 3);\nassert_eq!(set.get_or_insert(2), &2);\nassert_eq!(set.get_or_insert(100), &100);\nassert_eq!(set.len(), 4); // 100 was inserted\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_set_entry)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.len(),+3);%0A++++assert_eq!(set.get_or_insert(2),+%262);%0A++++assert_eq!(set.get_or_insert(100),+%26100);%0A++++assert_eq!(set.len(),+4);+//+100+was+inserted%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#749-757)\n\n🔬This is a nightly-only experimental API. (`hash_set_entry` [#60896](https://github.com/rust-lang/rust/issues/60896))\n\nInserts an owned copy of the given `value` into the set if it is not present, then returns a reference to the value in the set.\n\n##### [§](#examples-25)Examples\n\n```\n#![feature(hash_set_entry)]\n\nuse std::collections::HashSet;\n\nlet mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n    .iter().map(|&pet| pet.to_owned()).collect();\n\nassert_eq!(set.len(), 3);\nfor &pet in &[\"cat\", \"dog\", \"fish\"] {\n    let value = set.get_or_insert_owned(pet);\n    assert_eq!(value, pet);\n}\nassert_eq!(set.len(), 4); // a new \"fish\" was inserted\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_set_entry)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set:+HashSet%3CString%3E+=+%5B%22cat%22,+%22dog%22,+%22horse%22%5D%0A++++++++.iter().map(%7C%26pet%7C+pet.to_owned()).collect();%0A++++%0A++++assert_eq!(set.len(),+3);%0A++++for+%26pet+in+%26%5B%22cat%22,+%22dog%22,+%22fish%22%5D+%7B%0A++++++++let+value+=+set.get_or_insert_owned(pet);%0A++++++++assert_eq!(value,+pet);%0A++++%7D%0A++++assert_eq!(set.len(),+4);+//+a+new+%22fish%22+was+inserted%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#781-790)\n\n🔬This is a nightly-only experimental API. (`hash_set_entry` [#60896](https://github.com/rust-lang/rust/issues/60896))\n\nInserts a value computed from `f` into the set if the given `value` is not present, then returns a reference to the value in the set.\n\n##### [§](#examples-26)Examples\n\n```\n#![feature(hash_set_entry)]\n\nuse std::collections::HashSet;\n\nlet mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n    .iter().map(|&pet| pet.to_owned()).collect();\n\nassert_eq!(set.len(), 3);\nfor &pet in &[\"cat\", \"dog\", \"fish\"] {\n    let value = set.get_or_insert_with(pet, str::to_owned);\n    assert_eq!(value, pet);\n}\nassert_eq!(set.len(), 4); // a new \"fish\" was inserted\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_set_entry)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set:+HashSet%3CString%3E+=+%5B%22cat%22,+%22dog%22,+%22horse%22%5D%0A++++++++.iter().map(%7C%26pet%7C+pet.to_owned()).collect();%0A++++%0A++++assert_eq!(set.len(),+3);%0A++++for+%26pet+in+%26%5B%22cat%22,+%22dog%22,+%22fish%22%5D+%7B%0A++++++++let+value+=+set.get_or_insert_with(pet,+str::to_owned);%0A++++++++assert_eq!(value,+pet);%0A++++%7D%0A++++assert_eq!(set.len(),+4);+//+a+new+%22fish%22+was+inserted%0A%7D&version=nightly&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#810-816)\n\nReturns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.\n\n##### [§](#examples-27)Examples\n\n```\nuse std::collections::HashSet;\n\nlet a = HashSet::from([1, 2, 3]);\nlet mut b = HashSet::new();\n\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(4);\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(1);\nassert_eq!(a.is_disjoint(&b), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+mut+b+=+HashSet::new();%0A++++%0A++++assert_eq!(a.is_disjoint(%26b),+true);%0A++++b.insert(4);%0A++++assert_eq!(a.is_disjoint(%26b),+true);%0A++++b.insert(1);%0A++++assert_eq!(a.is_disjoint(%26b),+false);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#836-838)\n\nReturns `true` if the set is a subset of another, i.e., `other` contains at least all the values in `self`.\n\n##### [§](#examples-28)Examples\n\n```\nuse std::collections::HashSet;\n\nlet sup = HashSet::from([1, 2, 3]);\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_subset(&sup), true);\nset.insert(2);\nassert_eq!(set.is_subset(&sup), true);\nset.insert(4);\nassert_eq!(set.is_subset(&sup), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+sup+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+mut+set+=+HashSet::new();%0A++++%0A++++assert_eq!(set.is_subset(%26sup),+true);%0A++++set.insert(2);%0A++++assert_eq!(set.is_subset(%26sup),+true);%0A++++set.insert(4);%0A++++assert_eq!(set.is_subset(%26sup),+false);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#862-864)\n\nReturns `true` if the set is a superset of another, i.e., `self` contains at least all the values in `other`.\n\n##### [§](#examples-29)Examples\n\n```\nuse std::collections::HashSet;\n\nlet sub = HashSet::from([1, 2]);\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(0);\nset.insert(1);\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(2);\nassert_eq!(set.is_superset(&sub), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+sub+=+HashSet::from(%5B1,+2%5D);%0A++++let+mut+set+=+HashSet::new();%0A++++%0A++++assert_eq!(set.is_superset(%26sub),+false);%0A++++%0A++++set.insert(0);%0A++++set.insert(1);%0A++++assert_eq!(set.is_superset(%26sub),+false);%0A++++%0A++++set.insert(2);%0A++++assert_eq!(set.is_superset(%26sub),+true);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#889-891)\n\nAdds a value to the set.\n\nReturns whether the value was newly inserted. That is:\n\n-   If the set did not previously contain this value, `true` is returned.\n-   If the set already contained this value, `false` is returned, and the set is not modified: original value is not replaced, and the value passed as argument is dropped.\n\n##### [§](#examples-30)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut set = HashSet::new();\n\nassert_eq!(set.insert(2), true);\nassert_eq!(set.insert(2), false);\nassert_eq!(set.len(), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::new();%0A++++%0A++++assert_eq!(set.insert(2),+true);%0A++++assert_eq!(set.insert(2),+false);%0A++++assert_eq!(set.len(),+1);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/collections/hash/set.rs.html#911-913)\n\nAdds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.\n\n##### [§](#examples-31)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut set = HashSet::new();\nset.insert(Vec::<i32>::new());\n\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\nset.replace(Vec::with_capacity(10));\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::new();%0A++++set.insert(Vec::%3Ci32%3E::new());%0A++++%0A++++assert_eq!(set.get(%26%5B%5D%5B..%5D).unwrap().capacity(),+0);%0A++++set.replace(Vec::with_capacity(10));%0A++++assert_eq!(set.get(%26%5B%5D%5B..%5D).unwrap().capacity(),+10);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#936-942)\n\nRemoves a value from the set. Returns whether the value was present in the set.\n\nThe value may be any borrowed form of the set’s value type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the value type.\n\n##### [§](#examples-32)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut set = HashSet::new();\n\nset.insert(2);\nassert_eq!(set.remove(&2), true);\nassert_eq!(set.remove(&2), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::new();%0A++++%0A++++set.insert(2);%0A++++assert_eq!(set.remove(%262),+true);%0A++++assert_eq!(set.remove(%262),+false);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/collections/hash/set.rs.html#961-967)\n\nRemoves and returns the value in the set, if any, that is equal to the given one.\n\nThe value may be any borrowed form of the set’s value type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the value type.\n\n##### [§](#examples-33)Examples\n\n```\nuse std::collections::HashSet;\n\nlet mut set = HashSet::from([1, 2, 3]);\nassert_eq!(set.take(&2), Some(2));\nassert_eq!(set.take(&2), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.take(%262),+Some(2));%0A++++assert_eq!(set.take(%262),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1159-1189)[§](#impl-BitAnd%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1186-1188)[§](#method.bitand)\n\nReturns the intersection of `self` and `rhs` as a new `HashSet<T, S>`.\n\n##### [§](#examples-35)Examples\n\n```\nuse std::collections::HashSet;\n\nlet a = HashSet::from([1, 2, 3]);\nlet b = HashSet::from([2, 3, 4]);\n\nlet set = &a & &b;\n\nlet mut i = 0;\nlet expected = [2, 3];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B2,+3,+4%5D);%0A++++%0A++++let+set+=+%26a+%26+%26b;%0A++++%0A++++let+mut+i+=+0;%0A++++let+expected+=+%5B2,+3%5D;%0A++++for+x+in+%26set+%7B%0A++++++++assert!(expected.contains(x));%0A++++++++i+%2B=+1;%0A++++%7D%0A++++assert_eq!(i,+expected.len());%0A%7D&edition=2021)\n\n[§](#associatedtype.Output)\n\nThe resulting type after applying the `&` operator.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1126-1156)[§](#impl-BitOr%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1153-1155)[§](#method.bitor)\n\nReturns the union of `self` and `rhs` as a new `HashSet<T, S>`.\n\n##### [§](#examples-37)Examples\n\n```\nuse std::collections::HashSet;\n\nlet a = HashSet::from([1, 2, 3]);\nlet b = HashSet::from([3, 4, 5]);\n\nlet set = &a | &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 3, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+set+=+%26a+%7C+%26b;%0A++++%0A++++let+mut+i+=+0;%0A++++let+expected+=+%5B1,+2,+3,+4,+5%5D;%0A++++for+x+in+%26set+%7B%0A++++++++assert!(expected.contains(x));%0A++++++++i+%2B=+1;%0A++++%7D%0A++++assert_eq!(i,+expected.len());%0A%7D&edition=2021)\n\n[§](#associatedtype.Output-2)\n\nThe resulting type after applying the `|` operator.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1192-1222)[§](#impl-BitXor%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1219-1221)[§](#method.bitxor)\n\nReturns the symmetric difference of `self` and `rhs` as a new `HashSet<T, S>`.\n\n##### [§](#examples-36)Examples\n\n```\nuse std::collections::HashSet;\n\nlet a = HashSet::from([1, 2, 3]);\nlet b = HashSet::from([3, 4, 5]);\n\nlet set = &a ^ &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+set+=+%26a+%5E+%26b;%0A++++%0A++++let+mut+i+=+0;%0A++++let+expected+=+%5B1,+2,+4,+5%5D;%0A++++for+x+in+%26set+%7B%0A++++++++assert!(expected.contains(x));%0A++++++++i+%2B=+1;%0A++++%7D%0A++++assert_eq!(i,+expected.len());%0A%7D&edition=2021)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `^` operator.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#971-989)[§](#impl-Clone-for-HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#986-988)[§](#method.clone_from)\n\nOverwrites the contents of `self` with a clone of the contents of `source`.\n\nThis method is preferred over simply assigning `source.clone()` to `self`, as it avoids reallocation if possible.\n\n[source](about:blank/src/std/collections/hash/set.rs.html#977-979)[§](#method.clone)\n\nReturns a copy of the value. [Read more](about:blank/clone/trait.Clone.html#tymethod.clone)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1015-1022)[§](#impl-Debug-for-HashSet%3CT,+S%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1114-1123)[§](#impl-Default-for-HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1120-1122)[§](#method.default)\n\nCreates an empty `HashSet<T, S>` with the `Default` value for the hasher.\n\n1.4.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1092-1111)[§](#impl-Extend%3C%26T%3E-for-HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1098-1100)[§](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1103-1105)[§](#method.extend_one)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1108-1110)[§](#method.extend_reserve)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1070-1089)[§](#impl-Extend%3CT%3E-for-HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1076-1078)[§](#method.extend-1)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1081-1083)[§](#method.extend_one-1)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1086-1088)[§](#method.extend_reserve-1)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.56.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1051-1067)[§](#impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1064-1066)[§](#method.from)\n\n##### [§](#examples-34)Examples\n\n```\nuse std::collections::HashSet;\n\nlet set1 = HashSet::from([1, 2, 3, 4]);\nlet set2: HashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+set1+=+HashSet::from(%5B1,+2,+3,+4%5D);%0A++++let+set2:+HashSet%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(set1,+set2);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1025-1036)[§](#impl-FromIterator%3CT%3E-for-HashSet%3CT,+S%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1448-1457)[§](#impl-IntoIterator-for-%26HashSet%3CT,+S%3E)\n\n[§](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1454-1456)[§](#method.into_iter)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1460-1489)[§](#impl-IntoIterator-for-HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1486-1488)[§](#method.into_iter-1)\n\nCreates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.\n\n##### [§](#examples-39)Examples\n\n```\nuse std::collections::HashSet;\nlet mut set = HashSet::new();\nset.insert(\"a\".to_string());\nset.insert(\"b\".to_string());\n\n// Not possible to collect to a Vec<String> with a regular `.iter()`.\nlet v: Vec<String> = set.into_iter().collect();\n\n// Will print in an arbitrary order.\nfor x in &v {\n    println!(\"{x}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+mut+set+=+HashSet::new();%0A++++set.insert(%22a%22.to_string());%0A++++set.insert(%22b%22.to_string());%0A++++%0A++++//+Not+possible+to+collect+to+a+Vec%3CString%3E+with+a+regular+%60.iter()%60.%0A++++let+v:+Vec%3CString%3E+=+set.into_iter().collect();%0A++++%0A++++//+Will+print+in+an+arbitrary+order.%0A++++for+x+in+%26v+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n[§](#associatedtype.Item-1)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-1)\n\nWhich kind of iterator are we turning this into?\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#992-1004)[§](#impl-PartialEq-for-HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#997-1003)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1225-1255)[§](#impl-Sub%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E)\n\n[source](about:blank/src/std/collections/hash/set.rs.html#1252-1254)[§](#method.sub)\n\nReturns the difference of `self` and `rhs` as a new `HashSet<T, S>`.\n\n##### [§](#examples-38)Examples\n\n```\nuse std::collections::HashSet;\n\nlet a = HashSet::from([1, 2, 3]);\nlet b = HashSet::from([3, 4, 5]);\n\nlet set = &a - &b;\n\nlet mut i = 0;\nlet expected = [1, 2];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+set+=+%26a+-+%26b;%0A++++%0A++++let+mut+i+=+0;%0A++++let+expected+=+%5B1,+2%5D;%0A++++for+x+in+%26set+%7B%0A++++++++assert!(expected.contains(x));%0A++++++++i+%2B=+1;%0A++++%7D%0A++++assert_eq!(i,+expected.len());%0A%7D&edition=2021)\n\n[§](#associatedtype.Output-3)\n\nThe resulting type after applying the `-` operator.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/set.rs.html#1007-1012)[§](#impl-Eq-for-HashSet%3CT,+S%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A hash set implemented as a `HashMap` where the value is `()`.\"><title>HashSet in std::collections - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">HashSet</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">HashSet</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.capacity\">capacity</a></li><li><a href=\"#method.clear\">clear</a></li><li><a href=\"#method.contains\">contains</a></li><li><a href=\"#method.difference\">difference</a></li><li><a href=\"#method.drain\">drain</a></li><li><a href=\"#method.extract_if\">extract_if</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.get_or_insert\">get_or_insert</a></li><li><a href=\"#method.get_or_insert_owned\">get_or_insert_owned</a></li><li><a href=\"#method.get_or_insert_with\">get_or_insert_with</a></li><li><a href=\"#method.hasher\">hasher</a></li><li><a href=\"#method.insert\">insert</a></li><li><a href=\"#method.intersection\">intersection</a></li><li><a href=\"#method.is_disjoint\">is_disjoint</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.is_subset\">is_subset</a></li><li><a href=\"#method.is_superset\">is_superset</a></li><li><a href=\"#method.iter\">iter</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.remove\">remove</a></li><li><a href=\"#method.replace\">replace</a></li><li><a href=\"#method.reserve\">reserve</a></li><li><a href=\"#method.retain\">retain</a></li><li><a href=\"#method.shrink_to\">shrink_to</a></li><li><a href=\"#method.shrink_to_fit\">shrink_to_fit</a></li><li><a href=\"#method.symmetric_difference\">symmetric_difference</a></li><li><a href=\"#method.take\">take</a></li><li><a href=\"#method.try_reserve\">try_reserve</a></li><li><a href=\"#method.union\">union</a></li><li><a href=\"#method.with_capacity\">with_capacity</a></li><li><a href=\"#method.with_capacity_and_hasher\">with_capacity_and_hasher</a></li><li><a href=\"#method.with_hasher\">with_hasher</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-BitAnd%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\">BitAnd&lt;&amp;HashSet&lt;T, S&gt;&gt;</a></li><li><a href=\"#impl-BitOr%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\">BitOr&lt;&amp;HashSet&lt;T, S&gt;&gt;</a></li><li><a href=\"#impl-BitXor%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\">BitXor&lt;&amp;HashSet&lt;T, S&gt;&gt;</a></li><li><a href=\"#impl-Clone-for-HashSet%3CT,+S%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-HashSet%3CT,+S%3E\">Debug</a></li><li><a href=\"#impl-Default-for-HashSet%3CT,+S%3E\">Default</a></li><li><a href=\"#impl-Eq-for-HashSet%3CT,+S%3E\">Eq</a></li><li><a href=\"#impl-Extend%3C%26T%3E-for-HashSet%3CT,+S%3E\">Extend&lt;&amp;'a T&gt;</a></li><li><a href=\"#impl-Extend%3CT%3E-for-HashSet%3CT,+S%3E\">Extend&lt;T&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-FromIterator%3CT%3E-for-HashSet%3CT,+S%3E\">FromIterator&lt;T&gt;</a></li><li><a href=\"#impl-IntoIterator-for-%26HashSet%3CT,+S%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-HashSet%3CT,+S%3E\">IntoIterator</a></li><li><a href=\"#impl-PartialEq-for-HashSet%3CT,+S%3E\">PartialEq</a></li><li><a href=\"#impl-Sub%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\">Sub&lt;&amp;HashSet&lt;T, S&gt;&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-HashSet%3CT,+S%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-HashSet%3CT,+S%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-HashSet%3CT,+S%3E\">Send</a></li><li><a href=\"#impl-Sync-for-HashSet%3CT,+S%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-HashSet%3CT,+S%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-HashSet%3CT,+S%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::collections</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"binary_heap/index.html\">binary_heap</a></li><li><a href=\"btree_map/index.html\">btree_map</a></li><li><a href=\"btree_set/index.html\">btree_set</a></li><li><a href=\"hash_map/index.html\">hash_map</a></li><li><a href=\"hash_set/index.html\">hash_set</a></li><li><a href=\"linked_list/index.html\">linked_list</a></li><li><a href=\"vec_deque/index.html\">vec_deque</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BTreeMap.html\">BTreeMap</a></li><li><a href=\"struct.BTreeSet.html\">BTreeSet</a></li><li><a href=\"struct.BinaryHeap.html\">BinaryHeap</a></li><li><a href=\"struct.HashMap.html\">HashMap</a></li><li><a href=\"struct.HashSet.html\">HashSet</a></li><li><a href=\"struct.LinkedList.html\">LinkedList</a></li><li><a href=\"struct.TryReserveError.html\">TryReserveError</a></li><li><a href=\"struct.VecDeque.html\">VecDeque</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryReserveErrorKind.html\">TryReserveErrorKind</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">collections</a>::<wbr><a class=\"struct\" href=\"#\">HashSet</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#107-109\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct HashSet&lt;T, S = <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A <a href=\"index.html#use-the-set-variant-of-any-of-these-maps-when\" title=\"mod std::collections\">hash set</a> implemented as a <code>HashMap</code> where the value is <code>()</code>.</p>\n<p>As with the <a href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\"><code>HashMap</code></a> type, a <code>HashSet</code> requires that the elements\nimplement the <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> and <a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> traits. This can frequently be achieved by\nusing <code>#[derive(PartialEq, Eq, Hash)]</code>. If you implement these yourself,\nit is important that the following property holds:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>k1 == k2 -&gt; hash(k1) == hash(k2)\n</code></pre></div>\n<p>In other words, if two keys are equal, their hashes must be equal.\nViolating this property is a logic error.</p>\n<p>It is also a logic error for a key to be modified in such a way that the key’s\nhash, as determined by the <a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> trait, or its equality, as determined by\nthe <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> trait, changes while it is in the map. This is normally only\npossible through <a href=\"../cell/struct.Cell.html\" title=\"struct std::cell::Cell\"><code>Cell</code></a>, <a href=\"../cell/struct.RefCell.html\" title=\"struct std::cell::RefCell\"><code>RefCell</code></a>, global state, I/O, or unsafe code.</p>\n<p>The behavior resulting from either logic error is not specified, but will\nbe encapsulated to the <code>HashSet</code> that observed the logic error and not\nresult in undefined behavior. This could include panics, incorrect results,\naborts, memory leaks, and non-termination.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"comment\">// Type inference lets us omit an explicit type signature (which\n// would be `HashSet&lt;String&gt;` in this example).\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>books = HashSet::new();\n\n<span class=\"comment\">// Add some books.\n</span>books.insert(<span class=\"string\">\"A Dance With Dragons\"</span>.to_string());\nbooks.insert(<span class=\"string\">\"To Kill a Mockingbird\"</span>.to_string());\nbooks.insert(<span class=\"string\">\"The Odyssey\"</span>.to_string());\nbooks.insert(<span class=\"string\">\"The Great Gatsby\"</span>.to_string());\n\n<span class=\"comment\">// Check for a specific one.\n</span><span class=\"kw\">if </span>!books.contains(<span class=\"string\">\"The Winds of Winter\"</span>) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"We have {} books, but The Winds of Winter ain't one.\"</span>,\n             books.len());\n}\n\n<span class=\"comment\">// Remove a book.\n</span>books.remove(<span class=\"string\">\"The Odyssey\"</span>);\n\n<span class=\"comment\">// Iterate over everything.\n</span><span class=\"kw\">for </span>book <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>books {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{book}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++//+Type+inference+lets+us+omit+an+explicit+type+signature+(which%0A++++//+would+be+%60HashSet%3CString%3E%60+in+this+example).%0A++++let+mut+books+=+HashSet::new();%0A++++%0A++++//+Add+some+books.%0A++++books.insert(%22A+Dance+With+Dragons%22.to_string());%0A++++books.insert(%22To+Kill+a+Mockingbird%22.to_string());%0A++++books.insert(%22The+Odyssey%22.to_string());%0A++++books.insert(%22The+Great+Gatsby%22.to_string());%0A++++%0A++++//+Check+for+a+specific+one.%0A++++if+!books.contains(%22The+Winds+of+Winter%22)+%7B%0A++++++++println!(%22We+have+%7B%7D+books,+but+The+Winds+of+Winter+ain't+one.%22,%0A+++++++++++++++++books.len());%0A++++%7D%0A++++%0A++++//+Remove+a+book.%0A++++books.remove(%22The+Odyssey%22);%0A++++%0A++++//+Iterate+over+everything.%0A++++for+book+in+%26books+%7B%0A++++++++println!(%22%7Bbook%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The easiest way to use <code>HashSet</code> with a custom type is to derive\n<a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> and <a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a>. We must also derive <a href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a>,\nwhich is required if <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> is derived.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"attr\">#[derive(Hash, Eq, PartialEq, Debug)]\n</span><span class=\"kw\">struct </span>Viking {\n    name: String,\n    power: usize,\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vikings = HashSet::new();\n\nvikings.insert(Viking { name: <span class=\"string\">\"Einar\"</span>.to_string(), power: <span class=\"number\">9 </span>});\nvikings.insert(Viking { name: <span class=\"string\">\"Einar\"</span>.to_string(), power: <span class=\"number\">9 </span>});\nvikings.insert(Viking { name: <span class=\"string\">\"Olaf\"</span>.to_string(), power: <span class=\"number\">4 </span>});\nvikings.insert(Viking { name: <span class=\"string\">\"Harald\"</span>.to_string(), power: <span class=\"number\">8 </span>});\n\n<span class=\"comment\">// Use derived implementation to print the vikings.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>vikings {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x:?}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%23%5Bderive(Hash,+Eq,+PartialEq,+Debug)%5D%0A++++struct+Viking+%7B%0A++++++++name:+String,%0A++++++++power:+usize,%0A++++%7D%0A++++%0A++++let+mut+vikings+=+HashSet::new();%0A++++%0A++++vikings.insert(Viking+%7B+name:+%22Einar%22.to_string(),+power:+9+%7D);%0A++++vikings.insert(Viking+%7B+name:+%22Einar%22.to_string(),+power:+9+%7D);%0A++++vikings.insert(Viking+%7B+name:+%22Olaf%22.to_string(),+power:+4+%7D);%0A++++vikings.insert(Viking+%7B+name:+%22Harald%22.to_string(),+power:+8+%7D);%0A++++%0A++++//+Use+derived+implementation+to+print+the+vikings.%0A++++for+x+in+%26vikings+%7B%0A++++++++println!(%22%7Bx:?%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A <code>HashSet</code> with a known list of items can be initialized from an array:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>viking_names = HashSet::from([<span class=\"string\">\"Einar\"</span>, <span class=\"string\">\"Olaf\"</span>, <span class=\"string\">\"Harald\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+viking_names+=+HashSet::from(%5B%22Einar%22,+%22Olaf%22,+%22Harald%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-HashSet%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#111-149\">source</a><a href=\"#impl-HashSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#126-128\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code>.</p>\n<p>The hash set is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::new();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+set:+HashSet%3Ci32%3E+=+HashSet::new();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#146-148\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code> with at least the specified capacity.</p>\n<p>The hash set will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the hash set will not allocate.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+set:+HashSet%3Ci32%3E+=+HashSet::with_capacity(10);%0A++++assert!(set.capacity()+%3E=+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-HashSet%3CT,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#151-425\">source</a><a href=\"#impl-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#163-165\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements the set can hold without reallocating.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::with_capacity(<span class=\"number\">100</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">100</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+set:+HashSet%3Ci32%3E+=+HashSet::with_capacity(100);%0A++++assert!(set.capacity()+%3E=+100);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#191-193\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hash_set/struct.Iter.html\" title=\"struct std::collections::hash_set::Iter\">Iter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all elements in arbitrary order.\nThe iterator element type is <code>&amp;'a T</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\nset.insert(<span class=\"string\">\"a\"</span>);\nset.insert(<span class=\"string\">\"b\"</span>);\n\n<span class=\"comment\">// Will print in an arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>set.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+mut+set+=+HashSet::new();%0A++++set.insert(%22a%22);%0A++++set.insert(%22b%22);%0A++++%0A++++//+Will+print+in+an+arbitrary+order.%0A++++for+x+in+set.iter()+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance\"><a class=\"doc-anchor\" href=\"#performance\">§</a>Performance</h5>\n<p>In the current implementation, iterating over set takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#209-211\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the set.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashSet::new();\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">0</span>);\nv.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+v+=+HashSet::new();%0A++++assert_eq!(v.len(),+0);%0A++++v.insert(1);%0A++++assert_eq!(v.len(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#227-229\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains no elements.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashSet::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\nv.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+v+=+HashSet::new();%0A++++assert!(v.is_empty());%0A++++v.insert(1);%0A++++assert!(!v.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#256-258\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.drain\" class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"hash_set/struct.Drain.html\" title=\"struct std::collections::hash_set::Drain\">Drain</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Drain<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Clears the set, returning all elements as an iterator. Keeps the\nallocated memory for reuse.</p>\n<p>If the returned iterator is dropped before being fully consumed, it\ndrops the remaining elements. The returned iterator keeps a mutable\nborrow on the set to optimize its implementation.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\n<span class=\"comment\">// print 1, 2, 3 in an arbitrary order\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span>set.drain() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{i}\"</span>);\n}\n\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert!(!set.is_empty());%0A++++%0A++++//+print+1,+2,+3+in+an+arbitrary+order%0A++++for+i+in+set.drain()+%7B%0A++++++++println!(%22%7Bi%7D%22);%0A++++%7D%0A++++%0A++++assert!(set.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extract_if\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#294-299\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.extract_if\" class=\"fn\">extract_if</a>&lt;F&gt;(&amp;mut self, pred: F) -&gt; <a class=\"struct\" href=\"hash_set/struct.ExtractIf.html\" title=\"struct std::collections::hash_set::ExtractIf\">ExtractIf</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ExtractIf<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hash_extract_if</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/59618\">#59618</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if a value should be removed.</p>\n<p>If the closure returns true, then the value is removed and yielded.\nIf the closure returns false, the value will remain in the list and will not be yielded\nby the iterator.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"hash_set/struct.HashSet.html#method.retain\" title=\"method std::collections::hash_set::HashSet::retain\"><code>retain</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Splitting a set into even and odd values, reusing the original set:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hash_extract_if)]\n</span><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).collect();\n<span class=\"kw\">let </span>extracted: HashSet&lt;i32&gt; = set.extract_if(|v| v % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>evens = extracted.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>odds = set.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\nevens.sort();\nodds.sort();\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_extract_if)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set:+HashSet%3Ci32%3E+=+(0..8).collect();%0A++++let+extracted:+HashSet%3Ci32%3E+=+set.extract_if(%7Cv%7C+v+%25+2+==+0).collect();%0A++++%0A++++let+mut+evens+=+extracted.into_iter().collect::%3CVec%3C_%3E%3E();%0A++++let+mut+odds+=+set.into_iter().collect::%3CVec%3C_%3E%3E();%0A++++evens.sort();%0A++++odds.sort();%0A++++%0A++++assert_eq!(evens,+vec!%5B0,+2,+4,+6%5D);%0A++++assert_eq!(odds,+vec!%5B1,+3,+5,+7%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#322-327\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThe elements are visited in unsorted (and unspecified) order.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\nset.retain(|<span class=\"kw-2\">&amp;</span>k| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(set, HashSet::from([<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::from(%5B1,+2,+3,+4,+5,+6%5D);%0A++++set.retain(%7C%26k%7C+k+%25+2+==+0);%0A++++assert_eq!(set,+HashSet::from(%5B2,+4,+6%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance-1\"><a class=\"doc-anchor\" href=\"#performance-1\">§</a>Performance</h5>\n<p>In the current implementation, this operation takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#343-345\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the set, removing all values.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashSet::new();\nv.insert(<span class=\"number\">1</span>);\nv.clear();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+v+=+HashSet::new();%0A++++v.insert(1);%0A++++v.clear();%0A++++assert!(v.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_hasher\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const unstable\">1.7.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/102575\" title=\"Tracking issue for const_collections_with_hasher\">unstable</a>)</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#373-375\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_hasher\" class=\"fn\">with_hasher</a>(hasher: S) -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new empty hash set which will use the given hasher to hash\nkeys.</p>\n<p>The hash set is also created with the default initial capacity.</p>\n<p>Warning: <code>hasher</code> is normally randomly generated, and\nis designed to allow <code>HashSet</code>s to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.</p>\n<p>The <code>hash_builder</code> passed should implement the <a href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\"><code>BuildHasher</code></a> trait for\nthe HashMap to be useful, see its documentation for details.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_hasher(s);\nset.insert(<span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+set+=+HashSet::with_hasher(s);%0A++++set.insert(2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity_and_hasher\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#404-406\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity_and_hasher\" class=\"fn\">with_capacity_and_hasher</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, hasher: S) -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code> with at least the specified capacity, using\n<code>hasher</code> to hash the keys.</p>\n<p>The hash set will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the hash set will not allocate.</p>\n<p>Warning: <code>hasher</code> is normally randomly generated, and\nis designed to allow <code>HashSet</code>s to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.</p>\n<p>The <code>hash_builder</code> passed should implement the <a href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\"><code>BuildHasher</code></a> trait for\nthe HashMap to be useful, see its documentation for details.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity_and_hasher(<span class=\"number\">10</span>, s);\nset.insert(<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+set+=+HashSet::with_capacity_and_hasher(10,+s);%0A++++set.insert(1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hasher\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#422-424\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.hasher\" class=\"fn\">hasher</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;S</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the set’s <a href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\"><code>BuildHasher</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>hasher = RandomState::new();\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::with_hasher(hasher);\n<span class=\"kw\">let </span>hasher: <span class=\"kw-2\">&amp;</span>RandomState = set.hasher();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+hasher+=+RandomState::new();%0A++++let+set:+HashSet%3Ci32%3E+=+HashSet::with_hasher(hasher);%0A++++let+hasher:+%26RandomState+=+set.hasher();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-HashSet%3CT,+S%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#427-968\">source</a><a href=\"#impl-HashSet%3CT,+S%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#452-454\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the <code>HashSet</code>. The collection may reserve more space to speculatively\navoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new allocation size overflows <code>usize</code>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = HashSet::new();\nset.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+mut+set:+HashSet%3Ci32%3E+=+HashSet::new();%0A++++set.reserve(10);%0A++++assert!(set.capacity()+%3E=+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#477-479\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the <code>HashSet</code>. The collection may reserve more space to speculatively\navoid frequent reallocations. After calling <code>try_reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code> if\nit returns <code>Ok(())</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = HashSet::new();\nset.try_reserve(<span class=\"number\">10</span>).expect(<span class=\"string\">\"why is the test harness OOMing on a handful of bytes?\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+mut+set:+HashSet%3Ci32%3E+=+HashSet::new();%0A++++set.try_reserve(10).expect(%22why+is+the+test+harness+OOMing+on+a+handful+of+bytes?%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#499-501\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity(<span class=\"number\">100</span>);\nset.insert(<span class=\"number\">1</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">100</span>);\nset.shrink_to_fit();\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::with_capacity(100);%0A++++set.insert(1);%0A++++set.insert(2);%0A++++assert!(set.capacity()+%3E=+100);%0A++++set.shrink_to_fit();%0A++++assert!(set.capacity()+%3E=+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#524-526\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the set with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity(<span class=\"number\">100</span>);\nset.insert(<span class=\"number\">1</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">100</span>);\nset.shrink_to(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">10</span>);\nset.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::with_capacity(100);%0A++++set.insert(1);%0A++++set.insert(2);%0A++++assert!(set.capacity()+%3E=+100);%0A++++set.shrink_to(10);%0A++++assert!(set.capacity()+%3E=+10);%0A++++set.shrink_to(0);%0A++++assert!(set.capacity()+%3E=+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.difference\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#554-556\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.difference\" class=\"fn\">difference</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;,\n) -&gt; <a class=\"struct\" href=\"hash_set/struct.Difference.html\" title=\"struct std::collections::hash_set::Difference\">Difference</a>&lt;'a, T, S&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Difference<'a, T, S>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Visits the values representing the difference,\ni.e., the values that are in <code>self</code> but not in <code>other</code>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Can be seen as `a - b`.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.difference(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>); <span class=\"comment\">// Print 1\n</span>}\n\n<span class=\"kw\">let </span>diff: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.difference(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"macro\">assert_eq!</span>(diff, [<span class=\"number\">1</span>].iter().collect());\n\n<span class=\"comment\">// Note that difference is not symmetric,\n// and `b - a` means something else:\n</span><span class=\"kw\">let </span>diff: HashSet&lt;<span class=\"kw\">_</span>&gt; = b.difference(<span class=\"kw-2\">&amp;</span>a).collect();\n<span class=\"macro\">assert_eq!</span>(diff, [<span class=\"number\">4</span>].iter().collect());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B4,+2,+3,+4%5D);%0A++++%0A++++//+Can+be+seen+as+%60a+-+b%60.%0A++++for+x+in+a.difference(%26b)+%7B%0A++++++++println!(%22%7Bx%7D%22);+//+Print+1%0A++++%7D%0A++++%0A++++let+diff:+HashSet%3C_%3E+=+a.difference(%26b).collect();%0A++++assert_eq!(diff,+%5B1%5D.iter().collect());%0A++++%0A++++//+Note+that+difference+is+not+symmetric,%0A++++//+and+%60b+-+a%60+means+something+else:%0A++++let+diff:+HashSet%3C_%3E+=+b.difference(%26a).collect();%0A++++assert_eq!(diff,+%5B4%5D.iter().collect());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.symmetric_difference\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#582-587\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.symmetric_difference\" class=\"fn\">symmetric_difference</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;,\n) -&gt; <a class=\"struct\" href=\"hash_set/struct.SymmetricDifference.html\" title=\"struct std::collections::hash_set::SymmetricDifference\">SymmetricDifference</a>&lt;'a, T, S&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SymmetricDifference<'a, T, S>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Visits the values representing the symmetric difference,\ni.e., the values that are in <code>self</code> or in <code>other</code> but not in both.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Print 1, 4 in arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.symmetric_difference(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"kw\">let </span>diff1: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.symmetric_difference(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"kw\">let </span>diff2: HashSet&lt;<span class=\"kw\">_</span>&gt; = b.symmetric_difference(<span class=\"kw-2\">&amp;</span>a).collect();\n\n<span class=\"macro\">assert_eq!</span>(diff1, diff2);\n<span class=\"macro\">assert_eq!</span>(diff1, [<span class=\"number\">1</span>, <span class=\"number\">4</span>].iter().collect());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B4,+2,+3,+4%5D);%0A++++%0A++++//+Print+1,+4+in+arbitrary+order.%0A++++for+x+in+a.symmetric_difference(%26b)+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++let+diff1:+HashSet%3C_%3E+=+a.symmetric_difference(%26b).collect();%0A++++let+diff2:+HashSet%3C_%3E+=+b.symmetric_difference(%26a).collect();%0A++++%0A++++assert_eq!(diff1,+diff2);%0A++++assert_eq!(diff1,+%5B1,+4%5D.iter().collect());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.intersection\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#616-622\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.intersection\" class=\"fn\">intersection</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;,\n) -&gt; <a class=\"struct\" href=\"hash_set/struct.Intersection.html\" title=\"struct std::collections::hash_set::Intersection\">Intersection</a>&lt;'a, T, S&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Intersection<'a, T, S>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Visits the values representing the intersection,\ni.e., the values that are both in <code>self</code> and <code>other</code>.</p>\n<p>When an equal element is present in <code>self</code> and <code>other</code>\nthen the resulting <code>Intersection</code> may yield references to\none or the other. This can be relevant if <code>T</code> contains fields which\nare not compared by its <code>Eq</code> implementation, and may hold different\nvalue between the two equal copies of <code>T</code> in the two sets.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Print 2, 3 in arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.intersection(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"kw\">let </span>intersection: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.intersection(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"macro\">assert_eq!</span>(intersection, [<span class=\"number\">2</span>, <span class=\"number\">3</span>].iter().collect());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B4,+2,+3,+4%5D);%0A++++%0A++++//+Print+2,+3+in+arbitrary+order.%0A++++for+x+in+a.intersection(%26b)+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++let+intersection:+HashSet%3C_%3E+=+a.intersection(%26b).collect();%0A++++assert_eq!(intersection,+%5B2,+3%5D.iter().collect());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.union\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#645-651\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.union\" class=\"fn\">union</a>&lt;'a&gt;(&amp;'a self, other: &amp;'a <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;) -&gt; <a class=\"struct\" href=\"hash_set/struct.Union.html\" title=\"struct std::collections::hash_set::Union\">Union</a>&lt;'a, T, S&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Union<'a, T, S>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Visits the values representing the union,\ni.e., all the values in <code>self</code> or <code>other</code>, without duplicates.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Print 1, 2, 3, 4 in arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.union(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"kw\">let union</span>: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.union(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"macro\">assert_eq!</span>(union, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].iter().collect());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B4,+2,+3,+4%5D);%0A++++%0A++++//+Print+1,+2,+3,+4+in+arbitrary+order.%0A++++for+x+in+a.union(%26b)+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++%0A++++let+union:+HashSet%3C_%3E+=+a.union(%26b).collect();%0A++++assert_eq!(union,+%5B1,+2,+3,+4%5D.iter().collect());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#670-676\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.contains\" class=\"fn\">contains</a>&lt;Q&gt;(&amp;self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains a value.</p>\n<p>The value may be any borrowed form of the set’s value type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.contains(%261),+true);%0A++++assert_eq!(set.contains(%264),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#695-701\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value in the set, if any, that is equal to the given value.</p>\n<p>The value may be any borrowed form of the set’s value type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.get(%262),+Some(%262));%0A++++assert_eq!(set.get(%264),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_insert\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#721-725\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hash_set_entry</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/60896\">#60896</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the given <code>value</code> into the set if it is not present, then\nreturns a reference to the value in the set.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hash_set_entry)]\n\n</span><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(set.get_or_insert(<span class=\"number\">2</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.get_or_insert(<span class=\"number\">100</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">4</span>); <span class=\"comment\">// 100 was inserted</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_set_entry)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.len(),+3);%0A++++assert_eq!(set.get_or_insert(2),+%262);%0A++++assert_eq!(set.get_or_insert(100),+%26100);%0A++++assert_eq!(set.len(),+4);+//+100+was+inserted%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_insert_owned\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#749-757\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_insert_owned\" class=\"fn\">get_or_insert_owned</a>&lt;Q&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a>&lt;Owned = T&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hash_set_entry</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/60896\">#60896</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts an owned copy of the given <code>value</code> into the set if it is not\npresent, then returns a reference to the value in the set.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hash_set_entry)]\n\n</span><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;String&gt; = [<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"horse\"</span>]\n    .iter().map(|<span class=\"kw-2\">&amp;</span>pet| pet.to_owned()).collect();\n\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);\n<span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>pet <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"fish\"</span>] {\n    <span class=\"kw\">let </span>value = set.get_or_insert_owned(pet);\n    <span class=\"macro\">assert_eq!</span>(value, pet);\n}\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">4</span>); <span class=\"comment\">// a new \"fish\" was inserted</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_set_entry)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set:+HashSet%3CString%3E+=+%5B%22cat%22,+%22dog%22,+%22horse%22%5D%0A++++++++.iter().map(%7C%26pet%7C+pet.to_owned()).collect();%0A++++%0A++++assert_eq!(set.len(),+3);%0A++++for+%26pet+in+%26%5B%22cat%22,+%22dog%22,+%22fish%22%5D+%7B%0A++++++++let+value+=+set.get_or_insert_owned(pet);%0A++++++++assert_eq!(value,+pet);%0A++++%7D%0A++++assert_eq!(set.len(),+4);+//+a+new+%22fish%22+was+inserted%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_insert_with\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#781-790\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;Q, F&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; T,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hash_set_entry</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/60896\">#60896</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the set if the given <code>value</code> is\nnot present, then returns a reference to the value in the set.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hash_set_entry)]\n\n</span><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;String&gt; = [<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"horse\"</span>]\n    .iter().map(|<span class=\"kw-2\">&amp;</span>pet| pet.to_owned()).collect();\n\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);\n<span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>pet <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"fish\"</span>] {\n    <span class=\"kw\">let </span>value = set.get_or_insert_with(pet, str::to_owned);\n    <span class=\"macro\">assert_eq!</span>(value, pet);\n}\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">4</span>); <span class=\"comment\">// a new \"fish\" was inserted</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_set_entry)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set:+HashSet%3CString%3E+=+%5B%22cat%22,+%22dog%22,+%22horse%22%5D%0A++++++++.iter().map(%7C%26pet%7C+pet.to_owned()).collect();%0A++++%0A++++assert_eq!(set.len(),+3);%0A++++for+%26pet+in+%26%5B%22cat%22,+%22dog%22,+%22fish%22%5D+%7B%0A++++++++let+value+=+set.get_or_insert_with(pet,+str::to_owned);%0A++++++++assert_eq!(value,+pet);%0A++++%7D%0A++++assert_eq!(set.len(),+4);+//+a+new+%22fish%22+was+inserted%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_disjoint\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#810-816\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_disjoint\" class=\"fn\">is_disjoint</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.\nThis is equivalent to checking for an empty intersection.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">true</span>);\nb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">true</span>);\nb.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+mut+b+=+HashSet::new();%0A++++%0A++++assert_eq!(a.is_disjoint(%26b),+true);%0A++++b.insert(4);%0A++++assert_eq!(a.is_disjoint(%26b),+true);%0A++++b.insert(1);%0A++++assert_eq!(a.is_disjoint(%26b),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_subset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#836-838\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_subset\" class=\"fn\">is_subset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a subset of another,\ni.e., <code>other</code> contains at least all the values in <code>self</code>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>sup = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">true</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">true</span>);\nset.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+sup+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+mut+set+=+HashSet::new();%0A++++%0A++++assert_eq!(set.is_subset(%26sup),+true);%0A++++set.insert(2);%0A++++assert_eq!(set.is_subset(%26sup),+true);%0A++++set.insert(4);%0A++++assert_eq!(set.is_subset(%26sup),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_superset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#862-864\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_superset\" class=\"fn\">is_superset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a superset of another,\ni.e., <code>self</code> contains at least all the values in <code>other</code>.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>sub = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">false</span>);\n\nset.insert(<span class=\"number\">0</span>);\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">false</span>);\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+sub+=+HashSet::from(%5B1,+2%5D);%0A++++let+mut+set+=+HashSet::new();%0A++++%0A++++assert_eq!(set.is_superset(%26sub),+false);%0A++++%0A++++set.insert(0);%0A++++set.insert(1);%0A++++assert_eq!(set.is_superset(%26sub),+false);%0A++++%0A++++set.insert(2);%0A++++assert_eq!(set.is_superset(%26sub),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#889-891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Adds a value to the set.</p>\n<p>Returns whether the value was newly inserted. That is:</p>\n<ul>\n<li>If the set did not previously contain this value, <code>true</code> is returned.</li>\n<li>If the set already contained this value, <code>false</code> is returned,\nand the set is not modified: original value is not replaced,\nand the value passed as argument is dropped.</li>\n</ul>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::new();%0A++++%0A++++assert_eq!(set.insert(2),+true);%0A++++assert_eq!(set.insert(2),+false);%0A++++assert_eq!(set.len(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#911-913\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\nset.insert(Vec::&lt;i32&gt;::new());\n\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span>[][..]).unwrap().capacity(), <span class=\"number\">0</span>);\nset.replace(Vec::with_capacity(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span>[][..]).unwrap().capacity(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::new();%0A++++set.insert(Vec::%3Ci32%3E::new());%0A++++%0A++++assert_eq!(set.get(%26%5B%5D%5B..%5D).unwrap().capacity(),+0);%0A++++set.replace(Vec::with_capacity(10));%0A++++assert_eq!(set.get(%26%5B%5D%5B..%5D).unwrap().capacity(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#936-942\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.remove\" class=\"fn\">remove</a>&lt;Q&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a value from the set. Returns whether the value was\npresent in the set.</p>\n<p>The value may be any borrowed form of the set’s value type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::new();%0A++++%0A++++set.insert(2);%0A++++assert_eq!(set.remove(%262),+true);%0A++++assert_eq!(set.remove(%262),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#961-967\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>&lt;Q&gt;(&amp;mut self, value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes and returns the value in the set, if any, that is equal to the given one.</p>\n<p>The value may be any borrowed form of the set’s value type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.take(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(set.take(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+mut+set+=+HashSet::from(%5B1,+2,+3%5D);%0A++++assert_eq!(set.take(%262),+Some(2));%0A++++assert_eq!(set.take(%262),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1159-1189\">source</a></span><a href=\"#impl-BitAnd%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;&gt; for &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1186-1188\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;) -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the intersection of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">let </span>set = <span class=\"kw-2\">&amp;</span>a &amp; <span class=\"kw-2\">&amp;</span>b;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span>expected = [<span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>set {\n    <span class=\"macro\">assert!</span>(expected.contains(x));\n    i += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(i, expected.len());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B2,+3,+4%5D);%0A++++%0A++++let+set+=+%26a+%26+%26b;%0A++++%0A++++let+mut+i+=+0;%0A++++let+expected+=+%5B2,+3%5D;%0A++++for+x+in+%26set+%7B%0A++++++++assert!(expected.contains(x));%0A++++++++i+%2B=+1;%0A++++%7D%0A++++assert_eq!(i,+expected.len());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1126-1156\">source</a></span><a href=\"#impl-BitOr%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;&gt; for &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1153-1155\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;) -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n\n<span class=\"kw\">let </span>set = <span class=\"kw-2\">&amp;</span>a | <span class=\"kw-2\">&amp;</span>b;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span>expected = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>set {\n    <span class=\"macro\">assert!</span>(expected.contains(x));\n    i += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(i, expected.len());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+set+=+%26a+%7C+%26b;%0A++++%0A++++let+mut+i+=+0;%0A++++let+expected+=+%5B1,+2,+3,+4,+5%5D;%0A++++for+x+in+%26set+%7B%0A++++++++assert!(expected.contains(x));%0A++++++++i+%2B=+1;%0A++++%7D%0A++++assert_eq!(i,+expected.len());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1192-1222\">source</a></span><a href=\"#impl-BitXor%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;&gt; for &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1219-1221\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;) -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n\n<span class=\"kw\">let </span>set = <span class=\"kw-2\">&amp;</span>a ^ <span class=\"kw-2\">&amp;</span>b;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span>expected = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>set {\n    <span class=\"macro\">assert!</span>(expected.contains(x));\n    i += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(i, expected.len());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+set+=+%26a+%5E+%26b;%0A++++%0A++++let+mut+i+=+0;%0A++++let+expected+=+%5B1,+2,+4,+5%5D;%0A++++for+x+in+%26set+%7B%0A++++++++assert!(expected.contains(x));%0A++++++++i+%2B=+1;%0A++++%7D%0A++++assert_eq!(i,+expected.len());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#971-989\">source</a></span><a href=\"#impl-Clone-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#986-988\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#977-979\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1015-1022\">source</a></span><a href=\"#impl-Debug-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1019-1021\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1114-1123\">source</a></span><a href=\"#impl-Default-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1120-1122\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for the hasher.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C%26T%3E-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1092-1111\">source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, S&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1098-1100\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;&gt;(&amp;mut self, iter: I)</h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1103-1105\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1108-1110\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1070-1089\">source</a></span><a href=\"#impl-Extend%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1076-1078\">source</a><a href=\"#method.extend-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;&gt;(&amp;mut self, iter: I)</h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1081-1083\">source</a><a href=\"#method.extend_one-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1086-1088\">source</a><a href=\"#method.extend_reserve-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1051-1067\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-HashSet%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1064-1066\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>set1 = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>set2: HashSet&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\n<span class=\"macro\">assert_eq!</span>(set1, set2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+set1+=+HashSet::from(%5B1,+2,+3,+4%5D);%0A++++let+set2:+HashSet%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(set1,+set2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1025-1036\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1031-1035\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;&gt;(iter: I) -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1448-1457\">source</a></span><a href=\"#impl-IntoIterator-for-%26HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, S&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"hash_set/struct.Iter.html\" title=\"struct std::collections::hash_set::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1454-1456\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"hash_set/struct.Iter.html\" title=\"struct std::collections::hash_set::Iter\">Iter</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'a, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1460-1489\">source</a></span><a href=\"#impl-IntoIterator-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1486-1488\">source</a><a href=\"#method.into_iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"hash_set/struct.IntoIter.html\" title=\"struct std::collections::hash_set::IntoIter\">IntoIter</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter<T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\nset.insert(<span class=\"string\">\"a\"</span>.to_string());\nset.insert(<span class=\"string\">\"b\"</span>.to_string());\n\n<span class=\"comment\">// Not possible to collect to a Vec&lt;String&gt; with a regular `.iter()`.\n</span><span class=\"kw\">let </span>v: Vec&lt;String&gt; = set.into_iter().collect();\n\n<span class=\"comment\">// Will print in an arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>v {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++let+mut+set+=+HashSet::new();%0A++++set.insert(%22a%22.to_string());%0A++++set.insert(%22b%22.to_string());%0A++++%0A++++//+Not+possible+to+collect+to+a+Vec%3CString%3E+with+a+regular+%60.iter()%60.%0A++++let+v:+Vec%3CString%3E+=+set.into_iter().collect();%0A++++%0A++++//+Will+print+in+an+arbitrary+order.%0A++++for+x+in+%26v+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"hash_set/struct.IntoIter.html\" title=\"struct std::collections::hash_set::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#992-1004\">source</a></span><a href=\"#impl-PartialEq-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#997-1003\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1225-1255\">source</a></span><a href=\"#impl-Sub%3C%26HashSet%3CT,+S%3E%3E-for-%26HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;&gt; for &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/set.rs.html#1252-1254\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;) -&gt; <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the difference of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n\n<span class=\"kw\">let </span>set = <span class=\"kw-2\">&amp;</span>a - <span class=\"kw-2\">&amp;</span>b;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span>expected = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>set {\n    <span class=\"macro\">assert!</span>(expected.contains(x));\n    i += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(i, expected.len());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashSet;%0A++++%0A++++let+a+=+HashSet::from(%5B1,+2,+3%5D);%0A++++let+b+=+HashSet::from(%5B3,+4,+5%5D);%0A++++%0A++++let+set+=+%26a+-+%26b;%0A++++%0A++++let+mut+i+=+0;%0A++++let+expected+=+%5B1,+2%5D;%0A++++for+x+in+%26set+%7B%0A++++++++assert!(expected.contains(x));%0A++++++++i+%2B=+1;%0A++++%7D%0A++++assert_eq!(i,+expected.len());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details></div></details><section id=\"impl-Eq-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/set.rs.html#1007-1012\">source</a></span><a href=\"#impl-Eq-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-HashSet%3CT,+S%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-HashSet%3CT,+S%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-HashSet%3CT,+S%3E\" class=\"impl\"><a href=\"#impl-Send-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-HashSet%3CT,+S%3E\" class=\"impl\"><a href=\"#impl-Sync-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-HashSet%3CT,+S%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-HashSet%3CT,+S%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-HashSet%3CT,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"hash_set/struct.HashSet.html\" title=\"struct std::collections::hash_set::HashSet\">HashSet</a>&lt;T, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Difference<'a, T, S>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_set/struct.Difference.html\\\" title=\\\"struct std::collections::hash_set::Difference\\\">Difference</a>&lt;'a, T, S&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, S&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_set/struct.Difference.html\\\" title=\\\"struct std::collections::hash_set::Difference\\\">Difference</a>&lt;'a, T, S&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../cmp/trait.Eq.html\\\" title=\\\"trait std::cmp::Eq\\\">Eq</a> + <a class=\\\"trait\\\" href=\\\"../hash/trait.Hash.html\\\" title=\\\"trait std::hash::Hash\\\">Hash</a>,\\n    S: <a class=\\\"trait\\\" href=\\\"../hash/trait.BuildHasher.html\\\" title=\\\"trait std::hash::BuildHasher\\\">BuildHasher</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"Drain<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_set/struct.Drain.html\\\" title=\\\"struct std::collections::hash_set::Drain\\\">Drain</a>&lt;'a, K&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_set/struct.Drain.html\\\" title=\\\"struct std::collections::hash_set::Drain\\\">Drain</a>&lt;'a, K&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = K;</div>\",\"ExtractIf<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_set/struct.ExtractIf.html\\\" title=\\\"struct std::collections::hash_set::ExtractIf\\\">ExtractIf</a>&lt;'_, K, F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;K, F&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_set/struct.ExtractIf.html\\\" title=\\\"struct std::collections::hash_set::ExtractIf\\\">ExtractIf</a>&lt;'_, K, F&gt;<div class=\\\"where\\\">where\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;K</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = K;</div>\",\"Intersection<'a, T, S>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_set/struct.Intersection.html\\\" title=\\\"struct std::collections::hash_set::Intersection\\\">Intersection</a>&lt;'a, T, S&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, S&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_set/struct.Intersection.html\\\" title=\\\"struct std::collections::hash_set::Intersection\\\">Intersection</a>&lt;'a, T, S&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../cmp/trait.Eq.html\\\" title=\\\"trait std::cmp::Eq\\\">Eq</a> + <a class=\\\"trait\\\" href=\\\"../hash/trait.Hash.html\\\" title=\\\"trait std::hash::Hash\\\">Hash</a>,\\n    S: <a class=\\\"trait\\\" href=\\\"../hash/trait.BuildHasher.html\\\" title=\\\"trait std::hash::BuildHasher\\\">BuildHasher</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"IntoIter<T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_set/struct.IntoIter.html\\\" title=\\\"struct std::collections::hash_set::IntoIter\\\">IntoIter</a>&lt;K&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;K&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_set/struct.IntoIter.html\\\" title=\\\"struct std::collections::hash_set::IntoIter\\\">IntoIter</a>&lt;K&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = K;</div>\",\"Iter<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_set/struct.Iter.html\\\" title=\\\"struct std::collections::hash_set::Iter\\\">Iter</a>&lt;'a, K&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_set/struct.Iter.html\\\" title=\\\"struct std::collections::hash_set::Iter\\\">Iter</a>&lt;'a, K&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a K</a>;</div>\",\"Iter<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_set/struct.Iter.html\\\" title=\\\"struct std::collections::hash_set::Iter\\\">Iter</a>&lt;'a, K&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_set/struct.Iter.html\\\" title=\\\"struct std::collections::hash_set::Iter\\\">Iter</a>&lt;'a, K&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a K</a>;</div>\",\"SymmetricDifference<'a, T, S>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_set/struct.SymmetricDifference.html\\\" title=\\\"struct std::collections::hash_set::SymmetricDifference\\\">SymmetricDifference</a>&lt;'a, T, S&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, S&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_set/struct.SymmetricDifference.html\\\" title=\\\"struct std::collections::hash_set::SymmetricDifference\\\">SymmetricDifference</a>&lt;'a, T, S&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../cmp/trait.Eq.html\\\" title=\\\"trait std::cmp::Eq\\\">Eq</a> + <a class=\\\"trait\\\" href=\\\"../hash/trait.Hash.html\\\" title=\\\"trait std::hash::Hash\\\">Hash</a>,\\n    S: <a class=\\\"trait\\\" href=\\\"../hash/trait.BuildHasher.html\\\" title=\\\"trait std::hash::BuildHasher\\\">BuildHasher</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"Union<'a, T, S>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_set/struct.Union.html\\\" title=\\\"struct std::collections::hash_set::Union\\\">Union</a>&lt;'a, T, S&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, S&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_set/struct.Union.html\\\" title=\\\"struct std::collections::hash_set::Union\\\">Union</a>&lt;'a, T, S&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../cmp/trait.Eq.html\\\" title=\\\"trait std::cmp::Eq\\\">Eq</a> + <a class=\\\"trait\\\" href=\\\"../hash/trait.Hash.html\\\" title=\\\"trait std::hash::Hash\\\">Hash</a>,\\n    S: <a class=\\\"trait\\\" href=\\\"../hash/trait.BuildHasher.html\\\" title=\\\"trait std::hash::BuildHasher\\\">BuildHasher</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:00.541Z"
}