{
	"title": "black_box in std::hint - Rust",
	"url": "https://doc.rust-lang.org/stable/std/hint/fn.black_box.html",
	"markdown": "# black\\_box in std::hint - Rust\n\n## Function [std](../index.html)::[hint](index.html)::[black\\_box](#)\n\n1.66.0 (const: unstable) · [source](https://doc.rust-lang.org/1.80.0/src/core/hint.rs.html#337) ·\n\n```\npub fn black_box<T>(dummy: T) -> T\n```\n\nExpand description\n\nAn identity function that _**hints**_ to the compiler to be maximally pessimistic about what `black_box` could do.\n\nUnlike [`std::convert::identity`](../convert/fn.identity.html \"fn std::convert::identity\"), a Rust compiler is encouraged to assume that `black_box` can use `dummy` in any possible valid way that Rust code is allowed to without introducing undefined behavior in the calling code. This property makes `black_box` useful for writing code in which certain optimizations are not desired, such as benchmarks.\n\nNote however, that `black_box` is only (and can only be) provided on a “best-effort” basis. The extent to which it can block optimisations may vary depending upon the platform and code-gen backend used. Programs cannot rely on `black_box` for _correctness_, beyond it behaving as the identity function. As such, it **must not be relied upon to control critical program behavior.** This _immediately_ precludes any direct use of this function for cryptographic or security purposes.\n\n## [§](#when-is-this-useful)When is this useful?\n\nWhile not suitable in those mission-critical cases, `black_box`’s functionality can generally be relied upon for benchmarking, and should be used there. It will try to ensure that the compiler doesn’t optimize away part of the intended test code based on context. For example:\n\n```\nfn contains(haystack: &[&str], needle: &str) -> bool {\n    haystack.iter().any(|x| x == &needle)\n}\n\npub fn benchmark() {\n    let haystack = vec![\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"];\n    let needle = \"ghi\";\n    for _ in 0..10 {\n        contains(&haystack, needle);\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+contains(haystack:+%26%5B%26str%5D,+needle:+%26str)+-%3E+bool+%7B%0A++++++++haystack.iter().any(%7Cx%7C+x+==+%26needle)%0A++++%7D%0A++++%0A++++pub+fn+benchmark()+%7B%0A++++++++let+haystack+=+vec!%5B%22abc%22,+%22def%22,+%22ghi%22,+%22jkl%22,+%22mno%22%5D;%0A++++++++let+needle+=+%22ghi%22;%0A++++++++for+_+in+0..10+%7B%0A++++++++++++contains(%26haystack,+needle);%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nThe compiler could theoretically make optimizations like the following:\n\n-   The `needle` and `haystack` do not change, move the call to `contains` outside the loop and delete the loop\n-   Inline `contains`\n-   `needle` and `haystack` have values known at compile time, `contains` is always true. Remove the call and replace with `true`\n-   Nothing is done with the result of `contains`: delete this function call entirely\n-   `benchmark` now has no purpose: delete this function\n\nIt is not likely that all of the above happens, but the compiler is definitely able to make some optimizations that could result in a very inaccurate benchmark. This is where `black_box` comes in:\n\n```\nuse std::hint::black_box;\n\n// Same `contains` function\nfn contains(haystack: &[&str], needle: &str) -> bool {\n    haystack.iter().any(|x| x == &needle)\n}\n\npub fn benchmark() {\n    let haystack = vec![\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"];\n    let needle = \"ghi\";\n    for _ in 0..10 {\n        // Adjust our benchmark loop contents\n        black_box(contains(black_box(&haystack), black_box(needle)));\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hint::black_box;%0A++++%0A++++//+Same+%60contains%60+function%0A++++fn+contains(haystack:+%26%5B%26str%5D,+needle:+%26str)+-%3E+bool+%7B%0A++++++++haystack.iter().any(%7Cx%7C+x+==+%26needle)%0A++++%7D%0A++++%0A++++pub+fn+benchmark()+%7B%0A++++++++let+haystack+=+vec!%5B%22abc%22,+%22def%22,+%22ghi%22,+%22jkl%22,+%22mno%22%5D;%0A++++++++let+needle+=+%22ghi%22;%0A++++++++for+_+in+0..10+%7B%0A++++++++++++//+Adjust+our+benchmark+loop+contents%0A++++++++++++black_box(contains(black_box(%26haystack),+black_box(needle)));%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nThis essentially tells the compiler to block optimizations across any calls to `black_box`. So, it now:\n\n-   Treats both arguments to `contains` as unpredictable: the body of `contains` can no longer be optimized based on argument values\n-   Treats the call to `contains` and its result as volatile: the body of `benchmark` cannot optimize this away\n\nThis makes our benchmark much more realistic to how the function would actually be used, where arguments are usually not known at compile time and the result is used in some way.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An identity function that hints to the compiler to be maximally pessimistic about what `black_box` could do.\"><title>black_box in std::hint - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::hint</a></h2><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.assert_unchecked.html\">assert_unchecked</a></li><li><a href=\"fn.black_box.html\">black_box</a></li><li><a href=\"fn.must_use.html\">must_use</a></li><li><a href=\"fn.spin_loop.html\">spin_loop</a></li><li><a href=\"fn.unreachable_unchecked.html\">unreachable_unchecked</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">hint</a>::<wbr><a class=\"fn\" href=\"#\">black_box</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const unstable\">1.66.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hint.rs.html#337\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn black_box&lt;T&gt;(dummy: T) -&gt; T</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An identity function that <em><strong>hints</strong></em> to the compiler to be maximally pessimistic about what\n<code>black_box</code> could do.</p>\n<p>Unlike <a href=\"../convert/fn.identity.html\" title=\"fn std::convert::identity\"><code>std::convert::identity</code></a>, a Rust compiler is encouraged to assume that <code>black_box</code> can\nuse <code>dummy</code> in any possible valid way that Rust code is allowed to without introducing undefined\nbehavior in the calling code. This property makes <code>black_box</code> useful for writing code in which\ncertain optimizations are not desired, such as benchmarks.</p>\n<p>Note however, that <code>black_box</code> is only (and can only be) provided on a “best-effort” basis. The\nextent to which it can block optimisations may vary depending upon the platform and code-gen\nbackend used. Programs cannot rely on <code>black_box</code> for <em>correctness</em>, beyond it behaving as the\nidentity function. As such, it <strong>must not be relied upon to control critical program behavior.</strong>\nThis <em>immediately</em> precludes any direct use of this function for cryptographic or security\npurposes.</p>\n<h2 id=\"when-is-this-useful\"><a class=\"doc-anchor\" href=\"#when-is-this-useful\">§</a>When is this useful?</h2>\n<p>While not suitable in those mission-critical cases, <code>black_box</code>’s functionality can generally be\nrelied upon for benchmarking, and should be used there. It will try to ensure that the\ncompiler doesn’t optimize away part of the intended test code based on context. For\nexample:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>contains(haystack: <span class=\"kw-2\">&amp;</span>[<span class=\"kw-2\">&amp;</span>str], needle: <span class=\"kw-2\">&amp;</span>str) -&gt; bool {\n    haystack.iter().any(|x| x == <span class=\"kw-2\">&amp;</span>needle)\n}\n\n<span class=\"kw\">pub fn </span>benchmark() {\n    <span class=\"kw\">let </span>haystack = <span class=\"macro\">vec!</span>[<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"jkl\"</span>, <span class=\"string\">\"mno\"</span>];\n    <span class=\"kw\">let </span>needle = <span class=\"string\">\"ghi\"</span>;\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n        contains(<span class=\"kw-2\">&amp;</span>haystack, needle);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+contains(haystack:+%26%5B%26str%5D,+needle:+%26str)+-%3E+bool+%7B%0A++++++++haystack.iter().any(%7Cx%7C+x+==+%26needle)%0A++++%7D%0A++++%0A++++pub+fn+benchmark()+%7B%0A++++++++let+haystack+=+vec!%5B%22abc%22,+%22def%22,+%22ghi%22,+%22jkl%22,+%22mno%22%5D;%0A++++++++let+needle+=+%22ghi%22;%0A++++++++for+_+in+0..10+%7B%0A++++++++++++contains(%26haystack,+needle);%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The compiler could theoretically make optimizations like the following:</p>\n<ul>\n<li>The <code>needle</code> and <code>haystack</code> do not change, move the call to <code>contains</code> outside the loop and\ndelete the loop</li>\n<li>Inline <code>contains</code></li>\n<li><code>needle</code> and <code>haystack</code> have values known at compile time, <code>contains</code> is always true. Remove\nthe call and replace with <code>true</code></li>\n<li>Nothing is done with the result of <code>contains</code>: delete this function call entirely</li>\n<li><code>benchmark</code> now has no purpose: delete this function</li>\n</ul>\n<p>It is not likely that all of the above happens, but the compiler is definitely able to make some\noptimizations that could result in a very inaccurate benchmark. This is where <code>black_box</code> comes\nin:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hint::black_box;\n\n<span class=\"comment\">// Same `contains` function\n</span><span class=\"kw\">fn </span>contains(haystack: <span class=\"kw-2\">&amp;</span>[<span class=\"kw-2\">&amp;</span>str], needle: <span class=\"kw-2\">&amp;</span>str) -&gt; bool {\n    haystack.iter().any(|x| x == <span class=\"kw-2\">&amp;</span>needle)\n}\n\n<span class=\"kw\">pub fn </span>benchmark() {\n    <span class=\"kw\">let </span>haystack = <span class=\"macro\">vec!</span>[<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"jkl\"</span>, <span class=\"string\">\"mno\"</span>];\n    <span class=\"kw\">let </span>needle = <span class=\"string\">\"ghi\"</span>;\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n        <span class=\"comment\">// Adjust our benchmark loop contents\n        </span>black_box(contains(black_box(<span class=\"kw-2\">&amp;</span>haystack), black_box(needle)));\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hint::black_box;%0A++++%0A++++//+Same+%60contains%60+function%0A++++fn+contains(haystack:+%26%5B%26str%5D,+needle:+%26str)+-%3E+bool+%7B%0A++++++++haystack.iter().any(%7Cx%7C+x+==+%26needle)%0A++++%7D%0A++++%0A++++pub+fn+benchmark()+%7B%0A++++++++let+haystack+=+vec!%5B%22abc%22,+%22def%22,+%22ghi%22,+%22jkl%22,+%22mno%22%5D;%0A++++++++let+needle+=+%22ghi%22;%0A++++++++for+_+in+0..10+%7B%0A++++++++++++//+Adjust+our+benchmark+loop+contents%0A++++++++++++black_box(contains(black_box(%26haystack),+black_box(needle)));%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This essentially tells the compiler to block optimizations across any calls to <code>black_box</code>. So,\nit now:</p>\n<ul>\n<li>Treats both arguments to <code>contains</code> as unpredictable: the body of <code>contains</code> can no longer be\noptimized based on argument values</li>\n<li>Treats the call to <code>contains</code> and its result as volatile: the body of <code>benchmark</code> cannot\noptimize this away</li>\n</ul>\n<p>This makes our benchmark much more realistic to how the function would actually be used, where\narguments are usually not known at compile time and the result is used in some way.</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:17.605Z"
}