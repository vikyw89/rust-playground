{
	"title": "Stdio in std::process - Rust",
	"url": "https://doc.rust-lang.org/stable/std/process/struct.Stdio.html",
	"markdown": "# Stdio in std::process - Rust\n\n## Struct [std](../index.html)::[process](index.html)::[Stdio](#)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#1311) ·\n\n```\npub struct Stdio(/* private fields */);\n```\n\nExpand description\n\nDescribes what to do with a standard I/O stream for a child process when passed to the [`stdin`](about:blank/struct.Command.html#method.stdin \"method std::process::Command::stdin\"), [`stdout`](about:blank/struct.Command.html#method.stdout \"method std::process::Command::stdout\"), and [`stderr`](about:blank/struct.Command.html#method.stderr \"method std::process::Command::stderr\") methods of [`Command`](struct.Command.html \"struct std::process::Command\").\n\n[source](about:blank/src/std/process.rs.html#1313-1461)[§](#impl-Stdio)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#1362-1364)\n\nA new pipe should be arranged to connect the parent and child processes.\n\n##### [§](#examples)Examples\n\nWith stdout:\n\n```\nuse std::process::{Command, Stdio};\n\nlet output = Command::new(\"echo\")\n    .arg(\"Hello, world!\")\n    .stdout(Stdio::piped())\n    .output()\n    .expect(\"Failed to execute command\");\n\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"Hello, world!\\n\");\n// Nothing echoed to console\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+output+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(Stdio::piped())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22Hello,+world!%5Cn%22);%0A++++//+Nothing+echoed+to+console%0A%7D&edition=2021)\n\nWith stdin:\n\n```\nuse std::io::Write;\nuse std::process::{Command, Stdio};\n\nlet mut child = Command::new(\"rev\")\n    .stdin(Stdio::piped())\n    .stdout(Stdio::piped())\n    .spawn()\n    .expect(\"Failed to spawn child process\");\n\nlet mut stdin = child.stdin.take().expect(\"Failed to open stdin\");\nstd::thread::spawn(move || {\n    stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n});\n\nlet output = child.wait_with_output().expect(\"Failed to read stdout\");\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::Write;%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+mut+child+=+Command::new(%22rev%22)%0A++++++++.stdin(Stdio::piped())%0A++++++++.stdout(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22Failed+to+spawn+child+process%22);%0A++++%0A++++let+mut+stdin+=+child.stdin.take().expect(%22Failed+to+open+stdin%22);%0A++++std::thread::spawn(move+%7C%7C+%7B%0A++++++++stdin.write_all(%22Hello,+world!%22.as_bytes()).expect(%22Failed+to+write+to+stdin%22);%0A++++%7D);%0A++++%0A++++let+output+=+child.wait_with_output().expect(%22Failed+to+read+stdout%22);%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22!dlrow+,olleH%22);%0A%7D&edition=2021)\n\nWriting more than a pipe buffer’s worth of input to stdin without also reading stdout and stderr at the same time may cause a deadlock. This is an issue when running any program that doesn’t guarantee that it reads its entire stdin before writing more than a pipe buffer’s worth of output. The size of a pipe buffer varies on different targets.\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#1402-1404)\n\nThe child inherits from the corresponding parent descriptor.\n\n##### [§](#examples-1)Examples\n\nWith stdout:\n\n```\nuse std::process::{Command, Stdio};\n\nlet output = Command::new(\"echo\")\n    .arg(\"Hello, world!\")\n    .stdout(Stdio::inherit())\n    .output()\n    .expect(\"Failed to execute command\");\n\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n// \"Hello, world!\" echoed to console\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+output+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(Stdio::inherit())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22%22);%0A++++//+%22Hello,+world!%22+echoed+to+console%0A%7D&edition=2021)\n\nWith stdin:\n\n```\nuse std::process::{Command, Stdio};\nuse std::io::{self, Write};\n\nlet output = Command::new(\"rev\")\n    .stdin(Stdio::inherit())\n    .stdout(Stdio::piped())\n    .output()\n    .expect(\"Failed to execute command\");\n\nprint!(\"You piped in the reverse of: \");\nio::stdout().write_all(&output.stdout).unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++use+std::io::%7Bself,+Write%7D;%0A++++%0A++++let+output+=+Command::new(%22rev%22)%0A++++++++.stdin(Stdio::inherit())%0A++++++++.stdout(Stdio::piped())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++print!(%22You+piped+in+the+reverse+of:+%22);%0A++++io::stdout().write_all(%26output.stdout).unwrap();%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#1442-1444)\n\nThis stream will be ignored. This is the equivalent of attaching the stream to `/dev/null`.\n\n##### [§](#examples-2)Examples\n\nWith stdout:\n\n```\nuse std::process::{Command, Stdio};\n\nlet output = Command::new(\"echo\")\n    .arg(\"Hello, world!\")\n    .stdout(Stdio::null())\n    .output()\n    .expect(\"Failed to execute command\");\n\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n// Nothing echoed to console\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+output+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(Stdio::null())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22%22);%0A++++//+Nothing+echoed+to+console%0A%7D&edition=2021)\n\nWith stdin:\n\n```\nuse std::process::{Command, Stdio};\n\nlet output = Command::new(\"rev\")\n    .stdin(Stdio::null())\n    .stdout(Stdio::piped())\n    .output()\n    .expect(\"Failed to execute command\");\n\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n// Ignores any piped-in input\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+output+=+Command::new(%22rev%22)%0A++++++++.stdin(Stdio::null())%0A++++++++.stdout(Stdio::piped())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22%22);%0A++++//+Ignores+any+piped-in+input%0A%7D&edition=2021)\n\n[source](about:blank/src/std/process.rs.html#1458-1460)\n\n🔬This is a nightly-only experimental API. (`stdio_makes_pipe` [#98288](https://github.com/rust-lang/rust/issues/98288))\n\nReturns `true` if this requires [`Command`](struct.Command.html \"struct std::process::Command\") to create a new pipe.\n\n##### [§](#example)Example\n\n```\n#![feature(stdio_makes_pipe)]\nuse std::process::Stdio;\n\nlet io = Stdio::piped();\nassert_eq!(io.makes_pipe(), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(stdio_makes_pipe)%5D%0Afn+main()+%7B%0A++++use+std::process::Stdio;%0A++++%0A++++let+io+=+Stdio::piped();%0A++++assert_eq!(io.makes_pipe(),+true);%0A%7D&version=nightly&edition=2021)\n\n1.16.0 · [source](about:blank/src/std/process.rs.html#1470-1474)[§](#impl-Debug-for-Stdio)\n\n1.20.0 · [source](about:blank/src/std/process.rs.html#1535-1563)[§](#impl-From%3CChildStderr%3E-for-Stdio)\n\n[source](about:blank/src/std/process.rs.html#1560-1562)[§](#method.from-6)\n\nConverts a [`ChildStderr`](struct.ChildStderr.html \"struct std::process::ChildStderr\") into a [`Stdio`](struct.Stdio.html \"struct std::process::Stdio\").\n\n##### [§](#examples-7)Examples\n\n```\nuse std::process::{Command, Stdio};\n\nlet reverse = Command::new(\"rev\")\n    .arg(\"non_existing_file.txt\")\n    .stderr(Stdio::piped())\n    .spawn()\n    .expect(\"failed reverse command\");\n\nlet cat = Command::new(\"cat\")\n    .arg(\"-\")\n    .stdin(reverse.stderr.unwrap()) // Converted into a Stdio here\n    .output()\n    .expect(\"failed echo command\");\n\nassert_eq!(\n    String::from_utf8_lossy(&cat.stdout),\n    \"rev: cannot open non_existing_file.txt: No such file or directory\\n\"\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.arg(%22non_existing_file.txt%22)%0A++++++++.stderr(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++let+cat+=+Command::new(%22cat%22)%0A++++++++.arg(%22-%22)%0A++++++++.stdin(reverse.stderr.unwrap())+//+Converted+into+a+Stdio+here%0A++++++++.output()%0A++++++++.expect(%22failed+echo+command%22);%0A++++%0A++++assert_eq!(%0A++++++++String::from_utf8_lossy(%26cat.stdout),%0A++++++++%22rev:+cannot+open+non_existing_file.txt:+No+such+file+or+directory%5Cn%22%0A++++);%0A%7D&edition=2021)\n\n1.20.0 · [source](about:blank/src/std/process.rs.html#1477-1503)[§](#impl-From%3CChildStdin%3E-for-Stdio)\n\n[source](about:blank/src/std/process.rs.html#1500-1502)[§](#method.from-3)\n\nConverts a [`ChildStdin`](struct.ChildStdin.html \"struct std::process::ChildStdin\") into a [`Stdio`](struct.Stdio.html \"struct std::process::Stdio\").\n\n##### [§](#examples-5)Examples\n\n`ChildStdin` will be converted to `Stdio` using `Stdio::from` under the hood.\n\n```\nuse std::process::{Command, Stdio};\n\nlet reverse = Command::new(\"rev\")\n    .stdin(Stdio::piped())\n    .spawn()\n    .expect(\"failed reverse command\");\n\nlet _echo = Command::new(\"echo\")\n    .arg(\"Hello, world!\")\n    .stdout(reverse.stdin.unwrap()) // Converted into a Stdio here\n    .output()\n    .expect(\"failed echo command\");\n\n// \"!dlrow ,olleH\" echoed to console\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.stdin(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++let+_echo+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(reverse.stdin.unwrap())+//+Converted+into+a+Stdio+here%0A++++++++.output()%0A++++++++.expect(%22failed+echo+command%22);%0A++++%0A++++//+%22!dlrow+,olleH%22+echoed+to+console%0A%7D&edition=2021)\n\n1.20.0 · [source](about:blank/src/std/process.rs.html#1506-1532)[§](#impl-From%3CChildStdout%3E-for-Stdio)\n\n[source](about:blank/src/std/process.rs.html#1529-1531)[§](#method.from-1)\n\nConverts a [`ChildStdout`](struct.ChildStdout.html \"struct std::process::ChildStdout\") into a [`Stdio`](struct.Stdio.html \"struct std::process::Stdio\").\n\n##### [§](#examples-4)Examples\n\n`ChildStdout` will be converted to `Stdio` using `Stdio::from` under the hood.\n\n```\nuse std::process::{Command, Stdio};\n\nlet hello = Command::new(\"echo\")\n    .arg(\"Hello, world!\")\n    .stdout(Stdio::piped())\n    .spawn()\n    .expect(\"failed echo command\");\n\nlet reverse = Command::new(\"rev\")\n    .stdin(hello.stdout.unwrap())  // Converted into a Stdio here\n    .output()\n    .expect(\"failed reverse command\");\n\nassert_eq!(reverse.stdout, b\"!dlrow ,olleH\\n\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+hello+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22failed+echo+command%22);%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.stdin(hello.stdout.unwrap())++//+Converted+into+a+Stdio+here%0A++++++++.output()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++assert_eq!(reverse.stdout,+b%22!dlrow+,olleH%5Cn%22);%0A%7D&edition=2021)\n\n1.20.0 · [source](about:blank/src/std/process.rs.html#1566-1590)[§](#impl-From%3CFile%3E-for-Stdio)\n\n[source](about:blank/src/std/process.rs.html#1587-1589)[§](#method.from-7)\n\nConverts a [`File`](../fs/struct.File.html \"struct std::fs::File\") into a [`Stdio`](struct.Stdio.html \"struct std::process::Stdio\").\n\n##### [§](#examples-8)Examples\n\n`File` will be converted to `Stdio` using `Stdio::from` under the hood.\n\n```\nuse std::fs::File;\nuse std::process::Command;\n\n// With the `foo.txt` file containing \"Hello, world!\"\nlet file = File::open(\"foo.txt\").unwrap();\n\nlet reverse = Command::new(\"rev\")\n    .stdin(file)  // Implicit File conversion into a Stdio\n    .output()\n    .expect(\"failed reverse command\");\n\nassert_eq!(reverse.stdout, b\"!dlrow ,olleH\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::File;%0A++++use+std::process::Command;%0A++++%0A++++//+With+the+%60foo.txt%60+file+containing+%22Hello,+world!%22%0A++++let+file+=+File::open(%22foo.txt%22).unwrap();%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.stdin(file)++//+Implicit+File+conversion+into+a+Stdio%0A++++++++.output()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++assert_eq!(reverse.stdout,+b%22!dlrow+,olleH%22);%0A%7D&edition=2021)\n\n1.63.0 · [source](about:blank/src/std/os/unix/process.rs.html#371-380)[§](#impl-From%3COwnedFd%3E-for-Stdio)\n\nAvailable on **Unix** only.\n\n[source](about:blank/src/std/os/unix/process.rs.html#375-379)[§](#method.from-4)\n\nTakes ownership of a file descriptor and returns a [`Stdio`](struct.Stdio.html \"struct std::process::Stdio\") that can attach a stream to it.\n\n1.63.0 · [source](about:blank/src/std/os/windows/process.rs.html#26-34)[§](#impl-From%3COwnedHandle%3E-for-Stdio)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/process.rs.html#29-33)[§](#method.from-2)\n\nTakes ownership of a handle and returns a [`Stdio`](struct.Stdio.html \"struct std::process::Stdio\") that can attach a stream to it.\n\n1.74.0 · [source](about:blank/src/std/process.rs.html#1624-1650)[§](#impl-From%3CStderr%3E-for-Stdio)\n\n[source](about:blank/src/std/process.rs.html#1647-1649)[§](#method.from)\n\nRedirect command stdout/stderr to our stderr\n\n##### [§](#examples-3)Examples\n\n```\n#![feature(exit_status_error)]\nuse std::io;\nuse std::process::Command;\n\nlet output = Command::new(\"whoami\")\n    .stdout(io::stderr())\n    .output()?;\noutput.status.exit_ok()?;\nassert!(output.stdout.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::process::Command;%0A++++%0A++++fn+test()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0A++++let+output+=+Command::new(%22whoami%22)%0A++++++++.stdout(io::stderr())%0A++++++++.output()?;%0A++++output.status.exit_ok()?;%0A++++assert!(output.stdout.is_empty());%0A++++Ok(())%0A++++%7D%0A++++%0A++++if+cfg!(unix)+%7B%0A++++++++test().unwrap();%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.74.0 · [source](about:blank/src/std/process.rs.html#1593-1621)[§](#impl-From%3CStdout%3E-for-Stdio)\n\n[source](about:blank/src/std/process.rs.html#1618-1620)[§](#method.from-5)\n\nRedirect command stdout/stderr to our stdout\n\n##### [§](#examples-6)Examples\n\n```\n#![feature(exit_status_error)]\nuse std::io;\nuse std::process::Command;\n\nlet output = Command::new(\"whoami\")\n    .stdout(io::stdout())\n    .output()?;\noutput.status.exit_ok()?;\nassert!(output.stdout.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::process::Command;%0A++++%0A++++fn+test()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0A++++let+output+=+Command::new(%22whoami%22)%0A++++++++.stdout(io::stdout())%0A++++++++.output()?;%0A++++output.status.exit_ok()?;%0A++++assert!(output.stdout.is_empty());%0A++++Ok(())%0A++++%7D%0A++++%0A++++if+cfg!(unix)+%7B%0A++++++++test().unwrap();%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.2.0 · [source](about:blank/src/std/os/unix/process.rs.html#361-368)[§](#impl-FromRawFd-for-Stdio)\n\nAvailable on **Unix** only.\n\n[source](about:blank/src/std/os/unix/process.rs.html#363-367)[§](#method.from_raw_fd)\n\nConstructs a new instance of `Self` from the given raw file descriptor. [Read more](about:blank/os/fd/trait.FromRawFd.html#tymethod.from_raw_fd)\n\n1.2.0 · [source](about:blank/src/std/os/windows/process.rs.html#17-23)[§](#impl-FromRawHandle-for-Stdio)\n\nAvailable on **Windows** only.\n\n[§](#impl-Freeze-for-Stdio)\n\n[§](#impl-RefUnwindSafe-for-Stdio)\n\n[§](#impl-Send-for-Stdio)\n\n[§](#impl-Sync-for-Stdio)\n\n[§](#impl-Unpin-for-Stdio)\n\n[§](#impl-UnwindSafe-for-Stdio)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-8)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Describes what to do with a standard I/O stream for a child process when passed to the `stdin`, `stdout`, and `stderr` methods of `Command`.\"><title>Stdio in std::process - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Stdio</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Stdio</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.inherit\">inherit</a></li><li><a href=\"#method.makes_pipe\">makes_pipe</a></li><li><a href=\"#method.null\">null</a></li><li><a href=\"#method.piped\">piped</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-Stdio\">Debug</a></li><li><a href=\"#impl-From%3CChildStderr%3E-for-Stdio\">From&lt;ChildStderr&gt;</a></li><li><a href=\"#impl-From%3CChildStdin%3E-for-Stdio\">From&lt;ChildStdin&gt;</a></li><li><a href=\"#impl-From%3CChildStdout%3E-for-Stdio\">From&lt;ChildStdout&gt;</a></li><li><a href=\"#impl-From%3CFile%3E-for-Stdio\">From&lt;File&gt;</a></li><li><a href=\"#impl-From%3COwnedFd%3E-for-Stdio\">From&lt;OwnedFd&gt;</a></li><li><a href=\"#impl-From%3COwnedHandle%3E-for-Stdio\">From&lt;OwnedHandle&gt;</a></li><li><a href=\"#impl-From%3CStderr%3E-for-Stdio\">From&lt;Stderr&gt;</a></li><li><a href=\"#impl-From%3CStdout%3E-for-Stdio\">From&lt;Stdout&gt;</a></li><li><a href=\"#impl-FromRawFd-for-Stdio\">FromRawFd</a></li><li><a href=\"#impl-FromRawHandle-for-Stdio\">FromRawHandle</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Stdio\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Stdio\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Stdio\">Send</a></li><li><a href=\"#impl-Sync-for-Stdio\">Sync</a></li><li><a href=\"#impl-Unpin-for-Stdio\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Stdio\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::process</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Child.html\">Child</a></li><li><a href=\"struct.ChildStderr.html\">ChildStderr</a></li><li><a href=\"struct.ChildStdin.html\">ChildStdin</a></li><li><a href=\"struct.ChildStdout.html\">ChildStdout</a></li><li><a href=\"struct.Command.html\">Command</a></li><li><a href=\"struct.CommandArgs.html\">CommandArgs</a></li><li><a href=\"struct.CommandEnvs.html\">CommandEnvs</a></li><li><a href=\"struct.ExitCode.html\">ExitCode</a></li><li><a href=\"struct.ExitStatus.html\">ExitStatus</a></li><li><a href=\"struct.ExitStatusError.html\">ExitStatusError</a></li><li><a href=\"struct.Output.html\">Output</a></li><li><a href=\"struct.Stdio.html\">Stdio</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Termination.html\">Termination</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.abort.html\">abort</a></li><li><a href=\"fn.exit.html\">exit</a></li><li><a href=\"fn.id.html\">id</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">process</a>::<wbr><a class=\"struct\" href=\"#\">Stdio</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1311\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Stdio(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Describes what to do with a standard I/O stream for a child process when\npassed to the <a href=\"struct.Command.html#method.stdin\" title=\"method std::process::Command::stdin\"><code>stdin</code></a>, <a href=\"struct.Command.html#method.stdout\" title=\"method std::process::Command::stdout\"><code>stdout</code></a>, and <a href=\"struct.Command.html#method.stderr\" title=\"method std::process::Command::stderr\"><code>stderr</code></a> methods of <a href=\"struct.Command.html\" title=\"struct std::process::Command\"><code>Command</code></a>.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Stdio\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1313-1461\">source</a><a href=\"#impl-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.piped\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1362-1364\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.piped\" class=\"fn\">piped</a>() -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>A new pipe should be arranged to connect the parent and child processes.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>With stdout:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"echo\"</span>)\n    .arg(<span class=\"string\">\"Hello, world!\"</span>)\n    .stdout(Stdio::piped())\n    .output()\n    .expect(<span class=\"string\">\"Failed to execute command\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(String::from_utf8_lossy(<span class=\"kw-2\">&amp;</span>output.stdout), <span class=\"string\">\"Hello, world!\\n\"</span>);\n<span class=\"comment\">// Nothing echoed to console</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+output+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(Stdio::piped())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22Hello,+world!%5Cn%22);%0A++++//+Nothing+echoed+to+console%0A%7D&amp;edition=2021\">Run</a></div>\n<p>With stdin:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::Write;\n<span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>child = Command::new(<span class=\"string\">\"rev\"</span>)\n    .stdin(Stdio::piped())\n    .stdout(Stdio::piped())\n    .spawn()\n    .expect(<span class=\"string\">\"Failed to spawn child process\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stdin = child.stdin.take().expect(<span class=\"string\">\"Failed to open stdin\"</span>);\nstd::thread::spawn(<span class=\"kw\">move </span>|| {\n    stdin.write_all(<span class=\"string\">\"Hello, world!\"</span>.as_bytes()).expect(<span class=\"string\">\"Failed to write to stdin\"</span>);\n});\n\n<span class=\"kw\">let </span>output = child.wait_with_output().expect(<span class=\"string\">\"Failed to read stdout\"</span>);\n<span class=\"macro\">assert_eq!</span>(String::from_utf8_lossy(<span class=\"kw-2\">&amp;</span>output.stdout), <span class=\"string\">\"!dlrow ,olleH\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::Write;%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+mut+child+=+Command::new(%22rev%22)%0A++++++++.stdin(Stdio::piped())%0A++++++++.stdout(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22Failed+to+spawn+child+process%22);%0A++++%0A++++let+mut+stdin+=+child.stdin.take().expect(%22Failed+to+open+stdin%22);%0A++++std::thread::spawn(move+%7C%7C+%7B%0A++++++++stdin.write_all(%22Hello,+world!%22.as_bytes()).expect(%22Failed+to+write+to+stdin%22);%0A++++%7D);%0A++++%0A++++let+output+=+child.wait_with_output().expect(%22Failed+to+read+stdout%22);%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22!dlrow+,olleH%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Writing more than a pipe buffer’s worth of input to stdin without also reading\nstdout and stderr at the same time may cause a deadlock.\nThis is an issue when running any program that doesn’t guarantee that it reads\nits entire stdin before writing more than a pipe buffer’s worth of output.\nThe size of a pipe buffer varies on different targets.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.inherit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1402-1404\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.inherit\" class=\"fn\">inherit</a>() -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>The child inherits from the corresponding parent descriptor.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>With stdout:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"echo\"</span>)\n    .arg(<span class=\"string\">\"Hello, world!\"</span>)\n    .stdout(Stdio::inherit())\n    .output()\n    .expect(<span class=\"string\">\"Failed to execute command\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(String::from_utf8_lossy(<span class=\"kw-2\">&amp;</span>output.stdout), <span class=\"string\">\"\"</span>);\n<span class=\"comment\">// \"Hello, world!\" echoed to console</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+output+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(Stdio::inherit())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22%22);%0A++++//+%22Hello,+world!%22+echoed+to+console%0A%7D&amp;edition=2021\">Run</a></div>\n<p>With stdin:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n<span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"rev\"</span>)\n    .stdin(Stdio::inherit())\n    .stdout(Stdio::piped())\n    .output()\n    .expect(<span class=\"string\">\"Failed to execute command\"</span>);\n\n<span class=\"macro\">print!</span>(<span class=\"string\">\"You piped in the reverse of: \"</span>);\nio::stdout().write_all(<span class=\"kw-2\">&amp;</span>output.stdout).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++use+std::io::%7Bself,+Write%7D;%0A++++%0A++++let+output+=+Command::new(%22rev%22)%0A++++++++.stdin(Stdio::inherit())%0A++++++++.stdout(Stdio::piped())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++print!(%22You+piped+in+the+reverse+of:+%22);%0A++++io::stdout().write_all(%26output.stdout).unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.null\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1442-1444\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.null\" class=\"fn\">null</a>() -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>This stream will be ignored. This is the equivalent of attaching the\nstream to <code>/dev/null</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>With stdout:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"echo\"</span>)\n    .arg(<span class=\"string\">\"Hello, world!\"</span>)\n    .stdout(Stdio::null())\n    .output()\n    .expect(<span class=\"string\">\"Failed to execute command\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(String::from_utf8_lossy(<span class=\"kw-2\">&amp;</span>output.stdout), <span class=\"string\">\"\"</span>);\n<span class=\"comment\">// Nothing echoed to console</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+output+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(Stdio::null())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22%22);%0A++++//+Nothing+echoed+to+console%0A%7D&amp;edition=2021\">Run</a></div>\n<p>With stdin:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"rev\"</span>)\n    .stdin(Stdio::null())\n    .stdout(Stdio::piped())\n    .output()\n    .expect(<span class=\"string\">\"Failed to execute command\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(String::from_utf8_lossy(<span class=\"kw-2\">&amp;</span>output.stdout), <span class=\"string\">\"\"</span>);\n<span class=\"comment\">// Ignores any piped-in input</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+output+=+Command::new(%22rev%22)%0A++++++++.stdin(Stdio::null())%0A++++++++.stdout(Stdio::piped())%0A++++++++.output()%0A++++++++.expect(%22Failed+to+execute+command%22);%0A++++%0A++++assert_eq!(String::from_utf8_lossy(%26output.stdout),+%22%22);%0A++++//+Ignores+any+piped-in+input%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.makes_pipe\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1458-1460\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.makes_pipe\" class=\"fn\">makes_pipe</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>stdio_makes_pipe</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98288\">#98288</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>true</code> if this requires <a href=\"struct.Command.html\" title=\"struct std::process::Command\"><code>Command</code></a> to create a new pipe.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(stdio_makes_pipe)]\n</span><span class=\"kw\">use </span>std::process::Stdio;\n\n<span class=\"kw\">let </span>io = Stdio::piped();\n<span class=\"macro\">assert_eq!</span>(io.makes_pipe(), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(stdio_makes_pipe)%5D%0Afn+main()+%7B%0A++++use+std::process::Stdio;%0A++++%0A++++let+io+=+Stdio::piped();%0A++++assert_eq!(io.makes_pipe(),+true);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1470-1474\">source</a></span><a href=\"#impl-Debug-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1471-1473\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChildStderr%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1535-1563\">source</a></span><a href=\"#impl-From%3CChildStderr%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.ChildStderr.html\" title=\"struct std::process::ChildStderr\">ChildStderr</a>&gt; for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1560-1562\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(child: <a class=\"struct\" href=\"struct.ChildStderr.html\" title=\"struct std::process::ChildStderr\">ChildStderr</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.ChildStderr.html\" title=\"struct std::process::ChildStderr\"><code>ChildStderr</code></a> into a <a href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\"><code>Stdio</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n<span class=\"kw\">let </span>reverse = Command::new(<span class=\"string\">\"rev\"</span>)\n    .arg(<span class=\"string\">\"non_existing_file.txt\"</span>)\n    .stderr(Stdio::piped())\n    .spawn()\n    .expect(<span class=\"string\">\"failed reverse command\"</span>);\n\n<span class=\"kw\">let </span>cat = Command::new(<span class=\"string\">\"cat\"</span>)\n    .arg(<span class=\"string\">\"-\"</span>)\n    .stdin(reverse.stderr.unwrap()) <span class=\"comment\">// Converted into a Stdio here\n    </span>.output()\n    .expect(<span class=\"string\">\"failed echo command\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    String::from_utf8_lossy(<span class=\"kw-2\">&amp;</span>cat.stdout),\n    <span class=\"string\">\"rev: cannot open non_existing_file.txt: No such file or directory\\n\"\n</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.arg(%22non_existing_file.txt%22)%0A++++++++.stderr(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++let+cat+=+Command::new(%22cat%22)%0A++++++++.arg(%22-%22)%0A++++++++.stdin(reverse.stderr.unwrap())+//+Converted+into+a+Stdio+here%0A++++++++.output()%0A++++++++.expect(%22failed+echo+command%22);%0A++++%0A++++assert_eq!(%0A++++++++String::from_utf8_lossy(%26cat.stdout),%0A++++++++%22rev:+cannot+open+non_existing_file.txt:+No+such+file+or+directory%5Cn%22%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChildStdin%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1477-1503\">source</a></span><a href=\"#impl-From%3CChildStdin%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.ChildStdin.html\" title=\"struct std::process::ChildStdin\">ChildStdin</a>&gt; for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1500-1502\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(child: <a class=\"struct\" href=\"struct.ChildStdin.html\" title=\"struct std::process::ChildStdin\">ChildStdin</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.ChildStdin.html\" title=\"struct std::process::ChildStdin\"><code>ChildStdin</code></a> into a <a href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\"><code>Stdio</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p><code>ChildStdin</code> will be converted to <code>Stdio</code> using <code>Stdio::from</code> under the hood.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n<span class=\"kw\">let </span>reverse = Command::new(<span class=\"string\">\"rev\"</span>)\n    .stdin(Stdio::piped())\n    .spawn()\n    .expect(<span class=\"string\">\"failed reverse command\"</span>);\n\n<span class=\"kw\">let </span>_echo = Command::new(<span class=\"string\">\"echo\"</span>)\n    .arg(<span class=\"string\">\"Hello, world!\"</span>)\n    .stdout(reverse.stdin.unwrap()) <span class=\"comment\">// Converted into a Stdio here\n    </span>.output()\n    .expect(<span class=\"string\">\"failed echo command\"</span>);\n\n<span class=\"comment\">// \"!dlrow ,olleH\" echoed to console</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.stdin(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++let+_echo+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(reverse.stdin.unwrap())+//+Converted+into+a+Stdio+here%0A++++++++.output()%0A++++++++.expect(%22failed+echo+command%22);%0A++++%0A++++//+%22!dlrow+,olleH%22+echoed+to+console%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChildStdout%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1506-1532\">source</a></span><a href=\"#impl-From%3CChildStdout%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.ChildStdout.html\" title=\"struct std::process::ChildStdout\">ChildStdout</a>&gt; for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1529-1531\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(child: <a class=\"struct\" href=\"struct.ChildStdout.html\" title=\"struct std::process::ChildStdout\">ChildStdout</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.ChildStdout.html\" title=\"struct std::process::ChildStdout\"><code>ChildStdout</code></a> into a <a href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\"><code>Stdio</code></a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p><code>ChildStdout</code> will be converted to <code>Stdio</code> using <code>Stdio::from</code> under the hood.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n<span class=\"kw\">let </span>hello = Command::new(<span class=\"string\">\"echo\"</span>)\n    .arg(<span class=\"string\">\"Hello, world!\"</span>)\n    .stdout(Stdio::piped())\n    .spawn()\n    .expect(<span class=\"string\">\"failed echo command\"</span>);\n\n<span class=\"kw\">let </span>reverse = Command::new(<span class=\"string\">\"rev\"</span>)\n    .stdin(hello.stdout.unwrap())  <span class=\"comment\">// Converted into a Stdio here\n    </span>.output()\n    .expect(<span class=\"string\">\"failed reverse command\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(reverse.stdout, <span class=\"string\">b\"!dlrow ,olleH\\n\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+hello+=+Command::new(%22echo%22)%0A++++++++.arg(%22Hello,+world!%22)%0A++++++++.stdout(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22failed+echo+command%22);%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.stdin(hello.stdout.unwrap())++//+Converted+into+a+Stdio+here%0A++++++++.output()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++assert_eq!(reverse.stdout,+b%22!dlrow+,olleH%5Cn%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CFile%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1566-1590\">source</a></span><a href=\"#impl-From%3CFile%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a>&gt; for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1587-1589\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(file: <a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a> into a <a href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\"><code>Stdio</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p><code>File</code> will be converted to <code>Stdio</code> using <code>Stdio::from</code> under the hood.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"comment\">// With the `foo.txt` file containing \"Hello, world!\"\n</span><span class=\"kw\">let </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>).unwrap();\n\n<span class=\"kw\">let </span>reverse = Command::new(<span class=\"string\">\"rev\"</span>)\n    .stdin(file)  <span class=\"comment\">// Implicit File conversion into a Stdio\n    </span>.output()\n    .expect(<span class=\"string\">\"failed reverse command\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(reverse.stdout, <span class=\"string\">b\"!dlrow ,olleH\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::File;%0A++++use+std::process::Command;%0A++++%0A++++//+With+the+%60foo.txt%60+file+containing+%22Hello,+world!%22%0A++++let+file+=+File::open(%22foo.txt%22).unwrap();%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.stdin(file)++//+Implicit+File+conversion+into+a+Stdio%0A++++++++.output()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++assert_eq!(reverse.stdout,+b%22!dlrow+,olleH%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedFd%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/process.rs.html#371-380\">source</a></span><a href=\"#impl-From%3COwnedFd%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>&gt; for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#375-379\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(fd: <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a file descriptor and returns a <a href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\"><code>Stdio</code></a>\nthat can attach a stream to it.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedHandle%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/process.rs.html#26-34\">source</a></span><a href=\"#impl-From%3COwnedHandle%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a>&gt; for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#29-33\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(handle: <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a handle and returns a <a href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\"><code>Stdio</code></a>\nthat can attach a stream to it.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CStderr%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1624-1650\">source</a></span><a href=\"#impl-From%3CStderr%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../io/struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a>&gt; for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1647-1649\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(inherit: <a class=\"struct\" href=\"../io/struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Redirect command stdout/stderr to our stderr</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exit_status_error)]\n</span><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"whoami\"</span>)\n    .stdout(io::stderr())\n    .output()<span class=\"question-mark\">?</span>;\noutput.status.exit_ok()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(output.stdout.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::process::Command;%0A++++%0A++++fn+test()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0A++++let+output+=+Command::new(%22whoami%22)%0A++++++++.stdout(io::stderr())%0A++++++++.output()?;%0A++++output.status.exit_ok()?;%0A++++assert!(output.stdout.is_empty());%0A++++Ok(())%0A++++%7D%0A++++%0A++++if+cfg!(unix)+%7B%0A++++++++test().unwrap();%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CStdout%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1593-1621\">source</a></span><a href=\"#impl-From%3CStdout%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../io/struct.Stdout.html\" title=\"struct std::io::Stdout\">Stdout</a>&gt; for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1618-1620\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(inherit: <a class=\"struct\" href=\"../io/struct.Stdout.html\" title=\"struct std::io::Stdout\">Stdout</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Redirect command stdout/stderr to our stdout</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exit_status_error)]\n</span><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"whoami\"</span>)\n    .stdout(io::stdout())\n    .output()<span class=\"question-mark\">?</span>;\noutput.status.exit_ok()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(output.stdout.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::process::Command;%0A++++%0A++++fn+test()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0A++++let+output+=+Command::new(%22whoami%22)%0A++++++++.stdout(io::stdout())%0A++++++++.output()?;%0A++++output.status.exit_ok()?;%0A++++assert!(output.stdout.is_empty());%0A++++Ok(())%0A++++%7D%0A++++%0A++++if+cfg!(unix)+%7B%0A++++++++test().unwrap();%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawFd-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/process.rs.html#361-368\">source</a></span><a href=\"#impl-FromRawFd-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.FromRawFd.html\" title=\"trait std::os::fd::FromRawFd\">FromRawFd</a> for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#363-367\">source</a><a href=\"#method.from_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/fd/trait.FromRawFd.html#tymethod.from_raw_fd\" class=\"fn\">from_raw_fd</a>(fd: <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\">Constructs a new instance of <code>Self</code> from the given raw file\ndescriptor. <a href=\"../os/fd/trait.FromRawFd.html#tymethod.from_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawHandle-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/process.rs.html#17-23\">source</a></span><a href=\"#impl-FromRawHandle-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.FromRawHandle.html\" title=\"trait std::os::windows::io::FromRawHandle\">FromRawHandle</a> for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#18-22\">source</a><a href=\"#method.from_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/windows/io/trait.FromRawHandle.html#tymethod.from_raw_handle\" class=\"fn\">from_raw_handle</a>(handle: <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a>) -&gt; <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\">Constructs a new I/O object from the specified raw handle. <a href=\"../os/windows/io/trait.FromRawHandle.html#tymethod.from_raw_handle\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Stdio\" class=\"impl\"><a href=\"#impl-Freeze-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section><section id=\"impl-RefUnwindSafe-for-Stdio\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section><section id=\"impl-Send-for-Stdio\" class=\"impl\"><a href=\"#impl-Send-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section><section id=\"impl-Sync-for-Stdio\" class=\"impl\"><a href=\"#impl-Sync-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section><section id=\"impl-Unpin-for-Stdio\" class=\"impl\"><a href=\"#impl-Unpin-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section><section id=\"impl-UnwindSafe-for-Stdio\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:39.608Z"
}