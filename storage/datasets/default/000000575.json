{
	"title": "Hasher in std::hash - Rust",
	"url": "https://doc.rust-lang.org/stable/std/hash/trait.Hasher.html",
	"markdown": "# Hasher in std::hash - Rust\n\n## Trait [std](../index.html)::[hash](index.html)::[Hasher](#)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#316) Â·\n\n```\npub trait Hasher {\nShow 16 methods    // Required methods\n    fn finish(&self) -> u64;\n    fn write(&mut self, bytes: &[u8]);\n\n    // Provided methods\n    fn write_u8(&mut self, i: u8) { ... }\n    fn write_u16(&mut self, i: u16) { ... }\n    fn write_u32(&mut self, i: u32) { ... }\n    fn write_u64(&mut self, i: u64) { ... }\n    fn write_u128(&mut self, i: u128) { ... }\n    fn write_usize(&mut self, i: usize) { ... }\n    fn write_i8(&mut self, i: i8) { ... }\n    fn write_i16(&mut self, i: i16) { ... }\n    fn write_i32(&mut self, i: i32) { ... }\n    fn write_i64(&mut self, i: i64) { ... }\n    fn write_i128(&mut self, i: i128) { ... }\n    fn write_isize(&mut self, i: isize) { ... }\n    fn write_length_prefix(&mut self, len: usize) { ... }\n    fn write_str(&mut self, s: &str) { ... }\n}\n```\n\nExpand description\n\nA trait for hashing an arbitrary stream of bytes.\n\nInstances of `Hasher` usually represent state that is changed while hashing data.\n\n`Hasher` provides a fairly basic interface for retrieving the generated hash (with [`finish`](about:blank/trait.Hasher.html#tymethod.finish \"method std::hash::Hasher::finish\")), and writing integers as well as slices of bytes into an instance (with [`write`](about:blank/trait.Hasher.html#tymethod.write \"method std::hash::Hasher::write\") and [`write_u8`](about:blank/trait.Hasher.html#method.write_u8 \"method std::hash::Hasher::write_u8\") etc.). Most of the time, `Hasher` instances are used in conjunction with the [`Hash`](trait.Hash.html \"trait std::hash::Hash\") trait.\n\nThis trait provides no guarantees about how the various `write_*` methods are defined and implementations of [`Hash`](trait.Hash.html \"trait std::hash::Hash\") should not assume that they work one way or another. You cannot assume, for example, that a [`write_u32`](about:blank/trait.Hasher.html#method.write_u32 \"method std::hash::Hasher::write_u32\") call is equivalent to four calls of [`write_u8`](about:blank/trait.Hasher.html#method.write_u8 \"method std::hash::Hasher::write_u8\"). Nor can you assume that adjacent `write` calls are merged, so itâ€™s possible, for example, that\n\n```\nhasher.write(&[1, 2]);\nhasher.write(&[3, 4, 5, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+foo(hasher:+%26mut+impl+std::hash::Hasher)+%7B%0A++++hasher.write(%26%5B1,+2%5D);%0A++++hasher.write(%26%5B3,+4,+5,+6%5D);%0A++++%7D%0A%7D&edition=2021)\n\nand\n\n```\nhasher.write(&[1, 2, 3, 4]);\nhasher.write(&[5, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+foo(hasher:+%26mut+impl+std::hash::Hasher)+%7B%0A++++hasher.write(%26%5B1,+2,+3,+4%5D);%0A++++hasher.write(%26%5B5,+6%5D);%0A++++%7D%0A%7D&edition=2021)\n\nend up producing different hashes.\n\nThus to produce the same hash value, [`Hash`](trait.Hash.html \"trait std::hash::Hash\") implementations must ensure for equivalent items that exactly the same sequence of calls is made â€“ the same methods with the same parameters in the same order.\n\n## [Â§](#examples)Examples\n\n```\nuse std::hash::{DefaultHasher, Hasher};\n\nlet mut hasher = DefaultHasher::new();\n\nhasher.write_u32(1989);\nhasher.write_u8(11);\nhasher.write_u8(9);\nhasher.write(b\"Huh?\");\n\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++%0A++++hasher.write_u32(1989);%0A++++hasher.write_u8(11);%0A++++hasher.write_u8(9);%0A++++hasher.write(b%22Huh?%22);%0A++++%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#337)\n\nReturns the hash value for the values written so far.\n\nDespite its name, the method does not reset the hasherâ€™s internal state. Additional [`write`](about:blank/trait.Hasher.html#tymethod.write \"method std::hash::Hasher::write\")s will continue from the current value. If you need to start a fresh hash value, you will have to create a new hasher.\n\n##### [Â§](#examples-1)Examples\n\n```\nuse std::hash::{DefaultHasher, Hasher};\n\nlet mut hasher = DefaultHasher::new();\nhasher.write(b\"Cool!\");\n\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++hasher.write(b%22Cool!%22);%0A++++%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#360)\n\nWrites some data into this `Hasher`.\n\n##### [Â§](#examples-2)Examples\n\n```\nuse std::hash::{DefaultHasher, Hasher};\n\nlet mut hasher = DefaultHasher::new();\nlet data = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef];\n\nhasher.write(&data);\n\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++let+data+=+%5B0x01,+0x23,+0x45,+0x67,+0x89,+0xab,+0xcd,+0xef%5D;%0A++++%0A++++hasher.write(%26data);%0A++++%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&edition=2021)\n\n##### [Â§](#note-to-implementers)Note to Implementers\n\nYou generally should not do length-prefixing as part of implementing this method. Itâ€™s up to the [`Hash`](trait.Hash.html \"trait std::hash::Hash\") implementation to call [`Hasher::write_length_prefix`](about:blank/trait.Hasher.html#method.write_length_prefix \"method std::hash::Hasher::write_length_prefix\") before sequences that need it.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#365)\n\nWrites a single `u8` into this hasher.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#371)\n\nWrites a single `u16` into this hasher.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#377)\n\nWrites a single `u32` into this hasher.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#383)\n\nWrites a single `u64` into this hasher.\n\n1.26.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#389)\n\nWrites a single `u128` into this hasher.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#395)\n\nWrites a single `usize` into this hasher.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#402)\n\nWrites a single `i8` into this hasher.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#408)\n\nWrites a single `i16` into this hasher.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#414)\n\nWrites a single `i32` into this hasher.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#420)\n\nWrites a single `i64` into this hasher.\n\n1.26.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#426)\n\nWrites a single `i128` into this hasher.\n\n1.3.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#432)\n\nWrites a single `isize` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#486)\n\nðŸ”¬This is a nightly-only experimental API. (`hasher_prefixfree_extras`Â [#96762](https://github.com/rust-lang/rust/issues/96762))\n\nWrites a length prefix into this hasher, as part of being prefix-free.\n\nIf youâ€™re implementing [`Hash`](trait.Hash.html \"trait std::hash::Hash\") for a custom collection, call this before writing its contents to this `Hasher`. That way `(collection![1, 2, 3], collection![4, 5])` and `(collection![1, 2], collection![3, 4, 5])` will provide different sequences of values to the `Hasher`\n\nThe `impl<T> Hash for [T]` includes a call to this method, so if youâ€™re hashing a slice (or array or vector) via its `Hash::hash` method, you should **not** call this yourself.\n\nThis method is only for providing domain separation. If you want to hash a `usize` that represents part of the _data_, then itâ€™s important that you pass it to [`Hasher::write_usize`](about:blank/trait.Hasher.html#method.write_usize \"method std::hash::Hasher::write_usize\") instead of to this method.\n\n##### [Â§](#examples-3)Examples\n\n```\n#![feature(hasher_prefixfree_extras)]\n\nuse std::hash::{Hash, Hasher};\nimpl<T: Hash> Hash for MyCollection<T> {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        state.write_length_prefix(self.len());\n        for elt in self {\n            elt.hash(state);\n        }\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hasher_prefixfree_extras)%5D%0A//+Stubs+to+make+the+%60impl%60+below+pass+the+compiler%0A%23!%5Ballow(non_local_definitions)%5D%0Afn+main()+%7B%0A++++struct+MyCollection%3CT%3E(Option%3CT%3E);%0A++++impl%3CT%3E+MyCollection%3CT%3E+%7B%0A++++++++fn+len(%26self)+-%3E+usize+%7B+todo!()+%7D%0A++++%7D%0A++++impl%3C%27a,+T%3E+IntoIterator+for+%26%27a+MyCollection%3CT%3E+%7B%0A++++++++type+Item+=+T;%0A++++++++type+IntoIter+=+std::iter::Empty%3CT%3E;%0A++++++++fn+into_iter(self)+-%3E+Self::IntoIter+%7B+todo!()+%7D%0A++++%7D%0A++++%0A++++use+std::hash::%7BHash,+Hasher%7D;%0A++++impl%3CT:+Hash%3E+Hash+for+MyCollection%3CT%3E+%7B%0A++++++++fn+hash%3CH:+Hasher%3E(%26self,+state:+%26mut+H)+%7B%0A++++++++++++state.write_length_prefix(self.len());%0A++++++++++++for+elt+in+self+%7B%0A++++++++++++++++elt.hash(state);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [Â§](#note-to-implementers-1)Note to Implementers\n\nIf youâ€™ve decided that your `Hasher` is willing to be susceptible to Hash-DoS attacks, then you might consider skipping hashing some or all of the `len` provided in the name of increased performance.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#553)\n\nðŸ”¬This is a nightly-only experimental API. (`hasher_prefixfree_extras`Â [#96762](https://github.com/rust-lang/rust/issues/96762))\n\nWrites a single `str` into this hasher.\n\nIf youâ€™re implementing [`Hash`](trait.Hash.html \"trait std::hash::Hash\"), you generally do not need to call this, as the `impl Hash for str` does, so you should prefer that instead.\n\nThis includes the domain separator for prefix-freedom, so you should **not** call `Self::write_length_prefix` before calling this.\n\n##### [Â§](#note-to-implementers-2)Note to Implementers\n\nThere are at least two reasonable default ways to implement this. Which one will be the default is not yet decided, so for now you probably want to override it specifically.\n\n###### [Â§](#the-general-answer)The general answer\n\nItâ€™s always correct to implement this with a length prefix:\n\n```\nfn write_str(&mut self, s: &str) {\n    self.write_length_prefix(s.len());\n    self.write(s.as_bytes());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hasher_prefixfree_extras)%5D%0Afn+main()+%7B%0A++++struct+Foo;%0A++++impl+std::hash::Hasher+for+Foo+%7B%0A++++fn+finish(%26self)+-%3E+u64+%7B+unimplemented!()+%7D%0A++++fn+write(%26mut+self,+_bytes:+%26%5Bu8%5D)+%7B+unimplemented!()+%7D%0A++++fn+write_str(%26mut+self,+s:+%26str)+%7B%0A++++++++self.write_length_prefix(s.len());%0A++++++++self.write(s.as_bytes());%0A++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nAnd, if your `Hasher` works in `usize` chunks, this is likely a very efficient way to do it, as anything more complicated may well end up slower than just running the round with the length.\n\n###### [Â§](#if-your-hasher-works-byte-wise)If your `Hasher` works byte-wise\n\nOne nice thing about `str` being UTF-8 is that the `b'\\xFF'` byte never happens. That means that you can append that to the byte stream being hashed and maintain prefix-freedom:\n\n```\nfn write_str(&mut self, s: &str) {\n    self.write(s.as_bytes());\n    self.write_u8(0xff);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hasher_prefixfree_extras)%5D%0Afn+main()+%7B%0A++++struct+Foo;%0A++++impl+std::hash::Hasher+for+Foo+%7B%0A++++fn+finish(%26self)+-%3E+u64+%7B+unimplemented!()+%7D%0A++++fn+write(%26mut+self,+_bytes:+%26%5Bu8%5D)+%7B+unimplemented!()+%7D%0A++++fn+write_str(%26mut+self,+s:+%26str)+%7B%0A++++++++self.write(s.as_bytes());%0A++++++++self.write_u8(0xff);%0A++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nThis does require that your implementation not add extra padding, and thus generally requires that you maintain a buffer, running a round only once that buffer is full (or `finish` is called).\n\nThatâ€™s because if `write` pads data out to a fixed chunk size, itâ€™s likely that it does it in such a way that `\"a\"` and `\"a\\x00\"` would end up hashing the same sequence of things, introducing conflicts.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A trait for hashing an arbitrary stream of bytes.\"><title>Hasher in std::hash - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Hasher</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Hasher</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.finish\">finish</a></li><li><a href=\"#tymethod.write\">write</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.write_i128\">write_i128</a></li><li><a href=\"#method.write_i16\">write_i16</a></li><li><a href=\"#method.write_i32\">write_i32</a></li><li><a href=\"#method.write_i64\">write_i64</a></li><li><a href=\"#method.write_i8\">write_i8</a></li><li><a href=\"#method.write_isize\">write_isize</a></li><li><a href=\"#method.write_length_prefix\">write_length_prefix</a></li><li><a href=\"#method.write_str\">write_str</a></li><li><a href=\"#method.write_u128\">write_u128</a></li><li><a href=\"#method.write_u16\">write_u16</a></li><li><a href=\"#method.write_u32\">write_u32</a></li><li><a href=\"#method.write_u64\">write_u64</a></li><li><a href=\"#method.write_u8\">write_u8</a></li><li><a href=\"#method.write_usize\">write_usize</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::hash</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BuildHasherDefault.html\">BuildHasherDefault</a></li><li><a href=\"struct.DefaultHasher.html\">DefaultHasher</a></li><li><a href=\"struct.RandomState.html\">RandomState</a></li><li><a href=\"struct.SipHasher.html\">SipHasher</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BuildHasher.html\">BuildHasher</a></li><li><a href=\"trait.Hash.html\">Hash</a></li><li><a href=\"trait.Hasher.html\">Hasher</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Hash.html\">Hash</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">hash</a>::<wbr><a class=\"trait\" href=\"#\">Hasher</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#316\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Hasher {\n<details class=\"toggle type-contents-toggle\"><summary class=\"hideme\"><span>Show 16 methods</span></summary>    // Required methods\n    fn <a href=\"#tymethod.finish\" class=\"fn\">finish</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, bytes: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]);\n\n    // Provided methods\n    fn <a href=\"#method.write_u8\" class=\"fn\">write_u8</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_u16\" class=\"fn\">write_u16</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_u32\" class=\"fn\">write_u32</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_u64\" class=\"fn\">write_u64</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_u128\" class=\"fn\">write_u128</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_usize\" class=\"fn\">write_usize</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_i8\" class=\"fn\">write_i8</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_i16\" class=\"fn\">write_i16</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_i32\" class=\"fn\">write_i32</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_i64\" class=\"fn\">write_i64</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_i128\" class=\"fn\">write_i128</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_isize\" class=\"fn\">write_isize</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_length_prefix\" class=\"fn\">write_length_prefix</a>(&amp;mut self, len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) { ... }\n</details>}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A trait for hashing an arbitrary stream of bytes.</p>\n<p>Instances of <code>Hasher</code> usually represent state that is changed while hashing\ndata.</p>\n<p><code>Hasher</code> provides a fairly basic interface for retrieving the generated hash\n(with <a href=\"trait.Hasher.html#tymethod.finish\" title=\"method std::hash::Hasher::finish\"><code>finish</code></a>), and writing integers as well as slices of bytes into an\ninstance (with <a href=\"trait.Hasher.html#tymethod.write\" title=\"method std::hash::Hasher::write\"><code>write</code></a> and <a href=\"trait.Hasher.html#method.write_u8\" title=\"method std::hash::Hasher::write_u8\"><code>write_u8</code></a> etc.). Most of the time, <code>Hasher</code>\ninstances are used in conjunction with the <a href=\"trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> trait.</p>\n<p>This trait provides no guarantees about how the various <code>write_*</code> methods are\ndefined and implementations of <a href=\"trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> should not assume that they work one\nway or another. You cannot assume, for example, that a <a href=\"trait.Hasher.html#method.write_u32\" title=\"method std::hash::Hasher::write_u32\"><code>write_u32</code></a> call is\nequivalent to four calls of <a href=\"trait.Hasher.html#method.write_u8\" title=\"method std::hash::Hasher::write_u8\"><code>write_u8</code></a>.  Nor can you assume that adjacent\n<code>write</code> calls are merged, so itâ€™s possible, for example, that</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>hasher.write(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\nhasher.write(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+foo(hasher:+%26mut+impl+std::hash::Hasher)+%7B%0A++++hasher.write(%26%5B1,+2%5D);%0A++++hasher.write(%26%5B3,+4,+5,+6%5D);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>and</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>hasher.write(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nhasher.write(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+foo(hasher:+%26mut+impl+std::hash::Hasher)+%7B%0A++++hasher.write(%26%5B1,+2,+3,+4%5D);%0A++++hasher.write(%26%5B5,+6%5D);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>end up producing different hashes.</p>\n<p>Thus to produce the same hash value, <a href=\"trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> implementations must ensure\nfor equivalent items that exactly the same sequence of calls is made â€“ the\nsame methods with the same parameters in the same order.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{DefaultHasher, Hasher};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher = DefaultHasher::new();\n\nhasher.write_u32(<span class=\"number\">1989</span>);\nhasher.write_u8(<span class=\"number\">11</span>);\nhasher.write_u8(<span class=\"number\">9</span>);\nhasher.write(<span class=\"string\">b\"Huh?\"</span>);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"Hash is {:x}!\"</span>, hasher.finish());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++%0A++++hasher.write_u32(1989);%0A++++hasher.write_u8(11);%0A++++hasher.write_u8(9);%0A++++hasher.write(b%22Huh?%22);%0A++++%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.finish\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#337\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.finish\" class=\"fn\">finish</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the hash value for the values written so far.</p>\n<p>Despite its name, the method does not reset the hasherâ€™s internal\nstate. Additional <a href=\"trait.Hasher.html#tymethod.write\" title=\"method std::hash::Hasher::write\"><code>write</code></a>s will continue from the current value.\nIf you need to start a fresh hash value, you will have to create\na new hasher.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{DefaultHasher, Hasher};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher = DefaultHasher::new();\nhasher.write(<span class=\"string\">b\"Cool!\"</span>);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"Hash is {:x}!\"</span>, hasher.finish());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++hasher.write(b%22Cool!%22);%0A++++%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#360\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, bytes: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>])</h4></section></summary><div class=\"docblock\"><p>Writes some data into this <code>Hasher</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::{DefaultHasher, Hasher};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hasher = DefaultHasher::new();\n<span class=\"kw\">let </span>data = [<span class=\"number\">0x01</span>, <span class=\"number\">0x23</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x67</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0xab</span>, <span class=\"number\">0xcd</span>, <span class=\"number\">0xef</span>];\n\nhasher.write(<span class=\"kw-2\">&amp;</span>data);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"Hash is {:x}!\"</span>, hasher.finish());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::%7BDefaultHasher,+Hasher%7D;%0A++++%0A++++let+mut+hasher+=+DefaultHasher::new();%0A++++let+data+=+%5B0x01,+0x23,+0x45,+0x67,+0x89,+0xab,+0xcd,+0xef%5D;%0A++++%0A++++hasher.write(%26data);%0A++++%0A++++println!(%22Hash+is+%7B:x%7D!%22,+hasher.finish());%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"note-to-implementers\"><a class=\"doc-anchor\" href=\"#note-to-implementers\">Â§</a>Note to Implementers</h5>\n<p>You generally should not do length-prefixing as part of implementing\nthis method.  Itâ€™s up to the <a href=\"trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> implementation to call\n<a href=\"trait.Hasher.html#method.write_length_prefix\" title=\"method std::hash::Hasher::write_length_prefix\"><code>Hasher::write_length_prefix</code></a> before sequences that need it.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#365\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_u8\" class=\"fn\">write_u8</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>u8</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#371\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_u16\" class=\"fn\">write_u16</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>u16</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#377\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_u32\" class=\"fn\">write_u32</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>u32</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#383\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_u64\" class=\"fn\">write_u64</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>u64</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u128\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#389\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_u128\" class=\"fn\">write_u128</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>u128</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_usize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#395\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_usize\" class=\"fn\">write_usize</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>usize</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#402\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_i8\" class=\"fn\">write_i8</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>i8</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#408\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_i16\" class=\"fn\">write_i16</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>i16</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i32\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#414\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_i32\" class=\"fn\">write_i32</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>i32</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i64\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#420\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_i64\" class=\"fn\">write_i64</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>i64</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i128\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#426\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_i128\" class=\"fn\">write_i128</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>i128</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_isize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#432\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_isize\" class=\"fn\">write_isize</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>)</h4></section></summary><div class=\"docblock\"><p>Writes a single <code>isize</code> into this hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_length_prefix\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#486\">source</a><h4 class=\"code-header\">fn <a href=\"#method.write_length_prefix\" class=\"fn\">write_length_prefix</a>(&amp;mut self, len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>hasher_prefixfree_extras</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96762\">#96762</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes a length prefix into this hasher, as part of being prefix-free.</p>\n<p>If youâ€™re implementing <a href=\"trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> for a custom collection, call this before\nwriting its contents to this <code>Hasher</code>.  That way\n<code>(collection![1, 2, 3], collection![4, 5])</code> and\n<code>(collection![1, 2], collection![3, 4, 5])</code> will provide different\nsequences of values to the <code>Hasher</code></p>\n<p>The <code>impl&lt;T&gt; Hash for [T]</code> includes a call to this method, so if youâ€™re\nhashing a slice (or array or vector) via its <code>Hash::hash</code> method,\nyou should <strong>not</strong> call this yourself.</p>\n<p>This method is only for providing domain separation.  If you want to\nhash a <code>usize</code> that represents part of the <em>data</em>, then itâ€™s important\nthat you pass it to <a href=\"trait.Hasher.html#method.write_usize\" title=\"method std::hash::Hasher::write_usize\"><code>Hasher::write_usize</code></a> instead of to this method.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hasher_prefixfree_extras)]\n\n</span><span class=\"kw\">use </span>std::hash::{Hash, Hasher};\n<span class=\"kw\">impl</span>&lt;T: Hash&gt; Hash <span class=\"kw\">for </span>MyCollection&lt;T&gt; {\n    <span class=\"kw\">fn </span>hash&lt;H: Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, state: <span class=\"kw-2\">&amp;mut </span>H) {\n        state.write_length_prefix(<span class=\"self\">self</span>.len());\n        <span class=\"kw\">for </span>elt <span class=\"kw\">in </span><span class=\"self\">self </span>{\n            elt.hash(state);\n        }\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hasher_prefixfree_extras)%5D%0A//+Stubs+to+make+the+%60impl%60+below+pass+the+compiler%0A%23!%5Ballow(non_local_definitions)%5D%0Afn+main()+%7B%0A++++struct+MyCollection%3CT%3E(Option%3CT%3E);%0A++++impl%3CT%3E+MyCollection%3CT%3E+%7B%0A++++++++fn+len(%26self)+-%3E+usize+%7B+todo!()+%7D%0A++++%7D%0A++++impl%3C'a,+T%3E+IntoIterator+for+%26'a+MyCollection%3CT%3E+%7B%0A++++++++type+Item+=+T;%0A++++++++type+IntoIter+=+std::iter::Empty%3CT%3E;%0A++++++++fn+into_iter(self)+-%3E+Self::IntoIter+%7B+todo!()+%7D%0A++++%7D%0A++++%0A++++use+std::hash::%7BHash,+Hasher%7D;%0A++++impl%3CT:+Hash%3E+Hash+for+MyCollection%3CT%3E+%7B%0A++++++++fn+hash%3CH:+Hasher%3E(%26self,+state:+%26mut+H)+%7B%0A++++++++++++state.write_length_prefix(self.len());%0A++++++++++++for+elt+in+self+%7B%0A++++++++++++++++elt.hash(state);%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"note-to-implementers-1\"><a class=\"doc-anchor\" href=\"#note-to-implementers-1\">Â§</a>Note to Implementers</h5>\n<p>If youâ€™ve decided that your <code>Hasher</code> is willing to be susceptible to\nHash-DoS attacks, then you might consider skipping hashing some or all\nof the <code>len</code> provided in the name of increased performance.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_str\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#553\">source</a><h4 class=\"code-header\">fn <a href=\"#method.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>hasher_prefixfree_extras</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96762\">#96762</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes a single <code>str</code> into this hasher.</p>\n<p>If youâ€™re implementing <a href=\"trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a>, you generally do not need to call this,\nas the <code>impl Hash for str</code> does, so you should prefer that instead.</p>\n<p>This includes the domain separator for prefix-freedom, so you should\n<strong>not</strong> call <code>Self::write_length_prefix</code> before calling this.</p>\n<h5 id=\"note-to-implementers-2\"><a class=\"doc-anchor\" href=\"#note-to-implementers-2\">Â§</a>Note to Implementers</h5>\n<p>There are at least two reasonable default ways to implement this.\nWhich one will be the default is not yet decided, so for now\nyou probably want to override it specifically.</p>\n<h6 id=\"the-general-answer\"><a class=\"doc-anchor\" href=\"#the-general-answer\">Â§</a>The general answer</h6>\n<p>Itâ€™s always correct to implement this with a length prefix:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>write_str(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, s: <span class=\"kw-2\">&amp;</span>str) {\n    <span class=\"self\">self</span>.write_length_prefix(s.len());\n    <span class=\"self\">self</span>.write(s.as_bytes());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hasher_prefixfree_extras)%5D%0Afn+main()+%7B%0A++++struct+Foo;%0A++++impl+std::hash::Hasher+for+Foo+%7B%0A++++fn+finish(%26self)+-%3E+u64+%7B+unimplemented!()+%7D%0A++++fn+write(%26mut+self,+_bytes:+%26%5Bu8%5D)+%7B+unimplemented!()+%7D%0A++++fn+write_str(%26mut+self,+s:+%26str)+%7B%0A++++++++self.write_length_prefix(s.len());%0A++++++++self.write(s.as_bytes());%0A++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>And, if your <code>Hasher</code> works in <code>usize</code> chunks, this is likely a very\nefficient way to do it, as anything more complicated may well end up\nslower than just running the round with the length.</p>\n<h6 id=\"if-your-hasher-works-byte-wise\"><a class=\"doc-anchor\" href=\"#if-your-hasher-works-byte-wise\">Â§</a>If your <code>Hasher</code> works byte-wise</h6>\n<p>One nice thing about <code>str</code> being UTF-8 is that the <code>b'\\xFF'</code> byte\nnever happens.  That means that you can append that to the byte stream\nbeing hashed and maintain prefix-freedom:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>write_str(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, s: <span class=\"kw-2\">&amp;</span>str) {\n    <span class=\"self\">self</span>.write(s.as_bytes());\n    <span class=\"self\">self</span>.write_u8(<span class=\"number\">0xff</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hasher_prefixfree_extras)%5D%0Afn+main()+%7B%0A++++struct+Foo;%0A++++impl+std::hash::Hasher+for+Foo+%7B%0A++++fn+finish(%26self)+-%3E+u64+%7B+unimplemented!()+%7D%0A++++fn+write(%26mut+self,+_bytes:+%26%5Bu8%5D)+%7B+unimplemented!()+%7D%0A++++fn+write_str(%26mut+self,+s:+%26str)+%7B%0A++++++++self.write(s.as_bytes());%0A++++++++self.write_u8(0xff);%0A++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This does require that your implementation not add extra padding, and\nthus generally requires that you maintain a buffer, running a round\nonly once that buffer is full (or <code>finish</code> is called).</p>\n<p>Thatâ€™s because if <code>write</code> pads data out to a fixed chunk size, itâ€™s\nlikely that it does it in such a way that <code>\"a\"</code> and <code>\"a\\x00\"</code> would\nend up hashing the same sequence of things, introducing conflicts.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-Hasher-for-DefaultHasher\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> Â· <a class=\"src\" href=\"../../src/std/hash/random.rs.html#127-145\">source</a></span><a href=\"#impl-Hasher-for-DefaultHasher\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a> for <a class=\"struct\" href=\"../collections/hash_map/struct.DefaultHasher.html\" title=\"struct std::collections::hash_map::DefaultHasher\">DefaultHasher</a></h3></section><section id=\"impl-Hasher-for-SipHasher\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/sip.rs.html#216\">source</a></span><a href=\"#impl-Hasher-for-SipHasher\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a> for <a class=\"struct\" href=\"struct.SipHasher.html\" title=\"struct std::hash::SipHasher\">SipHasher</a></h3></section><section id=\"impl-Hasher-for-%26mut+H\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#560\">source</a></span><a href=\"#impl-Hasher-for-%26mut+H\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a><div class=\"where\">where\n    H: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Hasher-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1440\">source</a></span><a href=\"#impl-Hasher-for-Box%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></div><script src=\"../../trait.impl/core/hash/trait.Hasher.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:27.366Z"
}