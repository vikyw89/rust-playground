{
	"title": "Additions to the prelude - The Rust Edition Guide",
	"url": "https://doc.rust-lang.org/stable/edition-guide/rust-2021/prelude.html",
	"markdown": "# Additions to the prelude - The Rust Edition Guide\n\n## [Summary](#summary)\n\n-   The `TryInto`, `TryFrom` and `FromIterator` traits are now part of the prelude.\n-   This might make calls to trait methods ambiguous which could make some code fail to compile.\n\n## [Details](#details)\n\nThe [prelude of the standard library](https://doc.rust-lang.org/stable/std/prelude/index.html) is the module containing everything that is automatically imported in every module. It contains commonly used items such as `Option`, `Vec`, `drop`, and `Clone`.\n\nThe Rust compiler prioritizes any manually imported items over those from the prelude, to make sure additions to the prelude will not break any existing code. For example, if you have a crate or module called `example` containing a `pub struct Option;`, then `use example::*;` will make `Option` unambiguously refer to the one from `example`; not the one from the standard library.\n\nHowever, adding a _trait_ to the prelude can break existing code in a subtle way. For example, a call to `x.try_into()` which comes from a `MyTryInto` trait might fail to compile if `std`'s `TryInto` is also imported, because the call to `try_into` is now ambiguous and could come from either trait. This is the reason we haven't added `TryInto` to the prelude yet, since there is a lot of code that would break this way.\n\nAs a solution, Rust 2021 will use a new prelude. It's identical to the current one, except for three new additions:\n\n-   [`std::convert::TryInto`](https://doc.rust-lang.org/stable/std/convert/trait.TryInto.html)\n-   [`std::convert::TryFrom`](https://doc.rust-lang.org/stable/std/convert/trait.TryFrom.html)\n-   [`std::iter::FromIterator`](https://doc.rust-lang.org/stable/std/iter/trait.FromIterator.html)\n\nThe tracking issue [can be found here](https://github.com/rust-lang/rust/issues/85684).\n\n## [Migration](#migration)\n\nAs a part of the 2021 edition a migration lint, `rust_2021_prelude_collisions`, has been added in order to aid in automatic migration of Rust 2018 codebases to Rust 2021.\n\nIn order to migrate your code to be Rust 2021 Edition compatible, run:\n\n```sh\ncargo fix --edition\n\n```\n\nThe lint detects cases where functions or methods are called that have the same name as the methods defined in one of the new prelude traits. In some cases, it may rewrite your calls in various ways to ensure that you continue to call the same function you did before.\n\nIf you'd like to migrate your code manually or better understand what `cargo fix` is doing, below we've outlined the situations where a migration is needed along with a counter example of when it's not needed.\n\n### [Migration needed](#migration-needed)\n\n#### [Conflicting trait methods](#conflicting-trait-methods)\n\nWhen two traits that are in scope have the same method name, it is ambiguous which trait method should be used. For example:\n\n```rust\ntrait MyTrait<A> {\n  // This name is the same as the `from_iter` method on the `FromIterator` trait from `std`.  \n  fn from_iter(x: Option<A>);\n}\n\nimpl<T> MyTrait<()> for Vec<T> {\n  fn from_iter(_: Option<()>) {}\n}\n\nfn main() {\n  // Vec<T> implements both `std::iter::FromIterator` and `MyTrait` \n  // If both traits are in scope (as would be the case in Rust 2021),\n  // then it becomes ambiguous which `from_iter` method to call\n  <Vec<i32>>::from_iter(None);\n}\n```\n\nWe can fix this by using fully qualified syntax:\n\n```rust\nfn main() {\n  // Now it is clear which trait method we're referring to\n  <Vec<i32> as MyTrait<()>>::from_iter(None);\n}\n```\n\n#### [Inherent methods on `dyn Trait` objects](#inherent-methods-on-dyn-trait-objects)\n\nSome users invoke methods on a `dyn Trait` value where the method name overlaps with a new prelude trait:\n\n```rust\n#![allow(unused)]\nfn main() {\nmod submodule {\n  pub trait MyTrait {\n    // This has the same name as `TryInto::try_into`\n    fn try_into(&self) -> Result<u32, ()>;\n  }\n}\n\n// `MyTrait` isn't in scope here and can only be referred to through the path `submodule::MyTrait`\nfn bar(f: Box<dyn submodule::MyTrait>) {\n  // If `std::convert::TryInto` is in scope (as would be the case in Rust 2021),\n  // then it becomes ambiguous which `try_into` method to call\n  f.try_into();\n}\n}\n```\n\nUnlike with static dispatch methods, calling a trait method on a trait object does not require that the trait be in scope. The code above works as long as there is no trait in scope with a conflicting method name. When the `TryInto` trait is in scope (which is the case in Rust 2021), this causes an ambiguity. Should the call be to `MyTrait::try_into` or `std::convert::TryInto::try_into`?\n\nIn these cases, we can fix this by adding an additional dereferences or otherwise clarify the type of the method receiver. This ensures that the `dyn Trait` method is chosen, versus the methods from the prelude trait. For example, turning `f.try_into()` above into `(&*f).try_into()` ensures that we're calling `try_into` on the `dyn MyTrait` which can only refer to the `MyTrait::try_into` method.\n\n### [No migration needed](#no-migration-needed)\n\n#### [Inherent methods](#inherent-methods)\n\nMany types define their own inherent methods with the same name as a trait method. For instance, below the struct `MyStruct` implements `from_iter` which shares the same name with the method from the trait `FromIterator` found in the standard library:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::iter::IntoIterator;\n\nstruct MyStruct {\n  data: Vec<u32>\n}\n\nimpl MyStruct {\n  // This has the same name as `std::iter::FromIterator::from_iter`\n  fn from_iter(iter: impl IntoIterator<Item = u32>) -> Self {\n    Self {\n      data: iter.into_iter().collect()\n    }\n  }\n}\n\nimpl std::iter::FromIterator<u32> for MyStruct {\n    fn from_iter<I: IntoIterator<Item = u32>>(iter: I) -> Self {\n      Self {\n        data: iter.into_iter().collect()\n      }\n    }\n}\n}\n```\n\nInherent methods always take precedent over trait methods so there's no need for any migration.\n\n### [Implementation Reference](#implementation-reference)\n\nThe lint needs to take a couple of factors into account when determining whether or not introducing 2021 Edition to a codebase will cause a name resolution collision (thus breaking the code after changing edition). These factors include:\n\n-   Is the call a [fully-qualified call](https://doc.rust-lang.org/reference/expressions/call-expr.html#disambiguating-function-calls) or does it use [dot-call method syntax](https://doc.rust-lang.org/reference/expressions/method-call-expr.html)?\n    -   This will affect how the name is resolved due to auto-reference and auto-dereferencing on method call syntax. Manually dereferencing/referencing will allow specifying priority in the case of dot-call method syntax, while fully-qualified call requires specification of the type and the trait name in the method path (e.g. `<Type as Trait>::method`)\n-   Is this an [inherent method](https://doc.rust-lang.org/reference/items/implementations.html#inherent-implementations) or [a trait method](https://doc.rust-lang.org/reference/items/implementations.html#trait-implementations)?\n    -   Inherent methods that take `self` will take priority over `TryInto::try_into` as inherent methods take priority over trait methods, but inherent methods that take `&self` or `&mut self` won't take priority due to requiring a auto-reference (while `TryInto::try_into` does not, as it takes `self`)\n-   Is the origin of this method from `core`/`std`? (As the traits can't have a collision with themselves)\n-   Does the given type implement the trait it could have a collision against?\n-   Is the method being called via dynamic dispatch? (i.e. is the `self` type `dyn Trait`)\n    -   If so, trait imports don't affect resolution, and no migration lint needs to occur",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Additions to the prelude - The Rust Edition Guide</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What are editions?</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../editions/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Creating a new project</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/transitioning-an-existing-project-to-a-new-edition.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Transitioning an existing project to a new edition</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/advanced-migrations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Advanced migrations</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2015/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Rust 2015</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Rust 2018</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2018/path-changes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Path and module system changes</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/trait-fn-parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Anonymous trait function parameters deprecated</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/new-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> New keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/tyvar-behind-raw-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Method dispatch for raw pointers to inference variables</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Cargo changes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Rust 2021</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2021/prelude.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/default-cargo-resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Default Cargo feature resolver</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/IntoIterator-for-arrays.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> IntoIterator for arrays</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/disjoint-capture-in-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Disjoint capture in closures</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/panic-macro-consistency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Panic macro consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/reserving-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.6.</strong> Reserving syntax</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/warnings-promoted-to-error.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.7.</strong> Warnings promoted to errors</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/or-patterns-macro-rules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.8.</strong> Or patterns in macro-rules</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/c-string-literals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.9.</strong> C-string literals</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Rust 2024 🚧</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2024/prelude.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/unsafe-op-in-unsafe-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> unsafe_op_in_unsafe_fn warning</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rpit-lifetime-capture.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> RPIT lifetime capture</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/static-mut-reference.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.4.</strong> Disallow references to static mut</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/public-private-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.5.</strong> Public/private dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-remove-implicit-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.6.</strong> Cargo: Remove implicit features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-table-key-names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.7.</strong> Cargo: Table and key name consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-inherited-default-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.8.</strong> Cargo: Reject unused inherited default-features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rustfmt-overflow-delimited-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.9.</strong> Rustfmt: Combine all delimited exprs as last argument</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/gen-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.10.</strong> gen keyword</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Edition Guide</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide/edit/master/src/rust-2021/prelude.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"additions-to-the-prelude\"><a class=\"header\" href=\"#additions-to-the-prelude\">Additions to the prelude</a></h1>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<ul>\n<li>The <code class=\"hljs\">TryInto</code>, <code class=\"hljs\">TryFrom</code> and <code class=\"hljs\">FromIterator</code> traits are now part of the prelude.</li>\n<li>This might make calls to trait methods ambiguous which could make some code fail to compile.</li>\n</ul>\n<h2 id=\"details\"><a class=\"header\" href=\"#details\">Details</a></h2>\n<p>The <a href=\"https://doc.rust-lang.org/stable/std/prelude/index.html\">prelude of the standard library</a>\nis the module containing everything that is automatically imported in every module.\nIt contains commonly used items such as <code class=\"hljs\">Option</code>, <code class=\"hljs\">Vec</code>, <code class=\"hljs\">drop</code>, and <code class=\"hljs\">Clone</code>.</p>\n<p>The Rust compiler prioritizes any manually imported items over those\nfrom the prelude, to make sure additions to the prelude will not break any existing code.\nFor example, if you have a crate or module called <code class=\"hljs\">example</code> containing a <code class=\"hljs\">pub struct Option;</code>,\nthen <code class=\"hljs\">use example::*;</code> will make <code class=\"hljs\">Option</code> unambiguously refer to the one from <code class=\"hljs\">example</code>;\nnot the one from the standard library.</p>\n<p>However, adding a <em>trait</em> to the prelude can break existing code in a subtle way.\nFor example, a call to <code class=\"hljs\">x.try_into()</code> which comes from a <code class=\"hljs\">MyTryInto</code> trait might fail\nto compile if <code class=\"hljs\">std</code>'s <code class=\"hljs\">TryInto</code> is also imported, because the call to <code class=\"hljs\">try_into</code> is now\nambiguous and could come from either trait. This is the reason we haven't added <code class=\"hljs\">TryInto</code>\nto the prelude yet, since there is a lot of code that would break this way.</p>\n<p>As a solution, Rust 2021 will use a new prelude.\nIt's identical to the current one, except for three new additions:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/std/convert/trait.TryInto.html\"><code class=\"hljs\">std::convert::TryInto</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/convert/trait.TryFrom.html\"><code class=\"hljs\">std::convert::TryFrom</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/iter/trait.FromIterator.html\"><code class=\"hljs\">std::iter::FromIterator</code></a></li>\n</ul>\n<p>The tracking issue <a href=\"https://github.com/rust-lang/rust/issues/85684\">can be found here</a>.</p>\n<h2 id=\"migration\"><a class=\"header\" href=\"#migration\">Migration</a></h2>\n<p>As a part of the 2021 edition a migration lint, <code class=\"hljs\">rust_2021_prelude_collisions</code>, has been added in order to aid in automatic migration of Rust 2018 codebases to Rust 2021.</p>\n<p>In order to migrate your code to be Rust 2021 Edition compatible, run:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo fix --edition\n</code></pre>\n<p>The lint detects cases where functions or methods are called that have the same name as the methods defined in one of the new prelude traits. In some cases, it may rewrite your calls in various ways to ensure that you continue to call the same function you did before.</p>\n<p>If you'd like to migrate your code manually or better understand what <code class=\"hljs\">cargo fix</code> is doing, below we've outlined the situations where a migration is needed along with a counter example of when it's not needed.</p>\n<h3 id=\"migration-needed\"><a class=\"header\" href=\"#migration-needed\">Migration needed</a></h3>\n<h4 id=\"conflicting-trait-methods\"><a class=\"header\" href=\"#conflicting-trait-methods\">Conflicting trait methods</a></h4>\n<p>When two traits that are in scope have the same method name, it is ambiguous which trait method should be used. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">MyTrait</span></span>&lt;A&gt; {\n  <span class=\"hljs-comment\">// This name is the same as the `from_iter` method on the `FromIterator` trait from `std`.  </span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">from_iter</span></span>(x: <span class=\"hljs-built_in\">Option</span>&lt;A&gt;);\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; MyTrait&lt;()&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">from_iter</span></span>(_: <span class=\"hljs-built_in\">Option</span>&lt;()&gt;) {}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n  <span class=\"hljs-comment\">// Vec&lt;T&gt; implements both `std::iter::FromIterator` and `MyTrait` </span>\n  <span class=\"hljs-comment\">// If both traits are in scope (as would be the case in Rust 2021),</span>\n  <span class=\"hljs-comment\">// then it becomes ambiguous which `from_iter` method to call</span>\n  &lt;<span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt;&gt;::from_iter(<span class=\"hljs-literal\">None</span>);\n}</code></pre></pre>\n<p>We can fix this by using fully qualified syntax:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n  <span class=\"hljs-comment\">// Now it is clear which trait method we're referring to</span>\n  &lt;<span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; <span class=\"hljs-keyword\">as</span> MyTrait&lt;()&gt;&gt;::from_iter(<span class=\"hljs-literal\">None</span>);\n}</code></pre>\n<h4 id=\"inherent-methods-on-dyn-trait-objects\"><a class=\"header\" href=\"#inherent-methods-on-dyn-trait-objects\">Inherent methods on <code>dyn Trait</code> objects</a></h4>\n<p>Some users invoke methods on a <code class=\"hljs\">dyn Trait</code> value where the method name overlaps with a new prelude trait:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">mod</span> submodule {\n  <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">MyTrait</span></span> {\n    <span class=\"hljs-comment\">// This has the same name as `TryInto::try_into`</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">try_into</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">u32</span>, ()&gt;;\n  }\n}\n\n<span class=\"hljs-comment\">// `MyTrait` isn't in scope here and can only be referred to through the path `submodule::MyTrait`</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(f: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> submodule::MyTrait&gt;) {\n  <span class=\"hljs-comment\">// If `std::convert::TryInto` is in scope (as would be the case in Rust 2021),</span>\n  <span class=\"hljs-comment\">// then it becomes ambiguous which `try_into` method to call</span>\n  f.try_into();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Unlike with static dispatch methods, calling a trait method on a trait object does not require that the trait be in scope. The code above works\nas long as there is no trait in scope with a conflicting method name. When the <code class=\"hljs\">TryInto</code> trait is in scope (which is the case in Rust 2021),\nthis causes an ambiguity. Should the call be to <code class=\"hljs\">MyTrait::try_into</code> or <code class=\"hljs\">std::convert::TryInto::try_into</code>?</p>\n<p>In these cases, we can fix this by adding an additional dereferences or otherwise clarify the type of the method receiver. This ensures that\nthe <code class=\"hljs\">dyn Trait</code> method is chosen, versus the methods from the prelude trait. For example, turning <code class=\"hljs\">f.try_into()</code> above into <code class=\"hljs\">(&amp;*f).try_into()</code>\nensures that we're calling <code class=\"hljs\">try_into</code> on the <code class=\"hljs\">dyn MyTrait</code> which can only refer to the <code class=\"hljs\">MyTrait::try_into</code> method.</p>\n<h3 id=\"no-migration-needed\"><a class=\"header\" href=\"#no-migration-needed\">No migration needed</a></h3>\n<h4 id=\"inherent-methods\"><a class=\"header\" href=\"#inherent-methods\">Inherent methods</a></h4>\n<p>Many types define their own inherent methods with the same name as a trait method. For instance, below the struct <code class=\"hljs\">MyStruct</code> implements <code class=\"hljs\">from_iter</code> which shares the same name with the method from the trait <code class=\"hljs\">FromIterator</code> found in the standard library:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::iter::<span class=\"hljs-built_in\">IntoIterator</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyStruct</span></span> {\n  data: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">u32</span>&gt;\n}\n\n<span class=\"hljs-keyword\">impl</span> MyStruct {\n  <span class=\"hljs-comment\">// This has the same name as `std::iter::FromIterator::from_iter`</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">from_iter</span></span>(iter: <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">IntoIterator</span>&lt;Item = <span class=\"hljs-built_in\">u32</span>&gt;) -&gt; <span class=\"hljs-keyword\">Self</span> {\n    <span class=\"hljs-keyword\">Self</span> {\n      data: iter.into_iter().collect()\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">impl</span> std::iter::FromIterator&lt;<span class=\"hljs-built_in\">u32</span>&gt; <span class=\"hljs-keyword\">for</span> MyStruct {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">from_iter</span></span>&lt;I: <span class=\"hljs-built_in\">IntoIterator</span>&lt;Item = <span class=\"hljs-built_in\">u32</span>&gt;&gt;(iter: I) -&gt; <span class=\"hljs-keyword\">Self</span> {\n      <span class=\"hljs-keyword\">Self</span> {\n        data: iter.into_iter().collect()\n      }\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Inherent methods always take precedent over trait methods so there's no need for any migration.</p>\n<h3 id=\"implementation-reference\"><a class=\"header\" href=\"#implementation-reference\">Implementation Reference</a></h3>\n<p>The lint needs to take a couple of factors into account when determining whether or not introducing 2021 Edition to a codebase will cause a name resolution collision (thus breaking the code after changing edition). These factors include:</p>\n<ul>\n<li>Is the call a <a href=\"https://doc.rust-lang.org/reference/expressions/call-expr.html#disambiguating-function-calls\">fully-qualified call</a> or does it use <a href=\"https://doc.rust-lang.org/reference/expressions/method-call-expr.html\">dot-call method syntax</a>?\n<ul>\n<li>This will affect how the name is resolved due to auto-reference and auto-dereferencing on method call syntax. Manually dereferencing/referencing will allow specifying priority in the case of dot-call method syntax, while fully-qualified call requires specification of the type and the trait name in the method path (e.g. <code class=\"hljs\">&lt;Type as Trait&gt;::method</code>)</li>\n</ul>\n</li>\n<li>Is this an <a href=\"https://doc.rust-lang.org/reference/items/implementations.html#inherent-implementations\">inherent method</a> or <a href=\"https://doc.rust-lang.org/reference/items/implementations.html#trait-implementations\">a trait method</a>?\n<ul>\n<li>Inherent methods that take <code class=\"hljs\">self</code> will take priority over <code class=\"hljs\">TryInto::try_into</code> as inherent methods take priority over trait methods, but inherent methods that take <code class=\"hljs\">&amp;self</code> or <code class=\"hljs\">&amp;mut self</code> won't take priority due to requiring a auto-reference (while <code class=\"hljs\">TryInto::try_into</code> does not, as it takes <code class=\"hljs\">self</code>)</li>\n</ul>\n</li>\n<li>Is the origin of this method from <code class=\"hljs\">core</code>/<code class=\"hljs\">std</code>? (As the traits can't have a collision with themselves)</li>\n<li>Does the given type implement the trait it could have a collision against?</li>\n<li>Is the method being called via dynamic dispatch? (i.e. is the <code class=\"hljs\">self</code> type <code class=\"hljs\">dyn Trait</code>)\n<ul>\n<li>If so, trait imports don't affect resolution, and no migration lint needs to occur</li>\n</ul>\n</li>\n</ul>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../rust-2021/index.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../rust-2021/default-cargo-resolver.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../rust-2021/index.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../rust-2021/default-cargo-resolver.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:31.446Z"
}