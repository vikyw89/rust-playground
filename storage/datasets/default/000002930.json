{
	"title": "FileTypeExt in std::os::unix::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/unix/fs/trait.FileTypeExt.html",
	"markdown": "# FileTypeExt in std::os::unix::fs - Rust\n\n```\npub trait FileTypeExt {\n    // Required methods\n    fn is_block_device(&self) -> bool;\n    fn is_char_device(&self) -> bool;\n    fn is_fifo(&self) -> bool;\n    fn is_socket(&self) -> bool;\n}\n```\n\nAvailable on **Unix** only.\n\nExpand description\n\nUnix-specific extensions for [`fs::FileType`](../../../fs/struct.FileType.html \"struct std::fs::FileType\").\n\nAdds support for special Unix file types such as block/character devices, pipes, and sockets.\n\n1.5.0 · [source](about:blank/src/std/os/unix/fs.rs.html#793)\n\nReturns `true` if this file type is a block device.\n\n##### [§](#examples)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"block_device_file\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_block_device());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::FileTypeExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22block_device_file%22)?;%0A++++let+file_type+=+meta.file_type();%0A++++assert!(file_type.is_block_device());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/os/unix/fs.rs.html#811)\n\nReturns `true` if this file type is a char device.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"char_device_file\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_char_device());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::FileTypeExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22char_device_file%22)?;%0A++++let+file_type+=+meta.file_type();%0A++++assert!(file_type.is_char_device());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/os/unix/fs.rs.html#829)\n\nReturns `true` if this file type is a fifo.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"fifo_file\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_fifo());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::FileTypeExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22fifo_file%22)?;%0A++++let+file_type+=+meta.file_type();%0A++++assert!(file_type.is_fifo());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/os/unix/fs.rs.html#847)\n\nReturns `true` if this file type is a socket.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::fs;\nuse std::os::unix::fs::FileTypeExt;\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let meta = fs::metadata(\"unix.socket\")?;\n    let file_type = meta.file_type();\n    assert!(file_type.is_socket());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::FileTypeExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22unix.socket%22)?;%0A++++let+file_type+=+meta.file_type();%0A++++assert!(file_type.is_socket());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.5.0 · [source](about:blank/src/std/os/unix/fs.rs.html#851-864)[§](#impl-FileTypeExt-for-FileType)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Unix-specific extensions for `fs::FileType`.\"><title>FileTypeExt in std::os::unix::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">FileTypeExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">FileTypeExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.is_block_device\">is_block_device</a></li><li><a href=\"#tymethod.is_char_device\">is_char_device</a></li><li><a href=\"#tymethod.is_fifo\">is_fifo</a></li><li><a href=\"#tymethod.is_socket\">is_socket</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::unix::fs</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DirBuilderExt.html\">DirBuilderExt</a></li><li><a href=\"trait.DirEntryExt.html\">DirEntryExt</a></li><li><a href=\"trait.DirEntryExt2.html\">DirEntryExt2</a></li><li><a href=\"trait.FileExt.html\">FileExt</a></li><li><a href=\"trait.FileTypeExt.html\">FileTypeExt</a></li><li><a href=\"trait.MetadataExt.html\">MetadataExt</a></li><li><a href=\"trait.OpenOptionsExt.html\">OpenOptionsExt</a></li><li><a href=\"trait.PermissionsExt.html\">PermissionsExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.chown.html\">chown</a></li><li><a href=\"fn.chroot.html\">chroot</a></li><li><a href=\"fn.fchown.html\">fchown</a></li><li><a href=\"fn.lchown.html\">lchown</a></li><li><a href=\"fn.symlink.html\">symlink</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">unix</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"trait\" href=\"#\">FileTypeExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#775-848\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait FileTypeExt {\n    // Required methods\n    fn <a href=\"#tymethod.is_block_device\" class=\"fn\">is_block_device</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_char_device\" class=\"fn\">is_char_device</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_fifo\" class=\"fn\">is_fifo</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.is_socket\" class=\"fn\">is_socket</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>;\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Unix-specific extensions for <a href=\"../../../fs/struct.FileType.html\" title=\"struct std::fs::FileType\"><code>fs::FileType</code></a>.</p>\n<p>Adds support for special Unix file types such as block/character devices,\npipes, and sockets.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_block_device\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#793\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.is_block_device\" class=\"fn\">is_block_device</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this file type is a block device.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::FileTypeExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"block_device_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_type = meta.file_type();\n    <span class=\"macro\">assert!</span>(file_type.is_block_device());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::FileTypeExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22block_device_file%22)?;%0A++++let+file_type+=+meta.file_type();%0A++++assert!(file_type.is_block_device());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_char_device\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#811\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.is_char_device\" class=\"fn\">is_char_device</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this file type is a char device.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::FileTypeExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"char_device_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_type = meta.file_type();\n    <span class=\"macro\">assert!</span>(file_type.is_char_device());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::FileTypeExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22char_device_file%22)?;%0A++++let+file_type+=+meta.file_type();%0A++++assert!(file_type.is_char_device());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_fifo\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#829\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.is_fifo\" class=\"fn\">is_fifo</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this file type is a fifo.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::FileTypeExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"fifo_file\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_type = meta.file_type();\n    <span class=\"macro\">assert!</span>(file_type.is_fifo());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::FileTypeExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22fifo_file%22)?;%0A++++let+file_type+=+meta.file_type();%0A++++assert!(file_type.is_fifo());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_socket\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#847\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.is_socket\" class=\"fn\">is_socket</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this file type is a socket.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::os::unix::fs::FileTypeExt;\n<span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>meta = fs::metadata(<span class=\"string\">\"unix.socket\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_type = meta.file_type();\n    <span class=\"macro\">assert!</span>(file_type.is_socket());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::os::unix::fs::FileTypeExt;%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+meta+=+fs::metadata(%22unix.socket%22)?;%0A++++let+file_type+=+meta.file_type();%0A++++assert!(file_type.is_socket());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-FileTypeExt-for-FileType\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/fs.rs.html#851-864\">source</a></span><a href=\"#impl-FileTypeExt-for-FileType\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.FileTypeExt.html\" title=\"trait std::os::unix::fs::FileTypeExt\">FileTypeExt</a> for <a class=\"struct\" href=\"../../../fs/struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h3></section></div><script src=\"../../../../trait.impl/std/os/unix/fs/trait.FileTypeExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:25.668Z"
}