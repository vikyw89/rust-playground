{
	"title": "Metadata in std::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fs/struct.Metadata.html#method.file_type",
	"markdown": "# Metadata in std::fs - Rust\n\n## Struct [std](../index.html)::[fs](index.html)::[Metadata](#)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#118) ·\n\n```\npub struct Metadata(/* private fields */);\n```\n\nExpand description\n\nMetadata information about a file.\n\nThis structure is returned from the [`metadata`](fn.metadata.html \"fn std::fs::metadata\") or [`symlink_metadata`](fn.symlink_metadata.html \"fn std::fs::symlink_metadata\") function or method and represents known metadata about a file such as its permissions, size, modification times, etc.\n\n[source](about:blank/src/std/fs.rs.html#1254-1493)[§](#impl-Metadata)\n\n1.1.0 · [source](about:blank/src/std/fs.rs.html#1271-1273)\n\nReturns the file type for this metadata.\n\n##### [§](#examples)Examples\n\n```\nfn main() -> std::io::Result<()> {\n    use std::fs;\n\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    println!(\"{:?}\", metadata.file_type());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs;%0A%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++println!(%22%7B:?%7D%22,+metadata.file_type());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1294-1296)\n\nReturns `true` if this metadata is for a directory. The result is mutually exclusive to the result of [`Metadata::is_file`](about:blank/struct.Metadata.html#method.is_file \"method std::fs::Metadata::is_file\"), and will be false for symlink metadata obtained from [`symlink_metadata`](fn.symlink_metadata.html \"fn std::fs::symlink_metadata\").\n\n##### [§](#examples-1)Examples\n\n```\nfn main() -> std::io::Result<()> {\n    use std::fs;\n\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    assert!(!metadata.is_dir());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs;%0A%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++assert!(!metadata.is_dir());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1323-1325)\n\nReturns `true` if this metadata is for a regular file. The result is mutually exclusive to the result of [`Metadata::is_dir`](about:blank/struct.Metadata.html#method.is_dir \"method std::fs::Metadata::is_dir\"), and will be false for symlink metadata obtained from [`symlink_metadata`](fn.symlink_metadata.html \"fn std::fs::symlink_metadata\").\n\nWhen the goal is simply to read from (or write to) the source, the most reliable way to test the source can be read (or written to) is to open it. Only using `is_file` can break workflows like `diff <( prog_a )` on a Unix-like system for example. See [`File::open`](about:blank/struct.File.html#method.open \"associated function std::fs::File::open\") or [`OpenOptions::open`](about:blank/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\") for more information.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    assert!(metadata.is_file());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++assert!(metadata.is_file());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.58.0 · [source](about:blank/src/std/fs.rs.html#1349-1351)\n\nReturns `true` if this metadata is for a symbolic link.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::fs;\nuse std::path::Path;\nuse std::os::unix::fs::symlink;\n\nfn main() -> std::io::Result<()> {\n    let link_path = Path::new(\"link\");\n    symlink(\"/origin_does_not_exist/\", link_path)?;\n\n    let metadata = fs::symlink_metadata(link_path)?;\n\n    assert!(metadata.is_symlink());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::path::Path;%0Ause+std::os::unix::fs::symlink;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+link_path+=+Path::new(%22link%22);%0A++++symlink(%22/origin_does_not_exist/%22,+link_path)?;%0A%0A++++let+metadata+=+fs::symlink_metadata(link_path)?;%0A%0A++++assert!(metadata.is_symlink());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1369-1371)\n\nReturns the size of the file, in bytes, this metadata is for.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    assert_eq!(0, metadata.len());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++assert_eq!(0,+metadata.len());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#1389-1391)\n\nReturns the permissions of the file this metadata is for.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    assert!(!metadata.permissions().readonly());\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++assert!(!metadata.permissions().readonly());%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/fs.rs.html#1421-1423)\n\nReturns the last modification time listed in this metadata.\n\nThe returned value corresponds to the `mtime` field of `stat` on Unix platforms and the `ftLastWriteTime` field on Windows platforms.\n\n##### [§](#errors)Errors\n\nThis field might not be available on all platforms, and will return an `Err` on platforms where it is not available.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    if let Ok(time) = metadata.modified() {\n        println!(\"{time:?}\");\n    } else {\n        println!(\"Not supported on this platform\");\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++if+let+Ok(time)+=+metadata.modified()+%7B%0A++++++++println!(%22%7Btime:?%7D%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Not+supported+on+this+platform%22);%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/fs.rs.html#1457-1459)\n\nReturns the last access time of this metadata.\n\nThe returned value corresponds to the `atime` field of `stat` on Unix platforms and the `ftLastAccessTime` field on Windows platforms.\n\nNote that not all platforms will keep this field update in a file’s metadata, for example Windows has an option to disable updating this time when files are accessed and Linux similarly has `noatime`.\n\n##### [§](#errors-1)Errors\n\nThis field might not be available on all platforms, and will return an `Err` on platforms where it is not available.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    if let Ok(time) = metadata.accessed() {\n        println!(\"{time:?}\");\n    } else {\n        println!(\"Not supported on this platform\");\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++if+let+Ok(time)+=+metadata.accessed()+%7B%0A++++++++println!(%22%7Btime:?%7D%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Not+supported+on+this+platform%22);%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/fs.rs.html#1490-1492)\n\nReturns the creation time listed in this metadata.\n\nThe returned value corresponds to the `btime` field of `statx` on Linux kernel starting from to 4.11, the `birthtime` field of `stat` on other Unix platforms, and the `ftCreationTime` field on Windows platforms.\n\n##### [§](#errors-2)Errors\n\nThis field might not be available on all platforms, and will return an `Err` on platforms or filesystems where it is not available.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    if let Ok(time) = metadata.created() {\n        println!(\"{time:?}\");\n    } else {\n        println!(\"Not supported on this platform or filesystem\");\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++if+let+Ok(time)+=+metadata.created()+%7B%0A++++++++println!(%22%7Btime:?%7D%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Not+supported+on+this+platform+or+filesystem%22);%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#117)[§](#impl-Clone-for-Metadata)\n\n1.16.0 · [source](about:blank/src/std/fs.rs.html#1496-1513)[§](#impl-Debug-for-Metadata)\n\n1.1.0 · [source](about:blank/src/std/os/unix/fs.rs.html#715-768)[§](#impl-MetadataExt-for-Metadata)\n\nAvailable on **Unix** only.\n\n1.1.0 · [source](about:blank/src/std/os/linux/fs.rs.html#329-404)[§](#impl-MetadataExt-for-Metadata-1)\n\nAvailable on **Linux** only.\n\n[source](about:blank/src/std/os/linux/fs.rs.html#331-340)[§](#method.as_raw_stat)\n\n👎Deprecated since 1.8.0: other methods of this trait are now preferred\n\nGain a reference to the underlying `stat` structure which contains the raw information returned by the OS. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.as_raw_stat)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#341-343)[§](#method.st_dev)\n\nReturns the device ID on which this file resides. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_dev)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#344-346)[§](#method.st_ino)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#347-349)[§](#method.st_mode)\n\nReturns the file type and mode. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_mode)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#350-352)[§](#method.st_nlink)\n\nReturns the number of hard links to file. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_nlink)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#353-355)[§](#method.st_uid)\n\nReturns the user ID of the file owner. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_uid)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#356-358)[§](#method.st_gid)\n\nReturns the group ID of the file owner. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_gid)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#359-361)[§](#method.st_rdev)\n\nReturns the device ID that this file represents. Only relevant for special file. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_rdev)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#362-364)[§](#method.st_size)\n\nReturns the size of the file (if it is a regular file or a symbolic link) in bytes. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_size)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#365-372)[§](#method.st_atime)\n\nReturns the last access time of the file, in seconds since Unix Epoch. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_atime)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#373-375)[§](#method.st_atime_nsec)\n\nReturns the last access time of the file, in nanoseconds since [`st_atime`](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_atime). [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_atime_nsec)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#376-383)[§](#method.st_mtime)\n\nReturns the last modification time of the file, in seconds since Unix Epoch. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_mtime)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#384-386)[§](#method.st_mtime_nsec)\n\nReturns the last modification time of the file, in nanoseconds since [`st_mtime`](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_mtime). [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_mtime_nsec)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#387-394)[§](#method.st_ctime)\n\nReturns the last status change time of the file, in seconds since Unix Epoch. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_ctime)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#395-397)[§](#method.st_ctime_nsec)\n\nReturns the last status change time of the file, in nanoseconds since [`st_ctime`](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_ctime). [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_ctime_nsec)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#398-400)[§](#method.st_blksize)\n\nReturns the “preferred” block size for efficient filesystem I/O. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_blksize)\n\n[source](about:blank/src/std/os/linux/fs.rs.html#401-403)[§](#method.st_blocks)\n\nReturns the number of blocks allocated to the file, 512-byte units. [Read more](about:blank/os/linux/fs/trait.MetadataExt.html#tymethod.st_blocks)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#434-456)[§](#impl-MetadataExt-for-Metadata-2)\n\nAvailable on **WASI** only.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#435-437)[§](#method.dev-1)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns the `st_dev` field of the internal `filestat_t`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#438-440)[§](#method.ino-1)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns the `st_ino` field of the internal `filestat_t`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#441-443)[§](#method.nlink-1)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns the `st_nlink` field of the internal `filestat_t`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#444-446)[§](#method.size-1)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns the `st_size` field of the internal `filestat_t`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#447-449)[§](#method.atim)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns the `st_atim` field of the internal `filestat_t`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#450-452)[§](#method.mtim)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns the `st_mtim` field of the internal `filestat_t`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#453-455)[§](#method.ctim)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns the `st_ctim` field of the internal `filestat_t`\n\n1.1.0 · [source](about:blank/src/std/os/windows/fs.rs.html#477-502)[§](#impl-MetadataExt-for-Metadata-3)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/fs.rs.html#478-480)[§](#method.file_attributes)\n\nReturns the value of the `dwFileAttributes` field of this metadata. [Read more](about:blank/os/windows/fs/trait.MetadataExt.html#tymethod.file_attributes)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#481-483)[§](#method.creation_time)\n\nReturns the value of the `ftCreationTime` field of this metadata. [Read more](about:blank/os/windows/fs/trait.MetadataExt.html#tymethod.creation_time)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#484-486)[§](#method.last_access_time)\n\nReturns the value of the `ftLastAccessTime` field of this metadata. [Read more](about:blank/os/windows/fs/trait.MetadataExt.html#tymethod.last_access_time)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#487-489)[§](#method.last_write_time)\n\nReturns the value of the `ftLastWriteTime` field of this metadata. [Read more](about:blank/os/windows/fs/trait.MetadataExt.html#tymethod.last_write_time)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#490-492)[§](#method.file_size)\n\nReturns the value of the `nFileSize{High,Low}` fields of this metadata. [Read more](about:blank/os/windows/fs/trait.MetadataExt.html#tymethod.file_size)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#493-495)[§](#method.volume_serial_number)\n\n🔬This is a nightly-only experimental API. (`windows_by_handle` [#63010](https://github.com/rust-lang/rust/issues/63010))\n\nReturns the value of the `dwVolumeSerialNumber` field of this metadata. [Read more](about:blank/os/windows/fs/trait.MetadataExt.html#tymethod.volume_serial_number)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#496-498)[§](#method.number_of_links)\n\n🔬This is a nightly-only experimental API. (`windows_by_handle` [#63010](https://github.com/rust-lang/rust/issues/63010))\n\nReturns the value of the `nNumberOfLinks` field of this metadata. [Read more](about:blank/os/windows/fs/trait.MetadataExt.html#tymethod.number_of_links)\n\n[source](about:blank/src/std/os/windows/fs.rs.html#499-501)[§](#method.file_index)\n\n🔬This is a nightly-only experimental API. (`windows_by_handle` [#63010](https://github.com/rust-lang/rust/issues/63010))\n\nReturns the value of the `nFileIndex{Low,High}` fields of this metadata. [Read more](about:blank/os/windows/fs/trait.MetadataExt.html#tymethod.file_index)\n\n[§](#impl-Freeze-for-Metadata)\n\n[§](#impl-RefUnwindSafe-for-Metadata)\n\n[§](#impl-Send-for-Metadata)\n\n[§](#impl-Sync-for-Metadata)\n\n[§](#impl-Unpin-for-Metadata)\n\n[§](#impl-UnwindSafe-for-Metadata)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Metadata information about a file.\"><title>Metadata in std::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Metadata</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Metadata</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.accessed\">accessed</a></li><li><a href=\"#method.created\">created</a></li><li><a href=\"#method.file_type\">file_type</a></li><li><a href=\"#method.is_dir\">is_dir</a></li><li><a href=\"#method.is_file\">is_file</a></li><li><a href=\"#method.is_symlink\">is_symlink</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.modified\">modified</a></li><li><a href=\"#method.permissions\">permissions</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-Metadata\">Clone</a></li><li><a href=\"#impl-Debug-for-Metadata\">Debug</a></li><li><a href=\"#impl-MetadataExt-for-Metadata\">MetadataExt</a></li><li><a href=\"#impl-MetadataExt-for-Metadata-1\">MetadataExt</a></li><li><a href=\"#impl-MetadataExt-for-Metadata-2\">MetadataExt</a></li><li><a href=\"#impl-MetadataExt-for-Metadata-3\">MetadataExt</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Metadata\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Metadata\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Metadata\">Send</a></li><li><a href=\"#impl-Sync-for-Metadata\">Sync</a></li><li><a href=\"#impl-Unpin-for-Metadata\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Metadata\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::fs</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.DirBuilder.html\">DirBuilder</a></li><li><a href=\"struct.DirEntry.html\">DirEntry</a></li><li><a href=\"struct.File.html\">File</a></li><li><a href=\"struct.FileTimes.html\">FileTimes</a></li><li><a href=\"struct.FileType.html\">FileType</a></li><li><a href=\"struct.Metadata.html\">Metadata</a></li><li><a href=\"struct.OpenOptions.html\">OpenOptions</a></li><li><a href=\"struct.Permissions.html\">Permissions</a></li><li><a href=\"struct.ReadDir.html\">ReadDir</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.canonicalize.html\">canonicalize</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.create_dir.html\">create_dir</a></li><li><a href=\"fn.create_dir_all.html\">create_dir_all</a></li><li><a href=\"fn.hard_link.html\">hard_link</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_dir.html\">read_dir</a></li><li><a href=\"fn.read_link.html\">read_link</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.remove_dir.html\">remove_dir</a></li><li><a href=\"fn.remove_dir_all.html\">remove_dir_all</a></li><li><a href=\"fn.remove_file.html\">remove_file</a></li><li><a href=\"fn.rename.html\">rename</a></li><li><a href=\"fn.set_permissions.html\">set_permissions</a></li><li><a href=\"fn.soft_link.html\">soft_link</a></li><li><a href=\"fn.symlink_metadata.html\">symlink_metadata</a></li><li><a href=\"fn.try_exists.html\">try_exists</a></li><li><a href=\"fn.write.html\">write</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"struct\" href=\"#\">Metadata</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#118\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Metadata(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Metadata information about a file.</p>\n<p>This structure is returned from the <a href=\"fn.metadata.html\" title=\"fn std::fs::metadata\"><code>metadata</code></a> or\n<a href=\"fn.symlink_metadata.html\" title=\"fn std::fs::symlink_metadata\"><code>symlink_metadata</code></a> function or method and represents known\nmetadata about a file such as its permissions, size, modification\ntimes, etc.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Metadata\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#1254-1493\">source</a><a href=\"#impl-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.file_type\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1271-1273\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.file_type\" class=\"fn\">file_type</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.FileType.html\" title=\"struct std::fs::FileType\">FileType</a></h4></section></summary><div class=\"docblock\"><p>Returns the file type for this metadata.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>std::fs;\n\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, metadata.file_type());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs;%0A%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++println!(%22%7B:?%7D%22,+metadata.file_type());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1294-1296\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_dir\" class=\"fn\">is_dir</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this metadata is for a directory. The\nresult is mutually exclusive to the result of\n<a href=\"struct.Metadata.html#method.is_file\" title=\"method std::fs::Metadata::is_file\"><code>Metadata::is_file</code></a>, and will be false for symlink metadata\nobtained from <a href=\"fn.symlink_metadata.html\" title=\"fn std::fs::symlink_metadata\"><code>symlink_metadata</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>std::fs;\n\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">assert!</span>(!metadata.is_dir());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs;%0A%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++assert!(!metadata.is_dir());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_file\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1323-1325\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_file\" class=\"fn\">is_file</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this metadata is for a regular file. The\nresult is mutually exclusive to the result of\n<a href=\"struct.Metadata.html#method.is_dir\" title=\"method std::fs::Metadata::is_dir\"><code>Metadata::is_dir</code></a>, and will be false for symlink metadata\nobtained from <a href=\"fn.symlink_metadata.html\" title=\"fn std::fs::symlink_metadata\"><code>symlink_metadata</code></a>.</p>\n<p>When the goal is simply to read from (or write to) the source, the most\nreliable way to test the source can be read (or written to) is to open\nit. Only using <code>is_file</code> can break workflows like <code>diff &lt;( prog_a )</code> on\na Unix-like system for example. See <a href=\"struct.File.html#method.open\" title=\"associated function std::fs::File::open\"><code>File::open</code></a> or\n<a href=\"struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a> for more information.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">assert!</span>(metadata.is_file());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++assert!(metadata.is_file());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_symlink\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1349-1351\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_symlink\" class=\"fn\">is_symlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this metadata is for a symbolic link.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n<span class=\"kw\">use </span>std::path::Path;\n<span class=\"kw\">use </span>std::os::unix::fs::symlink;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>link_path = Path::new(<span class=\"string\">\"link\"</span>);\n    symlink(<span class=\"string\">\"/origin_does_not_exist/\"</span>, link_path)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span>metadata = fs::symlink_metadata(link_path)<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">assert!</span>(metadata.is_symlink());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0Ause+std::path::Path;%0Ause+std::os::unix::fs::symlink;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+link_path+=+Path::new(%22link%22);%0A++++symlink(%22/origin_does_not_exist/%22,+link_path)?;%0A%0A++++let+metadata+=+fs::symlink_metadata(link_path)?;%0A%0A++++assert!(metadata.is_symlink());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1369-1371\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the size of the file, in bytes, this metadata is for.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, metadata.len());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++assert_eq!(0,+metadata.len());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.permissions\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1389-1391\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.permissions\" class=\"fn\">permissions</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Permissions.html\" title=\"struct std::fs::Permissions\">Permissions</a></h4></section></summary><div class=\"docblock\"><p>Returns the permissions of the file this metadata is for.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">assert!</span>(!metadata.permissions().readonly());\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++assert!(!metadata.permissions().readonly());%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.modified\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1421-1423\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.modified\" class=\"fn\">modified</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the last modification time listed in this metadata.</p>\n<p>The returned value corresponds to the <code>mtime</code> field of <code>stat</code> on Unix\nplatforms and the <code>ftLastWriteTime</code> field on Windows platforms.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This field might not be available on all platforms, and will return an\n<code>Err</code> on platforms where it is not available.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(time) = metadata.modified() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{time:?}\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not supported on this platform\"</span>);\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++if+let+Ok(time)+=+metadata.modified()+%7B%0A++++++++println!(%22%7Btime:?%7D%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Not+supported+on+this+platform%22);%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.accessed\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1457-1459\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.accessed\" class=\"fn\">accessed</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the last access time of this metadata.</p>\n<p>The returned value corresponds to the <code>atime</code> field of <code>stat</code> on Unix\nplatforms and the <code>ftLastAccessTime</code> field on Windows platforms.</p>\n<p>Note that not all platforms will keep this field update in a file’s\nmetadata, for example Windows has an option to disable updating this\ntime when files are accessed and Linux similarly has <code>noatime</code>.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This field might not be available on all platforms, and will return an\n<code>Err</code> on platforms where it is not available.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(time) = metadata.accessed() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{time:?}\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not supported on this platform\"</span>);\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++if+let+Ok(time)+=+metadata.accessed()+%7B%0A++++++++println!(%22%7Btime:?%7D%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Not+supported+on+this+platform%22);%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.created\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1490-1492\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.created\" class=\"fn\">created</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the creation time listed in this metadata.</p>\n<p>The returned value corresponds to the <code>btime</code> field of <code>statx</code> on\nLinux kernel starting from to 4.11, the <code>birthtime</code> field of <code>stat</code> on other\nUnix platforms, and the <code>ftCreationTime</code> field on Windows platforms.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>This field might not be available on all platforms, and will return an\n<code>Err</code> on platforms or filesystems where it is not available.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>metadata = fs::metadata(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(time) = metadata.created() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{time:?}\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not supported on this platform or filesystem\"</span>);\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+metadata+=+fs::metadata(%22foo.txt%22)?;%0A%0A++++if+let+Ok(time)+=+metadata.created()+%7B%0A++++++++println!(%22%7Btime:?%7D%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Not+supported+on+this+platform+or+filesystem%22);%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Metadata\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#117\">source</a></span><a href=\"#impl-Clone-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#117\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Metadata\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#1496-1513\">source</a></span><a href=\"#impl-Debug-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#1497-1512\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-MetadataExt-for-Metadata\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/fs.rs.html#715-768\">source</a></span><a href=\"#impl-MetadataExt-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/unix/fs/trait.MetadataExt.html\" title=\"trait std::os::unix::fs::MetadataExt\">MetadataExt</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.dev\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#716-718\">source</a><a href=\"#method.dev\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.dev\" class=\"fn\">dev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the ID of the device containing the file. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.dev\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ino\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#719-721\">source</a><a href=\"#method.ino\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.ino\" class=\"fn\">ino</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the inode number. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.ino\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#722-724\">source</a><a href=\"#method.mode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.mode\" class=\"fn\">mode</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">Returns the rights applied to this file. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.mode\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nlink\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#725-727\">source</a><a href=\"#method.nlink\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.nlink\" class=\"fn\">nlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the number of hard links pointing to this file. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.nlink\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.uid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#728-730\">source</a><a href=\"#method.uid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.uid\" class=\"fn\">uid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">Returns the user ID of the owner of this file. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.uid\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#731-733\">source</a><a href=\"#method.gid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.gid\" class=\"fn\">gid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">Returns the group ID of the owner of this file. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.gid\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rdev\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#734-736\">source</a><a href=\"#method.rdev\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.rdev\" class=\"fn\">rdev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the device ID of this file (if it is a special one). <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.rdev\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#737-739\">source</a><a href=\"#method.size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.size\" class=\"fn\">size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the total size of this file in bytes. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.size\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.atime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#740-742\">source</a><a href=\"#method.atime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.atime\" class=\"fn\">atime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last access time of the file, in seconds since Unix Epoch. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.atime\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.atime_nsec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#743-745\">source</a><a href=\"#method.atime_nsec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.atime_nsec\" class=\"fn\">atime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last access time of the file, in nanoseconds since <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.atime\" title=\"method std::os::unix::fs::MetadataExt::atime\"><code>atime</code></a>. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.atime_nsec\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mtime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#746-748\">source</a><a href=\"#method.mtime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.mtime\" class=\"fn\">mtime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last modification time of the file, in seconds since Unix Epoch. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.mtime\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mtime_nsec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#749-751\">source</a><a href=\"#method.mtime_nsec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.mtime_nsec\" class=\"fn\">mtime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last modification time of the file, in nanoseconds since <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.mtime\" title=\"method std::os::unix::fs::MetadataExt::mtime\"><code>mtime</code></a>. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.mtime_nsec\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ctime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#752-754\">source</a><a href=\"#method.ctime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.ctime\" class=\"fn\">ctime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last status change time of the file, in seconds since Unix Epoch. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.ctime\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ctime_nsec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#755-757\">source</a><a href=\"#method.ctime_nsec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.ctime_nsec\" class=\"fn\">ctime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last status change time of the file, in nanoseconds since <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.ctime\" title=\"method std::os::unix::fs::MetadataExt::ctime\"><code>ctime</code></a>. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.ctime_nsec\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.blksize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#758-760\">source</a><a href=\"#method.blksize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.blksize\" class=\"fn\">blksize</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the block size for filesystem I/O. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.blksize\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.blocks\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#761-763\">source</a><a href=\"#method.blocks\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.blocks\" class=\"fn\">blocks</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the number of blocks allocated to the file, in 512-byte units. <a href=\"../os/unix/fs/trait.MetadataExt.html#tymethod.blocks\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-MetadataExt-for-Metadata-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/os/linux/fs.rs.html#329-404\">source</a></span><a href=\"#impl-MetadataExt-for-Metadata-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/linux/fs/trait.MetadataExt.html\" title=\"trait std::os::linux::fs::MetadataExt\">MetadataExt</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_stat\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#331-340\">source</a><a href=\"#method.as_raw_stat\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.as_raw_stat\" class=\"fn\">as_raw_stat</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../os/linux/raw/struct.stat.html\" title=\"struct std::os::linux::raw::stat\">stat</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.8.0: other methods of this trait are now preferred</span></div></span><div class=\"docblock\">Gain a reference to the underlying <code>stat</code> structure which contains\nthe raw information returned by the OS. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.as_raw_stat\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_dev\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#341-343\">source</a><a href=\"#method.st_dev\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_dev\" class=\"fn\">st_dev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the device ID on which this file resides. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_dev\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_ino\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#344-346\">source</a><a href=\"#method.st_ino\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_ino\" class=\"fn\">st_ino</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the inode number. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_ino\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_mode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#347-349\">source</a><a href=\"#method.st_mode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_mode\" class=\"fn\">st_mode</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">Returns the file type and mode. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_mode\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_nlink\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#350-352\">source</a><a href=\"#method.st_nlink\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_nlink\" class=\"fn\">st_nlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the number of hard links to file. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_nlink\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_uid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#353-355\">source</a><a href=\"#method.st_uid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_uid\" class=\"fn\">st_uid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">Returns the user ID of the file owner. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_uid\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_gid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#356-358\">source</a><a href=\"#method.st_gid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_gid\" class=\"fn\">st_gid</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">Returns the group ID of the file owner. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_gid\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_rdev\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#359-361\">source</a><a href=\"#method.st_rdev\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_rdev\" class=\"fn\">st_rdev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the device ID that this file represents. Only relevant for special file. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_rdev\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#362-364\">source</a><a href=\"#method.st_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_size\" class=\"fn\">st_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the size of the file (if it is a regular file or a symbolic link) in bytes. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_size\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_atime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#365-372\">source</a><a href=\"#method.st_atime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_atime\" class=\"fn\">st_atime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last access time of the file, in seconds since Unix Epoch. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_atime\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_atime_nsec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#373-375\">source</a><a href=\"#method.st_atime_nsec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_atime_nsec\" class=\"fn\">st_atime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last access time of the file, in nanoseconds since <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_atime\"><code>st_atime</code></a>. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_atime_nsec\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_mtime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#376-383\">source</a><a href=\"#method.st_mtime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_mtime\" class=\"fn\">st_mtime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last modification time of the file, in seconds since Unix Epoch. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_mtime\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_mtime_nsec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#384-386\">source</a><a href=\"#method.st_mtime_nsec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_mtime_nsec\" class=\"fn\">st_mtime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last modification time of the file, in nanoseconds since <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_mtime\"><code>st_mtime</code></a>. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_mtime_nsec\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_ctime\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#387-394\">source</a><a href=\"#method.st_ctime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_ctime\" class=\"fn\">st_ctime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last status change time of the file, in seconds since Unix Epoch. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_ctime\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_ctime_nsec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#395-397\">source</a><a href=\"#method.st_ctime_nsec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_ctime_nsec\" class=\"fn\">st_ctime_nsec</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\">Returns the last status change time of the file, in nanoseconds since <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_ctime\"><code>st_ctime</code></a>. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_ctime_nsec\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_blksize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#398-400\">source</a><a href=\"#method.st_blksize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_blksize\" class=\"fn\">st_blksize</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the “preferred” block size for efficient filesystem I/O. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_blksize\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.st_blocks\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/fs.rs.html#401-403\">source</a><a href=\"#method.st_blocks\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_blocks\" class=\"fn\">st_blocks</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the number of blocks allocated to the file, 512-byte units. <a href=\"../os/linux/fs/trait.MetadataExt.html#tymethod.st_blocks\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-MetadataExt-for-Metadata-2\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#434-456\">source</a><a href=\"#impl-MetadataExt-for-Metadata-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/wasi/fs/trait.MetadataExt.html\" title=\"trait std::os::wasi::fs::MetadataExt\">MetadataExt</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>WASI</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.dev-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#435-437\">source</a><a href=\"#method.dev-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.MetadataExt.html#tymethod.dev\" class=\"fn\">dev</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns the <code>st_dev</code> field of the internal <code>filestat_t</code></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ino-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#438-440\">source</a><a href=\"#method.ino-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.MetadataExt.html#tymethod.ino\" class=\"fn\">ino</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns the <code>st_ino</code> field of the internal <code>filestat_t</code></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nlink-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#441-443\">source</a><a href=\"#method.nlink-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.MetadataExt.html#tymethod.nlink\" class=\"fn\">nlink</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns the <code>st_nlink</code> field of the internal <code>filestat_t</code></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#444-446\">source</a><a href=\"#method.size-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.MetadataExt.html#tymethod.size\" class=\"fn\">size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns the <code>st_size</code> field of the internal <code>filestat_t</code></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.atim\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#447-449\">source</a><a href=\"#method.atim\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.MetadataExt.html#tymethod.atim\" class=\"fn\">atim</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns the <code>st_atim</code> field of the internal <code>filestat_t</code></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mtim\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#450-452\">source</a><a href=\"#method.mtim\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.MetadataExt.html#tymethod.mtim\" class=\"fn\">mtim</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns the <code>st_mtim</code> field of the internal <code>filestat_t</code></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ctim\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#453-455\">source</a><a href=\"#method.ctim\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.MetadataExt.html#tymethod.ctim\" class=\"fn\">ctim</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns the <code>st_ctim</code> field of the internal <code>filestat_t</code></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-MetadataExt-for-Metadata-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/fs.rs.html#477-502\">source</a></span><a href=\"#impl-MetadataExt-for-Metadata-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/fs/trait.MetadataExt.html\" title=\"trait std::os::windows::fs::MetadataExt\">MetadataExt</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.file_attributes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#478-480\">source</a><a href=\"#method.file_attributes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.file_attributes\" class=\"fn\">file_attributes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\">Returns the value of the <code>dwFileAttributes</code> field of this metadata. <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.file_attributes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.creation_time\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#481-483\">source</a><a href=\"#method.creation_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.creation_time\" class=\"fn\">creation_time</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the value of the <code>ftCreationTime</code> field of this metadata. <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.creation_time\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last_access_time\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#484-486\">source</a><a href=\"#method.last_access_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.last_access_time\" class=\"fn\">last_access_time</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the value of the <code>ftLastAccessTime</code> field of this metadata. <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.last_access_time\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last_write_time\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#487-489\">source</a><a href=\"#method.last_write_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.last_write_time\" class=\"fn\">last_write_time</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the value of the <code>ftLastWriteTime</code> field of this metadata. <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.last_write_time\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.file_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#490-492\">source</a><a href=\"#method.file_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.file_size\" class=\"fn\">file_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the value of the <code>nFileSize{High,Low}</code> fields of this\nmetadata. <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.file_size\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.volume_serial_number\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#493-495\">source</a><a href=\"#method.volume_serial_number\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.volume_serial_number\" class=\"fn\">volume_serial_number</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_by_handle</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63010\">#63010</a>)</span></div></span><div class=\"docblock\">Returns the value of the <code>dwVolumeSerialNumber</code> field of this\nmetadata. <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.volume_serial_number\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.number_of_links\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#496-498\">source</a><a href=\"#method.number_of_links\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.number_of_links\" class=\"fn\">number_of_links</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_by_handle</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63010\">#63010</a>)</span></div></span><div class=\"docblock\">Returns the value of the <code>nNumberOfLinks</code> field of this\nmetadata. <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.number_of_links\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.file_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#499-501\">source</a><a href=\"#method.file_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.file_index\" class=\"fn\">file_index</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_by_handle</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63010\">#63010</a>)</span></div></span><div class=\"docblock\">Returns the value of the <code>nFileIndex{Low,High}</code> fields of this\nmetadata. <a href=\"../os/windows/fs/trait.MetadataExt.html#tymethod.file_index\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Metadata\" class=\"impl\"><a href=\"#impl-Freeze-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section><section id=\"impl-RefUnwindSafe-for-Metadata\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section><section id=\"impl-Send-for-Metadata\" class=\"impl\"><a href=\"#impl-Send-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section><section id=\"impl-Sync-for-Metadata\" class=\"impl\"><a href=\"#impl-Sync-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section><section id=\"impl-Unpin-for-Metadata\" class=\"impl\"><a href=\"#impl-Unpin-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section><section id=\"impl-UnwindSafe-for-Metadata\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Metadata\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:12.724Z"
}