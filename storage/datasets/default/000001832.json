{
	"title": "Diagnostics - The Rust Reference",
	"url": "https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-deprecated-attribute",
	"markdown": "# Diagnostics - The Rust Reference\n\n## [Diagnostic attributes](#diagnostic-attributes)\n\nThe following [attributes](../attributes.html) are used for controlling or generating diagnostic messages during compilation.\n\n## [Lint check attributes](#lint-check-attributes)\n\nA lint check names a potentially undesirable coding pattern, such as unreachable code or omitted documentation. The lint attributes `allow`, `warn`, `deny`, and `forbid` use the [_MetaListPaths_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify a list of lint names to change the lint level for the entity to which the attribute applies.\n\nFor any lint check `C`:\n\n-   `allow(C)` overrides the check for `C` so that violations will go unreported,\n-   `warn(C)` warns about violations of `C` but continues compilation.\n-   `deny(C)` signals an error after encountering a violation of `C`,\n-   `forbid(C)` is the same as `deny(C)`, but also forbids changing the lint level afterwards,\n\n> Note: The lint checks supported by `rustc` can be found via `rustc -W help`, along with their default settings and are documented in the [rustc book](../../rustc/lints/index.html).\n\n```rust\n#![allow(unused)]\nfn main() {\npub mod m1 {\n    // Missing documentation is ignored here\n    #[allow(missing_docs)]\n    pub fn undocumented_one() -> i32 { 1 }\n\n    // Missing documentation signals a warning here\n    #[warn(missing_docs)]\n    pub fn undocumented_too() -> i32 { 2 }\n\n    // Missing documentation signals an error here\n    #[deny(missing_docs)]\n    pub fn undocumented_end() -> i32 { 3 }\n}\n}\n```\n\nLint attributes can override the level specified from a previous attribute, as long as the level does not attempt to change a forbidden lint. Previous attributes are those from a higher level in the syntax tree, or from a previous attribute on the same entity as listed in left-to-right source order.\n\nThis example shows how one can use `allow` and `warn` to toggle a particular check on and off:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[warn(missing_docs)]\npub mod m2 {\n    #[allow(missing_docs)]\n    pub mod nested {\n        // Missing documentation is ignored here\n        pub fn undocumented_one() -> i32 { 1 }\n\n        // Missing documentation signals a warning here,\n        // despite the allow above.\n        #[warn(missing_docs)]\n        pub fn undocumented_two() -> i32 { 2 }\n    }\n\n    // Missing documentation signals a warning here\n    pub fn undocumented_too() -> i32 { 3 }\n}\n}\n```\n\nThis example shows how one can use `forbid` to disallow uses of `allow` for that lint check:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[forbid(missing_docs)]\npub mod m3 {\n    // Attempting to toggle warning signals an error here\n    #[allow(missing_docs)]\n    /// Returns 2.\n    pub fn undocumented_too() -> i32 { 2 }\n}\n}\n```\n\n> Note: `rustc` allows setting lint levels on the [command-line](about:blank/rustc/lints/levels.html#via-compiler-flag), and also supports [setting caps](about:blank/rustc/lints/levels.html#capping-lints) on the lints that are reported.\n\n### [Lint groups](#lint-groups)\n\nLints may be organized into named groups so that the level of related lints can be adjusted together. Using a named group is equivalent to listing out the lints within that group.\n\n```rust\n#![allow(unused)]\nfn main() {\n// This allows all lints in the \"unused\" group.\n#[allow(unused)]\n// This overrides the \"unused_must_use\" lint from the \"unused\"\n// group to deny.\n#[deny(unused_must_use)]\nfn example() {\n    // This does not generate a warning because the \"unused_variables\"\n    // lint is in the \"unused\" group.\n    let x = 1;\n    // This generates an error because the result is unused and\n    // \"unused_must_use\" is marked as \"deny\".\n    std::fs::remove_file(\"some_file\"); // ERROR: unused `Result` that must be used\n}\n}\n```\n\nThere is a special group named \"warnings\" which includes all lints at the \"warn\" level. The \"warnings\" group ignores attribute order and applies to all lints that would otherwise warn within the entity.\n\n```rust\n#![allow(unused)]\nfn main() {\nunsafe fn an_unsafe_fn() {}\n// The order of these two attributes does not matter.\n#[deny(warnings)]\n// The unsafe_code lint is normally \"allow\" by default.\n#[warn(unsafe_code)]\nfn example_err() {\n    // This is an error because the `unsafe_code` warning has\n    // been lifted to \"deny\".\n    unsafe { an_unsafe_fn() } // ERROR: usage of `unsafe` block\n}\n}\n```\n\n### [Tool lint attributes](#tool-lint-attributes)\n\nTool lints allows using scoped lints, to `allow`, `warn`, `deny` or `forbid` lints of certain tools.\n\nTool lints only get checked when the associated tool is active. If a lint attribute, such as `allow`, references a nonexistent tool lint, the compiler will not warn about the nonexistent lint until you use the tool.\n\nOtherwise, they work just like regular lint attributes:\n\n```rust\n// set the entire `pedantic` clippy lint group to warn\n#![warn(clippy::pedantic)]\n// silence warnings from the `filter_map` clippy lint\n#![allow(clippy::filter_map)]\n\nfn main() {\n    // ...\n}\n\n// silence the `cmp_nan` clippy lint just for this function\n#[allow(clippy::cmp_nan)]\nfn foo() {\n    // ...\n}\n```\n\n> Note: `rustc` currently recognizes the tool lints for \"[clippy](https://github.com/rust-lang/rust-clippy)\" and \"[rustdoc](../../rustdoc/lints.html)\".\n\n## [The `deprecated` attribute](#the-deprecated-attribute)\n\nThe _`deprecated` attribute_ marks an item as deprecated. `rustc` will issue warnings on usage of `#[deprecated]` items. `rustdoc` will show item deprecation, including the `since` version and `note`, if available.\n\nThe `deprecated` attribute has several forms:\n\n-   `deprecated` — Issues a generic message.\n-   `deprecated = \"message\"` — Includes the given string in the deprecation message.\n-   [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax with two optional fields:\n    -   `since` — Specifies a version number when the item was deprecated. `rustc` does not currently interpret the string, but external tools like [Clippy](https://github.com/rust-lang/rust-clippy) may check the validity of the value.\n    -   `note` — Specifies a string that should be included in the deprecation message. This is typically used to provide an explanation about the deprecation and preferred alternatives.\n\nThe `deprecated` attribute may be applied to any [item](../items.html), [trait item](../items/traits.html), [enum variant](../items/enumerations.html), [struct field](../items/structs.html), [external block item](../items/external-blocks.html), or [macro definition](../macros-by-example.html). It cannot be applied to [trait implementation items](about:blank/items/implementations.html#trait-implementations). When applied to an item containing other items, such as a [module](../items/modules.html) or [implementation](../items/implementations.html), all child items inherit the deprecation attribute.\n\nHere is an example:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[deprecated(since = \"5.2.0\", note = \"foo was rarely used. Users should instead use bar\")]\npub fn foo() {}\n\npub fn bar() {}\n}\n```\n\nThe [RFC](https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md) contains motivations and more details.\n\n## [The `must_use` attribute](#the-must_use-attribute)\n\nThe _`must_use` attribute_ is used to issue a diagnostic warning when a value is not \"used\". It can be applied to user-defined composite types ([`struct`s](../items/structs.html), [`enum`s](../items/enumerations.html), and [`union`s](../items/unions.html)), [functions](../items/functions.html), and [traits](../items/traits.html).\n\nThe `must_use` attribute may include a message by using the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax such as `#[must_use = \"example message\"]`. The message will be given alongside the warning.\n\nWhen used on user-defined composite types, if the [expression](../expressions.html) of an [expression statement](about:blank/statements.html#expression-statements) has that type, then the `unused_must_use` lint is violated.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[must_use]\nstruct MustUse {\n    // some fields\n}\n\nimpl MustUse {\n  fn new() -> MustUse { MustUse {} }\n}\n\n// Violates the `unused_must_use` lint.\nMustUse::new();\n}\n```\n\nWhen used on a function, if the [expression](../expressions.html) of an [expression statement](about:blank/statements.html#expression-statements) is a [call expression](../expressions/call-expr.html) to that function, then the `unused_must_use` lint is violated.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[must_use]\nfn five() -> i32 { 5i32 }\n\n// Violates the unused_must_use lint.\nfive();\n}\n```\n\nWhen used on a [trait declaration](../items/traits.html), a [call expression](../expressions/call-expr.html) of an [expression statement](about:blank/statements.html#expression-statements) to a function that returns an [impl trait](../types/impl-trait.html) or a [dyn trait](../types/trait-object.html) of that trait violates the `unused_must_use` lint.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[must_use]\ntrait Critical {}\nimpl Critical for i32 {}\n\nfn get_critical() -> impl Critical {\n    4i32\n}\n\n// Violates the `unused_must_use` lint.\nget_critical();\n}\n```\n\nWhen used on a function in a trait declaration, then the behavior also applies when the call expression is a function from an implementation of the trait.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait {\n    #[must_use]\n    fn use_me(&self) -> i32;\n}\n\nimpl Trait for i32 {\n    fn use_me(&self) -> i32 { 0i32 }\n}\n\n// Violates the `unused_must_use` lint.\n5i32.use_me();\n}\n```\n\nWhen used on a function in a trait implementation, the attribute does nothing.\n\n> Note: Trivial no-op expressions containing the value will not violate the lint. Examples include wrapping the value in a type that does not implement [`Drop`](about:blank/special-types-and-traits.html#drop) and then not using that type and being the final expression of a [block expression](../expressions/block-expr.html) that is not used.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> #[must_use]\n> fn five() -> i32 { 5i32 }\n> \n> // None of these violate the unused_must_use lint.\n> (five(),);\n> Some(five());\n> { five() };\n> if true { five() } else { 0i32 };\n> match true {\n>     _ => five()\n> };\n> }\n> ```\n\n> Note: It is idiomatic to use a [let statement](about:blank/statements.html#let-statements) with a pattern of `_` when a must-used value is purposely discarded.\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> #[must_use]\n> fn five() -> i32 { 5i32 }\n> \n> // Does not violate the unused_must_use lint.\n> let _ = five();\n> }\n> ```\n\nThe `#[diagnostic]` attribute namespace is a home for attributes to influence compile-time error messages. The hints provided by these attributes are not guaranteed to be used. Unknown attributes in this namespace are accepted, though they may emit warnings for unused attributes. Additionally, invalid inputs to known attributes will typically be a warning (see the attribute definitions for details). This is meant to allow adding or discarding attributes and changing inputs in the future to allow changes without the need to keep the non-meaningful attributes or options working.\n\n### [The `diagnostic::on_unimplemented` attribute](#the-diagnosticon_unimplemented-attribute)\n\nThe `#[diagnostic::on_unimplemented]` attribute is a hint to the compiler to supplement the error message that would normally be generated in scenarios where a trait is required but not implemented on a type. The attribute should be placed on a [trait declaration](../items/traits.html), though it is not an error to be located in other positions. The attribute uses the [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify its inputs, though any malformed input to the attribute is not considered as an error to provide both forwards and backwards compatibility. The following keys have the given meaning:\n\n-   `message` — The text for the top level error message.\n-   `label` — The text for the label shown inline in the broken code in the error message.\n-   `note` — Provides additional notes.\n\nThe `note` option can appear several times, which results in several note messages being emitted. If any of the other options appears several times the first occurrence of the relevant option specifies the actually used value. Any other occurrence generates an lint warning. For any other non-existing option a lint-warning is generated.\n\nAll three options accept a string as an argument, interpreted using the same formatting as a [`std::fmt`](../../std/fmt/index.html) string. Format parameters with the given named parameter will be replaced with the following text:\n\n-   `{Self}` — The name of the type implementing the trait.\n-   `{` _GenericParameterName_ `}` — The name of the generic argument's type for the given generic parameter.\n\nAny other format parameter will generate a warning, but will otherwise be included in the string as-is.\n\nInvalid format strings may generate a warning, but are otherwise allowed, but may not display as intended. Format specifiers may generate a warning, but are otherwise ignored.\n\nIn this example:\n\n```rust\n#[diagnostic::on_unimplemented(\n    message = \"My Message for `ImportantTrait<{A}>` implemented for `{Self}`\",\n    label = \"My Label\",\n    note = \"Note 1\",\n    note = \"Note 2\"\n)]\ntrait ImportantTrait<A> {}\n\nfn use_my_trait(_: impl ImportantTrait<i32>) {}\n\nfn main() {\n    use_my_trait(String::new());\n}\n```\n\nthe compiler may generate an error message which looks like this:\n\n```text\nerror[E0277]: My Message for `ImportantTrait<i32>` implemented for `String`\n  --> src/main.rs:14:18\n   |\n14 |     use_my_trait(String::new());\n   |     ------------ ^^^^^^^^^^^^^ My Label\n   |     |\n   |     required by a bound introduced by this call\n   |\n   = help: the trait `ImportantTrait<i32>` is not implemented for `String`\n   = note: Note 1\n   = note: Note 2\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Diagnostics - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar bordered\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/attributes/diagnostics.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"diagnostic-attributes\"><a class=\"header\" href=\"#diagnostic-attributes\">Diagnostic attributes</a></h1>\n<p>The following <a href=\"../attributes.html\">attributes</a> are used for controlling or generating diagnostic\nmessages during compilation.</p>\n<h2 id=\"lint-check-attributes\"><a class=\"header\" href=\"#lint-check-attributes\">Lint check attributes</a></h2>\n<p>A lint check names a potentially undesirable coding pattern, such as\nunreachable code or omitted documentation. The lint attributes <code class=\"hljs\">allow</code>,\n<code class=\"hljs\">warn</code>, <code class=\"hljs\">deny</code>, and <code class=\"hljs\">forbid</code> use the <a href=\"../attributes.html#meta-item-attribute-syntax\"><em>MetaListPaths</em></a> syntax to specify a\nlist of lint names to change the lint level for the entity to which the\nattribute applies.</p>\n<p>For any lint check <code class=\"hljs\">C</code>:</p>\n<ul>\n<li><code class=\"hljs\">allow(C)</code> overrides the check for <code class=\"hljs\">C</code> so that violations will go\nunreported,</li>\n<li><code class=\"hljs\">warn(C)</code> warns about violations of <code class=\"hljs\">C</code> but continues compilation.</li>\n<li><code class=\"hljs\">deny(C)</code> signals an error after encountering a violation of <code class=\"hljs\">C</code>,</li>\n<li><code class=\"hljs\">forbid(C)</code> is the same as <code class=\"hljs\">deny(C)</code>, but also forbids changing the lint\nlevel afterwards,</li>\n</ul>\n<blockquote>\n<p>Note: The lint checks supported by <code class=\"hljs\">rustc</code> can be found via <code class=\"hljs\">rustc -W help</code>,\nalong with their default settings and are documented in the <a href=\"../../rustc/lints/index.html\">rustc book</a>.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> m1 {\n    <span class=\"hljs-comment\">// Missing documentation is ignored here</span>\n    <span class=\"hljs-meta\">#[allow(missing_docs)]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_one</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">1</span> }\n\n    <span class=\"hljs-comment\">// Missing documentation signals a warning here</span>\n    <span class=\"hljs-meta\">#[warn(missing_docs)]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_too</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">2</span> }\n\n    <span class=\"hljs-comment\">// Missing documentation signals an error here</span>\n    <span class=\"hljs-meta\">#[deny(missing_docs)]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_end</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">3</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Lint attributes can override the level specified from a previous attribute, as\nlong as the level does not attempt to change a forbidden lint. Previous\nattributes are those from a higher level in the syntax tree, or from a\nprevious attribute on the same entity as listed in left-to-right source order.</p>\n<p>This example shows how one can use <code class=\"hljs\">allow</code> and <code class=\"hljs\">warn</code> to toggle a particular\ncheck on and off:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[warn(missing_docs)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> m2 {\n    <span class=\"hljs-meta\">#[allow(missing_docs)]</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> nested {\n        <span class=\"hljs-comment\">// Missing documentation is ignored here</span>\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_one</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">1</span> }\n\n        <span class=\"hljs-comment\">// Missing documentation signals a warning here,</span>\n        <span class=\"hljs-comment\">// despite the allow above.</span>\n        <span class=\"hljs-meta\">#[warn(missing_docs)]</span>\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_two</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">2</span> }\n    }\n\n    <span class=\"hljs-comment\">// Missing documentation signals a warning here</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_too</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">3</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This example shows how one can use <code class=\"hljs\">forbid</code> to disallow uses of <code class=\"hljs\">allow</code> for\nthat lint check:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[forbid(missing_docs)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> m3 {\n    <span class=\"hljs-comment\">// Attempting to toggle warning signals an error here</span>\n    <span class=\"hljs-meta\">#[allow(missing_docs)]</span>\n    <span class=\"hljs-comment\">/// Returns 2.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">undocumented_too</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">2</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">rustc</code> allows setting lint levels on the\n<a href=\"../../rustc/lints/levels.html#via-compiler-flag\">command-line</a>, and also supports <a href=\"../../rustc/lints/levels.html#capping-lints\">setting\ncaps</a> on the lints that are reported.</p>\n</blockquote>\n<h3 id=\"lint-groups\"><a class=\"header\" href=\"#lint-groups\">Lint groups</a></h3>\n<p>Lints may be organized into named groups so that the level of related lints\ncan be adjusted together. Using a named group is equivalent to listing out the\nlints within that group.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This allows all lints in the \"unused\" group.</span>\n<span class=\"hljs-meta\">#[allow(unused)]</span>\n<span class=\"hljs-comment\">// This overrides the \"unused_must_use\" lint from the \"unused\"</span>\n<span class=\"hljs-comment\">// group to deny.</span>\n<span class=\"hljs-meta\">#[deny(unused_must_use)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>() {\n    <span class=\"hljs-comment\">// This does not generate a warning because the \"unused_variables\"</span>\n    <span class=\"hljs-comment\">// lint is in the \"unused\" group.</span>\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-comment\">// This generates an error because the result is unused and</span>\n    <span class=\"hljs-comment\">// \"unused_must_use\" is marked as \"deny\".</span>\n    std::fs::remove_file(<span class=\"hljs-string\">\"some_file\"</span>); <span class=\"hljs-comment\">// ERROR: unused `Result` that must be used</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>There is a special group named \"warnings\" which includes all lints at the\n\"warn\" level. The \"warnings\" group ignores attribute order and applies to all\nlints that would otherwise warn within the entity.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">an_unsafe_fn</span></span>() {}\n</span><span class=\"hljs-comment\">// The order of these two attributes does not matter.</span>\n<span class=\"hljs-meta\">#[deny(warnings)]</span>\n<span class=\"hljs-comment\">// The unsafe_code lint is normally \"allow\" by default.</span>\n<span class=\"hljs-meta\">#[warn(unsafe_code)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example_err</span></span>() {\n    <span class=\"hljs-comment\">// This is an error because the `unsafe_code` warning has</span>\n    <span class=\"hljs-comment\">// been lifted to \"deny\".</span>\n    <span class=\"hljs-keyword\">unsafe</span> { an_unsafe_fn() } <span class=\"hljs-comment\">// ERROR: usage of `unsafe` block</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"tool-lint-attributes\"><a class=\"header\" href=\"#tool-lint-attributes\">Tool lint attributes</a></h3>\n<p>Tool lints allows using scoped lints, to <code class=\"hljs\">allow</code>, <code class=\"hljs\">warn</code>, <code class=\"hljs\">deny</code> or <code class=\"hljs\">forbid</code>\nlints of certain tools.</p>\n<p>Tool lints only get checked when the associated tool is active. If a lint\nattribute, such as <code class=\"hljs\">allow</code>, references a nonexistent tool lint, the compiler\nwill not warn about the nonexistent lint until you use the tool.</p>\n<p>Otherwise, they work just like regular lint attributes:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-comment\">// set the entire `pedantic` clippy lint group to warn</span>\n<span class=\"hljs-meta\">#![warn(clippy::pedantic)]</span>\n<span class=\"hljs-comment\">// silence warnings from the `filter_map` clippy lint</span>\n<span class=\"hljs-meta\">#![allow(clippy::filter_map)]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// silence the `cmp_nan` clippy lint just for this function</span>\n<span class=\"hljs-meta\">#[allow(clippy::cmp_nan)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}</code></pre></pre>\n<blockquote>\n<p>Note: <code class=\"hljs\">rustc</code> currently recognizes the tool lints for \"<a href=\"https://github.com/rust-lang/rust-clippy\">clippy</a>\" and \"<a href=\"../../rustdoc/lints.html\">rustdoc</a>\".</p>\n</blockquote>\n<h2 id=\"the-deprecated-attribute\"><a class=\"header\" href=\"#the-deprecated-attribute\">The <code>deprecated</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">deprecated</code> attribute</em> marks an item as deprecated. <code class=\"hljs\">rustc</code> will issue\nwarnings on usage of <code class=\"hljs\">#[deprecated]</code> items. <code class=\"hljs\">rustdoc</code> will show item\ndeprecation, including the <code class=\"hljs\">since</code> version and <code class=\"hljs\">note</code>, if available.</p>\n<p>The <code class=\"hljs\">deprecated</code> attribute has several forms:</p>\n<ul>\n<li><code class=\"hljs\">deprecated</code> —&nbsp;Issues a generic message.</li>\n<li><code class=\"hljs\">deprecated = \"message\"</code> —&nbsp;Includes the given string in the deprecation\nmessage.</li>\n<li><a href=\"../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax with two optional fields:\n<ul>\n<li><code class=\"hljs\">since</code> —&nbsp;Specifies a version number when the item was deprecated. <code class=\"hljs\">rustc</code>\ndoes not currently interpret the string, but external tools like <a href=\"https://github.com/rust-lang/rust-clippy\">Clippy</a>\nmay check the validity of the value.</li>\n<li><code class=\"hljs\">note</code> —&nbsp;Specifies a string that should be included in the deprecation\nmessage. This is typically used to provide an explanation about the\ndeprecation and preferred alternatives.</li>\n</ul>\n</li>\n</ul>\n<p>The <code class=\"hljs\">deprecated</code> attribute may be applied to any <a href=\"../items.html\">item</a>, <a href=\"../items/traits.html\">trait item</a>, <a href=\"../items/enumerations.html\">enum\nvariant</a>, <a href=\"../items/structs.html\">struct field</a>, <a href=\"../items/external-blocks.html\">external block item</a>, or <a href=\"../macros-by-example.html\">macro definition</a>. It\ncannot be applied to <a href=\"../items/implementations.html#trait-implementations\">trait implementation items</a>. When applied to an item\ncontaining other items, such as a <a href=\"../items/modules.html\">module</a> or <a href=\"../items/implementations.html\">implementation</a>, all child\nitems inherit the deprecation attribute.</p>\n<!-- NOTE: It is only rejected for trait impl items\n(AnnotationKind::Prohibited). In all other locations, it is silently ignored.\nTuple struct fields are ignored.\n-->\n<p>Here is an example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[deprecated(since = <span class=\"hljs-meta-string\">\"5.2.0\"</span>, note = <span class=\"hljs-meta-string\">\"foo was rarely used. Users should instead use bar\"</span>)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md\">RFC</a> contains motivations and more details.</p>\n<h2 id=\"the-must_use-attribute\"><a class=\"header\" href=\"#the-must_use-attribute\">The <code>must_use</code> attribute</a></h2>\n<p>The <em><code class=\"hljs\">must_use</code> attribute</em> is used to issue a diagnostic warning when a value\nis not \"used\". It can be applied to user-defined composite types\n(<a href=\"../items/structs.html\"><code class=\"hljs\">struct</code>s</a>, <a href=\"../items/enumerations.html\"><code class=\"hljs\">enum</code>s</a>, and <a href=\"../items/unions.html\"><code class=\"hljs\">union</code>s</a>), <a href=\"../items/functions.html\">functions</a>,\nand <a href=\"../items/traits.html\">traits</a>.</p>\n<p>The <code class=\"hljs\">must_use</code> attribute may include a message by using the\n<a href=\"../attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax such as <code class=\"hljs\">#[must_use = \"example message\"]</code>. The\nmessage will be given alongside the warning.</p>\n<p>When used on user-defined composite types, if the <a href=\"../expressions.html\">expression</a> of an\n<a href=\"../statements.html#expression-statements\">expression statement</a> has that type, then the <code class=\"hljs\">unused_must_use</code> lint is\nviolated.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MustUse</span></span> {\n    <span class=\"hljs-comment\">// some fields</span>\n}\n\n<span class=\"boring\"><span class=\"hljs-keyword\">impl</span> MustUse {\n</span><span class=\"boring\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; MustUse { MustUse {} }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// Violates the `unused_must_use` lint.</span>\nMustUse::new();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used on a function, if the <a href=\"../expressions.html\">expression</a> of an <a href=\"../statements.html#expression-statements\">expression statement</a> is a\n<a href=\"../expressions/call-expr.html\">call expression</a> to that function, then the <code class=\"hljs\">unused_must_use</code> lint is\nviolated.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">five</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">5i32</span> }\n\n<span class=\"hljs-comment\">// Violates the unused_must_use lint.</span>\nfive();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used on a <a href=\"../items/traits.html\">trait declaration</a>, a <a href=\"../expressions/call-expr.html\">call expression</a> of an <a href=\"../statements.html#expression-statements\">expression\nstatement</a> to a function that returns an <a href=\"../types/impl-trait.html\">impl trait</a> or a <a href=\"../types/trait-object.html\">dyn trait</a> of that trait violates\nthe <code class=\"hljs\">unused_must_use</code> lint.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Critical</span></span> {}\n<span class=\"hljs-keyword\">impl</span> Critical <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">get_critical</span></span>() -&gt; <span class=\"hljs-keyword\">impl</span> Critical {\n    <span class=\"hljs-number\">4i32</span>\n}\n\n<span class=\"hljs-comment\">// Violates the `unused_must_use` lint.</span>\nget_critical();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used on a function in a trait declaration, then the behavior also applies\nwhen the call expression is a function from an implementation of the trait.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-meta\">#[must_use]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">use_me</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">i32</span>;\n}\n\n<span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">use_me</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">0i32</span> }\n}\n\n<span class=\"hljs-comment\">// Violates the `unused_must_use` lint.</span>\n<span class=\"hljs-number\">5i32</span>.use_me();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When used on a function in a trait implementation, the attribute does nothing.</p>\n<blockquote>\n<p>Note: Trivial no-op expressions containing the value will not violate the\nlint. Examples include wrapping the value in a type that does not implement\n<a href=\"../special-types-and-traits.html#drop\"><code class=\"hljs\">Drop</code></a> and then not using that type and being the final expression of a\n<a href=\"../expressions/block-expr.html\">block expression</a> that is not used.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">five</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">5i32</span> }\n\n<span class=\"hljs-comment\">// None of these violate the unused_must_use lint.</span>\n(five(),);\n<span class=\"hljs-literal\">Some</span>(five());\n{ five() };\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">true</span> { five() } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-number\">0i32</span> };\n<span class=\"hljs-keyword\">match</span> <span class=\"hljs-literal\">true</span> {\n    _ =&gt; five()\n};\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<blockquote>\n<p>Note: It is idiomatic to use a <a href=\"../statements.html#let-statements\">let statement</a> with a pattern of <code class=\"hljs\">_</code>\nwhen a must-used value is purposely discarded.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[must_use]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">five</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-number\">5i32</span> }\n\n<span class=\"hljs-comment\">// Does not violate the unused_must_use lint.</span>\n<span class=\"hljs-keyword\">let</span> _ = five();\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<h2 id=\"the-diagnostic-tool-attribute-namespace\"><a class=\"header\" href=\"#the-diagnostic-tool-attribute-namespace\">The <code>diagnostic</code> tool attribute namespace</a></h2>\n<p>The <code class=\"hljs\">#[diagnostic]</code> attribute namespace is a home for attributes to influence compile-time error messages.\nThe hints provided by these attributes are not guaranteed to be used.\nUnknown attributes in this namespace are accepted, though they may emit warnings for unused attributes.\nAdditionally, invalid inputs to known attributes will typically be a warning (see the attribute definitions for details).\nThis is meant to allow adding or discarding attributes and changing inputs in the future to allow changes without the need to keep the non-meaningful attributes or options working.</p>\n<h3 id=\"the-diagnosticon_unimplemented-attribute\"><a class=\"header\" href=\"#the-diagnosticon_unimplemented-attribute\">The <code>diagnostic::on_unimplemented</code> attribute</a></h3>\n<p>The <code class=\"hljs\">#[diagnostic::on_unimplemented]</code> attribute is a hint to the compiler to supplement the error message that would normally be generated in scenarios where a trait is required but not implemented on a type.\nThe attribute should be placed on a <a href=\"../items/traits.html\">trait declaration</a>, though it is not an error to be located in other positions.\nThe attribute uses the <a href=\"../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax to specify its inputs, though any malformed input to the attribute is not considered as an error to provide both forwards and backwards compatibility.\nThe following keys have the given meaning:</p>\n<ul>\n<li><code class=\"hljs\">message</code> — The text for the top level error message.</li>\n<li><code class=\"hljs\">label</code> — The text for the label shown inline in the broken code in the error message.</li>\n<li><code class=\"hljs\">note</code> — Provides additional notes.</li>\n</ul>\n<p>The <code class=\"hljs\">note</code> option can appear several times, which results in several note messages being emitted.\nIf any of the other options appears several times the first occurrence of the relevant option specifies the actually used value.\nAny other occurrence generates an lint warning.\nFor any other non-existing option a lint-warning is generated.</p>\n<p>All three options accept a string as an argument, interpreted using the same formatting as a <a href=\"../../std/fmt/index.html\"><code class=\"hljs\">std::fmt</code></a> string.\nFormat parameters with the given named parameter will be replaced with the following text:</p>\n<ul>\n<li><code class=\"hljs\">{Self}</code> — The name of the type implementing the trait.</li>\n<li><code class=\"hljs\">{</code> <em>GenericParameterName</em> <code class=\"hljs\">}</code> — The name of the generic argument's type for the given generic parameter.</li>\n</ul>\n<p>Any other format parameter will generate a warning, but will otherwise be included in the string as-is.</p>\n<p>Invalid format strings may generate a warning, but are otherwise allowed, but may not display as intended.\nFormat specifiers may generate a warning, but are otherwise ignored.</p>\n<p>In this example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust compile_fail E0277 edition2021 hljs\"><span class=\"hljs-meta\">#[diagnostic::on_unimplemented(\n    message = <span class=\"hljs-meta-string\">\"My Message for `ImportantTrait&lt;{A}&gt;` implemented for `{Self}`\"</span>,\n    label = <span class=\"hljs-meta-string\">\"My Label\"</span>,\n    note = <span class=\"hljs-meta-string\">\"Note 1\"</span>,\n    note = <span class=\"hljs-meta-string\">\"Note 2\"</span>\n)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ImportantTrait</span></span>&lt;A&gt; {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">use_my_trait</span></span>(_: <span class=\"hljs-keyword\">impl</span> ImportantTrait&lt;<span class=\"hljs-built_in\">i32</span>&gt;) {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    use_my_trait(<span class=\"hljs-built_in\">String</span>::new());\n}</code></pre></pre>\n<p>the compiler may generate an error message which looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0277]: My Message for `ImportantTrait&lt;i32&gt;` implemented for `String`\n  --&gt; src/main.rs:14:18\n   |\n14 |     use_my_trait(String::new());\n   |     ------------ ^^^^^^^^^^^^^ My Label\n   |     |\n   |     required by a bound introduced by this call\n   |\n   = help: the trait `ImportantTrait&lt;i32&gt;` is not implemented for `String`\n   = note: Note 1\n   = note: Note 2\n</code></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../attributes/derive.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../attributes/codegen.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../attributes/derive.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../attributes/codegen.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:42.386Z"
}