{
	"title": "Documentation tests - The rustdoc book",
	"url": "https://doc.rust-lang.org/rustdoc/write-documentation/documentation-tests.html",
	"markdown": "# Documentation tests - The rustdoc book\n\n`rustdoc` supports executing your documentation examples as tests. This makes sure that examples within your documentation are up to date and working.\n\nThe basic idea is this:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// # Examples\n///\n/// ```\n/// let x = 5;\n/// ```\nfn f() {}\n}\n```\n\nThe triple backticks start and end code blocks. If this were in a file named `foo.rs`, running `rustdoc --test foo.rs` will extract this example, and then run it as a test.\n\nPlease note that by default, if no language is set for the block code, rustdoc assumes it is Rust code. So the following:\n\n```markdown\n```rust\nlet x = 5;\n```\n\n```\n\nis strictly equivalent to:\n\n```markdown\n```\nlet x = 5;\n```\n\n```\n\nThere's some subtlety though! Read on for more details.\n\n## [Passing or failing a doctest](#passing-or-failing-a-doctest)\n\nLike regular unit tests, regular doctests are considered to \"pass\" if they compile and run without panicking. So if you want to demonstrate that some computation gives a certain result, the `assert!` family of macros works the same as other Rust code:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet foo = \"foo\";\nassert_eq!(foo, \"foo\");\n}\n```\n\nThis way, if the computation ever returns something different, the code panics and the doctest fails.\n\n## [Pre-processing examples](#pre-processing-examples)\n\nIn the example above, you'll note something strange: there's no `main` function! Forcing you to write `main` for every example, no matter how small, adds friction and clutters the output. So `rustdoc` processes your examples slightly before running them. Here's the full algorithm `rustdoc` uses to preprocess examples:\n\n1.  Some common `allow` attributes are inserted, including `unused_variables`, `unused_assignments`, `unused_mut`, `unused_attributes`, and `dead_code`. Small examples often trigger these lints.\n2.  Any attributes specified with `#![doc(test(attr(...)))]` are added.\n3.  Any leading `#![foo]` attributes are left intact as crate attributes.\n4.  If the example does not contain `extern crate`, and `#![doc(test(no_crate_inject))]` was not specified, then `extern crate <mycrate>;` is inserted (note the lack of `#[macro_use]`).\n5.  Finally, if the example does not contain `fn main`, the remainder of the text is wrapped in `fn main() { your_code }`.\n\nFor more about that caveat in rule 4, see \"Documenting Macros\" below.\n\n## [Hiding portions of the example](#hiding-portions-of-the-example)\n\nSometimes, you need some setup code, or other things that would distract from your example, but are important to make the tests work. Consider an example block that looks like this:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```\n/// /// Some documentation.\n/// # fn foo() {} // this function will be hidden\n/// println!(\"Hello, World!\");\n/// ```\nfn f() {}\n}\n```\n\nIt will render like this:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// Some documentation.\nfn foo() {}\nprintln!(\"Hello, World!\");\n}\n```\n\nYes, that's right: you can add lines that start with `#` , and they will be hidden from the output, but will be used when compiling your code. You can use this to your advantage. In this case, documentation comments need to apply to some kind of function, so if I want to show you just a documentation comment, I need to add a little function definition below it. At the same time, it's only there to satisfy the compiler, so hiding it makes the example more clear. You can use this technique to explain longer examples in detail, while still preserving the testability of your documentation.\n\nFor example, imagine that we wanted to document this code:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 5;\nlet y = 6;\nprintln!(\"{}\", x + y);\n}\n```\n\nWe might want the documentation to end up looking like this:\n\n> First, we set `x` to five:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> let x = 5;\n> let y = 6;\n> println!(\"{}\", x + y);\n> }\n> ```\n> \n> Next, we set `y` to six:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> let x = 5;\n> let y = 6;\n> println!(\"{}\", x + y);\n> }\n> ```\n> \n> Finally, we print the sum of `x` and `y`:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> let x = 5;\n> let y = 6;\n> println!(\"{}\", x + y);\n> }\n> ```\n\nTo keep each code block testable, we want the whole program in each block, but we don't want the reader to see every line every time. Here's what we put in our source code:\n\n```markdown\nFirst, we set `x` to five:\n\n```\nlet x = 5;\n# let y = 6;\n# println!(\"{}\", x + y);\n```\n\nNext, we set `y` to six:\n\n```\n# let x = 5;\nlet y = 6;\n# println!(\"{}\", x + y);\n```\n\nFinally, we print the sum of `x` and `y`:\n\n```\n# let x = 5;\n# let y = 6;\nprintln!(\"{}\", x + y);\n```\n\n```\n\nBy repeating all parts of the example, you can ensure that your example still compiles, while only showing the parts that are relevant to that part of your explanation.\n\nThe `#`\\-hiding of lines can be prevented by using two consecutive hashes `##`. This only needs to be done with the first `#` which would've otherwise caused hiding. If we have a string literal like the following, which has a line that starts with a `#`:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s = \"foo\n# bar # baz\";\n}\n```\n\nWe can document it by escaping the initial `#`:\n\n```text\n/// let s = \"foo\n/// ## bar # baz\";\n\n```\n\n## [Using `?` in doc tests](#using--in-doc-tests)\n\nWhen writing an example, it is rarely useful to include a complete error handling, as it would add significant amounts of boilerplate code. Instead, you may want the following:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```\n/// use std::io;\n/// let mut input = String::new();\n/// io::stdin().read_line(&mut input)?;\n/// ```\nfn f() {}\n}\n```\n\nThe problem is that `?` returns a `Result<T, E>` and test functions don't return anything, so this will give a mismatched types error.\n\nYou can get around this limitation by manually adding a `main` that returns `Result<T, E>`, because `Result<T, E>` implements the `Termination` trait:\n\n```rust\n/// A doc test using ?\n///\n/// ```\n/// use std::io;\n///\n/// fn main() -> io::Result<()> {\n///     let mut input = String::new();\n///     io::stdin().read_line(&mut input)?;\n///     Ok(())\n/// }\n/// ```\nfn f() {}\n```\n\nTogether with the `#` from the section above, you arrive at a solution that appears to the reader as the initial idea but works with doc tests:\n\n```rust\n/// ```\n/// use std::io;\n/// # fn main() -> io::Result<()> {\n/// let mut input = String::new();\n/// io::stdin().read_line(&mut input)?;\n/// # Ok(())\n/// # }\n/// ```\nfn f() {}\n```\n\nAs of version 1.34.0, one can also omit the `fn main()`, but you will have to disambiguate the error type:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```\n/// use std::io;\n/// let mut input = String::new();\n/// io::stdin().read_line(&mut input)?;\n/// # Ok::<(), io::Error>(())\n/// ```\nfn f() {}\n}\n```\n\nThis is an unfortunate consequence of the `?` operator adding an implicit conversion, so type inference fails because the type is not unique. Please note that you must write the `(())` in one sequence without intermediate whitespace so that `rustdoc` understands you want an implicit `Result`\\-returning function.\n\n## [Showing warnings in doctests](#showing-warnings-in-doctests)\n\nYou can show warnings in doctests by running `rustdoc --test --test-args=--show-output` (or, if you're using cargo, `cargo test --doc -- --show-output`). By default, this will still hide `unused` warnings, since so many examples use private functions; you can add `#![warn(unused)]` to the top of your example if you want to see unused variables or dead code warnings. You can also use [`#![doc(test(attr(warn(unused))))]`](about:blank/the-doc-attribute.html#testattr) in the crate root to enable warnings globally.\n\n## [Documenting macros](#documenting-macros)\n\nHere’s an example of documenting a macro:\n\n```rust\n/// Panic with a given message unless an expression evaluates to true.\n///\n/// # Examples\n///\n/// ```\n/// # #[macro_use] extern crate foo;\n/// # fn main() {\n/// panic_unless!(1 + 1 == 2, “Math is broken.”);\n/// # }\n/// ```\n///\n/// ```should_panic\n/// # #[macro_use] extern crate foo;\n/// # fn main() {\n/// panic_unless!(true == false, “I’m broken.”);\n/// # }\n/// ```\n#[macro_export]\nmacro_rules! panic_unless {\n    ($condition:expr, $($rest:expr),+) => ({ if ! $condition { panic!($($rest),+); } });\n}\nfn main() {}\n```\n\nYou’ll note three things: we need to add our own `extern crate` line, so that we can add the `#[macro_use]` attribute. Second, we’ll need to add our own `main()` as well (for reasons discussed above). Finally, a judicious use of `#` to comment out those two things, so they don’t show up in the output.\n\n## [Attributes](#attributes)\n\nCode blocks can be annotated with attributes that help `rustdoc` do the right thing when testing your code:\n\nThe `ignore` attribute tells Rust to ignore your code. This is almost never what you want as it's the most generic. Instead, consider annotating it with `text` if it's not code or using `#`s to get a working example that only shows the part you care about.\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```ignore\n/// fn foo() {\n/// ```\nfn foo() {}\n}\n```\n\n`should_panic` tells `rustdoc` that the code should compile correctly but panic during execution. If the code doesn't panic, the test will fail.\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```should_panic\n/// assert!(false);\n/// ```\nfn foo() {}\n}\n```\n\nThe `no_run` attribute will compile your code but not run it. This is important for examples such as \"Here's how to retrieve a web page,\" which you would want to ensure compiles, but might be run in a test environment that has no network access. This attribute can also be used to demonstrate code snippets that can cause Undefined Behavior.\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```no_run\n/// loop {\n///     println!(\"Hello, world\");\n/// }\n/// ```\nfn foo() {}\n}\n```\n\n`compile_fail` tells `rustdoc` that the compilation should fail. If it compiles, then the test will fail. However, please note that code failing with the current Rust release may work in a future release, as new features are added.\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```compile_fail\n/// let x = 5;\n/// x += 2; // shouldn't compile!\n/// ```\nfn foo() {}\n}\n```\n\n`edition2015`, `edition2018` and `edition2021` tell `rustdoc` that the code sample should be compiled using the respective edition of Rust.\n\n```rust\n#![allow(unused)]\nfn main() {\n/// Only runs on the 2018 edition.\n///\n/// ```edition2018\n/// let result: Result<i32, ParseIntError> = try {\n///     \"1\".parse::<i32>()?\n///         + \"2\".parse::<i32>()?\n///         + \"3\".parse::<i32>()?\n/// };\n/// ```\nfn foo() {}\n}\n```\n\n### [Custom CSS classes for code blocks](#custom-css-classes-for-code-blocks)\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```custom,{class=language-c}\n/// int main(void) { return 0; }\n/// ```\npub struct Bar;\n}\n```\n\nThe text `int main(void) { return 0; }` is rendered without highlighting in a code block with the class `language-c`. This can be used to highlight other languages through JavaScript libraries for example.\n\nWithout the `custom` attribute, it would be generated as a Rust code example with an additional `language-C` CSS class. Therefore, if you specifically don't want it to be a Rust code example, don't forget to add the `custom` attribute.\n\nTo be noted that you can replace `class=` with `.` to achieve the same result:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```custom,{.language-c}\n/// int main(void) { return 0; }\n/// ```\npub struct Bar;\n}\n```\n\nTo be noted, `rust` and `.rust`/`class=rust` have different effects: `rust` indicates that this is a Rust code block whereas the two others add a \"rust\" CSS class on the code block.\n\nYou can also use double quotes:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// ```\"not rust\" {.\"hello everyone\"}\n/// int main(void) { return 0; }\n/// ```\npub struct Bar;\n}\n```\n\n## [Syntax reference](#syntax-reference)\n\nThe _exact_ syntax for code blocks, including the edge cases, can be found in the [Fenced Code Blocks](https://spec.commonmark.org/0.29/#fenced-code-blocks) section of the CommonMark specification.\n\nRustdoc also accepts _indented_ code blocks as an alternative to fenced code blocks: instead of surrounding your code with three backticks, you can indent each line by four or more spaces.\n\n```markdown\n    let foo = \"foo\";\n    assert_eq!(foo, \"foo\");\n\n```\n\nThese, too, are documented in the CommonMark specification, in the [Indented Code Blocks](https://spec.commonmark.org/0.29/#indented-code-blocks) section.\n\nHowever, it's preferable to use fenced code blocks over indented code blocks. Not only are fenced code blocks considered more idiomatic for Rust code, but there is no way to use attributes such as `ignore` or `should_panic` with indented code blocks.\n\n### [Include items only when collecting doctests](#include-items-only-when-collecting-doctests)\n\nRustdoc's documentation tests can do some things that regular unit tests can't, so it can sometimes be useful to extend your doctests with samples that wouldn't otherwise need to be in documentation. To this end, Rustdoc allows you to have certain items only appear when it's collecting doctests, so you can utilize doctest functionality without forcing the test to appear in docs, or to find an arbitrary private item to include it on.\n\nWhen compiling a crate for use in doctests (with `--test` option), `rustdoc` will set `#[cfg(doctest)]`. Note that they will still link against only the public items of your crate; if you need to test private items, you need to write a unit test.\n\nIn this example, we're adding doctests that we know won't compile, to verify that our struct can only take in valid data:\n\n```rust\n#![allow(unused)]\nfn main() {\n/// We have a struct here. Remember it doesn't accept negative numbers!\npub struct MyStruct(pub usize);\n\n/// ```compile_fail\n/// let x = my_crate::MyStruct(-5);\n/// ```\n#[cfg(doctest)]\npub struct MyStructOnlyTakesUsize;\n}\n```\n\nNote that the struct `MyStructOnlyTakesUsize` here isn't actually part of your public crate API. The use of `#[cfg(doctest)]` makes sure that this struct only exists while `rustdoc` is collecting doctests. This means that its doctest is executed when `--test` is passed to rustdoc, but is hidden from the public documentation.\n\nAnother possible use of `#[cfg(doctest)]` is to test doctests that are included in your README file without including it in your main documentation. For example, you could write this into your `lib.rs` to test your README as part of your doctests:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[doc = include_str!(\"../README.md\")]\n#[cfg(doctest)]\npub struct ReadmeDoctests;\n}\n```\n\nThis will include your README as documentation on the hidden struct `ReadmeDoctests`, which will then be tested alongside the rest of your doctests.\n\n## [Controlling the compilation and run directories](#controlling-the-compilation-and-run-directories)\n\nBy default, `rustdoc --test` will compile and run documentation test examples from the same working directory. The compilation directory is being used for compiler diagnostics, the `file!()` macro and the output of `rustdoc` test runner itself, whereas the run directory has an influence on file-system operations within documentation test examples, such as `std::fs::read_to_string`.\n\nThe `--test-run-directory` flag allows controlling the run directory separately from the compilation directory. This is particularly useful in workspaces, where compiler invocations and thus diagnostics should be relative to the workspace directory, but documentation test examples should run relative to the crate directory.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Documentation tests - The rustdoc book</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded \"><a href=\"../what-is-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What is rustdoc?</a></li><li class=\"chapter-item expanded \"><a href=\"../command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Command-line arguments</a></li><li class=\"chapter-item expanded \"><a href=\"../how-to-read-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> How to read rustdoc output</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../read-documentation/in-doc-settings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> In-doc settings</a></li><li class=\"chapter-item expanded \"><a href=\"../read-documentation/search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Search</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../how-to-write-documentation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> How to write documentation</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../write-documentation/what-to-include.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What to include (and exclude)</a></li><li class=\"chapter-item expanded \"><a href=\"../write-documentation/the-doc-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> The #[doc] attribute</a></li><li class=\"chapter-item expanded \"><a href=\"../write-documentation/re-exports.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Re-exports</a></li><li class=\"chapter-item expanded \"><a href=\"../write-documentation/linking-to-items-by-name.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Linking to items by name</a></li><li class=\"chapter-item expanded \"><a href=\"../write-documentation/documentation-tests.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Documentation tests</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../lints.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Rustdoc-specific lints</a></li><li class=\"chapter-item expanded \"><a href=\"../scraped-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Scraped examples</a></li><li class=\"chapter-item expanded \"><a href=\"../advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Advanced features</a></li><li class=\"chapter-item expanded \"><a href=\"../unstable-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Unstable features</a></li><li class=\"chapter-item expanded \"><a href=\"../deprecated-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Deprecated features</a></li><li class=\"chapter-item expanded \"><a href=\"../references.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> References</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The rustdoc book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/rust/tree/master/src/doc/rustdoc\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"documentation-tests\"><a class=\"header\" href=\"#documentation-tests\">Documentation tests</a></h1>\n<p><code class=\"hljs\">rustdoc</code> supports executing your documentation examples as tests. This makes sure\nthat examples within your documentation are up to date and working.</p>\n<p>The basic idea is this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// # Examples</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">/// let x = 5;</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>The triple backticks start and end code blocks. If this were in a file named <code class=\"hljs\">foo.rs</code>,\nrunning <code class=\"hljs\">rustdoc --test foo.rs</code> will extract this example, and then run it as a test.</p>\n<p>Please note that by default, if no language is set for the block code, rustdoc\nassumes it is Rust code. So the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-markdown hljs\"><span class=\"hljs-code\">```rust\nlet x = 5;\n```</span>\n</code></pre>\n<p>is strictly equivalent to:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-markdown hljs\"><span class=\"hljs-code\">```\nlet x = 5;\n```</span>\n</code></pre>\n<p>There's some subtlety though! Read on for more details.</p>\n<h2 id=\"passing-or-failing-a-doctest\"><a class=\"header\" href=\"#passing-or-failing-a-doctest\">Passing or failing a doctest</a></h2>\n<p>Like regular unit tests, regular doctests are considered to \"pass\"\nif they compile and run without panicking.\nSo if you want to demonstrate that some computation gives a certain result,\nthe <code class=\"hljs\">assert!</code> family of macros works the same as other Rust code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-string\">\"foo\"</span>;\n<span class=\"hljs-built_in\">assert_eq!</span>(foo, <span class=\"hljs-string\">\"foo\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This way, if the computation ever returns something different,\nthe code panics and the doctest fails.</p>\n<h2 id=\"pre-processing-examples\"><a class=\"header\" href=\"#pre-processing-examples\">Pre-processing examples</a></h2>\n<p>In the example above, you'll note something strange: there's no <code class=\"hljs\">main</code>\nfunction! Forcing you to write <code class=\"hljs\">main</code> for every example, no matter how small,\nadds friction and clutters the output. So <code class=\"hljs\">rustdoc</code> processes your examples\nslightly before running them. Here's the full algorithm <code class=\"hljs\">rustdoc</code> uses to\npreprocess examples:</p>\n<ol>\n<li>Some common <code class=\"hljs\">allow</code> attributes are inserted, including\n<code class=\"hljs\">unused_variables</code>, <code class=\"hljs\">unused_assignments</code>, <code class=\"hljs\">unused_mut</code>,\n<code class=\"hljs\">unused_attributes</code>, and <code class=\"hljs\">dead_code</code>. Small examples often trigger\nthese lints.</li>\n<li>Any attributes specified with <code class=\"hljs\">#![doc(test(attr(...)))]</code> are added.</li>\n<li>Any leading <code class=\"hljs\">#![foo]</code> attributes are left intact as crate attributes.</li>\n<li>If the example does not contain <code class=\"hljs\">extern crate</code>, and\n<code class=\"hljs\">#![doc(test(no_crate_inject))]</code> was not specified, then <code class=\"hljs\">extern crate &lt;mycrate&gt;;</code> is inserted (note the lack of <code class=\"hljs\">#[macro_use]</code>).</li>\n<li>Finally, if the example does not contain <code class=\"hljs\">fn main</code>, the remainder of the\ntext is wrapped in <code class=\"hljs\">fn main() { your_code }</code>.</li>\n</ol>\n<p>For more about that caveat in rule 4, see \"Documenting Macros\" below.</p>\n<h2 id=\"hiding-portions-of-the-example\"><a class=\"header\" href=\"#hiding-portions-of-the-example\">Hiding portions of the example</a></h2>\n<p>Sometimes, you need some setup code, or other things that would distract\nfrom your example, but are important to make the tests work. Consider\nan example block that looks like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">/// /// Some documentation.</span>\n<span class=\"hljs-comment\">/// # fn foo() {} // this function will be hidden</span>\n<span class=\"hljs-comment\">/// println!(\"Hello, World!\");</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>It will render like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// Some documentation.</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n</span><span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Yes, that's right: you can add lines that start with <code class=\"hljs\"># </code>, and they will\nbe hidden from the output, but will be used when compiling your code. You\ncan use this to your advantage. In this case, documentation comments need\nto apply to some kind of function, so if I want to show you just a\ndocumentation comment, I need to add a little function definition below\nit. At the same time, it's only there to satisfy the compiler, so hiding\nit makes the example more clear. You can use this technique to explain\nlonger examples in detail, while still preserving the testability of your\ndocumentation.</p>\n<p>For example, imagine that we wanted to document this code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">6</span>;\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x + y);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We might want the documentation to end up looking like this:</p>\n<blockquote>\n<p>First, we set <code class=\"hljs\">x</code> to five:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n<span class=\"boring\"><span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">6</span>;\n</span><span class=\"boring\"><span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x + y);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>Next, we set <code class=\"hljs\">y</code> to six:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n</span><span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">6</span>;\n<span class=\"boring\"><span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x + y);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>Finally, we print the sum of <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">6</span>;\n</span><span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, x + y);\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n<p>To keep each code block testable, we want the whole program in each block, but\nwe don't want the reader to see every line every time.  Here's what we put in\nour source code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-markdown hljs\">First, we set <span class=\"hljs-code\">`x`</span> to five:\n\n<span class=\"hljs-code\">```\nlet x = 5;\n# let y = 6;\n# println!(\"{}\", x + y);\n```</span>\n\nNext, we set <span class=\"hljs-code\">`y`</span> to six:\n\n<span class=\"hljs-code\">```\n# let x = 5;\nlet y = 6;\n# println!(\"{}\", x + y);\n```</span>\n\nFinally, we print the sum of <span class=\"hljs-code\">`x`</span> and <span class=\"hljs-code\">`y`</span>:\n\n<span class=\"hljs-code\">```\n# let x = 5;\n# let y = 6;\nprintln!(\"{}\", x + y);\n```</span>\n</code></pre>\n<p>By repeating all parts of the example, you can ensure that your example still\ncompiles, while only showing the parts that are relevant to that part of your\nexplanation.</p>\n<p>The <code class=\"hljs\">#</code>-hiding of lines can be prevented by using two consecutive hashes\n<code class=\"hljs\">##</code>. This only needs to be done with the first <code class=\"hljs\">#</code> which would've\notherwise caused hiding. If we have a string literal like the following,\nwhich has a line that starts with a <code class=\"hljs\">#</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-string\">\"foo\n# bar # baz\"</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We can document it by escaping the initial <code class=\"hljs\">#</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">/// let s = \"foo\n/// ## bar # baz\";\n</code></pre>\n<h2 id=\"using--in-doc-tests\"><a class=\"header\" href=\"#using--in-doc-tests\">Using <code>?</code> in doc tests</a></h2>\n<p>When writing an example, it is rarely useful to include a complete error\nhandling, as it would add significant amounts of boilerplate code. Instead, you\nmay want the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">/// use std::io;</span>\n<span class=\"hljs-comment\">/// let mut input = String::new();</span>\n<span class=\"hljs-comment\">/// io::stdin().read_line(&amp;mut input)?;</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>The problem is that <code class=\"hljs\">?</code> returns a <code class=\"hljs\">Result&lt;T, E&gt;</code> and test functions don't\nreturn anything, so this will give a mismatched types error.</p>\n<p>You can get around this limitation by manually adding a <code class=\"hljs\">main</code> that returns\n<code class=\"hljs\">Result&lt;T, E&gt;</code>, because <code class=\"hljs\">Result&lt;T, E&gt;</code> implements the <code class=\"hljs\">Termination</code> trait:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"hljs-comment\">/// A doc test using ?</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">/// use std::io;</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// fn main() -&gt; io::Result&lt;()&gt; {</span>\n<span class=\"hljs-comment\">///     let mut input = String::new();</span>\n<span class=\"hljs-comment\">///     io::stdin().read_line(&amp;mut input)?;</span>\n<span class=\"hljs-comment\">///     Ok(())</span>\n<span class=\"hljs-comment\">/// }</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {}</span></code></pre></pre>\n<p>Together with the <code class=\"hljs\"># </code> from the section above, you arrive at a solution that\nappears to the reader as the initial idea but works with doc tests:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">/// use std::io;</span>\n<span class=\"hljs-comment\">/// # fn main() -&gt; io::Result&lt;()&gt; {</span>\n<span class=\"hljs-comment\">/// let mut input = String::new();</span>\n<span class=\"hljs-comment\">/// io::stdin().read_line(&amp;mut input)?;</span>\n<span class=\"hljs-comment\">/// # Ok(())</span>\n<span class=\"hljs-comment\">/// # }</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {}</span></code></pre></pre>\n<p>As of version 1.34.0, one can also omit the <code class=\"hljs\">fn main()</code>, but you will have to\ndisambiguate the error type:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">/// use std::io;</span>\n<span class=\"hljs-comment\">/// let mut input = String::new();</span>\n<span class=\"hljs-comment\">/// io::stdin().read_line(&amp;mut input)?;</span>\n<span class=\"hljs-comment\">/// # Ok::&lt;(), io::Error&gt;(())</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() {}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>This is an unfortunate consequence of the <code class=\"hljs\">?</code> operator adding an implicit\nconversion, so type inference fails because the type is not unique. Please note\nthat you must write the <code class=\"hljs\">(())</code> in one sequence without intermediate whitespace\nso that <code class=\"hljs\">rustdoc</code> understands you want an implicit <code class=\"hljs\">Result</code>-returning function.</p>\n<h2 id=\"showing-warnings-in-doctests\"><a class=\"header\" href=\"#showing-warnings-in-doctests\">Showing warnings in doctests</a></h2>\n<p>You can show warnings in doctests by running <code class=\"hljs\">rustdoc --test --test-args=--show-output</code>\n(or, if you're using cargo, <code class=\"hljs\">cargo test --doc -- --show-output</code>).\nBy default, this will still hide <code class=\"hljs\">unused</code> warnings, since so many examples use private functions;\nyou can add <code class=\"hljs\">#![warn(unused)]</code> to the top of your example if you want to see unused variables or dead code warnings.\nYou can also use <a href=\"the-doc-attribute.html#testattr\"><code class=\"hljs\">#![doc(test(attr(warn(unused))))]</code></a> in the crate root to enable warnings globally.</p>\n<h2 id=\"documenting-macros\"><a class=\"header\" href=\"#documenting-macros\">Documenting macros</a></h2>\n<p>Here’s an example of documenting a macro:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-comment\">/// Panic with a given message unless an expression evaluates to true.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// # Examples</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">/// # #[macro_use] extern crate foo;</span>\n<span class=\"hljs-comment\">/// # fn main() {</span>\n<span class=\"hljs-comment\">/// panic_unless!(1 + 1 == 2, “Math is broken.”);</span>\n<span class=\"hljs-comment\">/// # }</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// ```should_panic</span>\n<span class=\"hljs-comment\">/// # #[macro_use] extern crate foo;</span>\n<span class=\"hljs-comment\">/// # fn main() {</span>\n<span class=\"hljs-comment\">/// panic_unless!(true == false, “I’m broken.”);</span>\n<span class=\"hljs-comment\">/// # }</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-meta\">#[macro_export]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> panic_unless {\n    ($condition:expr, $($rest:expr),+) =&gt; ({ <span class=\"hljs-keyword\">if</span> ! $condition { <span class=\"hljs-built_in\">panic!</span>($($rest),+); } });\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>You’ll note three things: we need to add our own <code class=\"hljs\">extern crate</code> line, so that\nwe can add the <code class=\"hljs\">#[macro_use]</code> attribute. Second, we’ll need to add our own\n<code class=\"hljs\">main()</code> as well (for reasons discussed above). Finally, a judicious use of\n<code class=\"hljs\">#</code> to comment out those two things, so they don’t show up in the output.</p>\n<h2 id=\"attributes\"><a class=\"header\" href=\"#attributes\">Attributes</a></h2>\n<p>Code blocks can be annotated with attributes that help <code class=\"hljs\">rustdoc</code> do the right\nthing when testing your code:</p>\n<p>The <code class=\"hljs\">ignore</code> attribute tells Rust to ignore your code. This is almost never\nwhat you want as it's the most generic. Instead, consider annotating it\nwith <code class=\"hljs\">text</code> if it's not code or using <code class=\"hljs\">#</code>s to get a working example that\nonly shows the part you care about.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```ignore</span>\n<span class=\"hljs-comment\">/// fn foo() {</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><code class=\"hljs\">should_panic</code> tells <code class=\"hljs\">rustdoc</code> that the code should compile correctly but\npanic during execution. If the code doesn't panic, the test will fail.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```should_panic</span>\n<span class=\"hljs-comment\">/// assert!(false);</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">no_run</code> attribute will compile your code but not run it. This is\nimportant for examples such as \"Here's how to retrieve a web page,\"\nwhich you would want to ensure compiles, but might be run in a test\nenvironment that has no network access. This attribute can also be\nused to demonstrate code snippets that can cause Undefined Behavior.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```no_run</span>\n<span class=\"hljs-comment\">/// loop {</span>\n<span class=\"hljs-comment\">///     println!(\"Hello, world\");</span>\n<span class=\"hljs-comment\">/// }</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><code class=\"hljs\">compile_fail</code> tells <code class=\"hljs\">rustdoc</code> that the compilation should fail. If it\ncompiles, then the test will fail. However, please note that code failing\nwith the current Rust release may work in a future release, as new features\nare added.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```compile_fail</span>\n<span class=\"hljs-comment\">/// let x = 5;</span>\n<span class=\"hljs-comment\">/// x += 2; // shouldn't compile!</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><code class=\"hljs\">edition2015</code>, <code class=\"hljs\">edition2018</code> and <code class=\"hljs\">edition2021</code> tell <code class=\"hljs\">rustdoc</code>\nthat the code sample should be compiled using the respective edition of Rust.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// Only runs on the 2018 edition.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// ```edition2018</span>\n<span class=\"hljs-comment\">/// let result: Result&lt;i32, ParseIntError&gt; = try {</span>\n<span class=\"hljs-comment\">///     \"1\".parse::&lt;i32&gt;()?</span>\n<span class=\"hljs-comment\">///         + \"2\".parse::&lt;i32&gt;()?</span>\n<span class=\"hljs-comment\">///         + \"3\".parse::&lt;i32&gt;()?</span>\n<span class=\"hljs-comment\">/// };</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"custom-css-classes-for-code-blocks\"><a class=\"header\" href=\"#custom-css-classes-for-code-blocks\">Custom CSS classes for code blocks</a></h3>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```custom,{class=language-c}</span>\n<span class=\"hljs-comment\">/// int main(void) { return 0; }</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The text <code class=\"hljs\">int main(void) { return 0; }</code> is rendered without highlighting in a code block\nwith the class <code class=\"hljs\">language-c</code>. This can be used to highlight other languages through JavaScript\nlibraries for example.</p>\n<p>Without the <code class=\"hljs\">custom</code> attribute, it would be generated as a Rust code example with an additional\n<code class=\"hljs\">language-C</code> CSS class. Therefore, if you specifically don't want it to be a Rust code example,\ndon't forget to add the <code class=\"hljs\">custom</code> attribute.</p>\n<p>To be noted that you can replace <code class=\"hljs\">class=</code> with <code class=\"hljs\">.</code> to achieve the same result:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```custom,{.language-c}</span>\n<span class=\"hljs-comment\">/// int main(void) { return 0; }</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>To be noted, <code class=\"hljs\">rust</code> and <code class=\"hljs\">.rust</code>/<code class=\"hljs\">class=rust</code> have different effects: <code class=\"hljs\">rust</code> indicates that this is\na Rust code block whereas the two others add a \"rust\" CSS class on the code block.</p>\n<p>You can also use double quotes:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// ```\"not rust\" {.\"hello everyone\"}</span>\n<span class=\"hljs-comment\">/// int main(void) { return 0; }</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Bar</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"syntax-reference\"><a class=\"header\" href=\"#syntax-reference\">Syntax reference</a></h2>\n<p>The <em>exact</em> syntax for code blocks, including the edge cases, can be found\nin the <a href=\"https://spec.commonmark.org/0.29/#fenced-code-blocks\">Fenced Code Blocks</a>\nsection of the CommonMark specification.</p>\n<p>Rustdoc also accepts <em>indented</em> code blocks as an alternative to fenced\ncode blocks: instead of surrounding your code with three backticks, you\ncan indent each line by four or more spaces.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-markdown hljs\"><span class=\"hljs-code\">    let foo = \"foo\";\n    assert_eq!(foo, \"foo\");\n</span></code></pre>\n<p>These, too, are documented in the CommonMark specification, in the\n<a href=\"https://spec.commonmark.org/0.29/#indented-code-blocks\">Indented Code Blocks</a>\nsection.</p>\n<p>However, it's preferable to use fenced code blocks over indented code blocks.\nNot only are fenced code blocks considered more idiomatic for Rust code,\nbut there is no way to use attributes such as <code class=\"hljs\">ignore</code> or <code class=\"hljs\">should_panic</code> with\nindented code blocks.</p>\n<h3 id=\"include-items-only-when-collecting-doctests\"><a class=\"header\" href=\"#include-items-only-when-collecting-doctests\">Include items only when collecting doctests</a></h3>\n<p>Rustdoc's documentation tests can do some things that regular unit tests can't, so it can\nsometimes be useful to extend your doctests with samples that wouldn't otherwise need to be in\ndocumentation. To this end, Rustdoc allows you to have certain items only appear when it's\ncollecting doctests, so you can utilize doctest functionality without forcing the test to appear in\ndocs, or to find an arbitrary private item to include it on.</p>\n<p>When compiling a crate for use in doctests (with <code class=\"hljs\">--test</code> option), <code class=\"hljs\">rustdoc</code> will set <code class=\"hljs\">#[cfg(doctest)]</code>.\nNote that they will still link against only the public items of your crate; if you need to test\nprivate items, you need to write a unit test.</p>\n<p>In this example, we're adding doctests that we know won't compile, to verify that our struct can\nonly take in valid data:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">/// We have a struct here. Remember it doesn't accept negative numbers!</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyStruct</span></span>(<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">usize</span>);\n\n<span class=\"hljs-comment\">/// ```compile_fail</span>\n<span class=\"hljs-comment\">/// let x = my_crate::MyStruct(-5);</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-meta\">#[cfg(doctest)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyStructOnlyTakesUsize</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that the struct <code class=\"hljs\">MyStructOnlyTakesUsize</code> here isn't actually part of your public crate\nAPI. The use of <code class=\"hljs\">#[cfg(doctest)]</code> makes sure that this struct only exists while <code class=\"hljs\">rustdoc</code> is\ncollecting doctests. This means that its doctest is executed when <code class=\"hljs\">--test</code> is passed to rustdoc,\nbut is hidden from the public documentation.</p>\n<p>Another possible use of <code class=\"hljs\">#[cfg(doctest)]</code> is to test doctests that are included in your README file\nwithout including it in your main documentation. For example, you could write this into your\n<code class=\"hljs\">lib.rs</code> to test your README as part of your doctests:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[doc = include_str!(<span class=\"hljs-meta-string\">\"../README.md\"</span>)]</span>\n<span class=\"hljs-meta\">#[cfg(doctest)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ReadmeDoctests</span></span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This will include your README as documentation on the hidden struct <code class=\"hljs\">ReadmeDoctests</code>, which will\nthen be tested alongside the rest of your doctests.</p>\n<h2 id=\"controlling-the-compilation-and-run-directories\"><a class=\"header\" href=\"#controlling-the-compilation-and-run-directories\">Controlling the compilation and run directories</a></h2>\n<p>By default, <code class=\"hljs\">rustdoc --test</code> will compile and run documentation test examples\nfrom the same working directory.\nThe compilation directory is being used for compiler diagnostics, the <code class=\"hljs\">file!()</code> macro and\nthe output of <code class=\"hljs\">rustdoc</code> test runner itself, whereas the run directory has an influence on file-system\noperations within documentation test examples, such as <code class=\"hljs\">std::fs::read_to_string</code>.</p>\n<p>The <code class=\"hljs\">--test-run-directory</code> flag allows controlling the run directory separately from the compilation directory.\nThis is particularly useful in workspaces, where compiler invocations and thus diagnostics should be\nrelative to the workspace directory, but documentation test examples should run relative to the crate directory.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../write-documentation/linking-to-items-by-name.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../lints.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../write-documentation/linking-to-items-by-name.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../lints.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:34.782Z"
}