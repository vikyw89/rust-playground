{
	"title": "channel in std::sync::mpsc - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/mpsc/fn.channel.html",
	"markdown": "# channel in std::sync::mpsc - Rust\n\n## Function [std](../../index.html)::[sync](../index.html)::[mpsc](index.html)::[channel](#)\n\n1.0.0 · [source](about:blank/src/std/sync/mpsc/mod.rs.html#525-528) ·\n\n```\npub fn channel<T>() -> (Sender<T>, Receiver<T>)\n```\n\nExpand description\n\nCreates a new asynchronous channel, returning the sender/receiver halves. All data sent on the [`Sender`](struct.Sender.html \"struct std::sync::mpsc::Sender\") will become available on the [`Receiver`](struct.Receiver.html \"struct std::sync::mpsc::Receiver\") in the same order as it was sent, and no [`send`](about:blank/struct.Sender.html#method.send \"method std::sync::mpsc::Sender::send\") will block the calling thread (this channel has an “infinite buffer”, unlike [`sync_channel`](fn.sync_channel.html \"fn std::sync::mpsc::sync_channel\"), which will block after its buffer limit is reached). [`recv`](about:blank/struct.Receiver.html#method.recv \"method std::sync::mpsc::Receiver::recv\") will block until a message is available while there is at least one [`Sender`](struct.Sender.html \"struct std::sync::mpsc::Sender\") alive (including clones).\n\nThe [`Sender`](struct.Sender.html \"struct std::sync::mpsc::Sender\") can be cloned to [`send`](about:blank/struct.Sender.html#method.send \"method std::sync::mpsc::Sender::send\") to the same channel multiple times, but only one [`Receiver`](struct.Receiver.html \"struct std::sync::mpsc::Receiver\") is supported.\n\nIf the [`Receiver`](struct.Receiver.html \"struct std::sync::mpsc::Receiver\") is disconnected while trying to [`send`](about:blank/struct.Sender.html#method.send \"method std::sync::mpsc::Sender::send\") with the [`Sender`](struct.Sender.html \"struct std::sync::mpsc::Sender\"), the [`send`](about:blank/struct.Sender.html#method.send \"method std::sync::mpsc::Sender::send\") method will return a [`SendError`](struct.SendError.html \"struct std::sync::mpsc::SendError\"). Similarly, if the [`Sender`](struct.Sender.html \"struct std::sync::mpsc::Sender\") is disconnected while trying to [`recv`](about:blank/struct.Receiver.html#method.recv \"method std::sync::mpsc::Receiver::recv\"), the [`recv`](about:blank/struct.Receiver.html#method.recv \"method std::sync::mpsc::Receiver::recv\") method will return a [`RecvError`](struct.RecvError.html \"struct std::sync::mpsc::RecvError\").\n\n## [§](#examples)Examples\n\n```\nuse std::sync::mpsc::channel;\nuse std::thread;\n\nlet (sender, receiver) = channel();\n\n// Spawn off an expensive computation\nthread::spawn(move|| {\n    sender.send(expensive_computation()).unwrap();\n});\n\n// Do some useful work for awhile\n\n// Let's see what that answer was\nprintln!(\"{:?}\", receiver.recv().unwrap());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::mpsc::channel;%0A++++use+std::thread;%0A++++%0A++++let+(sender,+receiver)+=+channel();%0A++++%0A++++//+Spawn+off+an+expensive+computation%0A++++thread::spawn(move%7C%7C+%7B%0A++++++fn+expensive_computation()+%7B%7D%0A++++++++sender.send(expensive_computation()).unwrap();%0A++++%7D);%0A++++%0A++++//+Do+some+useful+work+for+awhile%0A++++%0A++++//+Let%27s+see+what+that+answer+was%0A++++println!(%22%7B:?%7D%22,+receiver.recv().unwrap());%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Creates a new asynchronous channel, returning the sender/receiver halves. All data sent on the `Sender` will become available on the `Receiver` in the same order as it was sent, and no `send` will block the calling thread (this channel has an “infinite buffer”, unlike `sync_channel`, which will block after its buffer limit is reached). `recv` will block until a message is available while there is at least one `Sender` alive (including clones).\"><title>channel in std::sync::mpsc - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::sync::mpsc</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.Receiver.html\">Receiver</a></li><li><a href=\"struct.RecvError.html\">RecvError</a></li><li><a href=\"struct.SendError.html\">SendError</a></li><li><a href=\"struct.Sender.html\">Sender</a></li><li><a href=\"struct.SyncSender.html\">SyncSender</a></li><li><a href=\"struct.TryIter.html\">TryIter</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.RecvTimeoutError.html\">RecvTimeoutError</a></li><li><a href=\"enum.TryRecvError.html\">TryRecvError</a></li><li><a href=\"enum.TrySendError.html\">TrySendError</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.channel.html\">channel</a></li><li><a href=\"fn.sync_channel.html\">sync_channel</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">sync</a>::<wbr><a href=\"index.html\">mpsc</a>::<wbr><a class=\"fn\" href=\"#\">channel</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/sync/mpsc/mod.rs.html#525-528\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn channel&lt;T&gt;() -&gt; (<a class=\"struct\" href=\"struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\">Sender</a>&lt;T&gt;, <a class=\"struct\" href=\"struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\">Receiver</a>&lt;T&gt;)</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Creates a new asynchronous channel, returning the sender/receiver halves.\nAll data sent on the <a href=\"struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a> will become available on the <a href=\"struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\"><code>Receiver</code></a> in\nthe same order as it was sent, and no <a href=\"struct.Sender.html#method.send\" title=\"method std::sync::mpsc::Sender::send\"><code>send</code></a> will block the calling thread\n(this channel has an “infinite buffer”, unlike <a href=\"fn.sync_channel.html\" title=\"fn std::sync::mpsc::sync_channel\"><code>sync_channel</code></a>, which will\nblock after its buffer limit is reached). <a href=\"struct.Receiver.html#method.recv\" title=\"method std::sync::mpsc::Receiver::recv\"><code>recv</code></a> will block until a message\nis available while there is at least one <a href=\"struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a> alive (including clones).</p>\n<p>The <a href=\"struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a> can be cloned to <a href=\"struct.Sender.html#method.send\" title=\"method std::sync::mpsc::Sender::send\"><code>send</code></a> to the same channel multiple times, but\nonly one <a href=\"struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\"><code>Receiver</code></a> is supported.</p>\n<p>If the <a href=\"struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\"><code>Receiver</code></a> is disconnected while trying to <a href=\"struct.Sender.html#method.send\" title=\"method std::sync::mpsc::Sender::send\"><code>send</code></a> with the\n<a href=\"struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a>, the <a href=\"struct.Sender.html#method.send\" title=\"method std::sync::mpsc::Sender::send\"><code>send</code></a> method will return a <a href=\"struct.SendError.html\" title=\"struct std::sync::mpsc::SendError\"><code>SendError</code></a>. Similarly, if the\n<a href=\"struct.Sender.html\" title=\"struct std::sync::mpsc::Sender\"><code>Sender</code></a> is disconnected while trying to <a href=\"struct.Receiver.html#method.recv\" title=\"method std::sync::mpsc::Receiver::recv\"><code>recv</code></a>, the <a href=\"struct.Receiver.html#method.recv\" title=\"method std::sync::mpsc::Receiver::recv\"><code>recv</code></a> method will\nreturn a <a href=\"struct.RecvError.html\" title=\"struct std::sync::mpsc::RecvError\"><code>RecvError</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::mpsc::channel;\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>(sender, receiver) = channel();\n\n<span class=\"comment\">// Spawn off an expensive computation\n</span>thread::spawn(<span class=\"kw\">move</span>|| {\n    sender.send(expensive_computation()).unwrap();\n});\n\n<span class=\"comment\">// Do some useful work for awhile\n\n// Let's see what that answer was\n</span><span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, receiver.recv().unwrap());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::mpsc::channel;%0A++++use+std::thread;%0A++++%0A++++let+(sender,+receiver)+=+channel();%0A++++%0A++++//+Spawn+off+an+expensive+computation%0A++++thread::spawn(move%7C%7C+%7B%0A++++++fn+expensive_computation()+%7B%7D%0A++++++++sender.send(expensive_computation()).unwrap();%0A++++%7D);%0A++++%0A++++//+Do+some+useful+work+for+awhile%0A++++%0A++++//+Let's+see+what+that+answer+was%0A++++println!(%22%7B:?%7D%22,+receiver.recv().unwrap());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:49.776Z"
}